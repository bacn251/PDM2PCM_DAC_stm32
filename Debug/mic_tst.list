
mic_tst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067dc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006964  08006964  00007964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d4  080069d4  00008460  2**0
                  CONTENTS
  4 .ARM          00000008  080069d4  080069d4  000079d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069dc  080069dc  00008460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069dc  080069dc  000079dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e0  080069e0  000079e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000460  20000000  080069e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008460  2**0
                  CONTENTS
 10 .bss          00000474  20000460  20000460  00008460  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008d4  200008d4  00008460  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008460  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cabd  00000000  00000000  00008490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002558  00000000  00000000  00014f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  000174a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000986  00000000  00000000  00018118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000030c1  00000000  00000000  00018a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f70  00000000  00000000  0001bb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c73ca  00000000  00000000  0002cacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c2  00000000  00000000  000f3e99  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000361c  00000000  00000000  000f3f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000f7578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000460 	.word	0x20000460
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800694c 	.word	0x0800694c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000464 	.word	0x20000464
 80001c4:	0800694c 	.word	0x0800694c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <cs43l22_unmute>:
			                                    1, &i2c_data, 1, 100);
	return status_i2c;
}

int cs43l22_unmute()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af04      	add	r7, sp, #16
	uint8_t i2c_data;
	HAL_StatusTypeDef status_i2c = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	71fb      	strb	r3, [r7, #7]
	// unmute headphone A and B, page 52
	i2c_data = 0x00;
 80004c2:	2300      	movs	r3, #0
 80004c4:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADAVOL_REG,
 80004c6:	2364      	movs	r3, #100	@ 0x64
 80004c8:	9302      	str	r3, [sp, #8]
 80004ca:	2301      	movs	r3, #1
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	1dbb      	adds	r3, r7, #6
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2301      	movs	r3, #1
 80004d4:	2222      	movs	r2, #34	@ 0x22
 80004d6:	2194      	movs	r1, #148	@ 0x94
 80004d8:	4813      	ldr	r0, [pc, #76]	@ (8000528 <cs43l22_unmute+0x70>)
 80004da:	f001 ff09 	bl	80022f0 <HAL_I2C_Mem_Write>
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
		                                    1, &i2c_data, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADBVOL_REG,
 80004e2:	2364      	movs	r3, #100	@ 0x64
 80004e4:	9302      	str	r3, [sp, #8]
 80004e6:	2301      	movs	r3, #1
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	1dbb      	adds	r3, r7, #6
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	2223      	movs	r2, #35	@ 0x23
 80004f2:	2194      	movs	r1, #148	@ 0x94
 80004f4:	480c      	ldr	r0, [pc, #48]	@ (8000528 <cs43l22_unmute+0x70>)
 80004f6:	f001 fefb 	bl	80022f0 <HAL_I2C_Mem_Write>
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
			                                    1, &i2c_data, 1, 100);
	// turn on headphone
	i2c_data = 0xaf;
 80004fe:	23af      	movs	r3, #175	@ 0xaf
 8000500:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 8000502:	2364      	movs	r3, #100	@ 0x64
 8000504:	9302      	str	r3, [sp, #8]
 8000506:	2301      	movs	r3, #1
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	1dbb      	adds	r3, r7, #6
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2301      	movs	r3, #1
 8000510:	2204      	movs	r2, #4
 8000512:	2194      	movs	r1, #148	@ 0x94
 8000514:	4804      	ldr	r0, [pc, #16]	@ (8000528 <cs43l22_unmute+0x70>)
 8000516:	f001 feeb 	bl	80022f0 <HAL_I2C_Mem_Write>
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
				                                    1, &i2c_data, 1, 100);

	return status_i2c;
 800051e:	79fb      	ldrb	r3, [r7, #7]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000488 	.word	0x20000488

0800052c <cs43l22_init>:
codec_state get_cs43l22_state()
{
	return cs43l22_state;
}
int cs43l22_init()
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status_i2c = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_data;
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2110      	movs	r1, #16
 800053a:	4853      	ldr	r0, [pc, #332]	@ (8000688 <cs43l22_init+0x15c>)
 800053c:	f001 fd7a 	bl	8002034 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000540:	2064      	movs	r0, #100	@ 0x64
 8000542:	f000 ff19 	bl	8001378 <HAL_Delay>
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2110      	movs	r1, #16
 800054a:	484f      	ldr	r0, [pc, #316]	@ (8000688 <cs43l22_init+0x15c>)
 800054c:	f001 fd72 	bl	8002034 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000550:	2064      	movs	r0, #100	@ 0x64
 8000552:	f000 ff11 	bl	8001378 <HAL_Delay>
	// power off the codec, page 38
	i2c_data = 0x01;
 8000556:	2301      	movs	r3, #1
 8000558:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 800055a:	2364      	movs	r3, #100	@ 0x64
 800055c:	9302      	str	r3, [sp, #8]
 800055e:	2301      	movs	r3, #1
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	1dbb      	adds	r3, r7, #6
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2301      	movs	r3, #1
 8000568:	2202      	movs	r2, #2
 800056a:	2194      	movs	r1, #148	@ 0x94
 800056c:	4847      	ldr	r0, [pc, #284]	@ (800068c <cs43l22_init+0x160>)
 800056e:	f001 febf 	bl	80022f0 <HAL_I2C_Mem_Write>
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	                                    1, &i2c_data, 1, 100);

	// output device is headphone 0xaf, page 38
	i2c_data = 0b10101111;
 8000576:	23af      	movs	r3, #175	@ 0xaf
 8000578:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 800057a:	2364      	movs	r3, #100	@ 0x64
 800057c:	9302      	str	r3, [sp, #8]
 800057e:	2301      	movs	r3, #1
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	1dbb      	adds	r3, r7, #6
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2301      	movs	r3, #1
 8000588:	2204      	movs	r2, #4
 800058a:	2194      	movs	r1, #148	@ 0x94
 800058c:	483f      	ldr	r0, [pc, #252]	@ (800068c <cs43l22_init+0x160>)
 800058e:	f001 feaf 	bl	80022f0 <HAL_I2C_Mem_Write>
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <cs43l22_init+0x74>
	{
		return status_i2c;
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	e06f      	b.n	8000680 <cs43l22_init+0x154>
	}

	// clock auto-detect and divide mclk by 2
	i2c_data = 0b10000001;
 80005a0:	2381      	movs	r3, #129	@ 0x81
 80005a2:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_CLKCON_REG,
 80005a4:	2364      	movs	r3, #100	@ 0x64
 80005a6:	9302      	str	r3, [sp, #8]
 80005a8:	2301      	movs	r3, #1
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	1dbb      	adds	r3, r7, #6
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2301      	movs	r3, #1
 80005b2:	2205      	movs	r2, #5
 80005b4:	2194      	movs	r1, #148	@ 0x94
 80005b6:	4835      	ldr	r0, [pc, #212]	@ (800068c <cs43l22_init+0x160>)
 80005b8:	f001 fe9a 	bl	80022f0 <HAL_I2C_Mem_Write>
 80005bc:	4603      	mov	r3, r0
 80005be:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <cs43l22_init+0x9e>
	{
		return status_i2c;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	e05a      	b.n	8000680 <cs43l22_init+0x154>
	}

	cs43l22_set_volume(200);
 80005ca:	20c8      	movs	r0, #200	@ 0xc8
 80005cc:	f000 f8a2 	bl	8000714 <cs43l22_set_volume>

	// i2s up to 24-bit interface, 16-bit data length, page 41
	i2c_data = 0b00000111;
 80005d0:	2307      	movs	r3, #7
 80005d2:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_INTERCON1_REG,
 80005d4:	2364      	movs	r3, #100	@ 0x64
 80005d6:	9302      	str	r3, [sp, #8]
 80005d8:	2301      	movs	r3, #1
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	1dbb      	adds	r3, r7, #6
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2301      	movs	r3, #1
 80005e2:	2206      	movs	r2, #6
 80005e4:	2194      	movs	r1, #148	@ 0x94
 80005e6:	4829      	ldr	r0, [pc, #164]	@ (800068c <cs43l22_init+0x160>)
 80005e8:	f001 fe82 	bl	80022f0 <HAL_I2C_Mem_Write>
 80005ec:	4603      	mov	r3, r0
 80005ee:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <cs43l22_init+0xce>
	{
		return status_i2c;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	e042      	b.n	8000680 <cs43l22_init+0x154>
	}

	// enable digital soft ramp and de-emphasis filter
	i2c_data = 0b00000110;
 80005fa:	2306      	movs	r3, #6
 80005fc:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MISCON_REG,
 80005fe:	2364      	movs	r3, #100	@ 0x64
 8000600:	9302      	str	r3, [sp, #8]
 8000602:	2301      	movs	r3, #1
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	1dbb      	adds	r3, r7, #6
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2301      	movs	r3, #1
 800060c:	220e      	movs	r2, #14
 800060e:	2194      	movs	r1, #148	@ 0x94
 8000610:	481e      	ldr	r0, [pc, #120]	@ (800068c <cs43l22_init+0x160>)
 8000612:	f001 fe6d 	bl	80022f0 <HAL_I2C_Mem_Write>
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
											1, &i2c_data, 1, 100);
	if (status_i2c)
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <cs43l22_init+0xf8>
	{
		return status_i2c;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	e02d      	b.n	8000680 <cs43l22_init+0x154>
	}

	//  PCM VOlume adjust, page 47
	i2c_data = 0x00;
 8000624:	2300      	movs	r3, #0
 8000626:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMAVOLCON_REG,
 8000628:	2364      	movs	r3, #100	@ 0x64
 800062a:	9302      	str	r3, [sp, #8]
 800062c:	2301      	movs	r3, #1
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	1dbb      	adds	r3, r7, #6
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	221a      	movs	r2, #26
 8000638:	2194      	movs	r1, #148	@ 0x94
 800063a:	4814      	ldr	r0, [pc, #80]	@ (800068c <cs43l22_init+0x160>)
 800063c:	f001 fe58 	bl	80022f0 <HAL_I2C_Mem_Write>
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <cs43l22_init+0x122>
	{
		return status_i2c;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	e018      	b.n	8000680 <cs43l22_init+0x154>
	}

	i2c_data = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMBVOLCON_REG,
 8000652:	2364      	movs	r3, #100	@ 0x64
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	2301      	movs	r3, #1
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	1dbb      	adds	r3, r7, #6
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	221b      	movs	r2, #27
 8000662:	2194      	movs	r1, #148	@ 0x94
 8000664:	4809      	ldr	r0, [pc, #36]	@ (800068c <cs43l22_init+0x160>)
 8000666:	f001 fe43 	bl	80022f0 <HAL_I2C_Mem_Write>
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <cs43l22_init+0x14c>
	{
		return status_i2c;
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	e003      	b.n	8000680 <cs43l22_init+0x154>
	}

	cs43l22_state = READY;
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <cs43l22_init+0x164>)
 800067a:	2205      	movs	r2, #5
 800067c:	701a      	strb	r2, [r3, #0]
	return 0;
 800067e:	2300      	movs	r3, #0

}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020c00 	.word	0x40020c00
 800068c:	20000488 	.word	0x20000488
 8000690:	20000400 	.word	0x20000400

08000694 <cs43l22_play>:

int cs43l22_play(int16_t *pbuffer, uint32_t size)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af04      	add	r7, sp, #16
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status_i2c = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]
	uint8_t i2c_data;
	if (cs43l22_state != PLAY)
 80006a2:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <cs43l22_play+0x74>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d028      	beq.n	80006fc <cs43l22_play+0x68>
	{
		status_i2c = cs43l22_unmute();
 80006aa:	f7ff ff05 	bl	80004b8 <cs43l22_unmute>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
		if (status_i2c)
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <cs43l22_play+0x28>
		{
			return status_i2c;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	e020      	b.n	80006fe <cs43l22_play+0x6a>
		}
		// powered up, page 38
		i2c_data = 0b10011110;
 80006bc:	239e      	movs	r3, #158	@ 0x9e
 80006be:	73bb      	strb	r3, [r7, #14]
		status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	2301      	movs	r3, #1
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	f107 030e 	add.w	r3, r7, #14
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	2202      	movs	r2, #2
 80006d2:	2194      	movs	r1, #148	@ 0x94
 80006d4:	480d      	ldr	r0, [pc, #52]	@ (800070c <cs43l22_play+0x78>)
 80006d6:	f001 fe0b 	bl	80022f0 <HAL_I2C_Mem_Write>
 80006da:	4603      	mov	r3, r0
 80006dc:	73fb      	strb	r3, [r7, #15]
												1, &i2c_data, 1, 100);
		if (status_i2c)
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <cs43l22_play+0x54>
		{
			return status_i2c;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	e00a      	b.n	80006fe <cs43l22_play+0x6a>
		}
		cs43l22_state = PLAY;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <cs43l22_play+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
		HAL_I2S_Transmit_DMA(&CS43L22_I2S, (uint16_t * )pbuffer, size);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	4806      	ldr	r0, [pc, #24]	@ (8000710 <cs43l22_play+0x7c>)
 80006f8:	f002 fa52 	bl	8002ba0 <HAL_I2S_Transmit_DMA>
	}
	return 0;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000400 	.word	0x20000400
 800070c:	20000488 	.word	0x20000488
 8000710:	20000524 	.word	0x20000524

08000714 <cs43l22_set_volume>:
	HAL_I2C_Mem_Read(&CS43L22_I2C, CS43L22_I2C_ADDRESS, reg,
			1, reg_value, 1, 100);
}

int cs43l22_set_volume(uint8_t volume)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af04      	add	r7, sp, #16
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status_i2c = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
	// page 52
	if (volume > 0xe6)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2be6      	cmp	r3, #230	@ 0xe6
 8000726:	d904      	bls.n	8000732 <cs43l22_set_volume+0x1e>
	{
		volume -= 0xe7;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	3319      	adds	r3, #25
 800072c:	b2db      	uxtb	r3, r3
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	e003      	b.n	800073a <cs43l22_set_volume+0x26>
	}
	else
	{
		volume += 0x19;
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	3319      	adds	r3, #25
 8000736:	b2db      	uxtb	r3, r3
 8000738:	71fb      	strb	r3, [r7, #7]
	}
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASAVOL_REG,
 800073a:	2364      	movs	r3, #100	@ 0x64
 800073c:	9302      	str	r3, [sp, #8]
 800073e:	2301      	movs	r3, #1
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	2220      	movs	r2, #32
 800074a:	2194      	movs	r1, #148	@ 0x94
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <cs43l22_set_volume+0x68>)
 800074e:	f001 fdcf 	bl	80022f0 <HAL_I2C_Mem_Write>
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]
											1, &volume, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASBVOL_REG,
 8000756:	2364      	movs	r3, #100	@ 0x64
 8000758:	9302      	str	r3, [sp, #8]
 800075a:	2301      	movs	r3, #1
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	2221      	movs	r2, #33	@ 0x21
 8000766:	2194      	movs	r1, #148	@ 0x94
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <cs43l22_set_volume+0x68>)
 800076a:	f001 fdc1 	bl	80022f0 <HAL_I2C_Mem_Write>
 800076e:	4603      	mov	r3, r0
 8000770:	73fb      	strb	r3, [r7, #15]
												1, &volume, 1, 100);
	return status_i2c;
 8000772:	7bfb      	ldrb	r3, [r7, #15]

}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000488 	.word	0x20000488

08000780 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if(hi2s == &CS43L22_I2S)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a04      	ldr	r2, [pc, #16]	@ (800079c <HAL_I2S_TxCpltCallback+0x1c>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d101      	bne.n	8000794 <HAL_I2S_TxCpltCallback+0x14>
  {
	AUDIO_I2S_TxCpltCallback();
 8000790:	f000 f816 	bl	80007c0 <AUDIO_I2S_TxCpltCallback>
  }
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000524 	.word	0x20000524

080007a0 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if(hi2s == &CS43L22_I2S)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a04      	ldr	r2, [pc, #16]	@ (80007bc <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d101      	bne.n	80007b4 <HAL_I2S_TxHalfCpltCallback+0x14>
  {

    AUDIO_I2S_TxHalfCpltCallback();
 80007b0:	f000 f80d 	bl	80007ce <AUDIO_I2S_TxHalfCpltCallback>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000524 	.word	0x20000524

080007c0 <AUDIO_I2S_TxCpltCallback>:
__weak void AUDIO_I2S_TxCpltCallback(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <AUDIO_I2S_TxHalfCpltCallback>:
__weak void AUDIO_I2S_TxHalfCpltCallback(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fd58 	bl	8001294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f820 	bl	8000828 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007e8:	f000 f888 	bl	80008fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f000 f9a6 	bl	8000b3c <MX_GPIO_Init>
  MX_DMA_Init();
 80007f0:	f000 f97c 	bl	8000aec <MX_DMA_Init>
  MX_I2C1_Init();
 80007f4:	f000 f8ba 	bl	800096c <MX_I2C1_Init>
  MX_I2S3_Init();
 80007f8:	f000 f914 	bl	8000a24 <MX_I2S3_Init>
  MX_SPI1_Init();
 80007fc:	f000 f940 	bl	8000a80 <MX_SPI1_Init>
  MX_CRC_Init();
 8000800:	f000 f898 	bl	8000934 <MX_CRC_Init>
  MX_I2S2_Init();
 8000804:	f000 f8e0 	bl	80009c8 <MX_I2S2_Init>
  MX_PDM2PCM_Init();
 8000808:	f003 fd4c 	bl	80042a4 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */

  cs43l22_init();
 800080c:	f7ff fe8e 	bl	800052c <cs43l22_init>
  HAL_I2S_Receive_DMA(&hi2s2, &buffer_audio[0], 2 * BUFFER_LENGTH);
 8000810:	2260      	movs	r2, #96	@ 0x60
 8000812:	4903      	ldr	r1, [pc, #12]	@ (8000820 <main+0x44>)
 8000814:	4803      	ldr	r0, [pc, #12]	@ (8000824 <main+0x48>)
 8000816:	f002 fa6b 	bl	8002cf0 <HAL_I2S_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081a:	bf00      	nop
 800081c:	e7fd      	b.n	800081a <main+0x3e>
 800081e:	bf00      	nop
 8000820:	20000684 	.word	0x20000684
 8000824:	200004dc 	.word	0x200004dc

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	@ 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	2230      	movs	r2, #48	@ 0x30
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f005 fc68 	bl	800610c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b28      	ldr	r3, [pc, #160]	@ (80008f4 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	4a27      	ldr	r2, [pc, #156]	@ (80008f4 <SystemClock_Config+0xcc>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	@ 0x40
 800085c:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <SystemClock_Config+0xcc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4b22      	ldr	r3, [pc, #136]	@ (80008f8 <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a21      	ldr	r2, [pc, #132]	@ (80008f8 <SystemClock_Config+0xd0>)
 8000872:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <SystemClock_Config+0xd0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000888:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000898:	2308      	movs	r3, #8
 800089a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800089c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a6:	2307      	movs	r3, #7
 80008a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 feaa 	bl	8003608 <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ba:	f000 fa51 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	230f      	movs	r3, #15
 80008c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c2:	2302      	movs	r3, #2
 80008c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2105      	movs	r1, #5
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 f90b 	bl	8003af8 <HAL_RCC_ClockConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008e8:	f000 fa3a 	bl	8000d60 <Error_Handler>
  }
}
 80008ec:	bf00      	nop
 80008ee:	3750      	adds	r7, #80	@ 0x50
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800090e:	2301      	movs	r3, #1
 8000910:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000912:	23c0      	movs	r3, #192	@ 0xc0
 8000914:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	4618      	mov	r0, r3
 800091e:	f003 faf7 	bl	8003f10 <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000928:	f000 fa1a 	bl	8000d60 <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <MX_CRC_Init+0x30>)
 800093a:	4a0b      	ldr	r2, [pc, #44]	@ (8000968 <MX_CRC_Init+0x34>)
 800093c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800093e:	4809      	ldr	r0, [pc, #36]	@ (8000964 <MX_CRC_Init+0x30>)
 8000940:	f000 fe4f 	bl	80015e2 <HAL_CRC_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800094a:	f000 fa09 	bl	8000d60 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <MX_CRC_Init+0x30>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <MX_CRC_Init+0x30>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f042 0201 	orr.w	r2, r2, #1
 800095c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000480 	.word	0x20000480
 8000968:	40023000 	.word	0x40023000

0800096c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_I2C1_Init+0x50>)
 8000972:	4a13      	ldr	r2, [pc, #76]	@ (80009c0 <MX_I2C1_Init+0x54>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_I2C1_Init+0x50>)
 8000978:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <MX_I2C1_Init+0x58>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_I2C1_Init+0x50>)
 800098a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800098e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <MX_I2C1_Init+0x50>)
 80009aa:	f001 fb5d 	bl	8002068 <HAL_I2C_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 f9d4 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000488 	.word	0x20000488
 80009c0:	40005400 	.word	0x40005400
 80009c4:	000186a0 	.word	0x000186a0

080009c8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <MX_I2S2_Init+0x54>)
 80009ce:	4a14      	ldr	r2, [pc, #80]	@ (8000a20 <MX_I2S2_Init+0x58>)
 80009d0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_I2S2_Init+0x54>)
 80009d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_I2S2_Init+0x54>)
 80009dc:	2210      	movs	r2, #16
 80009de:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_I2S2_Init+0x54>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <MX_I2S2_Init+0x54>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_I2S2_Init+0x54>)
 80009ee:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80009f2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_I2S2_Init+0x54>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <MX_I2S2_Init+0x54>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_I2S2_Init+0x54>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_I2S2_Init+0x54>)
 8000a08:	f001 ff8a 	bl	8002920 <HAL_I2S_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000a12:	f000 f9a5 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200004dc 	.word	0x200004dc
 8000a20:	40003800 	.word	0x40003800

08000a24 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <MX_I2S3_Init+0x54>)
 8000a2a:	4a14      	ldr	r2, [pc, #80]	@ (8000a7c <MX_I2S3_Init+0x58>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_I2S3_Init+0x54>)
 8000a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a34:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <MX_I2S3_Init+0x54>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_I2S3_Init+0x54>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <MX_I2S3_Init+0x54>)
 8000a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a48:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_I2S3_Init+0x54>)
 8000a4c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a50:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_I2S3_Init+0x54>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <MX_I2S3_Init+0x54>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_I2S3_Init+0x54>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_I2S3_Init+0x54>)
 8000a66:	f001 ff5b 	bl	8002920 <HAL_I2S_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000a70:	f000 f976 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000524 	.word	0x20000524
 8000a7c:	40003c00 	.word	0x40003c00

08000a80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a84:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000a86:	4a18      	ldr	r2, [pc, #96]	@ (8000ae8 <MX_SPI1_Init+0x68>)
 8000a88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000a8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ab0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000acc:	220a      	movs	r2, #10
 8000ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <MX_SPI1_Init+0x64>)
 8000ad2:	f003 fb5d 	bl	8004190 <HAL_SPI_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000adc:	f000 f940 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000062c 	.word	0x2000062c
 8000ae8:	40013000 	.word	0x40013000

08000aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <MX_DMA_Init+0x4c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a0f      	ldr	r2, [pc, #60]	@ (8000b38 <MX_DMA_Init+0x4c>)
 8000afc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <MX_DMA_Init+0x4c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	200e      	movs	r0, #14
 8000b14:	f000 fd2f 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b18:	200e      	movs	r0, #14
 8000b1a:	f000 fd48 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2010      	movs	r0, #16
 8000b24:	f000 fd27 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f000 fd40 	bl	80015ae <HAL_NVIC_EnableIRQ>

}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	@ 0x30
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	4b70      	ldr	r3, [pc, #448]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a6f      	ldr	r2, [pc, #444]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000b5c:	f043 0310 	orr.w	r3, r3, #16
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b6d      	ldr	r3, [pc, #436]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	4b69      	ldr	r3, [pc, #420]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a68      	ldr	r2, [pc, #416]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b66      	ldr	r3, [pc, #408]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b62      	ldr	r3, [pc, #392]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a61      	ldr	r2, [pc, #388]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b5b      	ldr	r3, [pc, #364]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a5a      	ldr	r2, [pc, #360]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b58      	ldr	r3, [pc, #352]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b54      	ldr	r3, [pc, #336]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a53      	ldr	r2, [pc, #332]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b51      	ldr	r3, [pc, #324]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b4d      	ldr	r3, [pc, #308]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a4c      	ldr	r2, [pc, #304]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b4a      	ldr	r3, [pc, #296]	@ (8000d18 <MX_GPIO_Init+0x1dc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	4847      	ldr	r0, [pc, #284]	@ (8000d1c <MX_GPIO_Init+0x1e0>)
 8000c00:	f001 fa18 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2101      	movs	r1, #1
 8000c08:	4845      	ldr	r0, [pc, #276]	@ (8000d20 <MX_GPIO_Init+0x1e4>)
 8000c0a:	f001 fa13 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000c14:	4843      	ldr	r0, [pc, #268]	@ (8000d24 <MX_GPIO_Init+0x1e8>)
 8000c16:	f001 fa0d 	bl	8002034 <HAL_GPIO_WritePin>
                          |CS43L22_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	483a      	ldr	r0, [pc, #232]	@ (8000d1c <MX_GPIO_Init+0x1e0>)
 8000c32:	f001 f863 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4834      	ldr	r0, [pc, #208]	@ (8000d20 <MX_GPIO_Init+0x1e4>)
 8000c4e:	f001 f855 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c56:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4830      	ldr	r0, [pc, #192]	@ (8000d28 <MX_GPIO_Init+0x1ec>)
 8000c68:	f001 f848 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	482b      	ldr	r0, [pc, #172]	@ (8000d2c <MX_GPIO_Init+0x1f0>)
 8000c80:	f001 f83c 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           CS43L22_RESET_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c84:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000c88:	61fb      	str	r3, [r7, #28]
                          |CS43L22_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4821      	ldr	r0, [pc, #132]	@ (8000d24 <MX_GPIO_Init+0x1e8>)
 8000c9e:	f001 f82d 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ca2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481c      	ldr	r0, [pc, #112]	@ (8000d28 <MX_GPIO_Init+0x1ec>)
 8000cb8:	f001 f820 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000cbc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cce:	230a      	movs	r3, #10
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4813      	ldr	r0, [pc, #76]	@ (8000d28 <MX_GPIO_Init+0x1ec>)
 8000cda:	f001 f80f 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cde:	2320      	movs	r3, #32
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <MX_GPIO_Init+0x1e8>)
 8000cf2:	f001 f803 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cfa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <MX_GPIO_Init+0x1e0>)
 8000d0c:	f000 fff6 	bl	8001cfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d10:	bf00      	nop
 8000d12:	3730      	adds	r7, #48	@ 0x30
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020c00 	.word	0x40020c00
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40020400 	.word	0x40020400

08000d30 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2S_RxHalfCpltCallback (I2S_HandleTypeDef *hi2s)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi2s)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	 cs43l22_play((int16_t *)buffer_audio, 2 * BUFFER_LENGTH);
 8000d4c:	2160      	movs	r1, #96	@ 0x60
 8000d4e:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <HAL_I2S_RxCpltCallback+0x18>)
 8000d50:	f7ff fca0 	bl	8000694 <cs43l22_play>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000684 	.word	0x20000684

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <Error_Handler+0x8>

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <HAL_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000db8 <HAL_MspInit+0x4c>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	4a08      	ldr	r2, [pc, #32]	@ (8000db8 <HAL_MspInit+0x4c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f000 fbd8 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000df8 <HAL_CRC_MspInit+0x3c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10d      	bne.n	8000dea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_CRC_MspInit+0x40>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a09      	ldr	r2, [pc, #36]	@ (8000dfc <HAL_CRC_MspInit+0x40>)
 8000dd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <HAL_CRC_MspInit+0x40>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023000 	.word	0x40023000
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	@ (8000e84 <HAL_I2C_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12c      	bne.n	8000e7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a17      	ldr	r2, [pc, #92]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e3e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e44:	2312      	movs	r3, #18
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e50:	2304      	movs	r3, #4
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <HAL_I2C_MspInit+0x8c>)
 8000e5c:	f000 ff4e 	bl	8001cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	4a07      	ldr	r2, [pc, #28]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	@ 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40005400 	.word	0x40005400
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020400 	.word	0x40020400

08000e90 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	@ 0x38
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a8b      	ldr	r2, [pc, #556]	@ (80010dc <HAL_I2S_MspInit+0x24c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	f040 8085 	bne.w	8000fbe <HAL_I2S_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	4b89      	ldr	r3, [pc, #548]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	4a88      	ldr	r2, [pc, #544]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000ebe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec4:	4b86      	ldr	r3, [pc, #536]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ecc:	623b      	str	r3, [r7, #32]
 8000ece:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	4b82      	ldr	r3, [pc, #520]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	4a81      	ldr	r2, [pc, #516]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee0:	4b7f      	ldr	r3, [pc, #508]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	4b7b      	ldr	r3, [pc, #492]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef4:	4a7a      	ldr	r2, [pc, #488]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efc:	4b78      	ldr	r3, [pc, #480]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
 8000f06:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f18:	2305      	movs	r3, #5
 8000f1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f20:	4619      	mov	r1, r3
 8000f22:	4870      	ldr	r0, [pc, #448]	@ (80010e4 <HAL_I2S_MspInit+0x254>)
 8000f24:	f000 feea 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000f28:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4868      	ldr	r0, [pc, #416]	@ (80010e8 <HAL_I2S_MspInit+0x258>)
 8000f46:	f000 fed9 	bl	8001cfc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000f4a:	4b68      	ldr	r3, [pc, #416]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f4c:	4a68      	ldr	r2, [pc, #416]	@ (80010f0 <HAL_I2S_MspInit+0x260>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000f50:	4b66      	ldr	r3, [pc, #408]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f56:	4b65      	ldr	r3, [pc, #404]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5c:	4b63      	ldr	r3, [pc, #396]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f62:	4b62      	ldr	r3, [pc, #392]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f68:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f6a:	4b60      	ldr	r3, [pc, #384]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f70:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f72:	4b5e      	ldr	r3, [pc, #376]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f78:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f80:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f82:	4b5a      	ldr	r3, [pc, #360]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f88:	4b58      	ldr	r3, [pc, #352]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f8e:	4b57      	ldr	r3, [pc, #348]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f90:	2203      	movs	r2, #3
 8000f92:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f94:	4b55      	ldr	r3, [pc, #340]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f9a:	4b54      	ldr	r3, [pc, #336]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000fa0:	4852      	ldr	r0, [pc, #328]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000fa2:	f000 fb3b 	bl	800161c <HAL_DMA_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8000fac:	f7ff fed8 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a4e      	ldr	r2, [pc, #312]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000fb4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fb6:	4a4d      	ldr	r2, [pc, #308]	@ (80010ec <HAL_I2S_MspInit+0x25c>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fbc:	e089      	b.n	80010d2 <HAL_I2S_MspInit+0x242>
  else if(hi2s->Instance==SPI3)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a4c      	ldr	r2, [pc, #304]	@ (80010f4 <HAL_I2S_MspInit+0x264>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	f040 8084 	bne.w	80010d2 <HAL_I2S_MspInit+0x242>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b44      	ldr	r3, [pc, #272]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	4a43      	ldr	r2, [pc, #268]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fda:	4b41      	ldr	r3, [pc, #260]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b3d      	ldr	r3, [pc, #244]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a3c      	ldr	r2, [pc, #240]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a35      	ldr	r2, [pc, #212]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <HAL_I2S_MspInit+0x250>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800101e:	2310      	movs	r3, #16
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800102e:	2306      	movs	r3, #6
 8001030:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	482f      	ldr	r0, [pc, #188]	@ (80010f8 <HAL_I2S_MspInit+0x268>)
 800103a:	f000 fe5f 	bl	8001cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800103e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001050:	2306      	movs	r3, #6
 8001052:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4822      	ldr	r0, [pc, #136]	@ (80010e4 <HAL_I2S_MspInit+0x254>)
 800105c:	f000 fe4e 	bl	8001cfc <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001060:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 8001062:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <HAL_I2S_MspInit+0x270>)
 8001064:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001066:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800106c:	4b23      	ldr	r3, [pc, #140]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 800106e:	2240      	movs	r2, #64	@ 0x40
 8001070:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001072:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 800107a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001080:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 8001082:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001086:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 800108a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800108e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 8001092:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001096:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 80010a0:	2204      	movs	r2, #4
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 80010a6:	2203      	movs	r2, #3
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80010b6:	4811      	ldr	r0, [pc, #68]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 80010b8:	f000 fab0 	bl	800161c <HAL_DMA_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_I2S_MspInit+0x236>
      Error_Handler();
 80010c2:	f7ff fe4d 	bl	8000d60 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 80010ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80010cc:	4a0b      	ldr	r2, [pc, #44]	@ (80010fc <HAL_I2S_MspInit+0x26c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80010d2:	bf00      	nop
 80010d4:	3738      	adds	r7, #56	@ 0x38
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40003800 	.word	0x40003800
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020400 	.word	0x40020400
 80010ec:	2000056c 	.word	0x2000056c
 80010f0:	40026058 	.word	0x40026058
 80010f4:	40003c00 	.word	0x40003c00
 80010f8:	40020000 	.word	0x40020000
 80010fc:	200005cc 	.word	0x200005cc
 8001100:	40026088 	.word	0x40026088

08001104 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a19      	ldr	r2, [pc, #100]	@ (8001188 <HAL_SPI_MspInit+0x84>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d12b      	bne.n	800117e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <HAL_SPI_MspInit+0x88>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	4a17      	ldr	r2, [pc, #92]	@ (800118c <HAL_SPI_MspInit+0x88>)
 8001130:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001134:	6453      	str	r3, [r2, #68]	@ 0x44
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_SPI_MspInit+0x88>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <HAL_SPI_MspInit+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a10      	ldr	r2, [pc, #64]	@ (800118c <HAL_SPI_MspInit+0x88>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HAL_SPI_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800115e:	23e0      	movs	r3, #224	@ 0xe0
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800116e:	2305      	movs	r3, #5
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <HAL_SPI_MspInit+0x8c>)
 800117a:	f000 fdbf 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	@ 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40013000 	.word	0x40013000
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <NMI_Handler+0x4>

0800119c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <MemManage_Handler+0x4>

080011ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <UsageFault_Handler+0x4>

080011bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ea:	f000 f8a5 	bl	8001338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <DMA1_Stream3_IRQHandler+0x10>)
 80011fa:	f000 fb15 	bl	8001828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000056c 	.word	0x2000056c

08001208 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <DMA1_Stream5_IRQHandler+0x10>)
 800120e:	f000 fb0b 	bl	8001828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200005cc 	.word	0x200005cc

0800121c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001278 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001244:	480d      	ldr	r0, [pc, #52]	@ (800127c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001246:	490e      	ldr	r1, [pc, #56]	@ (8001280 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001248:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800125c:	4c0b      	ldr	r4, [pc, #44]	@ (800128c <LoopFillZerobss+0x26>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800126a:	f7ff ffd7 	bl	800121c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126e:	f004 ff5b 	bl	8006128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff fab3 	bl	80007dc <main>
  bx  lr    
 8001276:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001278:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001280:	20000460 	.word	0x20000460
  ldr r2, =_sidata
 8001284:	080069e4 	.word	0x080069e4
  ldr r2, =_sbss
 8001288:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 800128c:	200008d4 	.word	0x200008d4

08001290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC_IRQHandler>
	...

08001294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <HAL_Init+0x40>)
 800129e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <HAL_Init+0x40>)
 80012aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a07      	ldr	r2, [pc, #28]	@ (80012d4 <HAL_Init+0x40>)
 80012b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f94f 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f808 	bl	80012d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c8:	f7ff fd50 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023c00 	.word	0x40023c00

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_InitTick+0x54>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <HAL_InitTick+0x58>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f967 	bl	80015ca <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00e      	b.n	8001324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d80a      	bhi.n	8001322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f000 f92f 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001318:	4a06      	ldr	r2, [pc, #24]	@ (8001334 <HAL_InitTick+0x5c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e000      	b.n	8001324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000404 	.word	0x20000404
 8001330:	2000040c 	.word	0x2000040c
 8001334:	20000408 	.word	0x20000408

08001338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_IncTick+0x20>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_IncTick+0x24>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a04      	ldr	r2, [pc, #16]	@ (800135c <HAL_IncTick+0x24>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2000040c 	.word	0x2000040c
 800135c:	20000744 	.word	0x20000744

08001360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <HAL_GetTick+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000744 	.word	0x20000744

08001378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff ffee 	bl	8001360 <HAL_GetTick>
 8001384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d005      	beq.n	800139e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001392:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <HAL_Delay+0x44>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800139e:	bf00      	nop
 80013a0:	f7ff ffde 	bl	8001360 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8f7      	bhi.n	80013a0 <HAL_Delay+0x28>
  {
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000040c 	.word	0x2000040c

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	@ (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	@ (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	@ (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	@ 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	@ 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	@ (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff29 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff3e 	bl	8001408 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff8e 	bl	80014b4 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff31 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa2 	bl	800151c <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e00e      	b.n	8001612 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	795b      	ldrb	r3, [r3, #5]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d105      	bne.n	800160a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fbd9 	bl	8000dbc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff fe9a 	bl	8001360 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e099      	b.n	800176c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001658:	e00f      	b.n	800167a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165a:	f7ff fe81 	bl	8001360 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b05      	cmp	r3, #5
 8001666:	d908      	bls.n	800167a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2220      	movs	r2, #32
 800166c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2203      	movs	r2, #3
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e078      	b.n	800176c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e8      	bne.n	800165a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	4b38      	ldr	r3, [pc, #224]	@ (8001774 <HAL_DMA_Init+0x158>)
 8001694:	4013      	ands	r3, r2
 8001696:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d107      	bne.n	80016e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016dc:	4313      	orrs	r3, r2
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f023 0307 	bic.w	r3, r3, #7
 80016fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	4313      	orrs	r3, r2
 8001704:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	2b04      	cmp	r3, #4
 800170c:	d117      	bne.n	800173e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00e      	beq.n	800173e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fa6f 	bl	8001c04 <DMA_CheckFifoParam>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2240      	movs	r2, #64	@ 0x40
 8001730:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800173a:	2301      	movs	r3, #1
 800173c:	e016      	b.n	800176c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fa26 	bl	8001b98 <DMA_CalcBaseAndBitshift>
 800174c:	4603      	mov	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001754:	223f      	movs	r2, #63	@ 0x3f
 8001756:	409a      	lsls	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	f010803f 	.word	0xf010803f

08001778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_DMA_Start_IT+0x26>
 800179a:	2302      	movs	r3, #2
 800179c:	e040      	b.n	8001820 <HAL_DMA_Start_IT+0xa8>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d12f      	bne.n	8001812 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2202      	movs	r2, #2
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f9b8 	bl	8001b3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d0:	223f      	movs	r2, #63	@ 0x3f
 80017d2:	409a      	lsls	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0216 	orr.w	r2, r2, #22
 80017e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0208 	orr.w	r2, r2, #8
 80017fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	e005      	b.n	800181e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800181a:	2302      	movs	r3, #2
 800181c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800181e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001834:	4b8e      	ldr	r3, [pc, #568]	@ (8001a70 <HAL_DMA_IRQHandler+0x248>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a8e      	ldr	r2, [pc, #568]	@ (8001a74 <HAL_DMA_IRQHandler+0x24c>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0a9b      	lsrs	r3, r3, #10
 8001840:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001846:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001852:	2208      	movs	r2, #8
 8001854:	409a      	lsls	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d01a      	beq.n	8001894 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0204 	bic.w	r2, r2, #4
 800187a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001880:	2208      	movs	r2, #8
 8001882:	409a      	lsls	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001898:	2201      	movs	r2, #1
 800189a:	409a      	lsls	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d012      	beq.n	80018ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b6:	2201      	movs	r2, #1
 80018b8:	409a      	lsls	r2, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c2:	f043 0202 	orr.w	r2, r3, #2
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ce:	2204      	movs	r2, #4
 80018d0:	409a      	lsls	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d012      	beq.n	8001900 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00b      	beq.n	8001900 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	2204      	movs	r2, #4
 80018ee:	409a      	lsls	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f8:	f043 0204 	orr.w	r2, r3, #4
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001904:	2210      	movs	r2, #16
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d043      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d03c      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001922:	2210      	movs	r2, #16
 8001924:	409a      	lsls	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d018      	beq.n	800196a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d108      	bne.n	8001958 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d024      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	4798      	blx	r3
 8001956:	e01f      	b.n	8001998 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01b      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	4798      	blx	r3
 8001968:	e016      	b.n	8001998 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0208 	bic.w	r2, r2, #8
 8001986:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199c:	2220      	movs	r2, #32
 800199e:	409a      	lsls	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 808f 	beq.w	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8087 	beq.w	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019be:	2220      	movs	r2, #32
 80019c0:	409a      	lsls	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d136      	bne.n	8001a40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0216 	bic.w	r2, r2, #22
 80019e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <HAL_DMA_IRQHandler+0x1da>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d007      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0208 	bic.w	r2, r2, #8
 8001a10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	223f      	movs	r2, #63	@ 0x3f
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d07e      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
        }
        return;
 8001a3e:	e079      	b.n	8001b34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01d      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10d      	bne.n	8001a78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d031      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
 8001a6c:	e02c      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
 8001a6e:	bf00      	nop
 8001a70:	20000404 	.word	0x20000404
 8001a74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d023      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
 8001a88:	e01e      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10f      	bne.n	8001ab8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0210 	bic.w	r2, r2, #16
 8001aa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d032      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d022      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2205      	movs	r2, #5
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3301      	adds	r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d307      	bcc.n	8001b10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f2      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x2cc>
 8001b0e:	e000      	b.n	8001b12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
 8001b32:	e000      	b.n	8001b36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b34:	bf00      	nop
    }
  }
}
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b40      	cmp	r3, #64	@ 0x40
 8001b68:	d108      	bne.n	8001b7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b7a:	e007      	b.n	8001b8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3b10      	subs	r3, #16
 8001ba8:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <DMA_CalcBaseAndBitshift+0x64>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bb2:	4a13      	ldr	r2, [pc, #76]	@ (8001c00 <DMA_CalcBaseAndBitshift+0x68>)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d909      	bls.n	8001bda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bce:	f023 0303 	bic.w	r3, r3, #3
 8001bd2:	1d1a      	adds	r2, r3, #4
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bd8:	e007      	b.n	8001bea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001be2:	f023 0303 	bic.w	r3, r3, #3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	aaaaaaab 	.word	0xaaaaaaab
 8001c00:	080069b4 	.word	0x080069b4

08001c04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d11f      	bne.n	8001c5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d856      	bhi.n	8001cd2 <DMA_CheckFifoParam+0xce>
 8001c24:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <DMA_CheckFifoParam+0x28>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c4f 	.word	0x08001c4f
 8001c34:	08001c3d 	.word	0x08001c3d
 8001c38:	08001cd3 	.word	0x08001cd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d046      	beq.n	8001cd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c4c:	e043      	b.n	8001cd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c56:	d140      	bne.n	8001cda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c5c:	e03d      	b.n	8001cda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c66:	d121      	bne.n	8001cac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d837      	bhi.n	8001cde <DMA_CheckFifoParam+0xda>
 8001c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c74 <DMA_CheckFifoParam+0x70>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001c8b 	.word	0x08001c8b
 8001c7c:	08001c85 	.word	0x08001c85
 8001c80:	08001c9d 	.word	0x08001c9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
      break;
 8001c88:	e030      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d025      	beq.n	8001ce2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c9a:	e022      	b.n	8001ce2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ca4:	d11f      	bne.n	8001ce6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001caa:	e01c      	b.n	8001ce6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d903      	bls.n	8001cba <DMA_CheckFifoParam+0xb6>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d003      	beq.n	8001cc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cb8:	e018      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8001cbe:	e015      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00e      	beq.n	8001cea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd0:	e00b      	b.n	8001cea <DMA_CheckFifoParam+0xe6>
      break;
 8001cd2:	bf00      	nop
 8001cd4:	e00a      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cd6:	bf00      	nop
 8001cd8:	e008      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cda:	bf00      	nop
 8001cdc:	e006      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cde:	bf00      	nop
 8001ce0:	e004      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001ce2:	bf00      	nop
 8001ce4:	e002      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;   
 8001ce6:	bf00      	nop
 8001ce8:	e000      	b.n	8001cec <DMA_CheckFifoParam+0xe8>
      break;
 8001cea:	bf00      	nop
    }
  } 
  
  return status; 
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	@ 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e16b      	b.n	8001ff0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 815a 	bne.w	8001fea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d005      	beq.n	8001d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d130      	bne.n	8001db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0201 	and.w	r2, r3, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d017      	beq.n	8001dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d123      	bne.n	8001e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3208      	adds	r2, #8
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80b4 	beq.w	8001fea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b60      	ldr	r3, [pc, #384]	@ (8002008 <HAL_GPIO_Init+0x30c>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8a:	4a5f      	ldr	r2, [pc, #380]	@ (8002008 <HAL_GPIO_Init+0x30c>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e92:	4b5d      	ldr	r3, [pc, #372]	@ (8002008 <HAL_GPIO_Init+0x30c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800200c <HAL_GPIO_Init+0x310>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a52      	ldr	r2, [pc, #328]	@ (8002010 <HAL_GPIO_Init+0x314>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <HAL_GPIO_Init+0x226>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a51      	ldr	r2, [pc, #324]	@ (8002014 <HAL_GPIO_Init+0x318>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x222>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a50      	ldr	r2, [pc, #320]	@ (8002018 <HAL_GPIO_Init+0x31c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x21e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4f      	ldr	r2, [pc, #316]	@ (800201c <HAL_GPIO_Init+0x320>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x21a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8002020 <HAL_GPIO_Init+0x324>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x216>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4d      	ldr	r2, [pc, #308]	@ (8002024 <HAL_GPIO_Init+0x328>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x212>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8002028 <HAL_GPIO_Init+0x32c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x20e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4b      	ldr	r2, [pc, #300]	@ (800202c <HAL_GPIO_Init+0x330>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x20a>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e00e      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f06:	2308      	movs	r3, #8
 8001f08:	e00c      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	e00a      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f0e:	2305      	movs	r3, #5
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	@ (800200c <HAL_GPIO_Init+0x310>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b3b      	ldr	r3, [pc, #236]	@ (8002030 <HAL_GPIO_Init+0x334>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a32      	ldr	r2, [pc, #200]	@ (8002030 <HAL_GPIO_Init+0x334>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <HAL_GPIO_Init+0x334>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a27      	ldr	r2, [pc, #156]	@ (8002030 <HAL_GPIO_Init+0x334>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f96:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <HAL_GPIO_Init+0x334>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fba:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <HAL_GPIO_Init+0x334>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <HAL_GPIO_Init+0x334>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe4:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <HAL_GPIO_Init+0x334>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f ae90 	bls.w	8001d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	@ 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40021400 	.word	0x40021400
 8002028:	40021800 	.word	0x40021800
 800202c:	40021c00 	.word	0x40021c00
 8002030:	40013c00 	.word	0x40013c00

08002034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002044:	787b      	ldrb	r3, [r7, #1]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002050:	e003      	b.n	800205a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	041a      	lsls	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	619a      	str	r2, [r3, #24]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e12b      	b.n	80022d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe feb6 	bl	8000e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2224      	movs	r2, #36	@ 0x24
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020cc:	f001 ff0c 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 80020d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a81      	ldr	r2, [pc, #516]	@ (80022dc <HAL_I2C_Init+0x274>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d807      	bhi.n	80020ec <HAL_I2C_Init+0x84>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4a80      	ldr	r2, [pc, #512]	@ (80022e0 <HAL_I2C_Init+0x278>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	bf94      	ite	ls
 80020e4:	2301      	movls	r3, #1
 80020e6:	2300      	movhi	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	e006      	b.n	80020fa <HAL_I2C_Init+0x92>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a7d      	ldr	r2, [pc, #500]	@ (80022e4 <HAL_I2C_Init+0x27c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	bf94      	ite	ls
 80020f4:	2301      	movls	r3, #1
 80020f6:	2300      	movhi	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0e7      	b.n	80022d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4a78      	ldr	r2, [pc, #480]	@ (80022e8 <HAL_I2C_Init+0x280>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0c9b      	lsrs	r3, r3, #18
 800210c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a6a      	ldr	r2, [pc, #424]	@ (80022dc <HAL_I2C_Init+0x274>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d802      	bhi.n	800213c <HAL_I2C_Init+0xd4>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3301      	adds	r3, #1
 800213a:	e009      	b.n	8002150 <HAL_I2C_Init+0xe8>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	4a69      	ldr	r2, [pc, #420]	@ (80022ec <HAL_I2C_Init+0x284>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	3301      	adds	r3, #1
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	430b      	orrs	r3, r1
 8002156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002162:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	495c      	ldr	r1, [pc, #368]	@ (80022dc <HAL_I2C_Init+0x274>)
 800216c:	428b      	cmp	r3, r1
 800216e:	d819      	bhi.n	80021a4 <HAL_I2C_Init+0x13c>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e59      	subs	r1, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fbb1 f3f3 	udiv	r3, r1, r3
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002184:	400b      	ands	r3, r1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_I2C_Init+0x138>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1e59      	subs	r1, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fbb1 f3f3 	udiv	r3, r1, r3
 8002198:	3301      	adds	r3, #1
 800219a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219e:	e051      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e04f      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <HAL_I2C_Init+0x168>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e012      	b.n	80021f6 <HAL_I2C_Init+0x18e>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	0099      	lsls	r1, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x196>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e022      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10e      	bne.n	8002224 <HAL_I2C_Init+0x1bc>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e58      	subs	r0, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	440b      	add	r3, r1
 8002214:	fbb0 f3f3 	udiv	r3, r0, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002222:	e00f      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e58      	subs	r0, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	0099      	lsls	r1, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	fbb0 f3f3 	udiv	r3, r0, r3
 800223a:	3301      	adds	r3, #1
 800223c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	6809      	ldr	r1, [r1, #0]
 8002248:	4313      	orrs	r3, r2
 800224a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002272:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6911      	ldr	r1, [r2, #16]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	000186a0 	.word	0x000186a0
 80022e0:	001e847f 	.word	0x001e847f
 80022e4:	003d08ff 	.word	0x003d08ff
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	817b      	strh	r3, [r7, #10]
 8002302:	460b      	mov	r3, r1
 8002304:	813b      	strh	r3, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800230a:	f7ff f829 	bl	8001360 <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b20      	cmp	r3, #32
 800231a:	f040 80d9 	bne.w	80024d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2319      	movs	r3, #25
 8002324:	2201      	movs	r2, #1
 8002326:	496d      	ldr	r1, [pc, #436]	@ (80024dc <HAL_I2C_Mem_Write+0x1ec>)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f971 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
 8002336:	e0cc      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Mem_Write+0x56>
 8002342:	2302      	movs	r3, #2
 8002344:	e0c5      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d007      	beq.n	800236c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800237a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2221      	movs	r2, #33	@ 0x21
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2240      	movs	r2, #64	@ 0x40
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800239c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a4d      	ldr	r2, [pc, #308]	@ (80024e0 <HAL_I2C_Mem_Write+0x1f0>)
 80023ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ae:	88f8      	ldrh	r0, [r7, #6]
 80023b0:	893a      	ldrh	r2, [r7, #8]
 80023b2:	8979      	ldrh	r1, [r7, #10]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	4603      	mov	r3, r0
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f890 	bl	80024e4 <I2C_RequestMemoryWrite>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d052      	beq.n	8002470 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e081      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f9f2 	bl	80027bc <I2C_WaitOnTXEFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00d      	beq.n	80023fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d107      	bne.n	80023f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06b      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b04      	cmp	r3, #4
 8002436:	d11b      	bne.n	8002470 <HAL_I2C_Mem_Write+0x180>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243c:	2b00      	cmp	r3, #0
 800243e:	d017      	beq.n	8002470 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1aa      	bne.n	80023ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f9de 	bl	800283e <I2C_WaitOnBTFFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	2b04      	cmp	r3, #4
 800248e:	d107      	bne.n	80024a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800249e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e016      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	00100002 	.word	0x00100002
 80024e0:	ffff0000 	.word	0xffff0000

080024e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	460b      	mov	r3, r1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800250c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2200      	movs	r2, #0
 8002516:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f878 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002534:	d103      	bne.n	800253e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800253c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e05f      	b.n	8002602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002550:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	6a3a      	ldr	r2, [r7, #32]
 8002556:	492d      	ldr	r1, [pc, #180]	@ (800260c <I2C_RequestMemoryWrite+0x128>)
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f8b0 	bl	80026be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e04c      	b.n	8002602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800257e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002580:	6a39      	ldr	r1, [r7, #32]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f91a 	bl	80027bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	2b04      	cmp	r3, #4
 8002594:	d107      	bne.n	80025a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e02b      	b.n	8002602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025b0:	893b      	ldrh	r3, [r7, #8]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	611a      	str	r2, [r3, #16]
 80025ba:	e021      	b.n	8002600 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025bc:	893b      	ldrh	r3, [r7, #8]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025cc:	6a39      	ldr	r1, [r7, #32]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f8f4 	bl	80027bc <I2C_WaitOnTXEFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d107      	bne.n	80025f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e005      	b.n	8002602 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025f6:	893b      	ldrh	r3, [r7, #8]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	00010002 	.word	0x00010002

08002610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002620:	e025      	b.n	800266e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d021      	beq.n	800266e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7fe fe99 	bl	8001360 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d116      	bne.n	800266e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	f043 0220 	orr.w	r2, r3, #32
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e023      	b.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	0c1b      	lsrs	r3, r3, #16
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	d10d      	bne.n	8002694 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4013      	ands	r3, r2
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf0c      	ite	eq
 800268a:	2301      	moveq	r3, #1
 800268c:	2300      	movne	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	e00c      	b.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4013      	ands	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf0c      	ite	eq
 80026a6:	2301      	moveq	r3, #1
 80026a8:	2300      	movne	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d0b6      	beq.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026cc:	e051      	b.n	8002772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026dc:	d123      	bne.n	8002726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	f043 0204 	orr.w	r2, r3, #4
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e046      	b.n	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d021      	beq.n	8002772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272e:	f7fe fe17 	bl	8001360 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d116      	bne.n	8002772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f043 0220 	orr.w	r2, r3, #32
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e020      	b.n	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	0c1b      	lsrs	r3, r3, #16
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d10c      	bne.n	8002796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	43da      	mvns	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4013      	ands	r3, r2
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf14      	ite	ne
 800278e:	2301      	movne	r3, #1
 8002790:	2300      	moveq	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	e00b      	b.n	80027ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	43da      	mvns	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4013      	ands	r3, r2
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf14      	ite	ne
 80027a8:	2301      	movne	r3, #1
 80027aa:	2300      	moveq	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d18d      	bne.n	80026ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027c8:	e02d      	b.n	8002826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f878 	bl	80028c0 <I2C_IsAcknowledgeFailed>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e02d      	b.n	8002836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d021      	beq.n	8002826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e2:	f7fe fdbd 	bl	8001360 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d116      	bne.n	8002826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f043 0220 	orr.w	r2, r3, #32
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e007      	b.n	8002836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002830:	2b80      	cmp	r3, #128	@ 0x80
 8002832:	d1ca      	bne.n	80027ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800284a:	e02d      	b.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f837 	bl	80028c0 <I2C_IsAcknowledgeFailed>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e02d      	b.n	80028b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d021      	beq.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002864:	f7fe fd7c 	bl	8001360 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	429a      	cmp	r2, r3
 8002872:	d302      	bcc.n	800287a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e007      	b.n	80028b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d1ca      	bne.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d6:	d11b      	bne.n	8002910 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	f043 0204 	orr.w	r2, r3, #4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e128      	b.n	8002b84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a90      	ldr	r2, [pc, #576]	@ (8002b8c <HAL_I2S_Init+0x26c>)
 800294a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7fe fa9f 	bl	8000e90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2202      	movs	r2, #2
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002968:	f023 030f 	bic.w	r3, r3, #15
 800296c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2202      	movs	r2, #2
 8002974:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d060      	beq.n	8002a40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002986:	2310      	movs	r3, #16
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e001      	b.n	8002990 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b20      	cmp	r3, #32
 8002996:	d802      	bhi.n	800299e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800299e:	2001      	movs	r0, #1
 80029a0:	f001 fb98 	bl	80040d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80029a4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029ae:	d125      	bne.n	80029fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d010      	beq.n	80029da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	461a      	mov	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	3305      	adds	r3, #5
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	e01f      	b.n	8002a1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	3305      	adds	r3, #5
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	e00e      	b.n	8002a1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	3305      	adds	r3, #5
 8002a18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4a5c      	ldr	r2, [pc, #368]	@ (8002b90 <HAL_I2S_Init+0x270>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	08db      	lsrs	r3, r3, #3
 8002a24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	e003      	b.n	8002a48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002a40:	2302      	movs	r3, #2
 8002a42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d902      	bls.n	8002a54 <HAL_I2S_Init+0x134>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	2bff      	cmp	r3, #255	@ 0xff
 8002a52:	d907      	bls.n	8002a64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a58:	f043 0210 	orr.w	r2, r3, #16
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e08f      	b.n	8002b84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	ea42 0103 	orr.w	r1, r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002a82:	f023 030f 	bic.w	r3, r3, #15
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6851      	ldr	r1, [r2, #4]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6892      	ldr	r2, [r2, #8]
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68d2      	ldr	r2, [r2, #12]
 8002a94:	4311      	orrs	r1, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6992      	ldr	r2, [r2, #24]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aa6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d161      	bne.n	8002b74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a38      	ldr	r2, [pc, #224]	@ (8002b94 <HAL_I2S_Init+0x274>)
 8002ab4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a37      	ldr	r2, [pc, #220]	@ (8002b98 <HAL_I2S_Init+0x278>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d101      	bne.n	8002ac4 <HAL_I2S_Init+0x1a4>
 8002ac0:	4b36      	ldr	r3, [pc, #216]	@ (8002b9c <HAL_I2S_Init+0x27c>)
 8002ac2:	e001      	b.n	8002ac8 <HAL_I2S_Init+0x1a8>
 8002ac4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	4932      	ldr	r1, [pc, #200]	@ (8002b98 <HAL_I2S_Init+0x278>)
 8002ad0:	428a      	cmp	r2, r1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_I2S_Init+0x1b8>
 8002ad4:	4a31      	ldr	r2, [pc, #196]	@ (8002b9c <HAL_I2S_Init+0x27c>)
 8002ad6:	e001      	b.n	8002adc <HAL_I2S_Init+0x1bc>
 8002ad8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002adc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002ae0:	f023 030f 	bic.w	r3, r3, #15
 8002ae4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a2b      	ldr	r2, [pc, #172]	@ (8002b98 <HAL_I2S_Init+0x278>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d101      	bne.n	8002af4 <HAL_I2S_Init+0x1d4>
 8002af0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b9c <HAL_I2S_Init+0x27c>)
 8002af2:	e001      	b.n	8002af8 <HAL_I2S_Init+0x1d8>
 8002af4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002af8:	2202      	movs	r2, #2
 8002afa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a25      	ldr	r2, [pc, #148]	@ (8002b98 <HAL_I2S_Init+0x278>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <HAL_I2S_Init+0x1ea>
 8002b06:	4b25      	ldr	r3, [pc, #148]	@ (8002b9c <HAL_I2S_Init+0x27c>)
 8002b08:	e001      	b.n	8002b0e <HAL_I2S_Init+0x1ee>
 8002b0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b1a:	d003      	beq.n	8002b24 <HAL_I2S_Init+0x204>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002b24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	e001      	b.n	8002b30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b44:	4313      	orrs	r3, r2
 8002b46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a0d      	ldr	r2, [pc, #52]	@ (8002b98 <HAL_I2S_Init+0x278>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d101      	bne.n	8002b6c <HAL_I2S_Init+0x24c>
 8002b68:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <HAL_I2S_Init+0x27c>)
 8002b6a:	e001      	b.n	8002b70 <HAL_I2S_Init+0x250>
 8002b6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b70:	897a      	ldrh	r2, [r7, #10]
 8002b72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	0800303f 	.word	0x0800303f
 8002b90:	cccccccd 	.word	0xcccccccd
 8002b94:	08003155 	.word	0x08003155
 8002b98:	40003800 	.word	0x40003800
 8002b9c:	40003400 	.word	0x40003400

08002ba0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_I2S_Transmit_DMA+0x1a>
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e08e      	b.n	8002cdc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_I2S_Transmit_DMA+0x2e>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e086      	b.n	8002cdc <HAL_I2S_Transmit_DMA+0x13c>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d005      	beq.n	8002bee <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8002bea:	2302      	movs	r3, #2
 8002bec:	e076      	b.n	8002cdc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d002      	beq.n	8002c1a <HAL_I2S_Transmit_DMA+0x7a>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d10a      	bne.n	8002c30 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c2e:	e005      	b.n	8002c3c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c40:	4a28      	ldr	r2, [pc, #160]	@ (8002ce4 <HAL_I2S_Transmit_DMA+0x144>)
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c48:	4a27      	ldr	r2, [pc, #156]	@ (8002ce8 <HAL_I2S_Transmit_DMA+0x148>)
 8002c4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c50:	4a26      	ldr	r2, [pc, #152]	@ (8002cec <HAL_I2S_Transmit_DMA+0x14c>)
 8002c52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002c5c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002c64:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002c6c:	f7fe fd84 	bl	8001778 <HAL_DMA_Start_IT>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00f      	beq.n	8002c96 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7a:	f043 0208 	orr.w	r2, r3, #8
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e022      	b.n	8002cdc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cb2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d107      	bne.n	8002cd2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0202 	orr.w	r2, r2, #2
 8002cd0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	08002ebf 	.word	0x08002ebf
 8002ce8:	08002e7d 	.word	0x08002e7d
 8002cec:	08002f39 	.word	0x08002f39

08002cf0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_I2S_Receive_DMA+0x1a>
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0a1      	b.n	8002e52 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_I2S_Receive_DMA+0x2e>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e099      	b.n	8002e52 <HAL_I2S_Receive_DMA+0x162>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d005      	beq.n	8002d3e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e089      	b.n	8002e52 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2204      	movs	r2, #4
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d002      	beq.n	8002d6a <HAL_I2S_Receive_DMA+0x7a>
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b05      	cmp	r3, #5
 8002d68:	d10a      	bne.n	8002d80 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002d7e:	e005      	b.n	8002d8c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d90:	4a32      	ldr	r2, [pc, #200]	@ (8002e5c <HAL_I2S_Receive_DMA+0x16c>)
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	4a31      	ldr	r2, [pc, #196]	@ (8002e60 <HAL_I2S_Receive_DMA+0x170>)
 8002d9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da0:	4a30      	ldr	r2, [pc, #192]	@ (8002e64 <HAL_I2S_Receive_DMA+0x174>)
 8002da2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002db2:	d10a      	bne.n	8002dca <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	330c      	adds	r3, #12
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dda:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002de0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002de2:	f7fe fcc9 	bl	8001778 <HAL_DMA_Start_IT>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00f      	beq.n	8002e0c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df0:	f043 0208 	orr.w	r2, r3, #8
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e022      	b.n	8002e52 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e28:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d107      	bne.n	8002e48 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	08002f1d 	.word	0x08002f1d
 8002e60:	08002edb 	.word	0x08002edb
 8002e64:	08002f39 	.word	0x08002f39

08002e68 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e88:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10e      	bne.n	8002eb0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0202 	bic.w	r2, r2, #2
 8002ea0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7fd fc65 	bl	8000780 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7fd fc67 	bl	80007a0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10e      	bne.n	8002f0e <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7fd ff18 	bl	8000d44 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f7fd ff00 	bl	8000d30 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0203 	bic.w	r2, r2, #3
 8002f54:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f043 0208 	orr.w	r2, r3, #8
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff ff76 	bl	8002e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	881a      	ldrh	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	1c9a      	adds	r2, r3, #2
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10e      	bne.n	8002fd8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fc8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd fbd4 	bl	8000780 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffa:	1c9a      	adds	r2, r3, #2
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10e      	bne.n	8003036 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003026:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd fe87 	bl	8000d44 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b04      	cmp	r3, #4
 8003058:	d13a      	bne.n	80030d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d109      	bne.n	8003078 <I2S_IRQHandler+0x3a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306e:	2b40      	cmp	r3, #64	@ 0x40
 8003070:	d102      	bne.n	8003078 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff ffb4 	bl	8002fe0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307e:	2b40      	cmp	r3, #64	@ 0x40
 8003080:	d126      	bne.n	80030d0 <I2S_IRQHandler+0x92>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b20      	cmp	r3, #32
 800308e:	d11f      	bne.n	80030d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800309e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	f043 0202 	orr.w	r2, r3, #2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fecc 	bl	8002e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d136      	bne.n	800314a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d109      	bne.n	80030fa <I2S_IRQHandler+0xbc>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f0:	2b80      	cmp	r3, #128	@ 0x80
 80030f2:	d102      	bne.n	80030fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff45 	bl	8002f84 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b08      	cmp	r3, #8
 8003102:	d122      	bne.n	800314a <I2S_IRQHandler+0x10c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b20      	cmp	r3, #32
 8003110:	d11b      	bne.n	800314a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003120:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313c:	f043 0204 	orr.w	r2, r3, #4
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff fe8f 	bl	8002e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a92      	ldr	r2, [pc, #584]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d101      	bne.n	8003172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800316e:	4b92      	ldr	r3, [pc, #584]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003170:	e001      	b.n	8003176 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003172:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a8b      	ldr	r2, [pc, #556]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d101      	bne.n	8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800318c:	4b8a      	ldr	r3, [pc, #552]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800318e:	e001      	b.n	8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031a0:	d004      	beq.n	80031ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 8099 	bne.w	80032de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d107      	bne.n	80031c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f925 	bl	8003410 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d107      	bne.n	80031e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9c8 	bl	8003570 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
 80031e8:	d13a      	bne.n	8003260 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d035      	beq.n	8003260 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a6e      	ldr	r2, [pc, #440]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d101      	bne.n	8003202 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80031fe:	4b6e      	ldr	r3, [pc, #440]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003200:	e001      	b.n	8003206 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003202:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4969      	ldr	r1, [pc, #420]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800320e:	428b      	cmp	r3, r1
 8003210:	d101      	bne.n	8003216 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003212:	4b69      	ldr	r3, [pc, #420]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003214:	e001      	b.n	800321a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003216:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800321a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800321e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800322e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	f043 0202 	orr.w	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fe04 	bl	8002e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b08      	cmp	r3, #8
 8003268:	f040 80c3 	bne.w	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80bd 	beq.w	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003286:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a49      	ldr	r2, [pc, #292]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003292:	4b49      	ldr	r3, [pc, #292]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003294:	e001      	b.n	800329a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003296:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4944      	ldr	r1, [pc, #272]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032a2:	428b      	cmp	r3, r1
 80032a4:	d101      	bne.n	80032aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80032a6:	4b44      	ldr	r3, [pc, #272]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032a8:	e001      	b.n	80032ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80032aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80032b4:	2300      	movs	r3, #0
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f043 0204 	orr.w	r2, r3, #4
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff fdc6 	bl	8002e68 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032dc:	e089      	b.n	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d107      	bne.n	80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8be 	bl	8003474 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f8fd 	bl	800350c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b40      	cmp	r3, #64	@ 0x40
 800331a:	d12f      	bne.n	800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d02a      	beq.n	800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003334:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1e      	ldr	r2, [pc, #120]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003340:	4b1d      	ldr	r3, [pc, #116]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003342:	e001      	b.n	8003348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003344:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4919      	ldr	r1, [pc, #100]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003350:	428b      	cmp	r3, r1
 8003352:	d101      	bne.n	8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003354:	4b18      	ldr	r3, [pc, #96]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003356:	e001      	b.n	800335c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003358:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800335c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003360:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	f043 0202 	orr.w	r2, r3, #2
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff fd76 	bl	8002e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b08      	cmp	r3, #8
 8003384:	d136      	bne.n	80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d031      	beq.n	80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a07      	ldr	r2, [pc, #28]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d101      	bne.n	800339e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800339a:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800339c:	e001      	b.n	80033a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800339e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4902      	ldr	r1, [pc, #8]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033aa:	428b      	cmp	r3, r1
 80033ac:	d106      	bne.n	80033bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80033ae:	4b02      	ldr	r3, [pc, #8]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033b0:	e006      	b.n	80033c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80033b2:	bf00      	nop
 80033b4:	40003800 	.word	0x40003800
 80033b8:	40003400 	.word	0x40003400
 80033bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80033d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f043 0204 	orr.w	r2, r3, #4
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff fd3c 	bl	8002e68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033f0:	e000      	b.n	80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033f2:	bf00      	nop
}
 80033f4:	bf00      	nop
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	1c99      	adds	r1, r3, #2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6251      	str	r1, [r2, #36]	@ 0x24
 8003422:	881a      	ldrh	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d113      	bne.n	800346a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003450:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ffc9 	bl	80033fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	1c99      	adds	r1, r3, #2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6251      	str	r1, [r2, #36]	@ 0x24
 8003486:	8819      	ldrh	r1, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1d      	ldr	r2, [pc, #116]	@ (8003504 <I2SEx_TxISR_I2SExt+0x90>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <I2SEx_TxISR_I2SExt+0x22>
 8003492:	4b1d      	ldr	r3, [pc, #116]	@ (8003508 <I2SEx_TxISR_I2SExt+0x94>)
 8003494:	e001      	b.n	800349a <I2SEx_TxISR_I2SExt+0x26>
 8003496:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800349a:	460a      	mov	r2, r1
 800349c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d121      	bne.n	80034fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a12      	ldr	r2, [pc, #72]	@ (8003504 <I2SEx_TxISR_I2SExt+0x90>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <I2SEx_TxISR_I2SExt+0x50>
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <I2SEx_TxISR_I2SExt+0x94>)
 80034c2:	e001      	b.n	80034c8 <I2SEx_TxISR_I2SExt+0x54>
 80034c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	490d      	ldr	r1, [pc, #52]	@ (8003504 <I2SEx_TxISR_I2SExt+0x90>)
 80034d0:	428b      	cmp	r3, r1
 80034d2:	d101      	bne.n	80034d8 <I2SEx_TxISR_I2SExt+0x64>
 80034d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003508 <I2SEx_TxISR_I2SExt+0x94>)
 80034d6:	e001      	b.n	80034dc <I2SEx_TxISR_I2SExt+0x68>
 80034d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80034e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d106      	bne.n	80034fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ff81 	bl	80033fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40003800 	.word	0x40003800
 8003508:	40003400 	.word	0x40003400

0800350c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68d8      	ldr	r0, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	1c99      	adds	r1, r3, #2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003524:	b282      	uxth	r2, r0
 8003526:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d113      	bne.n	8003568 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800354e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ff4a 	bl	80033fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a20      	ldr	r2, [pc, #128]	@ (8003600 <I2SEx_RxISR_I2SExt+0x90>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <I2SEx_RxISR_I2SExt+0x16>
 8003582:	4b20      	ldr	r3, [pc, #128]	@ (8003604 <I2SEx_RxISR_I2SExt+0x94>)
 8003584:	e001      	b.n	800358a <I2SEx_RxISR_I2SExt+0x1a>
 8003586:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800358a:	68d8      	ldr	r0, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003590:	1c99      	adds	r1, r3, #2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003596:	b282      	uxth	r2, r0
 8003598:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d121      	bne.n	80035f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a12      	ldr	r2, [pc, #72]	@ (8003600 <I2SEx_RxISR_I2SExt+0x90>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <I2SEx_RxISR_I2SExt+0x50>
 80035bc:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <I2SEx_RxISR_I2SExt+0x94>)
 80035be:	e001      	b.n	80035c4 <I2SEx_RxISR_I2SExt+0x54>
 80035c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	490d      	ldr	r1, [pc, #52]	@ (8003600 <I2SEx_RxISR_I2SExt+0x90>)
 80035cc:	428b      	cmp	r3, r1
 80035ce:	d101      	bne.n	80035d4 <I2SEx_RxISR_I2SExt+0x64>
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <I2SEx_RxISR_I2SExt+0x94>)
 80035d2:	e001      	b.n	80035d8 <I2SEx_RxISR_I2SExt+0x68>
 80035d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ff03 	bl	80033fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40003800 	.word	0x40003800
 8003604:	40003400 	.word	0x40003400

08003608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e267      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d075      	beq.n	8003712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003626:	4b88      	ldr	r3, [pc, #544]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b04      	cmp	r3, #4
 8003630:	d00c      	beq.n	800364c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003632:	4b85      	ldr	r3, [pc, #532]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800363a:	2b08      	cmp	r3, #8
 800363c:	d112      	bne.n	8003664 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363e:	4b82      	ldr	r3, [pc, #520]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800364a:	d10b      	bne.n	8003664 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	4b7e      	ldr	r3, [pc, #504]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d05b      	beq.n	8003710 <HAL_RCC_OscConfig+0x108>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d157      	bne.n	8003710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e242      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800366c:	d106      	bne.n	800367c <HAL_RCC_OscConfig+0x74>
 800366e:	4b76      	ldr	r3, [pc, #472]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a75      	ldr	r2, [pc, #468]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e01d      	b.n	80036b8 <HAL_RCC_OscConfig+0xb0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x98>
 8003686:	4b70      	ldr	r3, [pc, #448]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6f      	ldr	r2, [pc, #444]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800368c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b6d      	ldr	r3, [pc, #436]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a6c      	ldr	r2, [pc, #432]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0xb0>
 80036a0:	4b69      	ldr	r3, [pc, #420]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a68      	ldr	r2, [pc, #416]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b66      	ldr	r3, [pc, #408]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a65      	ldr	r2, [pc, #404]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fd fe4e 	bl	8001360 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fd fe4a 	bl	8001360 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	@ 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e207      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	4b5b      	ldr	r3, [pc, #364]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0xc0>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fd fe3a 	bl	8001360 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fd fe36 	bl	8001360 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	@ 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e1f3      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	4b51      	ldr	r3, [pc, #324]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0xe8>
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d063      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800371e:	4b4a      	ldr	r3, [pc, #296]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800372a:	4b47      	ldr	r3, [pc, #284]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003732:	2b08      	cmp	r3, #8
 8003734:	d11c      	bne.n	8003770 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003736:	4b44      	ldr	r3, [pc, #272]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d116      	bne.n	8003770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003742:	4b41      	ldr	r3, [pc, #260]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <HAL_RCC_OscConfig+0x152>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d001      	beq.n	800375a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e1c7      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375a:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4937      	ldr	r1, [pc, #220]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376e:	e03a      	b.n	80037e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d020      	beq.n	80037ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003778:	4b34      	ldr	r3, [pc, #208]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fd fdef 	bl	8001360 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003786:	f7fd fdeb 	bl	8001360 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e1a8      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003798:	4b2b      	ldr	r3, [pc, #172]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a4:	4b28      	ldr	r3, [pc, #160]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4925      	ldr	r1, [pc, #148]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	600b      	str	r3, [r1, #0]
 80037b8:	e015      	b.n	80037e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ba:	4b24      	ldr	r3, [pc, #144]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fd fdce 	bl	8001360 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c8:	f7fd fdca 	bl	8001360 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e187      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037da:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d036      	beq.n	8003860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d016      	beq.n	8003828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037fa:	4b15      	ldr	r3, [pc, #84]	@ (8003850 <HAL_RCC_OscConfig+0x248>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fd fdae 	bl	8001360 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003808:	f7fd fdaa 	bl	8001360 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e167      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381a:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800381c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x200>
 8003826:	e01b      	b.n	8003860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003828:	4b09      	ldr	r3, [pc, #36]	@ (8003850 <HAL_RCC_OscConfig+0x248>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382e:	f7fd fd97 	bl	8001360 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003834:	e00e      	b.n	8003854 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003836:	f7fd fd93 	bl	8001360 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d907      	bls.n	8003854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e150      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
 8003848:	40023800 	.word	0x40023800
 800384c:	42470000 	.word	0x42470000
 8003850:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003854:	4b88      	ldr	r3, [pc, #544]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ea      	bne.n	8003836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8097 	beq.w	800399c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003872:	4b81      	ldr	r3, [pc, #516]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	4b7d      	ldr	r3, [pc, #500]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	4a7c      	ldr	r2, [pc, #496]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388c:	6413      	str	r3, [r2, #64]	@ 0x40
 800388e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389a:	2301      	movs	r3, #1
 800389c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	4b77      	ldr	r3, [pc, #476]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d118      	bne.n	80038dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038aa:	4b74      	ldr	r3, [pc, #464]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a73      	ldr	r2, [pc, #460]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b6:	f7fd fd53 	bl	8001360 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038be:	f7fd fd4f 	bl	8001360 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e10c      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d106      	bne.n	80038f2 <HAL_RCC_OscConfig+0x2ea>
 80038e4:	4b64      	ldr	r3, [pc, #400]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e8:	4a63      	ldr	r2, [pc, #396]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f0:	e01c      	b.n	800392c <HAL_RCC_OscConfig+0x324>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b05      	cmp	r3, #5
 80038f8:	d10c      	bne.n	8003914 <HAL_RCC_OscConfig+0x30c>
 80038fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003900:	f043 0304 	orr.w	r3, r3, #4
 8003904:	6713      	str	r3, [r2, #112]	@ 0x70
 8003906:	4b5c      	ldr	r3, [pc, #368]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	4a5b      	ldr	r2, [pc, #364]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6713      	str	r3, [r2, #112]	@ 0x70
 8003912:	e00b      	b.n	800392c <HAL_RCC_OscConfig+0x324>
 8003914:	4b58      	ldr	r3, [pc, #352]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003918:	4a57      	ldr	r2, [pc, #348]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003920:	4b55      	ldr	r3, [pc, #340]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	4a54      	ldr	r2, [pc, #336]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003926:	f023 0304 	bic.w	r3, r3, #4
 800392a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d015      	beq.n	8003960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fd fd14 	bl	8001360 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393a:	e00a      	b.n	8003952 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800393c:	f7fd fd10 	bl	8001360 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e0cb      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003952:	4b49      	ldr	r3, [pc, #292]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0ee      	beq.n	800393c <HAL_RCC_OscConfig+0x334>
 800395e:	e014      	b.n	800398a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003960:	f7fd fcfe 	bl	8001360 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003966:	e00a      	b.n	800397e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003968:	f7fd fcfa 	bl	8001360 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e0b5      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ee      	bne.n	8003968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003990:	4b39      	ldr	r3, [pc, #228]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	4a38      	ldr	r2, [pc, #224]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800399a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a1 	beq.w	8003ae8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039a6:	4b34      	ldr	r3, [pc, #208]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d05c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d141      	bne.n	8003a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b31      	ldr	r3, [pc, #196]	@ (8003a80 <HAL_RCC_OscConfig+0x478>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fd fcce 	bl	8001360 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fd fcca 	bl	8001360 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e087      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	019b      	lsls	r3, r3, #6
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	085b      	lsrs	r3, r3, #1
 80039fe:	3b01      	subs	r3, #1
 8003a00:	041b      	lsls	r3, r3, #16
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	491b      	ldr	r1, [pc, #108]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a10:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_RCC_OscConfig+0x478>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a16:	f7fd fca3 	bl	8001360 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7fd fc9f 	bl	8001360 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e05c      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a30:	4b11      	ldr	r3, [pc, #68]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x416>
 8003a3c:	e054      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <HAL_RCC_OscConfig+0x478>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fd fc8c 	bl	8001360 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7fd fc88 	bl	8001360 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e045      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x444>
 8003a6a:	e03d      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d107      	bne.n	8003a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e038      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x4ec>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d028      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d121      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d11a      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d111      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aca:	085b      	lsrs	r3, r3, #1
 8003acc:	3b01      	subs	r3, #1
 8003ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800

08003af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0cc      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b68      	ldr	r3, [pc, #416]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d90c      	bls.n	8003b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b65      	ldr	r3, [pc, #404]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b63      	ldr	r3, [pc, #396]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0b8      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d020      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b4c:	4b59      	ldr	r3, [pc, #356]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4a58      	ldr	r2, [pc, #352]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b64:	4b53      	ldr	r3, [pc, #332]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a52      	ldr	r2, [pc, #328]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b70:	4b50      	ldr	r3, [pc, #320]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	494d      	ldr	r1, [pc, #308]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d044      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d107      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	4b47      	ldr	r3, [pc, #284]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d119      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e07f      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e06f      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e067      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd6:	4b37      	ldr	r3, [pc, #220]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4934      	ldr	r1, [pc, #208]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be8:	f7fd fbba 	bl	8001360 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf0:	f7fd fbb6 	bl	8001360 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e04f      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 020c 	and.w	r2, r3, #12
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1eb      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c18:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d20c      	bcs.n	8003c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b22      	ldr	r3, [pc, #136]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e032      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4c:	4b19      	ldr	r3, [pc, #100]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4916      	ldr	r1, [pc, #88]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6a:	4b12      	ldr	r3, [pc, #72]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	490e      	ldr	r1, [pc, #56]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c7e:	f000 f821 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003c82:	4602      	mov	r2, r0
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	490a      	ldr	r1, [pc, #40]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	5ccb      	ldrb	r3, [r1, r3]
 8003c92:	fa22 f303 	lsr.w	r3, r2, r3
 8003c96:	4a09      	ldr	r2, [pc, #36]	@ (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c9a:	4b09      	ldr	r3, [pc, #36]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fd fb1a 	bl	80012d8 <HAL_InitTick>

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023c00 	.word	0x40023c00
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	0800699c 	.word	0x0800699c
 8003cbc:	20000404 	.word	0x20000404
 8003cc0:	20000408 	.word	0x20000408

08003cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc8:	b094      	sub	sp, #80	@ 0x50
 8003cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cdc:	4b79      	ldr	r3, [pc, #484]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d00d      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x40>
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	f200 80e1 	bhi.w	8003eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8003cf6:	e0db      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf8:	4b73      	ldr	r3, [pc, #460]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003cfc:	e0db      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cfe:	4b73      	ldr	r3, [pc, #460]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x208>)
 8003d00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d02:	e0d8      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d04:	4b6f      	ldr	r3, [pc, #444]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d063      	beq.n	8003de2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	099b      	lsrs	r3, r3, #6
 8003d20:	2200      	movs	r2, #0
 8003d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d2e:	2300      	movs	r3, #0
 8003d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d36:	4622      	mov	r2, r4
 8003d38:	462b      	mov	r3, r5
 8003d3a:	f04f 0000 	mov.w	r0, #0
 8003d3e:	f04f 0100 	mov.w	r1, #0
 8003d42:	0159      	lsls	r1, r3, #5
 8003d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d48:	0150      	lsls	r0, r2, #5
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4621      	mov	r1, r4
 8003d50:	1a51      	subs	r1, r2, r1
 8003d52:	6139      	str	r1, [r7, #16]
 8003d54:	4629      	mov	r1, r5
 8003d56:	eb63 0301 	sbc.w	r3, r3, r1
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d68:	4659      	mov	r1, fp
 8003d6a:	018b      	lsls	r3, r1, #6
 8003d6c:	4651      	mov	r1, sl
 8003d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d72:	4651      	mov	r1, sl
 8003d74:	018a      	lsls	r2, r1, #6
 8003d76:	4651      	mov	r1, sl
 8003d78:	ebb2 0801 	subs.w	r8, r2, r1
 8003d7c:	4659      	mov	r1, fp
 8003d7e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d96:	4690      	mov	r8, r2
 8003d98:	4699      	mov	r9, r3
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	eb18 0303 	adds.w	r3, r8, r3
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	462b      	mov	r3, r5
 8003da4:	eb49 0303 	adc.w	r3, r9, r3
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003db6:	4629      	mov	r1, r5
 8003db8:	024b      	lsls	r3, r1, #9
 8003dba:	4621      	mov	r1, r4
 8003dbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	024a      	lsls	r2, r1, #9
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dca:	2200      	movs	r2, #0
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dd4:	f7fc f9f8 	bl	80001c8 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4613      	mov	r3, r2
 8003dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003de0:	e058      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de2:	4b38      	ldr	r3, [pc, #224]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	2200      	movs	r2, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	4611      	mov	r1, r2
 8003dee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	2300      	movs	r3, #0
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	464b      	mov	r3, r9
 8003e00:	f04f 0000 	mov.w	r0, #0
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	0159      	lsls	r1, r3, #5
 8003e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e0e:	0150      	lsls	r0, r2, #5
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4641      	mov	r1, r8
 8003e16:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e34:	ebb2 040a 	subs.w	r4, r2, sl
 8003e38:	eb63 050b 	sbc.w	r5, r3, fp
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	00eb      	lsls	r3, r5, #3
 8003e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e4a:	00e2      	lsls	r2, r4, #3
 8003e4c:	4614      	mov	r4, r2
 8003e4e:	461d      	mov	r5, r3
 8003e50:	4643      	mov	r3, r8
 8003e52:	18e3      	adds	r3, r4, r3
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	464b      	mov	r3, r9
 8003e58:	eb45 0303 	adc.w	r3, r5, r3
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	028b      	lsls	r3, r1, #10
 8003e6e:	4621      	mov	r1, r4
 8003e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e74:	4621      	mov	r1, r4
 8003e76:	028a      	lsls	r2, r1, #10
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e7e:	2200      	movs	r2, #0
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	61fa      	str	r2, [r7, #28]
 8003e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e88:	f7fc f99e 	bl	80001c8 <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4613      	mov	r3, r2
 8003e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003ea4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eae:	e002      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eb0:	4b05      	ldr	r3, [pc, #20]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3750      	adds	r7, #80	@ 0x50
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	00f42400 	.word	0x00f42400
 8003ecc:	007a1200 	.word	0x007a1200

08003ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	@ (8003ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000404 	.word	0x20000404

08003ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eec:	f7ff fff0 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0a9b      	lsrs	r3, r3, #10
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4903      	ldr	r1, [pc, #12]	@ (8003f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	080069ac 	.word	0x080069ac

08003f10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d035      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f38:	4b62      	ldr	r3, [pc, #392]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f3e:	f7fd fa0f 	bl	8001360 <HAL_GetTick>
 8003f42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f44:	e008      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f46:	f7fd fa0b 	bl	8001360 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e0b0      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f58:	4b5b      	ldr	r3, [pc, #364]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f0      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	019a      	lsls	r2, r3, #6
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	071b      	lsls	r3, r3, #28
 8003f70:	4955      	ldr	r1, [pc, #340]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f78:	4b52      	ldr	r3, [pc, #328]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f7e:	f7fd f9ef 	bl	8001360 <HAL_GetTick>
 8003f82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f86:	f7fd f9eb 	bl	8001360 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e090      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f98:	4b4b      	ldr	r3, [pc, #300]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8083 	beq.w	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	4b44      	ldr	r3, [pc, #272]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	4a43      	ldr	r2, [pc, #268]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fc2:	4b41      	ldr	r3, [pc, #260]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003fce:	4b3f      	ldr	r3, [pc, #252]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fda:	f7fd f9c1 	bl	8001360 <HAL_GetTick>
 8003fde:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fe2:	f7fd f9bd 	bl	8001360 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e062      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ff4:	4b35      	ldr	r3, [pc, #212]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004000:	4b31      	ldr	r3, [pc, #196]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004008:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02f      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d028      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800401e:	4b2a      	ldr	r3, [pc, #168]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004026:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004028:	4b29      	ldr	r3, [pc, #164]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800402e:	4b28      	ldr	r3, [pc, #160]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004034:	4a24      	ldr	r2, [pc, #144]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800403a:	4b23      	ldr	r3, [pc, #140]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d114      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004046:	f7fd f98b 	bl	8001360 <HAL_GetTick>
 800404a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404c:	e00a      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404e:	f7fd f987 	bl	8001360 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405c:	4293      	cmp	r3, r2
 800405e:	d901      	bls.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e02a      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004064:	4b18      	ldr	r3, [pc, #96]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ee      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004078:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800407c:	d10d      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800407e:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800408e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004092:	490d      	ldr	r1, [pc, #52]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]
 8004098:	e005      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800409a:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4a0a      	ldr	r2, [pc, #40]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040a0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80040a4:	6093      	str	r3, [r2, #8]
 80040a6:	4b08      	ldr	r3, [pc, #32]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b2:	4905      	ldr	r1, [pc, #20]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	42470068 	.word	0x42470068
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40007000 	.word	0x40007000
 80040d0:	42470e40 	.word	0x42470e40

080040d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d13e      	bne.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80040f2:	4b23      	ldr	r3, [pc, #140]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d12f      	bne.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004108:	4b1e      	ldr	r3, [pc, #120]	@ (8004184 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800410a:	617b      	str	r3, [r7, #20]
          break;
 800410c:	e02f      	b.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800410e:	4b1c      	ldr	r3, [pc, #112]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800411a:	d108      	bne.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800411c:	4b18      	ldr	r3, [pc, #96]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004124:	4a18      	ldr	r2, [pc, #96]	@ (8004188 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004126:	fbb2 f3f3 	udiv	r3, r2, r3
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	e007      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800412e:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004136:	4a15      	ldr	r2, [pc, #84]	@ (800418c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800413e:	4b10      	ldr	r3, [pc, #64]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004144:	099b      	lsrs	r3, r3, #6
 8004146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	fb02 f303 	mul.w	r3, r2, r3
 8004150:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004152:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004158:	0f1b      	lsrs	r3, r3, #28
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]
          break;
 8004166:	e002      	b.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
          break;
 800416c:	bf00      	nop
        }
      }
      break;
 800416e:	bf00      	nop
    }
  }
  return frequency;
 8004170:	697b      	ldr	r3, [r7, #20]
}
 8004172:	4618      	mov	r0, r3
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	00bb8000 	.word	0x00bb8000
 8004188:	007a1200 	.word	0x007a1200
 800418c:	00f42400 	.word	0x00f42400

08004190 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e07b      	b.n	800429a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d108      	bne.n	80041bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041b2:	d009      	beq.n	80041c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	61da      	str	r2, [r3, #28]
 80041ba:	e005      	b.n	80041c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc ff8e 	bl	8001104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424c:	ea42 0103 	orr.w	r1, r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	f003 0104 	and.w	r1, r3, #4
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	f003 0210 	and.w	r2, r3, #16
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004288:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 80042a8:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <MX_PDM2PCM_Init+0x48>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80042ae:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <MX_PDM2PCM_Init+0x48>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 80042b4:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <MX_PDM2PCM_Init+0x48>)
 80042b6:	4a0e      	ldr	r2, [pc, #56]	@ (80042f0 <MX_PDM2PCM_Init+0x4c>)
 80042b8:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 80042ba:	4b0c      	ldr	r3, [pc, #48]	@ (80042ec <MX_PDM2PCM_Init+0x48>)
 80042bc:	2201      	movs	r2, #1
 80042be:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 80042c0:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <MX_PDM2PCM_Init+0x48>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 80042c6:	4809      	ldr	r0, [pc, #36]	@ (80042ec <MX_PDM2PCM_Init+0x48>)
 80042c8:	f001 fd66 	bl	8005d98 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80042cc:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <MX_PDM2PCM_Init+0x50>)
 80042ce:	2202      	movs	r2, #2
 80042d0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 80042d2:	4b08      	ldr	r3, [pc, #32]	@ (80042f4 <MX_PDM2PCM_Init+0x50>)
 80042d4:	2210      	movs	r2, #16
 80042d6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 80042d8:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <MX_PDM2PCM_Init+0x50>)
 80042da:	2200      	movs	r2, #0
 80042dc:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 80042de:	4905      	ldr	r1, [pc, #20]	@ (80042f4 <MX_PDM2PCM_Init+0x50>)
 80042e0:	4802      	ldr	r0, [pc, #8]	@ (80042ec <MX_PDM2PCM_Init+0x48>)
 80042e2:	f001 fde3 	bl	8005eac <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000748 	.word	0x20000748
 80042f0:	7d70a3d6 	.word	0x7d70a3d6
 80042f4:	20000794 	.word	0x20000794

080042f8 <D16_GENERIC>:
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	b089      	sub	sp, #36	@ 0x24
 80042fe:	68d4      	ldr	r4, [r2, #12]
 8004300:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8004302:	6993      	ldr	r3, [r2, #24]
 8004304:	9407      	str	r4, [sp, #28]
 8004306:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8004308:	9306      	str	r3, [sp, #24]
 800430a:	9402      	str	r4, [sp, #8]
 800430c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004310:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8004314:	69d3      	ldr	r3, [r2, #28]
 8004316:	6896      	ldr	r6, [r2, #8]
 8004318:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 800431a:	9103      	str	r1, [sp, #12]
 800431c:	2d00      	cmp	r5, #0
 800431e:	d066      	beq.n	80043ee <D16_GENERIC+0xf6>
 8004320:	f004 0510 	and.w	r5, r4, #16
 8004324:	f004 0420 	and.w	r4, r4, #32
 8004328:	9504      	str	r5, [sp, #16]
 800432a:	4938      	ldr	r1, [pc, #224]	@ (800440c <D16_GENERIC+0x114>)
 800432c:	9405      	str	r4, [sp, #20]
 800432e:	f04f 0e00 	mov.w	lr, #0
 8004332:	4635      	mov	r5, r6
 8004334:	e04f      	b.n	80043d6 <D16_GENERIC+0xde>
 8004336:	5d87      	ldrb	r7, [r0, r6]
 8004338:	7804      	ldrb	r4, [r0, #0]
 800433a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800433e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8004342:	b2e6      	uxtb	r6, r4
 8004344:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004348:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800434c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004350:	4433      	add	r3, r6
 8004352:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8004356:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800435a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800435e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8004362:	0aa3      	lsrs	r3, r4, #10
 8004364:	4c2a      	ldr	r4, [pc, #168]	@ (8004410 <D16_GENERIC+0x118>)
 8004366:	fb26 5404 	smlad	r4, r6, r4, r5
 800436a:	4d2a      	ldr	r5, [pc, #168]	@ (8004414 <D16_GENERIC+0x11c>)
 800436c:	fb26 f505 	smuad	r5, r6, r5
 8004370:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8004374:	eb04 080a 	add.w	r8, r4, sl
 8004378:	eba8 080b 	sub.w	r8, r8, fp
 800437c:	4646      	mov	r6, r8
 800437e:	17f7      	asrs	r7, r6, #31
 8004380:	e9cd 6700 	strd	r6, r7, [sp]
 8004384:	9e04      	ldr	r6, [sp, #16]
 8004386:	f10e 0c01 	add.w	ip, lr, #1
 800438a:	b16e      	cbz	r6, 80043a8 <D16_GENERIC+0xb0>
 800438c:	6a16      	ldr	r6, [r2, #32]
 800438e:	9f01      	ldr	r7, [sp, #4]
 8004390:	fba8 8906 	umull	r8, r9, r8, r6
 8004394:	fb06 9907 	mla	r9, r6, r7, r9
 8004398:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 800439c:	f149 0900 	adc.w	r9, r9, #0
 80043a0:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80043a4:	46a3      	mov	fp, r4
 80043a6:	4654      	mov	r4, sl
 80043a8:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 80043aa:	9f02      	ldr	r7, [sp, #8]
 80043ac:	0424      	lsls	r4, r4, #16
 80043ae:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80043b2:	f04f 0900 	mov.w	r9, #0
 80043b6:	fb0e fe06 	mul.w	lr, lr, r6
 80043ba:	fbc7 8904 	smlal	r8, r9, r7, r4
 80043be:	9e03      	ldr	r6, [sp, #12]
 80043c0:	464f      	mov	r7, r9
 80043c2:	10bc      	asrs	r4, r7, #2
 80043c4:	f304 040f 	ssat	r4, #16, r4
 80043c8:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 80043cc:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80043ce:	fa1f fe8c 	uxth.w	lr, ip
 80043d2:	4574      	cmp	r4, lr
 80043d4:	d90a      	bls.n	80043ec <D16_GENERIC+0xf4>
 80043d6:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 80043d8:	2c01      	cmp	r4, #1
 80043da:	b2e6      	uxtb	r6, r4
 80043dc:	d1ab      	bne.n	8004336 <D16_GENERIC+0x3e>
 80043de:	9e05      	ldr	r6, [sp, #20]
 80043e0:	f850 4b02 	ldr.w	r4, [r0], #2
 80043e4:	2e00      	cmp	r6, #0
 80043e6:	d0ac      	beq.n	8004342 <D16_GENERIC+0x4a>
 80043e8:	ba64      	rev16	r4, r4
 80043ea:	e7aa      	b.n	8004342 <D16_GENERIC+0x4a>
 80043ec:	462e      	mov	r6, r5
 80043ee:	9907      	ldr	r1, [sp, #28]
 80043f0:	61d3      	str	r3, [r2, #28]
 80043f2:	9b06      	ldr	r3, [sp, #24]
 80043f4:	6096      	str	r6, [r2, #8]
 80043f6:	2000      	movs	r0, #0
 80043f8:	60d1      	str	r1, [r2, #12]
 80043fa:	f8c2 a010 	str.w	sl, [r2, #16]
 80043fe:	f8c2 b014 	str.w	fp, [r2, #20]
 8004402:	6193      	str	r3, [r2, #24]
 8004404:	b009      	add	sp, #36	@ 0x24
 8004406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440a:	bf00      	nop
 800440c:	20000000 	.word	0x20000000
 8004410:	00030001 	.word	0x00030001
 8004414:	00010003 	.word	0x00010003

08004418 <D24_GENERIC>:
 8004418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441c:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 800441e:	6993      	ldr	r3, [r2, #24]
 8004420:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8004422:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004426:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800442a:	6894      	ldr	r4, [r2, #8]
 800442c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004430:	b089      	sub	sp, #36	@ 0x24
 8004432:	9307      	str	r3, [sp, #28]
 8004434:	9503      	str	r5, [sp, #12]
 8004436:	69d3      	ldr	r3, [r2, #28]
 8004438:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 800443a:	9104      	str	r1, [sp, #16]
 800443c:	2e00      	cmp	r6, #0
 800443e:	f000 8096 	beq.w	800456e <D24_GENERIC+0x156>
 8004442:	f005 0610 	and.w	r6, r5, #16
 8004446:	f005 0520 	and.w	r5, r5, #32
 800444a:	4954      	ldr	r1, [pc, #336]	@ (800459c <D24_GENERIC+0x184>)
 800444c:	9605      	str	r6, [sp, #20]
 800444e:	9506      	str	r5, [sp, #24]
 8004450:	f04f 0e00 	mov.w	lr, #0
 8004454:	f8cd 9008 	str.w	r9, [sp, #8]
 8004458:	e06a      	b.n	8004530 <D24_GENERIC+0x118>
 800445a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800445e:	f810 8007 	ldrb.w	r8, [r0, r7]
 8004462:	f890 c000 	ldrb.w	ip, [r0]
 8004466:	042d      	lsls	r5, r5, #16
 8004468:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800446c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8004470:	44ac      	add	ip, r5
 8004472:	4438      	add	r0, r7
 8004474:	fa5f f68c 	uxtb.w	r6, ip
 8004478:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800447c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004480:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8004484:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004488:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800448c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004490:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8004494:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8004498:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800449c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80044a0:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80044a4:	4d3e      	ldr	r5, [pc, #248]	@ (80045a0 <D24_GENERIC+0x188>)
 80044a6:	fb26 b705 	smlad	r7, r6, r5, fp
 80044aa:	4d3e      	ldr	r5, [pc, #248]	@ (80045a4 <D24_GENERIC+0x18c>)
 80044ac:	fb26 4b05 	smlad	fp, r6, r5, r4
 80044b0:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80044b4:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80044b8:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 80044bc:	2401      	movs	r4, #1
 80044be:	fb26 f604 	smuad	r6, r6, r4
 80044c2:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 80044c6:	9f02      	ldr	r7, [sp, #8]
 80044c8:	eb0e 0c04 	add.w	ip, lr, r4
 80044cc:	eb08 0406 	add.w	r4, r8, r6
 80044d0:	eb05 060a 	add.w	r6, r5, sl
 80044d4:	1bf6      	subs	r6, r6, r7
 80044d6:	4637      	mov	r7, r6
 80044d8:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80044dc:	e9cd 7800 	strd	r7, r8, [sp]
 80044e0:	9f05      	ldr	r7, [sp, #20]
 80044e2:	b177      	cbz	r7, 8004502 <D24_GENERIC+0xea>
 80044e4:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80044e8:	9502      	str	r5, [sp, #8]
 80044ea:	fba6 9a08 	umull	r9, sl, r6, r8
 80044ee:	9e01      	ldr	r6, [sp, #4]
 80044f0:	fb08 aa06 	mla	sl, r8, r6, sl
 80044f4:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 80044f8:	f14a 0700 	adc.w	r7, sl, #0
 80044fc:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004500:	4655      	mov	r5, sl
 8004502:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8004504:	9f03      	ldr	r7, [sp, #12]
 8004506:	03ad      	lsls	r5, r5, #14
 8004508:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 800450c:	f04f 0900 	mov.w	r9, #0
 8004510:	fb0e fe06 	mul.w	lr, lr, r6
 8004514:	fbc7 8905 	smlal	r8, r9, r7, r5
 8004518:	9e04      	ldr	r6, [sp, #16]
 800451a:	464f      	mov	r7, r9
 800451c:	10bd      	asrs	r5, r7, #2
 800451e:	f305 050f 	ssat	r5, #16, r5
 8004522:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8004526:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8004528:	fa1f fe8c 	uxth.w	lr, ip
 800452c:	4575      	cmp	r5, lr
 800452e:	d91c      	bls.n	800456a <D24_GENERIC+0x152>
 8004530:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8004532:	b2ef      	uxtb	r7, r5
 8004534:	2d01      	cmp	r5, #1
 8004536:	b23e      	sxth	r6, r7
 8004538:	d18f      	bne.n	800445a <D24_GENERIC+0x42>
 800453a:	9d06      	ldr	r5, [sp, #24]
 800453c:	b15d      	cbz	r5, 8004556 <D24_GENERIC+0x13e>
 800453e:	f01e 0f01 	tst.w	lr, #1
 8004542:	d122      	bne.n	800458a <D24_GENERIC+0x172>
 8004544:	7805      	ldrb	r5, [r0, #0]
 8004546:	78c7      	ldrb	r7, [r0, #3]
 8004548:	7846      	ldrb	r6, [r0, #1]
 800454a:	022d      	lsls	r5, r5, #8
 800454c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004550:	44b4      	add	ip, r6
 8004552:	3002      	adds	r0, #2
 8004554:	e78e      	b.n	8004474 <D24_GENERIC+0x5c>
 8004556:	7846      	ldrb	r6, [r0, #1]
 8004558:	f890 c002 	ldrb.w	ip, [r0, #2]
 800455c:	f810 5b03 	ldrb.w	r5, [r0], #3
 8004560:	0236      	lsls	r6, r6, #8
 8004562:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8004566:	44ac      	add	ip, r5
 8004568:	e784      	b.n	8004474 <D24_GENERIC+0x5c>
 800456a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800456e:	61d3      	str	r3, [r2, #28]
 8004570:	9b07      	ldr	r3, [sp, #28]
 8004572:	6094      	str	r4, [r2, #8]
 8004574:	2000      	movs	r0, #0
 8004576:	f8c2 b00c 	str.w	fp, [r2, #12]
 800457a:	f8c2 a010 	str.w	sl, [r2, #16]
 800457e:	f8c2 9014 	str.w	r9, [r2, #20]
 8004582:	6193      	str	r3, [r2, #24]
 8004584:	b009      	add	sp, #36	@ 0x24
 8004586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458a:	78c5      	ldrb	r5, [r0, #3]
 800458c:	7887      	ldrb	r7, [r0, #2]
 800458e:	f810 6b04 	ldrb.w	r6, [r0], #4
 8004592:	022d      	lsls	r5, r5, #8
 8004594:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004598:	44b4      	add	ip, r6
 800459a:	e76b      	b.n	8004474 <D24_GENERIC+0x5c>
 800459c:	20000000 	.word	0x20000000
 80045a0:	00030001 	.word	0x00030001
 80045a4:	00060007 	.word	0x00060007

080045a8 <D32_GENERIC>:
 80045a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ac:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80045ae:	6993      	ldr	r3, [r2, #24]
 80045b0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80045b2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80045b6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80045ba:	69d6      	ldr	r6, [r2, #28]
 80045bc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80045c0:	b089      	sub	sp, #36	@ 0x24
 80045c2:	9307      	str	r3, [sp, #28]
 80045c4:	9403      	str	r4, [sp, #12]
 80045c6:	6893      	ldr	r3, [r2, #8]
 80045c8:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80045ca:	9104      	str	r1, [sp, #16]
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	f000 809f 	beq.w	8004710 <D32_GENERIC+0x168>
 80045d2:	f004 0510 	and.w	r5, r4, #16
 80045d6:	f004 0420 	and.w	r4, r4, #32
 80045da:	9505      	str	r5, [sp, #20]
 80045dc:	4953      	ldr	r1, [pc, #332]	@ (800472c <D32_GENERIC+0x184>)
 80045de:	9406      	str	r4, [sp, #24]
 80045e0:	f04f 0c00 	mov.w	ip, #0
 80045e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80045e8:	461d      	mov	r5, r3
 80045ea:	4617      	mov	r7, r2
 80045ec:	e077      	b.n	80046de <D32_GENERIC+0x136>
 80045ee:	f818 3003 	ldrb.w	r3, [r8, r3]
 80045f2:	f810 800e 	ldrb.w	r8, [r0, lr]
 80045f6:	f810 e002 	ldrb.w	lr, [r0, r2]
 80045fa:	7800      	ldrb	r0, [r0, #0]
 80045fc:	041b      	lsls	r3, r3, #16
 80045fe:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004602:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8004606:	4403      	add	r3, r0
 8004608:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800460c:	b2dc      	uxtb	r4, r3
 800460e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004612:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8004616:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800461a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800461e:	0e1b      	lsrs	r3, r3, #24
 8004620:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8004624:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8004628:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800462c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8004630:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8004634:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8004638:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800463c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004640:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004644:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004648:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800464c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004650:	4b37      	ldr	r3, [pc, #220]	@ (8004730 <D32_GENERIC+0x188>)
 8004652:	fb22 b403 	smlad	r4, r2, r3, fp
 8004656:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800465a:	fb2e 4803 	smlad	r8, lr, r3, r4
 800465e:	4b35      	ldr	r3, [pc, #212]	@ (8004734 <D32_GENERIC+0x18c>)
 8004660:	fb22 5503 	smlad	r5, r2, r3, r5
 8004664:	4b34      	ldr	r3, [pc, #208]	@ (8004738 <D32_GENERIC+0x190>)
 8004666:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800466a:	2301      	movs	r3, #1
 800466c:	fb22 f203 	smuad	r2, r2, r3
 8004670:	4b32      	ldr	r3, [pc, #200]	@ (800473c <D32_GENERIC+0x194>)
 8004672:	fb2e 2503 	smlad	r5, lr, r3, r2
 8004676:	9b02      	ldr	r3, [sp, #8]
 8004678:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 800467c:	eb04 080a 	add.w	r8, r4, sl
 8004680:	eba8 0803 	sub.w	r8, r8, r3
 8004684:	4642      	mov	r2, r8
 8004686:	17d3      	asrs	r3, r2, #31
 8004688:	e9cd 2300 	strd	r2, r3, [sp]
 800468c:	9b05      	ldr	r3, [sp, #20]
 800468e:	f10c 0e01 	add.w	lr, ip, #1
 8004692:	b16b      	cbz	r3, 80046b0 <D32_GENERIC+0x108>
 8004694:	6a3a      	ldr	r2, [r7, #32]
 8004696:	9b01      	ldr	r3, [sp, #4]
 8004698:	9402      	str	r4, [sp, #8]
 800469a:	fba8 8902 	umull	r8, r9, r8, r2
 800469e:	fb02 9903 	mla	r9, r2, r3, r9
 80046a2:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 80046a6:	f149 0900 	adc.w	r9, r9, #0
 80046aa:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80046ae:	4654      	mov	r4, sl
 80046b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80046b2:	9a04      	ldr	r2, [sp, #16]
 80046b4:	fb0c fc03 	mul.w	ip, ip, r3
 80046b8:	9b03      	ldr	r3, [sp, #12]
 80046ba:	0364      	lsls	r4, r4, #13
 80046bc:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80046c0:	f04f 0900 	mov.w	r9, #0
 80046c4:	fbc3 8904 	smlal	r8, r9, r3, r4
 80046c8:	464b      	mov	r3, r9
 80046ca:	109b      	asrs	r3, r3, #2
 80046cc:	f303 030f 	ssat	r3, #16, r3
 80046d0:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 80046d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80046d6:	fa1f fc8e 	uxth.w	ip, lr
 80046da:	4563      	cmp	r3, ip
 80046dc:	d914      	bls.n	8004708 <D32_GENERIC+0x160>
 80046de:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 80046e0:	b2e2      	uxtb	r2, r4
 80046e2:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 80046e6:	eb00 080e 	add.w	r8, r0, lr
 80046ea:	4253      	negs	r3, r2
 80046ec:	2c01      	cmp	r4, #1
 80046ee:	eb08 0403 	add.w	r4, r8, r3
 80046f2:	f47f af7c 	bne.w	80045ee <D32_GENERIC+0x46>
 80046f6:	1d02      	adds	r2, r0, #4
 80046f8:	6803      	ldr	r3, [r0, #0]
 80046fa:	9806      	ldr	r0, [sp, #24]
 80046fc:	b110      	cbz	r0, 8004704 <D32_GENERIC+0x15c>
 80046fe:	ba5b      	rev16	r3, r3
 8004700:	4610      	mov	r0, r2
 8004702:	e783      	b.n	800460c <D32_GENERIC+0x64>
 8004704:	4610      	mov	r0, r2
 8004706:	e781      	b.n	800460c <D32_GENERIC+0x64>
 8004708:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800470c:	462b      	mov	r3, r5
 800470e:	463a      	mov	r2, r7
 8004710:	6093      	str	r3, [r2, #8]
 8004712:	9b07      	ldr	r3, [sp, #28]
 8004714:	f8c2 b00c 	str.w	fp, [r2, #12]
 8004718:	2000      	movs	r0, #0
 800471a:	61d6      	str	r6, [r2, #28]
 800471c:	f8c2 a010 	str.w	sl, [r2, #16]
 8004720:	f8c2 9014 	str.w	r9, [r2, #20]
 8004724:	6193      	str	r3, [r2, #24]
 8004726:	b009      	add	sp, #36	@ 0x24
 8004728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472c:	20000000 	.word	0x20000000
 8004730:	00060003 	.word	0x00060003
 8004734:	000a000c 	.word	0x000a000c
 8004738:	000c000a 	.word	0x000c000a
 800473c:	00030006 	.word	0x00030006

08004740 <D48_GENERIC>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	b089      	sub	sp, #36	@ 0x24
 8004746:	6953      	ldr	r3, [r2, #20]
 8004748:	68d4      	ldr	r4, [r2, #12]
 800474a:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800474c:	9302      	str	r3, [sp, #8]
 800474e:	9400      	str	r4, [sp, #0]
 8004750:	6993      	ldr	r3, [r2, #24]
 8004752:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8004754:	9307      	str	r3, [sp, #28]
 8004756:	9403      	str	r4, [sp, #12]
 8004758:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800475c:	69d6      	ldr	r6, [r2, #28]
 800475e:	6893      	ldr	r3, [r2, #8]
 8004760:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8004762:	9104      	str	r1, [sp, #16]
 8004764:	2d00      	cmp	r5, #0
 8004766:	f000 80c5 	beq.w	80048f4 <D48_GENERIC+0x1b4>
 800476a:	f004 0510 	and.w	r5, r4, #16
 800476e:	f004 0420 	and.w	r4, r4, #32
 8004772:	4967      	ldr	r1, [pc, #412]	@ (8004910 <D48_GENERIC+0x1d0>)
 8004774:	9505      	str	r5, [sp, #20]
 8004776:	9406      	str	r4, [sp, #24]
 8004778:	f04f 0c00 	mov.w	ip, #0
 800477c:	4657      	mov	r7, sl
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	e09c      	b.n	80048bc <D48_GENERIC+0x17c>
 8004782:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8004786:	f810 b009 	ldrb.w	fp, [r0, r9]
 800478a:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800478e:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8004792:	7800      	ldrb	r0, [r0, #0]
 8004794:	0424      	lsls	r4, r4, #16
 8004796:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800479a:	f818 4005 	ldrb.w	r4, [r8, r5]
 800479e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 80047a2:	44a8      	add	r8, r5
 80047a4:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 80047a8:	eb0b 0500 	add.w	r5, fp, r0
 80047ac:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 80047b0:	fa5f f885 	uxtb.w	r8, r5
 80047b4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80047b8:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 80047bc:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 80047c0:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 80047c4:	0e2d      	lsrs	r5, r5, #24
 80047c6:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 80047ca:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 80047ce:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 80047d2:	b2e6      	uxtb	r6, r4
 80047d4:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 80047d8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80047dc:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 80047e0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80047e4:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 80047e8:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 80047ec:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80047f0:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 80047f4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80047f8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80047fc:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8004800:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004804:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004808:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800480c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8004810:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8004814:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8004818:	4c3e      	ldr	r4, [pc, #248]	@ (8004914 <D48_GENERIC+0x1d4>)
 800481a:	9d00      	ldr	r5, [sp, #0]
 800481c:	fb2a 5404 	smlad	r4, sl, r4, r5
 8004820:	4d3d      	ldr	r5, [pc, #244]	@ (8004918 <D48_GENERIC+0x1d8>)
 8004822:	fb28 4405 	smlad	r4, r8, r5, r4
 8004826:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800482a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800482e:	4c3b      	ldr	r4, [pc, #236]	@ (800491c <D48_GENERIC+0x1dc>)
 8004830:	9b01      	ldr	r3, [sp, #4]
 8004832:	fb2a 3304 	smlad	r3, sl, r4, r3
 8004836:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 800483a:	fb28 3304 	smlad	r3, r8, r4, r3
 800483e:	4c38      	ldr	r4, [pc, #224]	@ (8004920 <D48_GENERIC+0x1e0>)
 8004840:	fb2e 3304 	smlad	r3, lr, r4, r3
 8004844:	2501      	movs	r5, #1
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	fb2a fa05 	smuad	sl, sl, r5
 800484c:	4b35      	ldr	r3, [pc, #212]	@ (8004924 <D48_GENERIC+0x1e4>)
 800484e:	fb28 a803 	smlad	r8, r8, r3, sl
 8004852:	4b35      	ldr	r3, [pc, #212]	@ (8004928 <D48_GENERIC+0x1e8>)
 8004854:	fb2e 8303 	smlad	r3, lr, r3, r8
 8004858:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	9b02      	ldr	r3, [sp, #8]
 8004860:	eb04 0807 	add.w	r8, r4, r7
 8004864:	eba8 0803 	sub.w	r8, r8, r3
 8004868:	9b05      	ldr	r3, [sp, #20]
 800486a:	4465      	add	r5, ip
 800486c:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8004870:	b163      	cbz	r3, 800488c <D48_GENERIC+0x14c>
 8004872:	6a17      	ldr	r7, [r2, #32]
 8004874:	9402      	str	r4, [sp, #8]
 8004876:	fba8 8907 	umull	r8, r9, r8, r7
 800487a:	fb07 990b 	mla	r9, r7, fp, r9
 800487e:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8004882:	f149 0900 	adc.w	r9, r9, #0
 8004886:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800488a:	463c      	mov	r4, r7
 800488c:	f8b2 e028 	ldrh.w	lr, [r2, #40]	@ 0x28
 8004890:	9b03      	ldr	r3, [sp, #12]
 8004892:	02e4      	lsls	r4, r4, #11
 8004894:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8004898:	f04f 0900 	mov.w	r9, #0
 800489c:	fb0c fc0e 	mul.w	ip, ip, lr
 80048a0:	fbc3 8904 	smlal	r8, r9, r3, r4
 80048a4:	9b04      	ldr	r3, [sp, #16]
 80048a6:	ea4f 04a9 	mov.w	r4, r9, asr #2
 80048aa:	f304 040f 	ssat	r4, #16, r4
 80048ae:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 80048b2:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80048b4:	fa1f fc85 	uxth.w	ip, r5
 80048b8:	4564      	cmp	r4, ip
 80048ba:	d919      	bls.n	80048f0 <D48_GENERIC+0x1b0>
 80048bc:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 80048be:	fa5f fe84 	uxtb.w	lr, r4
 80048c2:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 80048c6:	f1ce 0500 	rsb	r5, lr, #0
 80048ca:	eb00 0b09 	add.w	fp, r0, r9
 80048ce:	eb0b 0a05 	add.w	sl, fp, r5
 80048d2:	2c01      	cmp	r4, #1
 80048d4:	eb0a 0809 	add.w	r8, sl, r9
 80048d8:	f47f af53 	bne.w	8004782 <D48_GENERIC+0x42>
 80048dc:	9b06      	ldr	r3, [sp, #24]
 80048de:	6805      	ldr	r5, [r0, #0]
 80048e0:	6844      	ldr	r4, [r0, #4]
 80048e2:	3006      	adds	r0, #6
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f43f af63 	beq.w	80047b0 <D48_GENERIC+0x70>
 80048ea:	ba6d      	rev16	r5, r5
 80048ec:	ba64      	rev16	r4, r4
 80048ee:	e75f      	b.n	80047b0 <D48_GENERIC+0x70>
 80048f0:	9b01      	ldr	r3, [sp, #4]
 80048f2:	46ba      	mov	sl, r7
 80048f4:	6093      	str	r3, [r2, #8]
 80048f6:	9b00      	ldr	r3, [sp, #0]
 80048f8:	60d3      	str	r3, [r2, #12]
 80048fa:	9b02      	ldr	r3, [sp, #8]
 80048fc:	6153      	str	r3, [r2, #20]
 80048fe:	9b07      	ldr	r3, [sp, #28]
 8004900:	61d6      	str	r6, [r2, #28]
 8004902:	2000      	movs	r0, #0
 8004904:	f8c2 a010 	str.w	sl, [r2, #16]
 8004908:	6193      	str	r3, [r2, #24]
 800490a:	b009      	add	sp, #36	@ 0x24
 800490c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004910:	20000000 	.word	0x20000000
 8004914:	000f000a 	.word	0x000f000a
 8004918:	00060003 	.word	0x00060003
 800491c:	00150019 	.word	0x00150019
 8004920:	00190015 	.word	0x00190015
 8004924:	00030006 	.word	0x00030006
 8004928:	000a000f 	.word	0x000a000f

0800492c <D64_GENERIC>:
 800492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004930:	b089      	sub	sp, #36	@ 0x24
 8004932:	6913      	ldr	r3, [r2, #16]
 8004934:	6895      	ldr	r5, [r2, #8]
 8004936:	9303      	str	r3, [sp, #12]
 8004938:	9501      	str	r5, [sp, #4]
 800493a:	6953      	ldr	r3, [r2, #20]
 800493c:	68d5      	ldr	r5, [r2, #12]
 800493e:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8004940:	9304      	str	r3, [sp, #16]
 8004942:	9500      	str	r5, [sp, #0]
 8004944:	6993      	ldr	r3, [r2, #24]
 8004946:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8004948:	9307      	str	r3, [sp, #28]
 800494a:	9505      	str	r5, [sp, #20]
 800494c:	69d3      	ldr	r3, [r2, #28]
 800494e:	9106      	str	r1, [sp, #24]
 8004950:	2c00      	cmp	r4, #0
 8004952:	f000 80d9 	beq.w	8004b08 <D64_GENERIC+0x1dc>
 8004956:	6a11      	ldr	r1, [r2, #32]
 8004958:	9102      	str	r1, [sp, #8]
 800495a:	f8df e1ec 	ldr.w	lr, [pc, #492]	@ 8004b48 <D64_GENERIC+0x21c>
 800495e:	f04f 0c00 	mov.w	ip, #0
 8004962:	4681      	mov	r9, r0
 8004964:	e0c1      	b.n	8004aea <D64_GENERIC+0x1be>
 8004966:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800496a:	4274      	negs	r4, r6
 800496c:	eb09 0708 	add.w	r7, r9, r8
 8004970:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8004974:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8004978:	5d38      	ldrb	r0, [r7, r4]
 800497a:	5d29      	ldrb	r1, [r5, r4]
 800497c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8004980:	f819 a008 	ldrb.w	sl, [r9, r8]
 8004984:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8004988:	f899 7000 	ldrb.w	r7, [r9]
 800498c:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8004990:	4425      	add	r5, r4
 8004992:	0409      	lsls	r1, r1, #16
 8004994:	0400      	lsls	r0, r0, #16
 8004996:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800499a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800499e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 80049a2:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80049a6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80049aa:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80049ae:	4459      	add	r1, fp
 80049b0:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 80049b4:	4438      	add	r0, r7
 80049b6:	b2c5      	uxtb	r5, r0
 80049b8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80049bc:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 80049c0:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80049c4:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80049c8:	0e00      	lsrs	r0, r0, #24
 80049ca:	eb03 0806 	add.w	r8, r3, r6
 80049ce:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 80049d2:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 80049d6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80049da:	b2c8      	uxtb	r0, r1
 80049dc:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80049e0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80049e4:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 80049e8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80049ec:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80049f0:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80049f4:	0e09      	lsrs	r1, r1, #24
 80049f6:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 80049fa:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80049fe:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8004a02:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8004a06:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8004a0a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8004a0e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8004a12:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004a16:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004a1a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004a1e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8004a22:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004a26:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004a2a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004a2e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8004a32:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8004a36:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8004a3a:	0a8b      	lsrs	r3, r1, #10
 8004a3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004a40:	4939      	ldr	r1, [pc, #228]	@ (8004b28 <D64_GENERIC+0x1fc>)
 8004a42:	9c00      	ldr	r4, [sp, #0]
 8004a44:	fb28 4101 	smlad	r1, r8, r1, r4
 8004a48:	4c38      	ldr	r4, [pc, #224]	@ (8004b2c <D64_GENERIC+0x200>)
 8004a4a:	fb27 1104 	smlad	r1, r7, r4, r1
 8004a4e:	4c38      	ldr	r4, [pc, #224]	@ (8004b30 <D64_GENERIC+0x204>)
 8004a50:	fb20 1104 	smlad	r1, r0, r4, r1
 8004a54:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8004a58:	fb2a 1106 	smlad	r1, sl, r6, r1
 8004a5c:	4c35      	ldr	r4, [pc, #212]	@ (8004b34 <D64_GENERIC+0x208>)
 8004a5e:	9d01      	ldr	r5, [sp, #4]
 8004a60:	fb28 5404 	smlad	r4, r8, r4, r5
 8004a64:	4d33      	ldr	r5, [pc, #204]	@ (8004b34 <D64_GENERIC+0x208>)
 8004a66:	fb2a 4415 	smladx	r4, sl, r5, r4
 8004a6a:	4d33      	ldr	r5, [pc, #204]	@ (8004b38 <D64_GENERIC+0x20c>)
 8004a6c:	fb27 4405 	smlad	r4, r7, r5, r4
 8004a70:	fb20 4415 	smladx	r4, r0, r5, r4
 8004a74:	2501      	movs	r5, #1
 8004a76:	9400      	str	r4, [sp, #0]
 8004a78:	fb28 f805 	smuad	r8, r8, r5
 8004a7c:	4c2f      	ldr	r4, [pc, #188]	@ (8004b3c <D64_GENERIC+0x210>)
 8004a7e:	fb27 8704 	smlad	r7, r7, r4, r8
 8004a82:	4c2f      	ldr	r4, [pc, #188]	@ (8004b40 <D64_GENERIC+0x214>)
 8004a84:	fb20 7004 	smlad	r0, r0, r4, r7
 8004a88:	4c2e      	ldr	r4, [pc, #184]	@ (8004b44 <D64_GENERIC+0x218>)
 8004a8a:	fb2a 0004 	smlad	r0, sl, r4, r0
 8004a8e:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 8004a92:	9902      	ldr	r1, [sp, #8]
 8004a94:	9001      	str	r0, [sp, #4]
 8004a96:	b189      	cbz	r1, 8004abc <D64_GENERIC+0x190>
 8004a98:	9803      	ldr	r0, [sp, #12]
 8004a9a:	9c04      	ldr	r4, [sp, #16]
 8004a9c:	9604      	str	r6, [sp, #16]
 8004a9e:	4430      	add	r0, r6
 8004aa0:	1b00      	subs	r0, r0, r4
 8004aa2:	17c5      	asrs	r5, r0, #31
 8004aa4:	460f      	mov	r7, r1
 8004aa6:	fba0 0101 	umull	r0, r1, r0, r1
 8004aaa:	fb07 1105 	mla	r1, r7, r5, r1
 8004aae:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 8004ab2:	f141 0100 	adc.w	r1, r1, #0
 8004ab6:	0049      	lsls	r1, r1, #1
 8004ab8:	9103      	str	r1, [sp, #12]
 8004aba:	460e      	mov	r6, r1
 8004abc:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 8004abe:	9905      	ldr	r1, [sp, #20]
 8004ac0:	9806      	ldr	r0, [sp, #24]
 8004ac2:	02b6      	lsls	r6, r6, #10
 8004ac4:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8004ac8:	f04f 0800 	mov.w	r8, #0
 8004acc:	fb0c f404 	mul.w	r4, ip, r4
 8004ad0:	fbc1 7806 	smlal	r7, r8, r1, r6
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	1089      	asrs	r1, r1, #2
 8004ad8:	f301 010f 	ssat	r1, #16, r1
 8004adc:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8004ae0:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8004ae2:	f10c 0c01 	add.w	ip, ip, #1
 8004ae6:	4561      	cmp	r1, ip
 8004ae8:	dd0e      	ble.n	8004b08 <D64_GENERIC+0x1dc>
 8004aea:	8d56      	ldrh	r6, [r2, #42]	@ 0x2a
 8004aec:	2e01      	cmp	r6, #1
 8004aee:	f47f af3a 	bne.w	8004966 <D64_GENERIC+0x3a>
 8004af2:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8004af4:	06b4      	lsls	r4, r6, #26
 8004af6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8004afa:	f109 0908 	add.w	r9, r9, #8
 8004afe:	f57f af5a 	bpl.w	80049b6 <D64_GENERIC+0x8a>
 8004b02:	ba40      	rev16	r0, r0
 8004b04:	ba49      	rev16	r1, r1
 8004b06:	e756      	b.n	80049b6 <D64_GENERIC+0x8a>
 8004b08:	61d3      	str	r3, [r2, #28]
 8004b0a:	9b03      	ldr	r3, [sp, #12]
 8004b0c:	9901      	ldr	r1, [sp, #4]
 8004b0e:	6113      	str	r3, [r2, #16]
 8004b10:	9b04      	ldr	r3, [sp, #16]
 8004b12:	6091      	str	r1, [r2, #8]
 8004b14:	6153      	str	r3, [r2, #20]
 8004b16:	9900      	ldr	r1, [sp, #0]
 8004b18:	9b07      	ldr	r3, [sp, #28]
 8004b1a:	60d1      	str	r1, [r2, #12]
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	6193      	str	r3, [r2, #24]
 8004b20:	b009      	add	sp, #36	@ 0x24
 8004b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b26:	bf00      	nop
 8004b28:	001c0015 	.word	0x001c0015
 8004b2c:	000f000a 	.word	0x000f000a
 8004b30:	00060003 	.word	0x00060003
 8004b34:	0024002a 	.word	0x0024002a
 8004b38:	002e0030 	.word	0x002e0030
 8004b3c:	00030006 	.word	0x00030006
 8004b40:	000a000f 	.word	0x000a000f
 8004b44:	0015001c 	.word	0x0015001c
 8004b48:	20000000 	.word	0x20000000

08004b4c <D80_GENERIC>:
 8004b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b50:	b08b      	sub	sp, #44	@ 0x2c
 8004b52:	6914      	ldr	r4, [r2, #16]
 8004b54:	9404      	str	r4, [sp, #16]
 8004b56:	6954      	ldr	r4, [r2, #20]
 8004b58:	9405      	str	r4, [sp, #20]
 8004b5a:	6994      	ldr	r4, [r2, #24]
 8004b5c:	9409      	str	r4, [sp, #36]	@ 0x24
 8004b5e:	6894      	ldr	r4, [r2, #8]
 8004b60:	9402      	str	r4, [sp, #8]
 8004b62:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8004b64:	68d4      	ldr	r4, [r2, #12]
 8004b66:	9401      	str	r4, [sp, #4]
 8004b68:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8004b6a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8004b6e:	9406      	str	r4, [sp, #24]
 8004b70:	9107      	str	r1, [sp, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 810f 	beq.w	8004d96 <D80_GENERIC+0x24a>
 8004b78:	6a13      	ldr	r3, [r2, #32]
 8004b7a:	9308      	str	r3, [sp, #32]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	9200      	str	r2, [sp, #0]
 8004b80:	f8df 9264 	ldr.w	r9, [pc, #612]	@ 8004de8 <D80_GENERIC+0x29c>
 8004b84:	f8cd b00c 	str.w	fp, [sp, #12]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	e0ed      	b.n	8004d68 <D80_GENERIC+0x21c>
 8004b8c:	fa5f fc8c 	uxtb.w	ip, ip
 8004b90:	fa0f f48c 	sxth.w	r4, ip
 8004b94:	0066      	lsls	r6, r4, #1
 8004b96:	eb06 0804 	add.w	r8, r6, r4
 8004b9a:	f1cc 0500 	rsb	r5, ip, #0
 8004b9e:	eb00 0108 	add.w	r1, r0, r8
 8004ba2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004ba6:	194b      	adds	r3, r1, r5
 8004ba8:	5d49      	ldrb	r1, [r1, r5]
 8004baa:	f810 a008 	ldrb.w	sl, [r0, r8]
 8004bae:	f813 b004 	ldrb.w	fp, [r3, r4]
 8004bb2:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8004bb6:	f890 8000 	ldrb.w	r8, [r0]
 8004bba:	eb03 0e04 	add.w	lr, r3, r4
 8004bbe:	eb0e 0705 	add.w	r7, lr, r5
 8004bc2:	0409      	lsls	r1, r1, #16
 8004bc4:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8004bc8:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8004bcc:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8004bd0:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8004bd4:	eb0a 0004 	add.w	r0, sl, r4
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	f81a a004 	ldrb.w	sl, [sl, r4]
 8004bde:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8004be2:	5d44      	ldrb	r4, [r0, r5]
 8004be4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8004be8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8004bec:	4428      	add	r0, r5
 8004bee:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8004bf2:	4441      	add	r1, r8
 8004bf4:	4430      	add	r0, r6
 8004bf6:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8004bfa:	441f      	add	r7, r3
 8004bfc:	b2cd      	uxtb	r5, r1
 8004bfe:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004c02:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8004c06:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8004c0a:	9b03      	ldr	r3, [sp, #12]
 8004c0c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8004c10:	0e09      	lsrs	r1, r1, #24
 8004c12:	4433      	add	r3, r6
 8004c14:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8004c18:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8004c1c:	b2fd      	uxtb	r5, r7
 8004c1e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8004c22:	469b      	mov	fp, r3
 8004c24:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8004c28:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8004c2c:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8004c30:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8004c34:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8004c38:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8004c3c:	0e3b      	lsrs	r3, r7, #24
 8004c3e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8004c42:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8004c46:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004c4a:	fa5f fe84 	uxtb.w	lr, r4
 8004c4e:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8004c52:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004c56:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004c5a:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8004c5e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8004c62:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004c66:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8004c6a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8004c6e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c76:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004c7a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004c7e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004c82:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004c86:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8004c8a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8004c8e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8004c92:	0aa3      	lsrs	r3, r4, #10
 8004c94:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004c98:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004c9c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004ca0:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8004ca4:	9303      	str	r3, [sp, #12]
 8004ca6:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8004caa:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8004cae:	4b42      	ldr	r3, [pc, #264]	@ (8004db8 <D80_GENERIC+0x26c>)
 8004cb0:	9901      	ldr	r1, [sp, #4]
 8004cb2:	fb2b 1303 	smlad	r3, fp, r3, r1
 8004cb6:	4941      	ldr	r1, [pc, #260]	@ (8004dbc <D80_GENERIC+0x270>)
 8004cb8:	fb28 3301 	smlad	r3, r8, r1, r3
 8004cbc:	4940      	ldr	r1, [pc, #256]	@ (8004dc0 <D80_GENERIC+0x274>)
 8004cbe:	fb2c 3301 	smlad	r3, ip, r1, r3
 8004cc2:	4940      	ldr	r1, [pc, #256]	@ (8004dc4 <D80_GENERIC+0x278>)
 8004cc4:	fb27 3301 	smlad	r3, r7, r1, r3
 8004cc8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8004ccc:	fb2e 3301 	smlad	r3, lr, r1, r3
 8004cd0:	493d      	ldr	r1, [pc, #244]	@ (8004dc8 <D80_GENERIC+0x27c>)
 8004cd2:	9c02      	ldr	r4, [sp, #8]
 8004cd4:	fb2b 4401 	smlad	r4, fp, r1, r4
 8004cd8:	493c      	ldr	r1, [pc, #240]	@ (8004dcc <D80_GENERIC+0x280>)
 8004cda:	fb28 4401 	smlad	r4, r8, r1, r4
 8004cde:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 8004ce2:	fb2c 4101 	smlad	r1, ip, r1, r4
 8004ce6:	4c3a      	ldr	r4, [pc, #232]	@ (8004dd0 <D80_GENERIC+0x284>)
 8004ce8:	fb27 1104 	smlad	r1, r7, r4, r1
 8004cec:	4c39      	ldr	r4, [pc, #228]	@ (8004dd4 <D80_GENERIC+0x288>)
 8004cee:	fb2e 1104 	smlad	r1, lr, r4, r1
 8004cf2:	9101      	str	r1, [sp, #4]
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	fb2b fb01 	smuad	fp, fp, r1
 8004cfa:	4937      	ldr	r1, [pc, #220]	@ (8004dd8 <D80_GENERIC+0x28c>)
 8004cfc:	fb28 b801 	smlad	r8, r8, r1, fp
 8004d00:	4d36      	ldr	r5, [pc, #216]	@ (8004ddc <D80_GENERIC+0x290>)
 8004d02:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8004d06:	4d36      	ldr	r5, [pc, #216]	@ (8004de0 <D80_GENERIC+0x294>)
 8004d08:	fb27 c705 	smlad	r7, r7, r5, ip
 8004d0c:	4d35      	ldr	r5, [pc, #212]	@ (8004de4 <D80_GENERIC+0x298>)
 8004d0e:	fb2e 7105 	smlad	r1, lr, r5, r7
 8004d12:	9102      	str	r1, [sp, #8]
 8004d14:	9908      	ldr	r1, [sp, #32]
 8004d16:	f5a3 337a 	sub.w	r3, r3, #256000	@ 0x3e800
 8004d1a:	b181      	cbz	r1, 8004d3e <D80_GENERIC+0x1f2>
 8004d1c:	9c04      	ldr	r4, [sp, #16]
 8004d1e:	9d05      	ldr	r5, [sp, #20]
 8004d20:	9305      	str	r3, [sp, #20]
 8004d22:	441c      	add	r4, r3
 8004d24:	1b64      	subs	r4, r4, r5
 8004d26:	17e7      	asrs	r7, r4, #31
 8004d28:	fba4 4501 	umull	r4, r5, r4, r1
 8004d2c:	fb01 5507 	mla	r5, r1, r7, r5
 8004d30:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8004d34:	f145 0500 	adc.w	r5, r5, #0
 8004d38:	0069      	lsls	r1, r5, #1
 8004d3a:	9104      	str	r1, [sp, #16]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	9e00      	ldr	r6, [sp, #0]
 8004d40:	9f06      	ldr	r7, [sp, #24]
 8004d42:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8004d44:	025b      	lsls	r3, r3, #9
 8004d46:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	fb02 f101 	mul.w	r1, r2, r1
 8004d50:	fbc7 4503 	smlal	r4, r5, r7, r3
 8004d54:	9c07      	ldr	r4, [sp, #28]
 8004d56:	10ab      	asrs	r3, r5, #2
 8004d58:	f303 030f 	ssat	r3, #16, r3
 8004d5c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8004d60:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 8004d62:	3201      	adds	r2, #1
 8004d64:	4293      	cmp	r3, r2
 8004d66:	dd13      	ble.n	8004d90 <D80_GENERIC+0x244>
 8004d68:	9b00      	ldr	r3, [sp, #0]
 8004d6a:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	@ 0x2a
 8004d6e:	f1bc 0f01 	cmp.w	ip, #1
 8004d72:	f47f af0b 	bne.w	8004b8c <D80_GENERIC+0x40>
 8004d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d78:	6884      	ldr	r4, [r0, #8]
 8004d7a:	069b      	lsls	r3, r3, #26
 8004d7c:	e890 0082 	ldmia.w	r0, {r1, r7}
 8004d80:	f100 000a 	add.w	r0, r0, #10
 8004d84:	f57f af3a 	bpl.w	8004bfc <D80_GENERIC+0xb0>
 8004d88:	ba49      	rev16	r1, r1
 8004d8a:	ba7f      	rev16	r7, r7
 8004d8c:	ba64      	rev16	r4, r4
 8004d8e:	e735      	b.n	8004bfc <D80_GENERIC+0xb0>
 8004d90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004d94:	4632      	mov	r2, r6
 8004d96:	9b02      	ldr	r3, [sp, #8]
 8004d98:	6093      	str	r3, [r2, #8]
 8004d9a:	9b01      	ldr	r3, [sp, #4]
 8004d9c:	60d3      	str	r3, [r2, #12]
 8004d9e:	9b04      	ldr	r3, [sp, #16]
 8004da0:	6113      	str	r3, [r2, #16]
 8004da2:	9b05      	ldr	r3, [sp, #20]
 8004da4:	6153      	str	r3, [r2, #20]
 8004da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da8:	f8c2 b01c 	str.w	fp, [r2, #28]
 8004dac:	2000      	movs	r0, #0
 8004dae:	6193      	str	r3, [r2, #24]
 8004db0:	b00b      	add	sp, #44	@ 0x2c
 8004db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db6:	bf00      	nop
 8004db8:	002d0024 	.word	0x002d0024
 8004dbc:	001c0015 	.word	0x001c0015
 8004dc0:	000f000a 	.word	0x000f000a
 8004dc4:	00060003 	.word	0x00060003
 8004dc8:	0037003f 	.word	0x0037003f
 8004dcc:	00450049 	.word	0x00450049
 8004dd0:	00490045 	.word	0x00490045
 8004dd4:	003f0037 	.word	0x003f0037
 8004dd8:	00030006 	.word	0x00030006
 8004ddc:	000a000f 	.word	0x000a000f
 8004de0:	0015001c 	.word	0x0015001c
 8004de4:	0024002d 	.word	0x0024002d
 8004de8:	20000000 	.word	0x20000000

08004dec <D128_GENERIC>:
 8004dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df0:	b093      	sub	sp, #76	@ 0x4c
 8004df2:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8004df4:	9005      	str	r0, [sp, #20]
 8004df6:	4610      	mov	r0, r2
 8004df8:	9201      	str	r2, [sp, #4]
 8004dfa:	6912      	ldr	r2, [r2, #16]
 8004dfc:	920c      	str	r2, [sp, #48]	@ 0x30
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6940      	ldr	r0, [r0, #20]
 8004e02:	900d      	str	r0, [sp, #52]	@ 0x34
 8004e04:	4610      	mov	r0, r2
 8004e06:	4614      	mov	r4, r2
 8004e08:	6992      	ldr	r2, [r2, #24]
 8004e0a:	9211      	str	r2, [sp, #68]	@ 0x44
 8004e0c:	69c2      	ldr	r2, [r0, #28]
 8004e0e:	9202      	str	r2, [sp, #8]
 8004e10:	68e2      	ldr	r2, [r4, #12]
 8004e12:	6880      	ldr	r0, [r0, #8]
 8004e14:	9203      	str	r2, [sp, #12]
 8004e16:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004e18:	9004      	str	r0, [sp, #16]
 8004e1a:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e1c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 819b 	beq.w	800515a <D128_GENERIC+0x36e>
 8004e24:	6a23      	ldr	r3, [r4, #32]
 8004e26:	9310      	str	r3, [sp, #64]	@ 0x40
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8df 93a8 	ldr.w	r9, [pc, #936]	@ 80051d4 <D128_GENERIC+0x3e8>
 8004e2e:	9306      	str	r3, [sp, #24]
 8004e30:	e17a      	b.n	8005128 <D128_GENERIC+0x33c>
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	9d05      	ldr	r5, [sp, #20]
 8004e36:	b214      	sxth	r4, r2
 8004e38:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8004e3c:	4250      	negs	r0, r2
 8004e3e:	eb05 010a 	add.w	r1, r5, sl
 8004e42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e46:	eb01 0800 	add.w	r8, r1, r0
 8004e4a:	eb0b 0c04 	add.w	ip, fp, r4
 8004e4e:	eb08 070c 	add.w	r7, r8, ip
 8004e52:	183b      	adds	r3, r7, r0
 8004e54:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8004e58:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8004e5c:	eb0e 0604 	add.w	r6, lr, r4
 8004e60:	9307      	str	r3, [sp, #28]
 8004e62:	1833      	adds	r3, r6, r0
 8004e64:	9305      	str	r3, [sp, #20]
 8004e66:	462b      	mov	r3, r5
 8004e68:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8004e6c:	f8cd a020 	str.w	sl, [sp, #32]
 8004e70:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8004e74:	f813 c002 	ldrb.w	ip, [r3, r2]
 8004e78:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8004e7c:	5c3a      	ldrb	r2, [r7, r0]
 8004e7e:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8004e82:	781f      	ldrb	r7, [r3, #0]
 8004e84:	9b07      	ldr	r3, [sp, #28]
 8004e86:	9d05      	ldr	r5, [sp, #20]
 8004e88:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8004e8c:	5c09      	ldrb	r1, [r1, r0]
 8004e8e:	9709      	str	r7, [sp, #36]	@ 0x24
 8004e90:	9307      	str	r3, [sp, #28]
 8004e92:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8004e96:	5c33      	ldrb	r3, [r6, r0]
 8004e98:	0412      	lsls	r2, r2, #16
 8004e9a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8004e9e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8004ea2:	9d08      	ldr	r5, [sp, #32]
 8004ea4:	eb06 0a04 	add.w	sl, r6, r4
 8004ea8:	0409      	lsls	r1, r1, #16
 8004eaa:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8004eae:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8004eb2:	5d36      	ldrb	r6, [r6, r4]
 8004eb4:	9c05      	ldr	r4, [sp, #20]
 8004eb6:	042d      	lsls	r5, r5, #16
 8004eb8:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8004ebc:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8004ec0:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8004ec4:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8004ec8:	eb0a 0c00 	add.w	ip, sl, r0
 8004ecc:	041b      	lsls	r3, r3, #16
 8004ece:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004ed2:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8004ed6:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8004eda:	9d07      	ldr	r5, [sp, #28]
 8004edc:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8004ee0:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8004ee4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8004ee6:	4458      	add	r0, fp
 8004ee8:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8004eec:	9005      	str	r0, [sp, #20]
 8004eee:	4439      	add	r1, r7
 8004ef0:	442a      	add	r2, r5
 8004ef2:	44b2      	add	sl, r6
 8004ef4:	1918      	adds	r0, r3, r4
 8004ef6:	b2cb      	uxtb	r3, r1
 8004ef8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8004efc:	9e02      	ldr	r6, [sp, #8]
 8004efe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004f02:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8004f06:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8004f0a:	441e      	add	r6, r3
 8004f0c:	0e09      	lsrs	r1, r1, #24
 8004f0e:	4633      	mov	r3, r6
 8004f10:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004f14:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8004f18:	b2d4      	uxtb	r4, r2
 8004f1a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004f1e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004f22:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8004f26:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004f2a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004f2e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004f32:	0e12      	lsrs	r2, r2, #24
 8004f34:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8004f38:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8004f3c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004f40:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8004f44:	9702      	str	r7, [sp, #8]
 8004f46:	b2c2      	uxtb	r2, r0
 8004f48:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8004f4c:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8004f50:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8004f54:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004f58:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8004f5c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004f60:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8004f64:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004f68:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8004f6c:	0e00      	lsrs	r0, r0, #24
 8004f6e:	fa5f f68a 	uxtb.w	r6, sl
 8004f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f78:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8004f7c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8004f80:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004f84:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8004f88:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004f8c:	950a      	str	r5, [sp, #40]	@ 0x28
 8004f8e:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8004f92:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8004f96:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8004f9a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004f9e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8004fa2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004fa6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004fa8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8004fac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004fae:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8004fb2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004fb6:	9307      	str	r3, [sp, #28]
 8004fb8:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004fbc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8004fc0:	9b02      	ldr	r3, [sp, #8]
 8004fc2:	f8cd c008 	str.w	ip, [sp, #8]
 8004fc6:	4694      	mov	ip, r2
 8004fc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fca:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8004fce:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8004fd2:	9a02      	ldr	r2, [sp, #8]
 8004fd4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004fd8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8004fdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004fe0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004fe2:	f8cd a020 	str.w	sl, [sp, #32]
 8004fe6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004fea:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8004fee:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004ff2:	9b07      	ldr	r3, [sp, #28]
 8004ff4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004ff8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8004ffc:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8005000:	9a08      	ldr	r2, [sp, #32]
 8005002:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800500a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800500e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005012:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8005016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800501a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800501e:	0a96      	lsrs	r6, r2, #10
 8005020:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005024:	9602      	str	r6, [sp, #8]
 8005026:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800502a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800502e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8005032:	4e53      	ldr	r6, [pc, #332]	@ (8005180 <D128_GENERIC+0x394>)
 8005034:	9f03      	ldr	r7, [sp, #12]
 8005036:	fb2c 7606 	smlad	r6, ip, r6, r7
 800503a:	4f52      	ldr	r7, [pc, #328]	@ (8005184 <D128_GENERIC+0x398>)
 800503c:	fb2a 6607 	smlad	r6, sl, r7, r6
 8005040:	4f51      	ldr	r7, [pc, #324]	@ (8005188 <D128_GENERIC+0x39c>)
 8005042:	fb21 6607 	smlad	r6, r1, r7, r6
 8005046:	4f51      	ldr	r7, [pc, #324]	@ (800518c <D128_GENERIC+0x3a0>)
 8005048:	fb24 6607 	smlad	r6, r4, r7, r6
 800504c:	4f50      	ldr	r7, [pc, #320]	@ (8005190 <D128_GENERIC+0x3a4>)
 800504e:	fb28 6607 	smlad	r6, r8, r7, r6
 8005052:	4f50      	ldr	r7, [pc, #320]	@ (8005194 <D128_GENERIC+0x3a8>)
 8005054:	fb20 6607 	smlad	r6, r0, r7, r6
 8005058:	4f4f      	ldr	r7, [pc, #316]	@ (8005198 <D128_GENERIC+0x3ac>)
 800505a:	fb23 6607 	smlad	r6, r3, r7, r6
 800505e:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8005062:	fb25 6607 	smlad	r6, r5, r7, r6
 8005066:	4f4d      	ldr	r7, [pc, #308]	@ (800519c <D128_GENERIC+0x3b0>)
 8005068:	9a04      	ldr	r2, [sp, #16]
 800506a:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800506e:	4a4c      	ldr	r2, [pc, #304]	@ (80051a0 <D128_GENERIC+0x3b4>)
 8005070:	fb2a ee02 	smlad	lr, sl, r2, lr
 8005074:	4f4b      	ldr	r7, [pc, #300]	@ (80051a4 <D128_GENERIC+0x3b8>)
 8005076:	fb21 ee07 	smlad	lr, r1, r7, lr
 800507a:	4f4b      	ldr	r7, [pc, #300]	@ (80051a8 <D128_GENERIC+0x3bc>)
 800507c:	fb24 ee07 	smlad	lr, r4, r7, lr
 8005080:	4f4a      	ldr	r7, [pc, #296]	@ (80051ac <D128_GENERIC+0x3c0>)
 8005082:	fb28 ee07 	smlad	lr, r8, r7, lr
 8005086:	4f4a      	ldr	r7, [pc, #296]	@ (80051b0 <D128_GENERIC+0x3c4>)
 8005088:	fb20 ee07 	smlad	lr, r0, r7, lr
 800508c:	4f49      	ldr	r7, [pc, #292]	@ (80051b4 <D128_GENERIC+0x3c8>)
 800508e:	fb23 e707 	smlad	r7, r3, r7, lr
 8005092:	f8df e144 	ldr.w	lr, [pc, #324]	@ 80051d8 <D128_GENERIC+0x3ec>
 8005096:	fb25 720e 	smlad	r2, r5, lr, r7
 800509a:	f04f 0b01 	mov.w	fp, #1
 800509e:	9203      	str	r2, [sp, #12]
 80050a0:	fb2c fb0b 	smuad	fp, ip, fp
 80050a4:	4f44      	ldr	r7, [pc, #272]	@ (80051b8 <D128_GENERIC+0x3cc>)
 80050a6:	fb2a ba07 	smlad	sl, sl, r7, fp
 80050aa:	4f44      	ldr	r7, [pc, #272]	@ (80051bc <D128_GENERIC+0x3d0>)
 80050ac:	fb21 aa07 	smlad	sl, r1, r7, sl
 80050b0:	4f43      	ldr	r7, [pc, #268]	@ (80051c0 <D128_GENERIC+0x3d4>)
 80050b2:	fb24 aa07 	smlad	sl, r4, r7, sl
 80050b6:	4f43      	ldr	r7, [pc, #268]	@ (80051c4 <D128_GENERIC+0x3d8>)
 80050b8:	fb28 a707 	smlad	r7, r8, r7, sl
 80050bc:	4a42      	ldr	r2, [pc, #264]	@ (80051c8 <D128_GENERIC+0x3dc>)
 80050be:	fb20 7702 	smlad	r7, r0, r2, r7
 80050c2:	4a42      	ldr	r2, [pc, #264]	@ (80051cc <D128_GENERIC+0x3e0>)
 80050c4:	fb23 7702 	smlad	r7, r3, r2, r7
 80050c8:	4b41      	ldr	r3, [pc, #260]	@ (80051d0 <D128_GENERIC+0x3e4>)
 80050ca:	fb25 7303 	smlad	r3, r5, r3, r7
 80050ce:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80050d0:	9304      	str	r3, [sp, #16]
 80050d2:	f5a6 1680 	sub.w	r6, r6, #1048576	@ 0x100000
 80050d6:	b185      	cbz	r5, 80050fa <D128_GENERIC+0x30e>
 80050d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80050da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80050dc:	960d      	str	r6, [sp, #52]	@ 0x34
 80050de:	4432      	add	r2, r6
 80050e0:	1a52      	subs	r2, r2, r1
 80050e2:	17d1      	asrs	r1, r2, #31
 80050e4:	fba2 2305 	umull	r2, r3, r2, r5
 80050e8:	fb05 3301 	mla	r3, r5, r1, r3
 80050ec:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 80050f0:	f143 0300 	adc.w	r3, r3, #0
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80050f8:	461e      	mov	r6, r3
 80050fa:	9801      	ldr	r0, [sp, #4]
 80050fc:	9c06      	ldr	r4, [sp, #24]
 80050fe:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8005100:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8005102:	01f6      	lsls	r6, r6, #7
 8005104:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005108:	2300      	movs	r3, #0
 800510a:	fbc5 2306 	smlal	r2, r3, r5, r6
 800510e:	fb04 f101 	mul.w	r1, r4, r1
 8005112:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005114:	109b      	asrs	r3, r3, #2
 8005116:	f303 030f 	ssat	r3, #16, r3
 800511a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800511e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8005120:	1c62      	adds	r2, r4, #1
 8005122:	4293      	cmp	r3, r2
 8005124:	9206      	str	r2, [sp, #24]
 8005126:	dd18      	ble.n	800515a <D128_GENERIC+0x36e>
 8005128:	9b01      	ldr	r3, [sp, #4]
 800512a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800512c:	2a01      	cmp	r2, #1
 800512e:	f47f ae80 	bne.w	8004e32 <D128_GENERIC+0x46>
 8005132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005134:	9d05      	ldr	r5, [sp, #20]
 8005136:	069b      	lsls	r3, r3, #26
 8005138:	6829      	ldr	r1, [r5, #0]
 800513a:	686a      	ldr	r2, [r5, #4]
 800513c:	68a8      	ldr	r0, [r5, #8]
 800513e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8005142:	f105 0410 	add.w	r4, r5, #16
 8005146:	d506      	bpl.n	8005156 <D128_GENERIC+0x36a>
 8005148:	ba49      	rev16	r1, r1
 800514a:	ba52      	rev16	r2, r2
 800514c:	ba40      	rev16	r0, r0
 800514e:	fa9a fa9a 	rev16.w	sl, sl
 8005152:	9405      	str	r4, [sp, #20]
 8005154:	e6cf      	b.n	8004ef6 <D128_GENERIC+0x10a>
 8005156:	9405      	str	r4, [sp, #20]
 8005158:	e6cd      	b.n	8004ef6 <D128_GENERIC+0x10a>
 800515a:	9a01      	ldr	r2, [sp, #4]
 800515c:	9904      	ldr	r1, [sp, #16]
 800515e:	6091      	str	r1, [r2, #8]
 8005160:	9903      	ldr	r1, [sp, #12]
 8005162:	60d1      	str	r1, [r2, #12]
 8005164:	9b02      	ldr	r3, [sp, #8]
 8005166:	61d3      	str	r3, [r2, #28]
 8005168:	4611      	mov	r1, r2
 800516a:	4613      	mov	r3, r2
 800516c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800516e:	610a      	str	r2, [r1, #16]
 8005170:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005172:	6159      	str	r1, [r3, #20]
 8005174:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005176:	6199      	str	r1, [r3, #24]
 8005178:	2000      	movs	r0, #0
 800517a:	b013      	add	sp, #76	@ 0x4c
 800517c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005180:	00780069 	.word	0x00780069
 8005184:	005b004e 	.word	0x005b004e
 8005188:	00420037 	.word	0x00420037
 800518c:	002d0024 	.word	0x002d0024
 8005190:	001c0015 	.word	0x001c0015
 8005194:	000f000a 	.word	0x000f000a
 8005198:	00060003 	.word	0x00060003
 800519c:	00880096 	.word	0x00880096
 80051a0:	00a200ac 	.word	0x00a200ac
 80051a4:	00b400ba 	.word	0x00b400ba
 80051a8:	00be00c0 	.word	0x00be00c0
 80051ac:	00c000be 	.word	0x00c000be
 80051b0:	00ba00b4 	.word	0x00ba00b4
 80051b4:	00ac00a2 	.word	0x00ac00a2
 80051b8:	00030006 	.word	0x00030006
 80051bc:	000a000f 	.word	0x000a000f
 80051c0:	0015001c 	.word	0x0015001c
 80051c4:	0024002d 	.word	0x0024002d
 80051c8:	00370042 	.word	0x00370042
 80051cc:	004e005b 	.word	0x004e005b
 80051d0:	00690078 	.word	0x00690078
 80051d4:	20000000 	.word	0x20000000
 80051d8:	00960088 	.word	0x00960088

080051dc <D16_1CH_HTONS_VOL_HP>:
 80051dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e0:	4691      	mov	r9, r2
 80051e2:	b083      	sub	sp, #12
 80051e4:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80051e6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80051ea:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	4680      	mov	r8, r0
 80051f2:	f8d9 7014 	ldr.w	r7, [r9, #20]
 80051f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80051fa:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80051fe:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8005202:	9401      	str	r4, [sp, #4]
 8005204:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8005208:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800520c:	2a00      	cmp	r2, #0
 800520e:	d04e      	beq.n	80052ae <D16_1CH_HTONS_VOL_HP+0xd2>
 8005210:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 80052bc <D16_1CH_HTONS_VOL_HP+0xe0>
 8005214:	1e8c      	subs	r4, r1, #2
 8005216:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800521a:	f858 2b02 	ldr.w	r2, [r8], #2
 800521e:	ba52      	rev16	r2, r2
 8005220:	b2d6      	uxtb	r6, r2
 8005222:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005226:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800522a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800522e:	4413      	add	r3, r2
 8005230:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8005234:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8005238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800523c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005240:	0a93      	lsrs	r3, r2, #10
 8005242:	4a1c      	ldr	r2, [pc, #112]	@ (80052b4 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8005244:	fb21 5202 	smlad	r2, r1, r2, r5
 8005248:	4d1b      	ldr	r5, [pc, #108]	@ (80052b8 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800524a:	fb21 f505 	smuad	r5, r1, r5
 800524e:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8005252:	4410      	add	r0, r2
 8005254:	1bc0      	subs	r0, r0, r7
 8005256:	17c7      	asrs	r7, r0, #31
 8005258:	fba0 010e 	umull	r0, r1, r0, lr
 800525c:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 8005260:	fb0e 1107 	mla	r1, lr, r7, r1
 8005264:	f141 0100 	adc.w	r1, r1, #0
 8005268:	0448      	lsls	r0, r1, #17
 800526a:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 800526e:	2700      	movs	r7, #0
 8005270:	fbc0 670a 	smlal	r6, r7, r0, sl
 8005274:	45d8      	cmp	r8, fp
 8005276:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800527a:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800527e:	4617      	mov	r7, r2
 8005280:	f301 010f 	ssat	r1, #16, r1
 8005284:	f824 1f02 	strh.w	r1, [r4, #2]!
 8005288:	d1c7      	bne.n	800521a <D16_1CH_HTONS_VOL_HP+0x3e>
 800528a:	9901      	ldr	r1, [sp, #4]
 800528c:	f8c9 301c 	str.w	r3, [r9, #28]
 8005290:	9b00      	ldr	r3, [sp, #0]
 8005292:	f8c9 0010 	str.w	r0, [r9, #16]
 8005296:	2000      	movs	r0, #0
 8005298:	f8c9 5008 	str.w	r5, [r9, #8]
 800529c:	f8c9 100c 	str.w	r1, [r9, #12]
 80052a0:	f8c9 2014 	str.w	r2, [r9, #20]
 80052a4:	f8c9 3018 	str.w	r3, [r9, #24]
 80052a8:	b003      	add	sp, #12
 80052aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ae:	463a      	mov	r2, r7
 80052b0:	4621      	mov	r1, r4
 80052b2:	e7eb      	b.n	800528c <D16_1CH_HTONS_VOL_HP+0xb0>
 80052b4:	00030001 	.word	0x00030001
 80052b8:	00010003 	.word	0x00010003
 80052bc:	20000000 	.word	0x20000000

080052c0 <D24_1CH_HTONS_VOL_HP>:
 80052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	b089      	sub	sp, #36	@ 0x24
 80052c6:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80052c8:	6996      	ldr	r6, [r2, #24]
 80052ca:	9304      	str	r3, [sp, #16]
 80052cc:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 80052ce:	9207      	str	r2, [sp, #28]
 80052d0:	6915      	ldr	r5, [r2, #16]
 80052d2:	6954      	ldr	r4, [r2, #20]
 80052d4:	9606      	str	r6, [sp, #24]
 80052d6:	6893      	ldr	r3, [r2, #8]
 80052d8:	69d6      	ldr	r6, [r2, #28]
 80052da:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80052de:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80052e2:	9a04      	ldr	r2, [sp, #16]
 80052e4:	9705      	str	r7, [sp, #20]
 80052e6:	2a00      	cmp	r2, #0
 80052e8:	d07e      	beq.n	80053e8 <D24_1CH_HTONS_VOL_HP+0x128>
 80052ea:	f1a1 0b02 	sub.w	fp, r1, #2
 80052ee:	2700      	movs	r7, #0
 80052f0:	46a8      	mov	r8, r5
 80052f2:	f8cd b004 	str.w	fp, [sp, #4]
 80052f6:	4655      	mov	r5, sl
 80052f8:	46e3      	mov	fp, ip
 80052fa:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 80053f4 <D24_1CH_HTONS_VOL_HP+0x134>
 80052fe:	46ba      	mov	sl, r7
 8005300:	469c      	mov	ip, r3
 8005302:	e055      	b.n	80053b0 <D24_1CH_HTONS_VOL_HP+0xf0>
 8005304:	7802      	ldrb	r2, [r0, #0]
 8005306:	78c3      	ldrb	r3, [r0, #3]
 8005308:	7841      	ldrb	r1, [r0, #1]
 800530a:	0212      	lsls	r2, r2, #8
 800530c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005310:	440b      	add	r3, r1
 8005312:	3002      	adds	r0, #2
 8005314:	b2d9      	uxtb	r1, r3
 8005316:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800531a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800531e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005328:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800532c:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8005330:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8005334:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005338:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800533c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8005340:	4a2a      	ldr	r2, [pc, #168]	@ (80053ec <D24_1CH_HTONS_VOL_HP+0x12c>)
 8005342:	fb23 b102 	smlad	r1, r3, r2, fp
 8005346:	4a2a      	ldr	r2, [pc, #168]	@ (80053f0 <D24_1CH_HTONS_VOL_HP+0x130>)
 8005348:	fb23 cb02 	smlad	fp, r3, r2, ip
 800534c:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8005350:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005354:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8005358:	2201      	movs	r2, #1
 800535a:	fb23 f702 	smuad	r7, r3, r2
 800535e:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 8005362:	eb01 0208 	add.w	r2, r1, r8
 8005366:	1b12      	subs	r2, r2, r4
 8005368:	17d4      	asrs	r4, r2, #31
 800536a:	fba2 2305 	umull	r2, r3, r2, r5
 800536e:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8005372:	fb05 3304 	mla	r3, r5, r4, r3
 8005376:	f143 0300 	adc.w	r3, r3, #0
 800537a:	9c05      	ldr	r4, [sp, #20]
 800537c:	03da      	lsls	r2, r3, #15
 800537e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8005382:	f04f 0900 	mov.w	r9, #0
 8005386:	fbc4 8902 	smlal	r8, r9, r4, r2
 800538a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800538e:	9a01      	ldr	r2, [sp, #4]
 8005390:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005394:	9b03      	ldr	r3, [sp, #12]
 8005396:	109b      	asrs	r3, r3, #2
 8005398:	f303 030f 	ssat	r3, #16, r3
 800539c:	f822 3f02 	strh.w	r3, [r2, #2]!
 80053a0:	9b04      	ldr	r3, [sp, #16]
 80053a2:	9201      	str	r2, [sp, #4]
 80053a4:	f10a 0a01 	add.w	sl, sl, #1
 80053a8:	459a      	cmp	sl, r3
 80053aa:	44bc      	add	ip, r7
 80053ac:	460c      	mov	r4, r1
 80053ae:	d00b      	beq.n	80053c8 <D24_1CH_HTONS_VOL_HP+0x108>
 80053b0:	f01a 0f01 	tst.w	sl, #1
 80053b4:	d0a6      	beq.n	8005304 <D24_1CH_HTONS_VOL_HP+0x44>
 80053b6:	78c2      	ldrb	r2, [r0, #3]
 80053b8:	7883      	ldrb	r3, [r0, #2]
 80053ba:	f810 1b04 	ldrb.w	r1, [r0], #4
 80053be:	0212      	lsls	r2, r2, #8
 80053c0:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80053c4:	440b      	add	r3, r1
 80053c6:	e7a5      	b.n	8005314 <D24_1CH_HTONS_VOL_HP+0x54>
 80053c8:	4663      	mov	r3, ip
 80053ca:	4645      	mov	r5, r8
 80053cc:	46dc      	mov	ip, fp
 80053ce:	9807      	ldr	r0, [sp, #28]
 80053d0:	6141      	str	r1, [r0, #20]
 80053d2:	9906      	ldr	r1, [sp, #24]
 80053d4:	6083      	str	r3, [r0, #8]
 80053d6:	f8c0 c00c 	str.w	ip, [r0, #12]
 80053da:	61c6      	str	r6, [r0, #28]
 80053dc:	6105      	str	r5, [r0, #16]
 80053de:	6181      	str	r1, [r0, #24]
 80053e0:	2000      	movs	r0, #0
 80053e2:	b009      	add	sp, #36	@ 0x24
 80053e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e8:	4621      	mov	r1, r4
 80053ea:	e7f0      	b.n	80053ce <D24_1CH_HTONS_VOL_HP+0x10e>
 80053ec:	00030001 	.word	0x00030001
 80053f0:	00060007 	.word	0x00060007
 80053f4:	20000000 	.word	0x20000000

080053f8 <D32_1CH_HTONS_VOL_HP>:
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	4692      	mov	sl, r2
 80053fe:	b087      	sub	sp, #28
 8005400:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8005402:	f8da 3018 	ldr.w	r3, [sl, #24]
 8005406:	f8da 5030 	ldr.w	r5, [sl, #48]	@ 0x30
 800540a:	9304      	str	r3, [sp, #16]
 800540c:	f8da 4010 	ldr.w	r4, [sl, #16]
 8005410:	f8da 8014 	ldr.w	r8, [sl, #20]
 8005414:	f8da 601c 	ldr.w	r6, [sl, #28]
 8005418:	f8da 3008 	ldr.w	r3, [sl, #8]
 800541c:	f8da e00c 	ldr.w	lr, [sl, #12]
 8005420:	9501      	str	r5, [sp, #4]
 8005422:	f8da c020 	ldr.w	ip, [sl, #32]
 8005426:	2a00      	cmp	r2, #0
 8005428:	d07b      	beq.n	8005522 <D32_1CH_HTONS_VOL_HP+0x12a>
 800542a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800542e:	4f3e      	ldr	r7, [pc, #248]	@ (8005528 <D32_1CH_HTONS_VOL_HP+0x130>)
 8005430:	f8cd c00c 	str.w	ip, [sp, #12]
 8005434:	9202      	str	r2, [sp, #8]
 8005436:	460d      	mov	r5, r1
 8005438:	46a1      	mov	r9, r4
 800543a:	4684      	mov	ip, r0
 800543c:	f8cd a014 	str.w	sl, [sp, #20]
 8005440:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005444:	ba49      	rev16	r1, r1
 8005446:	b2c8      	uxtb	r0, r1
 8005448:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800544c:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8005450:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8005454:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005458:	0e09      	lsrs	r1, r1, #24
 800545a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800545e:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8005462:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8005466:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800546a:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800546e:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8005472:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005476:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800547a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800547e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005482:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8005486:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800548a:	4a28      	ldr	r2, [pc, #160]	@ (800552c <D32_1CH_HTONS_VOL_HP+0x134>)
 800548c:	fb20 e202 	smlad	r2, r0, r2, lr
 8005490:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8005494:	fb2a 2101 	smlad	r1, sl, r1, r2
 8005498:	4a25      	ldr	r2, [pc, #148]	@ (8005530 <D32_1CH_HTONS_VOL_HP+0x138>)
 800549a:	fb20 3302 	smlad	r3, r0, r2, r3
 800549e:	4a25      	ldr	r2, [pc, #148]	@ (8005534 <D32_1CH_HTONS_VOL_HP+0x13c>)
 80054a0:	fb2a 3e02 	smlad	lr, sl, r2, r3
 80054a4:	2301      	movs	r3, #1
 80054a6:	fb20 f003 	smuad	r0, r0, r3
 80054aa:	4b23      	ldr	r3, [pc, #140]	@ (8005538 <D32_1CH_HTONS_VOL_HP+0x140>)
 80054ac:	fb2a 0303 	smlad	r3, sl, r3, r0
 80054b0:	f5a1 4280 	sub.w	r2, r1, #16384	@ 0x4000
 80054b4:	9c03      	ldr	r4, [sp, #12]
 80054b6:	eb02 0009 	add.w	r0, r2, r9
 80054ba:	eba0 0008 	sub.w	r0, r0, r8
 80054be:	ea4f 7be0 	mov.w	fp, r0, asr #31
 80054c2:	fba0 0104 	umull	r0, r1, r0, r4
 80054c6:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 80054ca:	fb04 110b 	mla	r1, r4, fp, r1
 80054ce:	f141 0100 	adc.w	r1, r1, #0
 80054d2:	9c01      	ldr	r4, [sp, #4]
 80054d4:	0388      	lsls	r0, r1, #14
 80054d6:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80054da:	f04f 0900 	mov.w	r9, #0
 80054de:	fbc0 8904 	smlal	r8, r9, r0, r4
 80054e2:	ea4f 00a9 	mov.w	r0, r9, asr #2
 80054e6:	ea4f 0941 	mov.w	r9, r1, lsl #1
 80054ea:	f300 000f 	ssat	r0, #16, r0
 80054ee:	9902      	ldr	r1, [sp, #8]
 80054f0:	f825 0b02 	strh.w	r0, [r5], #2
 80054f4:	428d      	cmp	r5, r1
 80054f6:	4690      	mov	r8, r2
 80054f8:	d1a2      	bne.n	8005440 <D32_1CH_HTONS_VOL_HP+0x48>
 80054fa:	f8dd a014 	ldr.w	sl, [sp, #20]
 80054fe:	464c      	mov	r4, r9
 8005500:	f8ca 3008 	str.w	r3, [sl, #8]
 8005504:	9b04      	ldr	r3, [sp, #16]
 8005506:	f8ca e00c 	str.w	lr, [sl, #12]
 800550a:	2000      	movs	r0, #0
 800550c:	f8ca 601c 	str.w	r6, [sl, #28]
 8005510:	f8ca 4010 	str.w	r4, [sl, #16]
 8005514:	f8ca 2014 	str.w	r2, [sl, #20]
 8005518:	f8ca 3018 	str.w	r3, [sl, #24]
 800551c:	b007      	add	sp, #28
 800551e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005522:	4642      	mov	r2, r8
 8005524:	e7ec      	b.n	8005500 <D32_1CH_HTONS_VOL_HP+0x108>
 8005526:	bf00      	nop
 8005528:	20000000 	.word	0x20000000
 800552c:	00060003 	.word	0x00060003
 8005530:	000a000c 	.word	0x000a000c
 8005534:	000c000a 	.word	0x000c000a
 8005538:	00030006 	.word	0x00030006

0800553c <D48_1CH_HTONS_VOL_HP>:
 800553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005540:	4613      	mov	r3, r2
 8005542:	461c      	mov	r4, r3
 8005544:	b087      	sub	sp, #28
 8005546:	4625      	mov	r5, r4
 8005548:	4626      	mov	r6, r4
 800554a:	6b2d      	ldr	r5, [r5, #48]	@ 0x30
 800554c:	9205      	str	r2, [sp, #20]
 800554e:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8005550:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005554:	9501      	str	r5, [sp, #4]
 8005556:	4680      	mov	r8, r0
 8005558:	6a35      	ldr	r5, [r6, #32]
 800555a:	6918      	ldr	r0, [r3, #16]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	9304      	str	r3, [sp, #16]
 8005560:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8005564:	68a3      	ldr	r3, [r4, #8]
 8005566:	9502      	str	r5, [sp, #8]
 8005568:	68e4      	ldr	r4, [r4, #12]
 800556a:	2a00      	cmp	r2, #0
 800556c:	f000 808c 	beq.w	8005688 <D48_1CH_HTONS_VOL_HP+0x14c>
 8005570:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005574:	4d45      	ldr	r5, [pc, #276]	@ (800568c <D48_1CH_HTONS_VOL_HP+0x150>)
 8005576:	9203      	str	r2, [sp, #12]
 8005578:	468c      	mov	ip, r1
 800557a:	e898 0044 	ldmia.w	r8, {r2, r6}
 800557e:	f108 0806 	add.w	r8, r8, #6
 8005582:	ba52      	rev16	r2, r2
 8005584:	ba76      	rev16	r6, r6
 8005586:	b2d7      	uxtb	r7, r2
 8005588:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800558c:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8005590:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8005594:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8005598:	0e12      	lsrs	r2, r2, #24
 800559a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800559e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80055a2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80055a6:	fa5f fb86 	uxtb.w	fp, r6
 80055aa:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80055ae:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80055b2:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 80055b6:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 80055ba:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 80055be:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80055c2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80055c6:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80055ca:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80055ce:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80055d2:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 80055d6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80055da:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80055de:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80055e2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80055e6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80055ea:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 80055ee:	4a28      	ldr	r2, [pc, #160]	@ (8005690 <D48_1CH_HTONS_VOL_HP+0x154>)
 80055f0:	fb2a 4202 	smlad	r2, sl, r2, r4
 80055f4:	4927      	ldr	r1, [pc, #156]	@ (8005694 <D48_1CH_HTONS_VOL_HP+0x158>)
 80055f6:	fb27 2201 	smlad	r2, r7, r1, r2
 80055fa:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80055fe:	fb26 2201 	smlad	r2, r6, r1, r2
 8005602:	4925      	ldr	r1, [pc, #148]	@ (8005698 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8005604:	fb2a 3401 	smlad	r4, sl, r1, r3
 8005608:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 800560c:	fb27 4403 	smlad	r4, r7, r3, r4
 8005610:	4b22      	ldr	r3, [pc, #136]	@ (800569c <D48_1CH_HTONS_VOL_HP+0x160>)
 8005612:	fb26 4403 	smlad	r4, r6, r3, r4
 8005616:	2101      	movs	r1, #1
 8005618:	fb2a fa01 	smuad	sl, sl, r1
 800561c:	4b20      	ldr	r3, [pc, #128]	@ (80056a0 <D48_1CH_HTONS_VOL_HP+0x164>)
 800561e:	fb27 a703 	smlad	r7, r7, r3, sl
 8005622:	4b20      	ldr	r3, [pc, #128]	@ (80056a4 <D48_1CH_HTONS_VOL_HP+0x168>)
 8005624:	fb26 7303 	smlad	r3, r6, r3, r7
 8005628:	f5a2 4258 	sub.w	r2, r2, #55296	@ 0xd800
 800562c:	9e02      	ldr	r6, [sp, #8]
 800562e:	9f01      	ldr	r7, [sp, #4]
 8005630:	4410      	add	r0, r2
 8005632:	eba0 0009 	sub.w	r0, r0, r9
 8005636:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800563a:	fba0 0106 	umull	r0, r1, r0, r6
 800563e:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 8005642:	fb06 110a 	mla	r1, r6, sl, r1
 8005646:	f141 0100 	adc.w	r1, r1, #0
 800564a:	0308      	lsls	r0, r1, #12
 800564c:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 8005650:	f04f 0a00 	mov.w	sl, #0
 8005654:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8005658:	4657      	mov	r7, sl
 800565a:	10b8      	asrs	r0, r7, #2
 800565c:	f300 000f 	ssat	r0, #16, r0
 8005660:	f82c 0b02 	strh.w	r0, [ip], #2
 8005664:	0048      	lsls	r0, r1, #1
 8005666:	9903      	ldr	r1, [sp, #12]
 8005668:	458c      	cmp	ip, r1
 800566a:	4691      	mov	r9, r2
 800566c:	d185      	bne.n	800557a <D48_1CH_HTONS_VOL_HP+0x3e>
 800566e:	9d05      	ldr	r5, [sp, #20]
 8005670:	616a      	str	r2, [r5, #20]
 8005672:	9a04      	ldr	r2, [sp, #16]
 8005674:	6128      	str	r0, [r5, #16]
 8005676:	2000      	movs	r0, #0
 8005678:	60ab      	str	r3, [r5, #8]
 800567a:	60ec      	str	r4, [r5, #12]
 800567c:	f8c5 e01c 	str.w	lr, [r5, #28]
 8005680:	61aa      	str	r2, [r5, #24]
 8005682:	b007      	add	sp, #28
 8005684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005688:	464a      	mov	r2, r9
 800568a:	e7f0      	b.n	800566e <D48_1CH_HTONS_VOL_HP+0x132>
 800568c:	20000000 	.word	0x20000000
 8005690:	000f000a 	.word	0x000f000a
 8005694:	00060003 	.word	0x00060003
 8005698:	00150019 	.word	0x00150019
 800569c:	00190015 	.word	0x00190015
 80056a0:	00030006 	.word	0x00030006
 80056a4:	000a000f 	.word	0x000a000f

080056a8 <D64_1CH_HTONS_VOL_HP>:
 80056a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ac:	b089      	sub	sp, #36	@ 0x24
 80056ae:	4614      	mov	r4, r2
 80056b0:	9207      	str	r2, [sp, #28]
 80056b2:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80056b4:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80056b8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80056bc:	6992      	ldr	r2, [r2, #24]
 80056be:	9206      	str	r2, [sp, #24]
 80056c0:	68e2      	ldr	r2, [r4, #12]
 80056c2:	9201      	str	r2, [sp, #4]
 80056c4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80056c6:	9203      	str	r2, [sp, #12]
 80056c8:	6a22      	ldr	r2, [r4, #32]
 80056ca:	69e5      	ldr	r5, [r4, #28]
 80056cc:	68a6      	ldr	r6, [r4, #8]
 80056ce:	9204      	str	r2, [sp, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80b0 	beq.w	8005836 <D64_1CH_HTONS_VOL_HP+0x18e>
 80056d6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80056da:	4f58      	ldr	r7, [pc, #352]	@ (800583c <D64_1CH_HTONS_VOL_HP+0x194>)
 80056dc:	9305      	str	r3, [sp, #20]
 80056de:	9102      	str	r1, [sp, #8]
 80056e0:	f850 2b08 	ldr.w	r2, [r0], #8
 80056e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80056e8:	ba52      	rev16	r2, r2
 80056ea:	fa93 f993 	rev16.w	r9, r3
 80056ee:	b2d4      	uxtb	r4, r2
 80056f0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80056f4:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 80056f8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80056fc:	9901      	ldr	r1, [sp, #4]
 80056fe:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005702:	0e12      	lsrs	r2, r2, #24
 8005704:	44ab      	add	fp, r5
 8005706:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800570a:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800570e:	fa5f f289 	uxtb.w	r2, r9
 8005712:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8005716:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800571a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800571e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005722:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005726:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800572a:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800572e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8005732:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8005736:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800573a:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800573e:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8005742:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005746:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800574a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800574e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005752:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800575a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800575e:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8005762:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005766:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800576a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800576e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8005772:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8005776:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800577a:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800577e:	4b30      	ldr	r3, [pc, #192]	@ (8005840 <D64_1CH_HTONS_VOL_HP+0x198>)
 8005780:	fb2b 1303 	smlad	r3, fp, r3, r1
 8005784:	492f      	ldr	r1, [pc, #188]	@ (8005844 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8005786:	fb24 3301 	smlad	r3, r4, r1, r3
 800578a:	492f      	ldr	r1, [pc, #188]	@ (8005848 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800578c:	fb22 3301 	smlad	r3, r2, r1, r3
 8005790:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8005794:	fb2e 390a 	smlad	r9, lr, sl, r3
 8005798:	4b2c      	ldr	r3, [pc, #176]	@ (800584c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800579a:	fb2b 6603 	smlad	r6, fp, r3, r6
 800579e:	fb2e 6613 	smladx	r6, lr, r3, r6
 80057a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005850 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80057a4:	fb24 6603 	smlad	r6, r4, r3, r6
 80057a8:	fb22 6313 	smladx	r3, r2, r3, r6
 80057ac:	f04f 0a01 	mov.w	sl, #1
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	fb2b fb0a 	smuad	fp, fp, sl
 80057b6:	4b27      	ldr	r3, [pc, #156]	@ (8005854 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 80057b8:	fb24 ba03 	smlad	sl, r4, r3, fp
 80057bc:	4b26      	ldr	r3, [pc, #152]	@ (8005858 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 80057be:	fb22 a203 	smlad	r2, r2, r3, sl
 80057c2:	4b26      	ldr	r3, [pc, #152]	@ (800585c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 80057c4:	fb2e 2603 	smlad	r6, lr, r3, r2
 80057c8:	f5a9 3a00 	sub.w	sl, r9, #131072	@ 0x20000
 80057cc:	eb0a 020c 	add.w	r2, sl, ip
 80057d0:	9c04      	ldr	r4, [sp, #16]
 80057d2:	9903      	ldr	r1, [sp, #12]
 80057d4:	eba2 0208 	sub.w	r2, r2, r8
 80057d8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80057dc:	fba2 2304 	umull	r2, r3, r2, r4
 80057e0:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 80057e4:	fb04 3309 	mla	r3, r4, r9, r3
 80057e8:	f143 0300 	adc.w	r3, r3, #0
 80057ec:	02da      	lsls	r2, r3, #11
 80057ee:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80057f2:	f04f 0900 	mov.w	r9, #0
 80057f6:	fbc1 8902 	smlal	r8, r9, r1, r2
 80057fa:	9902      	ldr	r1, [sp, #8]
 80057fc:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8005800:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005804:	f302 020f 	ssat	r2, #16, r2
 8005808:	9b05      	ldr	r3, [sp, #20]
 800580a:	f821 2b02 	strh.w	r2, [r1], #2
 800580e:	4299      	cmp	r1, r3
 8005810:	9102      	str	r1, [sp, #8]
 8005812:	46d0      	mov	r8, sl
 8005814:	f47f af64 	bne.w	80056e0 <D64_1CH_HTONS_VOL_HP+0x38>
 8005818:	9a07      	ldr	r2, [sp, #28]
 800581a:	9901      	ldr	r1, [sp, #4]
 800581c:	60d1      	str	r1, [r2, #12]
 800581e:	9906      	ldr	r1, [sp, #24]
 8005820:	6096      	str	r6, [r2, #8]
 8005822:	2000      	movs	r0, #0
 8005824:	61d5      	str	r5, [r2, #28]
 8005826:	f8c2 c010 	str.w	ip, [r2, #16]
 800582a:	f8c2 a014 	str.w	sl, [r2, #20]
 800582e:	6191      	str	r1, [r2, #24]
 8005830:	b009      	add	sp, #36	@ 0x24
 8005832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005836:	46c2      	mov	sl, r8
 8005838:	4622      	mov	r2, r4
 800583a:	e7ee      	b.n	800581a <D64_1CH_HTONS_VOL_HP+0x172>
 800583c:	20000000 	.word	0x20000000
 8005840:	001c0015 	.word	0x001c0015
 8005844:	000f000a 	.word	0x000f000a
 8005848:	00060003 	.word	0x00060003
 800584c:	0024002a 	.word	0x0024002a
 8005850:	002e0030 	.word	0x002e0030
 8005854:	00030006 	.word	0x00030006
 8005858:	000a000f 	.word	0x000a000f
 800585c:	0015001c 	.word	0x0015001c

08005860 <D80_1CH_HTONS_VOL_HP>:
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	4613      	mov	r3, r2
 8005866:	b089      	sub	sp, #36	@ 0x24
 8005868:	4686      	mov	lr, r0
 800586a:	6918      	ldr	r0, [r3, #16]
 800586c:	9000      	str	r0, [sp, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	461c      	mov	r4, r3
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	9302      	str	r3, [sp, #8]
 8005876:	6983      	ldr	r3, [r0, #24]
 8005878:	9306      	str	r3, [sp, #24]
 800587a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800587e:	69c3      	ldr	r3, [r0, #28]
 8005880:	68c0      	ldr	r0, [r0, #12]
 8005882:	9207      	str	r2, [sp, #28]
 8005884:	9001      	str	r0, [sp, #4]
 8005886:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8005888:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800588a:	9003      	str	r0, [sp, #12]
 800588c:	6a20      	ldr	r0, [r4, #32]
 800588e:	9004      	str	r0, [sp, #16]
 8005890:	2a00      	cmp	r2, #0
 8005892:	f000 80d2 	beq.w	8005a3a <D80_1CH_HTONS_VOL_HP+0x1da>
 8005896:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800589a:	4869      	ldr	r0, [pc, #420]	@ (8005a40 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800589c:	9205      	str	r2, [sp, #20]
 800589e:	461c      	mov	r4, r3
 80058a0:	f8de 5000 	ldr.w	r5, [lr]
 80058a4:	f8de 2004 	ldr.w	r2, [lr, #4]
 80058a8:	f8de 3008 	ldr.w	r3, [lr, #8]
 80058ac:	f10e 0e0a 	add.w	lr, lr, #10
 80058b0:	ba6d      	rev16	r5, r5
 80058b2:	ba52      	rev16	r2, r2
 80058b4:	fa93 fb93 	rev16.w	fp, r3
 80058b8:	b2ee      	uxtb	r6, r5
 80058ba:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80058be:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80058c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80058c6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80058ca:	eb04 0a07 	add.w	sl, r4, r7
 80058ce:	0e2d      	lsrs	r5, r5, #24
 80058d0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80058d4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80058d8:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 80058dc:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 80058e0:	b2d5      	uxtb	r5, r2
 80058e2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80058e6:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 80058ea:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 80058ee:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80058f2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80058f6:	0e12      	lsrs	r2, r2, #24
 80058f8:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 80058fc:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8005900:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005904:	fa5f f48b 	uxtb.w	r4, fp
 8005908:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800590c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8005910:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005914:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8005918:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800591c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005920:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8005924:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8005928:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800592c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8005930:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005934:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005938:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800593c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005940:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8005944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005948:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800594c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005950:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005954:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8005958:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800595c:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8005960:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005964:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8005968:	4d36      	ldr	r5, [pc, #216]	@ (8005a44 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800596a:	9f01      	ldr	r7, [sp, #4]
 800596c:	fb23 7505 	smlad	r5, r3, r5, r7
 8005970:	4f35      	ldr	r7, [pc, #212]	@ (8005a48 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8005972:	fb29 5507 	smlad	r5, r9, r7, r5
 8005976:	4f35      	ldr	r7, [pc, #212]	@ (8005a4c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8005978:	fb28 5507 	smlad	r5, r8, r7, r5
 800597c:	4f34      	ldr	r7, [pc, #208]	@ (8005a50 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800597e:	fb22 5507 	smlad	r5, r2, r7, r5
 8005982:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8005986:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800598a:	4d32      	ldr	r5, [pc, #200]	@ (8005a54 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800598c:	fb23 cc05 	smlad	ip, r3, r5, ip
 8005990:	4d31      	ldr	r5, [pc, #196]	@ (8005a58 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8005992:	fb29 cc05 	smlad	ip, r9, r5, ip
 8005996:	f04f 154b 	mov.w	r5, #4915275	@ 0x4b004b
 800599a:	fb28 c505 	smlad	r5, r8, r5, ip
 800599e:	4f2f      	ldr	r7, [pc, #188]	@ (8005a5c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80059a0:	fb22 5507 	smlad	r5, r2, r7, r5
 80059a4:	4f2e      	ldr	r7, [pc, #184]	@ (8005a60 <D80_1CH_HTONS_VOL_HP+0x200>)
 80059a6:	fb26 5507 	smlad	r5, r6, r7, r5
 80059aa:	f04f 0a01 	mov.w	sl, #1
 80059ae:	9501      	str	r5, [sp, #4]
 80059b0:	fb23 fa0a 	smuad	sl, r3, sl
 80059b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005a64 <D80_1CH_HTONS_VOL_HP+0x204>)
 80059b6:	fb29 a903 	smlad	r9, r9, r3, sl
 80059ba:	4d2b      	ldr	r5, [pc, #172]	@ (8005a68 <D80_1CH_HTONS_VOL_HP+0x208>)
 80059bc:	fb28 9805 	smlad	r8, r8, r5, r9
 80059c0:	4d2a      	ldr	r5, [pc, #168]	@ (8005a6c <D80_1CH_HTONS_VOL_HP+0x20c>)
 80059c2:	fb22 8205 	smlad	r2, r2, r5, r8
 80059c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a70 <D80_1CH_HTONS_VOL_HP+0x210>)
 80059c8:	fb26 2c03 	smlad	ip, r6, r3, r2
 80059cc:	9b00      	ldr	r3, [sp, #0]
 80059ce:	9d04      	ldr	r5, [sp, #16]
 80059d0:	f5ab 3a7a 	sub.w	sl, fp, #256000	@ 0x3e800
 80059d4:	4453      	add	r3, sl
 80059d6:	461a      	mov	r2, r3
 80059d8:	9b02      	ldr	r3, [sp, #8]
 80059da:	f8cd a008 	str.w	sl, [sp, #8]
 80059de:	1ad2      	subs	r2, r2, r3
 80059e0:	17d7      	asrs	r7, r2, #31
 80059e2:	fba2 2305 	umull	r2, r3, r2, r5
 80059e6:	fb05 3307 	mla	r3, r5, r7, r3
 80059ea:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 80059ee:	f143 0300 	adc.w	r3, r3, #0
 80059f2:	9d03      	ldr	r5, [sp, #12]
 80059f4:	029a      	lsls	r2, r3, #10
 80059f6:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 80059fa:	2700      	movs	r7, #0
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	fbc5 6702 	smlal	r6, r7, r5, r2
 8005a02:	10ba      	asrs	r2, r7, #2
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	f302 020f 	ssat	r2, #16, r2
 8005a0a:	9b05      	ldr	r3, [sp, #20]
 8005a0c:	f821 2b02 	strh.w	r2, [r1], #2
 8005a10:	4299      	cmp	r1, r3
 8005a12:	f47f af45 	bne.w	80058a0 <D80_1CH_HTONS_VOL_HP+0x40>
 8005a16:	4623      	mov	r3, r4
 8005a18:	9907      	ldr	r1, [sp, #28]
 8005a1a:	9801      	ldr	r0, [sp, #4]
 8005a1c:	60c8      	str	r0, [r1, #12]
 8005a1e:	9a00      	ldr	r2, [sp, #0]
 8005a20:	f8c1 c008 	str.w	ip, [r1, #8]
 8005a24:	4608      	mov	r0, r1
 8005a26:	61cb      	str	r3, [r1, #28]
 8005a28:	610a      	str	r2, [r1, #16]
 8005a2a:	f8c1 a014 	str.w	sl, [r1, #20]
 8005a2e:	9906      	ldr	r1, [sp, #24]
 8005a30:	6181      	str	r1, [r0, #24]
 8005a32:	2000      	movs	r0, #0
 8005a34:	b009      	add	sp, #36	@ 0x24
 8005a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3a:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005a3e:	e7eb      	b.n	8005a18 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8005a40:	20000000 	.word	0x20000000
 8005a44:	002d0024 	.word	0x002d0024
 8005a48:	001c0015 	.word	0x001c0015
 8005a4c:	000f000a 	.word	0x000f000a
 8005a50:	00060003 	.word	0x00060003
 8005a54:	0037003f 	.word	0x0037003f
 8005a58:	00450049 	.word	0x00450049
 8005a5c:	00490045 	.word	0x00490045
 8005a60:	003f0037 	.word	0x003f0037
 8005a64:	00030006 	.word	0x00030006
 8005a68:	000a000f 	.word	0x000a000f
 8005a6c:	0015001c 	.word	0x0015001c
 8005a70:	0024002d 	.word	0x0024002d

08005a74 <D128_1CH_HTONS_VOL_HP>:
 8005a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a78:	b093      	sub	sp, #76	@ 0x4c
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	9211      	str	r2, [sp, #68]	@ 0x44
 8005a7e:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8005a80:	6912      	ldr	r2, [r2, #16]
 8005a82:	9203      	str	r2, [sp, #12]
 8005a84:	4622      	mov	r2, r4
 8005a86:	4615      	mov	r5, r2
 8005a88:	6964      	ldr	r4, [r4, #20]
 8005a8a:	9406      	str	r4, [sp, #24]
 8005a8c:	4614      	mov	r4, r2
 8005a8e:	6992      	ldr	r2, [r2, #24]
 8005a90:	9210      	str	r2, [sp, #64]	@ 0x40
 8005a92:	68ea      	ldr	r2, [r5, #12]
 8005a94:	9204      	str	r2, [sp, #16]
 8005a96:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8005a98:	69e6      	ldr	r6, [r4, #28]
 8005a9a:	920d      	str	r2, [sp, #52]	@ 0x34
 8005a9c:	68a4      	ldr	r4, [r4, #8]
 8005a9e:	6a2a      	ldr	r2, [r5, #32]
 8005aa0:	9405      	str	r4, [sp, #20]
 8005aa2:	920e      	str	r2, [sp, #56]	@ 0x38
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8145 	beq.w	8005d34 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8005aaa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8005aae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ab0:	f8df 82dc 	ldr.w	r8, [pc, #732]	@ 8005d90 <D128_1CH_HTONS_VOL_HP+0x31c>
 8005ab4:	9107      	str	r1, [sp, #28]
 8005ab6:	f100 0310 	add.w	r3, r0, #16
 8005aba:	4699      	mov	r9, r3
 8005abc:	f1a9 0110 	sub.w	r1, r9, #16
 8005ac0:	c90e      	ldmia	r1, {r1, r2, r3}
 8005ac2:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8005ac6:	ba49      	rev16	r1, r1
 8005ac8:	ba52      	rev16	r2, r2
 8005aca:	ba5b      	rev16	r3, r3
 8005acc:	fa90 fa90 	rev16.w	sl, r0
 8005ad0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8005ad4:	b2cc      	uxtb	r4, r1
 8005ad6:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8005ada:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8005ade:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8005ae2:	0e09      	lsrs	r1, r1, #24
 8005ae4:	4426      	add	r6, r4
 8005ae6:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8005aea:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8005aee:	b2d0      	uxtb	r0, r2
 8005af0:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8005af4:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8005af8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005afc:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8005b00:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8005b04:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8005b08:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8005b0c:	0e12      	lsrs	r2, r2, #24
 8005b0e:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005b12:	9701      	str	r7, [sp, #4]
 8005b14:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8005b18:	4627      	mov	r7, r4
 8005b1a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8005b1e:	9702      	str	r7, [sp, #8]
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8005b26:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8005b2a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8005b2e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005b32:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8005b36:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005b3a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8005b3e:	0e1b      	lsrs	r3, r3, #24
 8005b40:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8005b44:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8005b48:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8005b4c:	fa5f f38a 	uxtb.w	r3, sl
 8005b50:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005b54:	960a      	str	r6, [sp, #40]	@ 0x28
 8005b56:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8005b5a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8005b5e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005b62:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8005b66:	950b      	str	r5, [sp, #44]	@ 0x2c
 8005b68:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005b6c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8005b70:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005b74:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8005b78:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8005b7c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005b80:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005b84:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005b88:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8005b8c:	9308      	str	r3, [sp, #32]
 8005b8e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005b92:	9b01      	ldr	r3, [sp, #4]
 8005b94:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005b98:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8005b9c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005ba0:	9b02      	ldr	r3, [sp, #8]
 8005ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba6:	9302      	str	r3, [sp, #8]
 8005ba8:	9b08      	ldr	r3, [sp, #32]
 8005baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bae:	9308      	str	r3, [sp, #32]
 8005bb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bb2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005bb6:	950c      	str	r5, [sp, #48]	@ 0x30
 8005bb8:	461d      	mov	r5, r3
 8005bba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bbc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005bc0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005bc4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8005bc8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8005bcc:	9301      	str	r3, [sp, #4]
 8005bce:	9b02      	ldr	r3, [sp, #8]
 8005bd0:	9202      	str	r2, [sp, #8]
 8005bd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bd4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005bd6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005bda:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005bde:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005be2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005be6:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005bea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005bee:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8005bf2:	9b08      	ldr	r3, [sp, #32]
 8005bf4:	9f01      	ldr	r7, [sp, #4]
 8005bf6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005bfa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005bfe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005c02:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005c06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005c0a:	46be      	mov	lr, r7
 8005c0c:	0a96      	lsrs	r6, r2, #10
 8005c0e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8005c12:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8005c16:	4f49      	ldr	r7, [pc, #292]	@ (8005d3c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8005c18:	9a04      	ldr	r2, [sp, #16]
 8005c1a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8005c1e:	4a48      	ldr	r2, [pc, #288]	@ (8005d40 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8005c20:	fb2a ee02 	smlad	lr, sl, r2, lr
 8005c24:	4a47      	ldr	r2, [pc, #284]	@ (8005d44 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8005c26:	fb21 ee02 	smlad	lr, r1, r2, lr
 8005c2a:	4a47      	ldr	r2, [pc, #284]	@ (8005d48 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8005c2c:	fb24 ee02 	smlad	lr, r4, r2, lr
 8005c30:	4a46      	ldr	r2, [pc, #280]	@ (8005d4c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8005c32:	9f02      	ldr	r7, [sp, #8]
 8005c34:	fb27 ee02 	smlad	lr, r7, r2, lr
 8005c38:	4a45      	ldr	r2, [pc, #276]	@ (8005d50 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8005c3a:	fb20 ee02 	smlad	lr, r0, r2, lr
 8005c3e:	4a45      	ldr	r2, [pc, #276]	@ (8005d54 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8005c40:	fb23 e702 	smlad	r7, r3, r2, lr
 8005c44:	f44f 3e80 	mov.w	lr, #65536	@ 0x10000
 8005c48:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8005c4c:	9f01      	ldr	r7, [sp, #4]
 8005c4e:	4a42      	ldr	r2, [pc, #264]	@ (8005d58 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8005c50:	46bc      	mov	ip, r7
 8005c52:	9f05      	ldr	r7, [sp, #20]
 8005c54:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8005c58:	4a40      	ldr	r2, [pc, #256]	@ (8005d5c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8005c5a:	fb2a cc02 	smlad	ip, sl, r2, ip
 8005c5e:	4f40      	ldr	r7, [pc, #256]	@ (8005d60 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8005c60:	fb21 cc07 	smlad	ip, r1, r7, ip
 8005c64:	4f3f      	ldr	r7, [pc, #252]	@ (8005d64 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8005c66:	fb24 cc07 	smlad	ip, r4, r7, ip
 8005c6a:	4f3f      	ldr	r7, [pc, #252]	@ (8005d68 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8005c6c:	9a02      	ldr	r2, [sp, #8]
 8005c6e:	fb22 cc07 	smlad	ip, r2, r7, ip
 8005c72:	4f3e      	ldr	r7, [pc, #248]	@ (8005d6c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8005c74:	fb20 cc07 	smlad	ip, r0, r7, ip
 8005c78:	4f3d      	ldr	r7, [pc, #244]	@ (8005d70 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8005c7a:	fb23 c707 	smlad	r7, r3, r7, ip
 8005c7e:	f8df c114 	ldr.w	ip, [pc, #276]	@ 8005d94 <D128_1CH_HTONS_VOL_HP+0x320>
 8005c82:	fb25 720c 	smlad	r2, r5, ip, r7
 8005c86:	f04f 0b01 	mov.w	fp, #1
 8005c8a:	9204      	str	r2, [sp, #16]
 8005c8c:	9f01      	ldr	r7, [sp, #4]
 8005c8e:	fb27 fb0b 	smuad	fp, r7, fp
 8005c92:	4f38      	ldr	r7, [pc, #224]	@ (8005d74 <D128_1CH_HTONS_VOL_HP+0x300>)
 8005c94:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005c98:	4f37      	ldr	r7, [pc, #220]	@ (8005d78 <D128_1CH_HTONS_VOL_HP+0x304>)
 8005c9a:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005c9e:	4f37      	ldr	r7, [pc, #220]	@ (8005d7c <D128_1CH_HTONS_VOL_HP+0x308>)
 8005ca0:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005ca4:	4f36      	ldr	r7, [pc, #216]	@ (8005d80 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8005ca6:	9a02      	ldr	r2, [sp, #8]
 8005ca8:	fb22 a707 	smlad	r7, r2, r7, sl
 8005cac:	4a35      	ldr	r2, [pc, #212]	@ (8005d84 <D128_1CH_HTONS_VOL_HP+0x310>)
 8005cae:	fb20 7702 	smlad	r7, r0, r2, r7
 8005cb2:	4a35      	ldr	r2, [pc, #212]	@ (8005d88 <D128_1CH_HTONS_VOL_HP+0x314>)
 8005cb4:	fb23 7702 	smlad	r7, r3, r2, r7
 8005cb8:	4b34      	ldr	r3, [pc, #208]	@ (8005d8c <D128_1CH_HTONS_VOL_HP+0x318>)
 8005cba:	fb25 7303 	smlad	r3, r5, r3, r7
 8005cbe:	9305      	str	r3, [sp, #20]
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8005cc4:	f5ae 1e80 	sub.w	lr, lr, #1048576	@ 0x100000
 8005cc8:	4473      	add	r3, lr
 8005cca:	461a      	mov	r2, r3
 8005ccc:	9b06      	ldr	r3, [sp, #24]
 8005cce:	f8cd e018 	str.w	lr, [sp, #24]
 8005cd2:	1ad2      	subs	r2, r2, r3
 8005cd4:	17d1      	asrs	r1, r2, #31
 8005cd6:	fba2 2304 	umull	r2, r3, r2, r4
 8005cda:	fb04 3301 	mla	r3, r4, r1, r3
 8005cde:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8005ce2:	f143 0300 	adc.w	r3, r3, #0
 8005ce6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8005ce8:	021a      	lsls	r2, r3, #8
 8005cea:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005cee:	2100      	movs	r1, #0
 8005cf0:	fbc4 0102 	smlal	r0, r1, r4, r2
 8005cf4:	108a      	asrs	r2, r1, #2
 8005cf6:	9907      	ldr	r1, [sp, #28]
 8005cf8:	f302 020f 	ssat	r2, #16, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	f821 2b02 	strh.w	r2, [r1], #2
 8005d02:	9303      	str	r3, [sp, #12]
 8005d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d06:	9107      	str	r1, [sp, #28]
 8005d08:	4299      	cmp	r1, r3
 8005d0a:	f109 0910 	add.w	r9, r9, #16
 8005d0e:	f47f aed5 	bne.w	8005abc <D128_1CH_HTONS_VOL_HP+0x48>
 8005d12:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005d14:	9905      	ldr	r1, [sp, #20]
 8005d16:	6091      	str	r1, [r2, #8]
 8005d18:	9904      	ldr	r1, [sp, #16]
 8005d1a:	60d1      	str	r1, [r2, #12]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	61d6      	str	r6, [r2, #28]
 8005d20:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005d22:	9a03      	ldr	r2, [sp, #12]
 8005d24:	611a      	str	r2, [r3, #16]
 8005d26:	2000      	movs	r0, #0
 8005d28:	f8c3 e014 	str.w	lr, [r3, #20]
 8005d2c:	6199      	str	r1, [r3, #24]
 8005d2e:	b013      	add	sp, #76	@ 0x4c
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d34:	f8dd e018 	ldr.w	lr, [sp, #24]
 8005d38:	e7eb      	b.n	8005d12 <D128_1CH_HTONS_VOL_HP+0x29e>
 8005d3a:	bf00      	nop
 8005d3c:	00780069 	.word	0x00780069
 8005d40:	005b004e 	.word	0x005b004e
 8005d44:	00420037 	.word	0x00420037
 8005d48:	002d0024 	.word	0x002d0024
 8005d4c:	001c0015 	.word	0x001c0015
 8005d50:	000f000a 	.word	0x000f000a
 8005d54:	00060003 	.word	0x00060003
 8005d58:	00880096 	.word	0x00880096
 8005d5c:	00a200ac 	.word	0x00a200ac
 8005d60:	00b400ba 	.word	0x00b400ba
 8005d64:	00be00c0 	.word	0x00be00c0
 8005d68:	00c000be 	.word	0x00c000be
 8005d6c:	00ba00b4 	.word	0x00ba00b4
 8005d70:	00ac00a2 	.word	0x00ac00a2
 8005d74:	00030006 	.word	0x00030006
 8005d78:	000a000f 	.word	0x000a000f
 8005d7c:	0015001c 	.word	0x0015001c
 8005d80:	0024002d 	.word	0x0024002d
 8005d84:	00370042 	.word	0x00370042
 8005d88:	004e005b 	.word	0x004e005b
 8005d8c:	00690078 	.word	0x00690078
 8005d90:	20000000 	.word	0x20000000
 8005d94:	00960088 	.word	0x00960088

08005d98 <PDM_Filter_Init>:
 8005d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9a:	2240      	movs	r2, #64	@ 0x40
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	2100      	movs	r1, #0
 8005da0:	300c      	adds	r0, #12
 8005da2:	f000 f9b3 	bl	800610c <memset>
 8005da6:	493b      	ldr	r1, [pc, #236]	@ (8005e94 <PDM_Filter_Init+0xfc>)
 8005da8:	483b      	ldr	r0, [pc, #236]	@ (8005e98 <PDM_Filter_Init+0x100>)
 8005daa:	f000 f971 	bl	8006090 <CRC_Lock>
 8005dae:	8822      	ldrh	r2, [r4, #0]
 8005db0:	8963      	ldrh	r3, [r4, #10]
 8005db2:	4938      	ldr	r1, [pc, #224]	@ (8005e94 <PDM_Filter_Init+0xfc>)
 8005db4:	8925      	ldrh	r5, [r4, #8]
 8005db6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8005db8:	2801      	cmp	r0, #1
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	bf18      	it	ne
 8005dc0:	2100      	movne	r1, #0
 8005dc2:	2a01      	cmp	r2, #1
 8005dc4:	6461      	str	r1, [r4, #68]	@ 0x44
 8005dc6:	86e5      	strh	r5, [r4, #54]	@ 0x36
 8005dc8:	61a3      	str	r3, [r4, #24]
 8005dca:	6123      	str	r3, [r4, #16]
 8005dcc:	6163      	str	r3, [r4, #20]
 8005dce:	60e3      	str	r3, [r4, #12]
 8005dd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005dd2:	61e3      	str	r3, [r4, #28]
 8005dd4:	6223      	str	r3, [r4, #32]
 8005dd6:	6423      	str	r3, [r4, #64]	@ 0x40
 8005dd8:	d918      	bls.n	8005e0c <PDM_Filter_Init+0x74>
 8005dda:	2003      	movs	r0, #3
 8005ddc:	2302      	movs	r3, #2
 8005dde:	8862      	ldrh	r2, [r4, #2]
 8005de0:	2a01      	cmp	r2, #1
 8005de2:	d91d      	bls.n	8005e20 <PDM_Filter_Init+0x88>
 8005de4:	2140      	movs	r1, #64	@ 0x40
 8005de6:	2300      	movs	r3, #0
 8005de8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005dea:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8005dee:	6862      	ldr	r2, [r4, #4]
 8005df0:	bf04      	itt	eq
 8005df2:	6421      	streq	r1, [r4, #64]	@ 0x40
 8005df4:	460b      	moveq	r3, r1
 8005df6:	b11a      	cbz	r2, 8005e00 <PDM_Filter_Init+0x68>
 8005df8:	f043 0310 	orr.w	r3, r3, #16
 8005dfc:	6423      	str	r3, [r4, #64]	@ 0x40
 8005dfe:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8005e00:	2200      	movs	r2, #0
 8005e02:	8722      	strh	r2, [r4, #56]	@ 0x38
 8005e04:	b908      	cbnz	r0, 8005e0a <PDM_Filter_Init+0x72>
 8005e06:	3380      	adds	r3, #128	@ 0x80
 8005e08:	6423      	str	r3, [r4, #64]	@ 0x40
 8005e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e0c:	4d23      	ldr	r5, [pc, #140]	@ (8005e9c <PDM_Filter_Init+0x104>)
 8005e0e:	d010      	beq.n	8005e32 <PDM_Filter_Init+0x9a>
 8005e10:	782a      	ldrb	r2, [r5, #0]
 8005e12:	2a01      	cmp	r2, #1
 8005e14:	d027      	beq.n	8005e66 <PDM_Filter_Init+0xce>
 8005e16:	8862      	ldrh	r2, [r4, #2]
 8005e18:	2a01      	cmp	r2, #1
 8005e1a:	f04f 0001 	mov.w	r0, #1
 8005e1e:	d8e1      	bhi.n	8005de4 <PDM_Filter_Init+0x4c>
 8005e20:	d001      	beq.n	8005e26 <PDM_Filter_Init+0x8e>
 8005e22:	4618      	mov	r0, r3
 8005e24:	e7de      	b.n	8005de4 <PDM_Filter_Init+0x4c>
 8005e26:	2220      	movs	r2, #32
 8005e28:	4618      	mov	r0, r3
 8005e2a:	6422      	str	r2, [r4, #64]	@ 0x40
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	2160      	movs	r1, #96	@ 0x60
 8005e30:	e7da      	b.n	8005de8 <PDM_Filter_Init+0x50>
 8005e32:	7829      	ldrb	r1, [r5, #0]
 8005e34:	2900      	cmp	r1, #0
 8005e36:	d1ee      	bne.n	8005e16 <PDM_Filter_Init+0x7e>
 8005e38:	4919      	ldr	r1, [pc, #100]	@ (8005ea0 <PDM_Filter_Init+0x108>)
 8005e3a:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8005ea8 <PDM_Filter_Init+0x110>
 8005e3e:	4f19      	ldr	r7, [pc, #100]	@ (8005ea4 <PDM_Filter_Init+0x10c>)
 8005e40:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8005e44:	684a      	ldr	r2, [r1, #4]
 8005e46:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8005e4a:	ea02 0007 	and.w	r0, r2, r7
 8005e4e:	4303      	orrs	r3, r0
 8005e50:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005e54:	4413      	add	r3, r2
 8005e56:	f841 3f04 	str.w	r3, [r1, #4]!
 8005e5a:	428e      	cmp	r6, r1
 8005e5c:	d1f2      	bne.n	8005e44 <PDM_Filter_Init+0xac>
 8005e5e:	2001      	movs	r0, #1
 8005e60:	7028      	strb	r0, [r5, #0]
 8005e62:	2300      	movs	r3, #0
 8005e64:	e7bb      	b.n	8005dde <PDM_Filter_Init+0x46>
 8005e66:	490e      	ldr	r1, [pc, #56]	@ (8005ea0 <PDM_Filter_Init+0x108>)
 8005e68:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8005ea8 <PDM_Filter_Init+0x110>
 8005e6c:	4f0d      	ldr	r7, [pc, #52]	@ (8005ea4 <PDM_Filter_Init+0x10c>)
 8005e6e:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8005e72:	684a      	ldr	r2, [r1, #4]
 8005e74:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8005e78:	ea02 0007 	and.w	r0, r2, r7
 8005e7c:	4303      	orrs	r3, r0
 8005e7e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005e82:	4413      	add	r3, r2
 8005e84:	f841 3f04 	str.w	r3, [r1, #4]!
 8005e88:	428e      	cmp	r6, r1
 8005e8a:	d1f2      	bne.n	8005e72 <PDM_Filter_Init+0xda>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	702b      	strb	r3, [r5, #0]
 8005e90:	e7c1      	b.n	8005e16 <PDM_Filter_Init+0x7e>
 8005e92:	bf00      	nop
 8005e94:	b5e8b5cd 	.word	0xb5e8b5cd
 8005e98:	f407a5c2 	.word	0xf407a5c2
 8005e9c:	2000047c 	.word	0x2000047c
 8005ea0:	1ffffffc 	.word	0x1ffffffc
 8005ea4:	000ffc00 	.word	0x000ffc00
 8005ea8:	3ff00000 	.word	0x3ff00000

08005eac <PDM_Filter_setConfig>:
 8005eac:	4b66      	ldr	r3, [pc, #408]	@ (8006048 <PDM_Filter_setConfig+0x19c>)
 8005eae:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d001      	beq.n	8005eb8 <PDM_Filter_setConfig+0xc>
 8005eb4:	2004      	movs	r0, #4
 8005eb6:	4770      	bx	lr
 8005eb8:	b530      	push	{r4, r5, lr}
 8005eba:	880a      	ldrh	r2, [r1, #0]
 8005ebc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005ebe:	ed2d 8b04 	vpush	{d8-d9}
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	460d      	mov	r5, r1
 8005ec6:	1e51      	subs	r1, r2, #1
 8005ec8:	f423 7080 	bic.w	r0, r3, #256	@ 0x100
 8005ecc:	2906      	cmp	r1, #6
 8005ece:	b083      	sub	sp, #12
 8005ed0:	6420      	str	r0, [r4, #64]	@ 0x40
 8005ed2:	d91a      	bls.n	8005f0a <PDM_Filter_setConfig+0x5e>
 8005ed4:	2008      	movs	r0, #8
 8005ed6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 8005eda:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005ede:	4299      	cmp	r1, r3
 8005ee0:	d07e      	beq.n	8005fe0 <PDM_Filter_setConfig+0x134>
 8005ee2:	f113 0f0c 	cmn.w	r3, #12
 8005ee6:	da2a      	bge.n	8005f3e <PDM_Filter_setConfig+0x92>
 8005ee8:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 8005eec:	3040      	adds	r0, #64	@ 0x40
 8005eee:	80ab      	strh	r3, [r5, #4]
 8005ef0:	8622      	strh	r2, [r4, #48]	@ 0x30
 8005ef2:	886b      	ldrh	r3, [r5, #2]
 8005ef4:	8663      	strh	r3, [r4, #50]	@ 0x32
 8005ef6:	b920      	cbnz	r0, 8005f02 <PDM_Filter_setConfig+0x56>
 8005ef8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005efe:	6423      	str	r3, [r4, #64]	@ 0x40
 8005f00:	2000      	movs	r0, #0
 8005f02:	b003      	add	sp, #12
 8005f04:	ecbd 8b04 	vpop	{d8-d9}
 8005f08:	bd30      	pop	{r4, r5, pc}
 8005f0a:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 8005f0c:	4291      	cmp	r1, r2
 8005f0e:	d06c      	beq.n	8005fea <PDM_Filter_setConfig+0x13e>
 8005f10:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8005f14:	f023 0301 	bic.w	r3, r3, #1
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f003 0170 	and.w	r1, r3, #112	@ 0x70
 8005f1e:	6423      	str	r3, [r4, #64]	@ 0x40
 8005f20:	2970      	cmp	r1, #112	@ 0x70
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f2a:	d066      	beq.n	8005ffa <PDM_Filter_setConfig+0x14e>
 8005f2c:	2b06      	cmp	r3, #6
 8005f2e:	f200 8089 	bhi.w	8006044 <PDM_Filter_setConfig+0x198>
 8005f32:	e8df f003 	tbb	[pc, r3]
 8005f36:	4f52      	.short	0x4f52
 8005f38:	3d43494c 	.word	0x3d43494c
 8005f3c:	46          	.byte	0x46
 8005f3d:	00          	.byte	0x00
 8005f3e:	2b33      	cmp	r3, #51	@ 0x33
 8005f40:	dc32      	bgt.n	8005fa8 <PDM_Filter_setConfig+0xfc>
 8005f42:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005f44:	f002 020f 	and.w	r2, r2, #15
 8005f48:	3a01      	subs	r2, #1
 8005f4a:	2a06      	cmp	r2, #6
 8005f4c:	d872      	bhi.n	8006034 <PDM_Filter_setConfig+0x188>
 8005f4e:	493f      	ldr	r1, [pc, #252]	@ (800604c <PDM_Filter_setConfig+0x1a0>)
 8005f50:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005f54:	ed92 9a00 	vldr	s18, [r2]
 8005f58:	ed92 8a07 	vldr	s16, [r2, #28]
 8005f5c:	9001      	str	r0, [sp, #4]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f66:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8005f6a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8005f6e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8005f72:	f000 f8fd 	bl	8006170 <powf>
 8005f76:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8006050 <PDM_Filter_setConfig+0x1a4>
 8005f7a:	eef0 8a40 	vmov.f32	s17, s0
 8005f7e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8005f82:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8005f86:	f000 f8f3 	bl	8006170 <powf>
 8005f8a:	ee28 8a28 	vmul.f32	s16, s16, s17
 8005f8e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005f92:	f000 f94f 	bl	8006234 <roundf>
 8005f96:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8005f9a:	88ab      	ldrh	r3, [r5, #4]
 8005f9c:	882a      	ldrh	r2, [r5, #0]
 8005f9e:	9801      	ldr	r0, [sp, #4]
 8005fa0:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 8005fa4:	8723      	strh	r3, [r4, #56]	@ 0x38
 8005fa6:	e7a3      	b.n	8005ef0 <PDM_Filter_setConfig+0x44>
 8005fa8:	2333      	movs	r3, #51	@ 0x33
 8005faa:	3040      	adds	r0, #64	@ 0x40
 8005fac:	80ab      	strh	r3, [r5, #4]
 8005fae:	e79f      	b.n	8005ef0 <PDM_Filter_setConfig+0x44>
 8005fb0:	4b28      	ldr	r3, [pc, #160]	@ (8006054 <PDM_Filter_setConfig+0x1a8>)
 8005fb2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005fb4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005fb8:	2000      	movs	r0, #0
 8005fba:	e792      	b.n	8005ee2 <PDM_Filter_setConfig+0x36>
 8005fbc:	4b26      	ldr	r3, [pc, #152]	@ (8006058 <PDM_Filter_setConfig+0x1ac>)
 8005fbe:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005fc0:	e7f8      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 8005fc2:	4b26      	ldr	r3, [pc, #152]	@ (800605c <PDM_Filter_setConfig+0x1b0>)
 8005fc4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005fc6:	e7f5      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 8005fc8:	4b25      	ldr	r3, [pc, #148]	@ (8006060 <PDM_Filter_setConfig+0x1b4>)
 8005fca:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005fcc:	e7f2      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 8005fce:	4b25      	ldr	r3, [pc, #148]	@ (8006064 <PDM_Filter_setConfig+0x1b8>)
 8005fd0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005fd2:	e7ef      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 8005fd4:	4b24      	ldr	r3, [pc, #144]	@ (8006068 <PDM_Filter_setConfig+0x1bc>)
 8005fd6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005fd8:	e7ec      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 8005fda:	4b24      	ldr	r3, [pc, #144]	@ (800606c <PDM_Filter_setConfig+0x1c0>)
 8005fdc:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005fde:	e7e9      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 8005fe0:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	f47f af7d 	bne.w	8005ee2 <PDM_Filter_setConfig+0x36>
 8005fe8:	e783      	b.n	8005ef2 <PDM_Filter_setConfig+0x46>
 8005fea:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005fee:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 8005ff2:	4299      	cmp	r1, r3
 8005ff4:	d023      	beq.n	800603e <PDM_Filter_setConfig+0x192>
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	e773      	b.n	8005ee2 <PDM_Filter_setConfig+0x36>
 8005ffa:	2b06      	cmp	r3, #6
 8005ffc:	d822      	bhi.n	8006044 <PDM_Filter_setConfig+0x198>
 8005ffe:	e8df f003 	tbb	[pc, r3]
 8006002:	1316      	.short	0x1316
 8006004:	070a0d10 	.word	0x070a0d10
 8006008:	04          	.byte	0x04
 8006009:	00          	.byte	0x00
 800600a:	4b19      	ldr	r3, [pc, #100]	@ (8006070 <PDM_Filter_setConfig+0x1c4>)
 800600c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800600e:	e7d1      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 8006010:	4b18      	ldr	r3, [pc, #96]	@ (8006074 <PDM_Filter_setConfig+0x1c8>)
 8006012:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006014:	e7ce      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 8006016:	4b18      	ldr	r3, [pc, #96]	@ (8006078 <PDM_Filter_setConfig+0x1cc>)
 8006018:	64a3      	str	r3, [r4, #72]	@ 0x48
 800601a:	e7cb      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 800601c:	4b17      	ldr	r3, [pc, #92]	@ (800607c <PDM_Filter_setConfig+0x1d0>)
 800601e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006020:	e7c8      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 8006022:	4b17      	ldr	r3, [pc, #92]	@ (8006080 <PDM_Filter_setConfig+0x1d4>)
 8006024:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006026:	e7c5      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 8006028:	4b16      	ldr	r3, [pc, #88]	@ (8006084 <PDM_Filter_setConfig+0x1d8>)
 800602a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800602c:	e7c2      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 800602e:	4b16      	ldr	r3, [pc, #88]	@ (8006088 <PDM_Filter_setConfig+0x1dc>)
 8006030:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006032:	e7bf      	b.n	8005fb4 <PDM_Filter_setConfig+0x108>
 8006034:	ed9f 8a15 	vldr	s16, [pc, #84]	@ 800608c <PDM_Filter_setConfig+0x1e0>
 8006038:	eeb0 9a48 	vmov.f32	s18, s16
 800603c:	e78e      	b.n	8005f5c <PDM_Filter_setConfig+0xb0>
 800603e:	886b      	ldrh	r3, [r5, #2]
 8006040:	8663      	strh	r3, [r4, #50]	@ 0x32
 8006042:	e759      	b.n	8005ef8 <PDM_Filter_setConfig+0x4c>
 8006044:	2000      	movs	r0, #0
 8006046:	e746      	b.n	8005ed6 <PDM_Filter_setConfig+0x2a>
 8006048:	b5e8b5cd 	.word	0xb5e8b5cd
 800604c:	08006964 	.word	0x08006964
 8006050:	42000000 	.word	0x42000000
 8006054:	08004419 	.word	0x08004419
 8006058:	080042f9 	.word	0x080042f9
 800605c:	080045a9 	.word	0x080045a9
 8006060:	08004ded 	.word	0x08004ded
 8006064:	08004b4d 	.word	0x08004b4d
 8006068:	0800492d 	.word	0x0800492d
 800606c:	08004741 	.word	0x08004741
 8006070:	080053f9 	.word	0x080053f9
 8006074:	080052c1 	.word	0x080052c1
 8006078:	080051dd 	.word	0x080051dd
 800607c:	08005a75 	.word	0x08005a75
 8006080:	08005861 	.word	0x08005861
 8006084:	080056a9 	.word	0x080056a9
 8006088:	0800553d 	.word	0x0800553d
 800608c:	00000000 	.word	0x00000000

08006090 <CRC_Lock>:
 8006090:	4a17      	ldr	r2, [pc, #92]	@ (80060f0 <CRC_Lock+0x60>)
 8006092:	6813      	ldr	r3, [r2, #0]
 8006094:	b410      	push	{r4}
 8006096:	f023 0301 	bic.w	r3, r3, #1
 800609a:	4c16      	ldr	r4, [pc, #88]	@ (80060f4 <CRC_Lock+0x64>)
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	b933      	cbnz	r3, 80060b0 <CRC_Lock+0x20>
 80060a2:	4b15      	ldr	r3, [pc, #84]	@ (80060f8 <CRC_Lock+0x68>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060aa:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80060ae:	d00f      	beq.n	80060d0 <CRC_Lock+0x40>
 80060b0:	4a12      	ldr	r2, [pc, #72]	@ (80060fc <CRC_Lock+0x6c>)
 80060b2:	2301      	movs	r3, #1
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	6813      	ldr	r3, [r2, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1fc      	bne.n	80060b6 <CRC_Lock+0x26>
 80060bc:	4b10      	ldr	r3, [pc, #64]	@ (8006100 <CRC_Lock+0x70>)
 80060be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060c2:	6018      	str	r0, [r3, #0]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	1a08      	subs	r0, r1, r0
 80060c8:	fab0 f080 	clz	r0, r0
 80060cc:	0940      	lsrs	r0, r0, #5
 80060ce:	4770      	bx	lr
 80060d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006104 <CRC_Lock+0x74>)
 80060d2:	2301      	movs	r3, #1
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	6813      	ldr	r3, [r2, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1fc      	bne.n	80060d6 <CRC_Lock+0x46>
 80060dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <CRC_Lock+0x78>)
 80060de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e2:	6018      	str	r0, [r3, #0]
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	1a40      	subs	r0, r0, r1
 80060e8:	fab0 f080 	clz	r0, r0
 80060ec:	0940      	lsrs	r0, r0, #5
 80060ee:	4770      	bx	lr
 80060f0:	e0002000 	.word	0xe0002000
 80060f4:	e0042000 	.word	0xe0042000
 80060f8:	5c001000 	.word	0x5c001000
 80060fc:	40023008 	.word	0x40023008
 8006100:	40023000 	.word	0x40023000
 8006104:	58024c08 	.word	0x58024c08
 8006108:	58024c00 	.word	0x58024c00

0800610c <memset>:
 800610c:	4402      	add	r2, r0
 800610e:	4603      	mov	r3, r0
 8006110:	4293      	cmp	r3, r2
 8006112:	d100      	bne.n	8006116 <memset+0xa>
 8006114:	4770      	bx	lr
 8006116:	f803 1b01 	strb.w	r1, [r3], #1
 800611a:	e7f9      	b.n	8006110 <memset+0x4>

0800611c <__errno>:
 800611c:	4b01      	ldr	r3, [pc, #4]	@ (8006124 <__errno+0x8>)
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000410 	.word	0x20000410

08006128 <__libc_init_array>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4d0d      	ldr	r5, [pc, #52]	@ (8006160 <__libc_init_array+0x38>)
 800612c:	4c0d      	ldr	r4, [pc, #52]	@ (8006164 <__libc_init_array+0x3c>)
 800612e:	1b64      	subs	r4, r4, r5
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	2600      	movs	r6, #0
 8006134:	42a6      	cmp	r6, r4
 8006136:	d109      	bne.n	800614c <__libc_init_array+0x24>
 8006138:	4d0b      	ldr	r5, [pc, #44]	@ (8006168 <__libc_init_array+0x40>)
 800613a:	4c0c      	ldr	r4, [pc, #48]	@ (800616c <__libc_init_array+0x44>)
 800613c:	f000 fc06 	bl	800694c <_init>
 8006140:	1b64      	subs	r4, r4, r5
 8006142:	10a4      	asrs	r4, r4, #2
 8006144:	2600      	movs	r6, #0
 8006146:	42a6      	cmp	r6, r4
 8006148:	d105      	bne.n	8006156 <__libc_init_array+0x2e>
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006150:	4798      	blx	r3
 8006152:	3601      	adds	r6, #1
 8006154:	e7ee      	b.n	8006134 <__libc_init_array+0xc>
 8006156:	f855 3b04 	ldr.w	r3, [r5], #4
 800615a:	4798      	blx	r3
 800615c:	3601      	adds	r6, #1
 800615e:	e7f2      	b.n	8006146 <__libc_init_array+0x1e>
 8006160:	080069dc 	.word	0x080069dc
 8006164:	080069dc 	.word	0x080069dc
 8006168:	080069dc 	.word	0x080069dc
 800616c:	080069e0 	.word	0x080069e0

08006170 <powf>:
 8006170:	b508      	push	{r3, lr}
 8006172:	ed2d 8b04 	vpush	{d8-d9}
 8006176:	eeb0 8a60 	vmov.f32	s16, s1
 800617a:	eeb0 9a40 	vmov.f32	s18, s0
 800617e:	f000 f87d 	bl	800627c <__ieee754_powf>
 8006182:	eeb4 8a48 	vcmp.f32	s16, s16
 8006186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618a:	eef0 8a40 	vmov.f32	s17, s0
 800618e:	d63e      	bvs.n	800620e <powf+0x9e>
 8006190:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006198:	d112      	bne.n	80061c0 <powf+0x50>
 800619a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800619e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a2:	d039      	beq.n	8006218 <powf+0xa8>
 80061a4:	eeb0 0a48 	vmov.f32	s0, s16
 80061a8:	f000 f839 	bl	800621e <finitef>
 80061ac:	b378      	cbz	r0, 800620e <powf+0x9e>
 80061ae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80061b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b6:	d52a      	bpl.n	800620e <powf+0x9e>
 80061b8:	f7ff ffb0 	bl	800611c <__errno>
 80061bc:	2322      	movs	r3, #34	@ 0x22
 80061be:	e014      	b.n	80061ea <powf+0x7a>
 80061c0:	f000 f82d 	bl	800621e <finitef>
 80061c4:	b998      	cbnz	r0, 80061ee <powf+0x7e>
 80061c6:	eeb0 0a49 	vmov.f32	s0, s18
 80061ca:	f000 f828 	bl	800621e <finitef>
 80061ce:	b170      	cbz	r0, 80061ee <powf+0x7e>
 80061d0:	eeb0 0a48 	vmov.f32	s0, s16
 80061d4:	f000 f823 	bl	800621e <finitef>
 80061d8:	b148      	cbz	r0, 80061ee <powf+0x7e>
 80061da:	eef4 8a68 	vcmp.f32	s17, s17
 80061de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e2:	d7e9      	bvc.n	80061b8 <powf+0x48>
 80061e4:	f7ff ff9a 	bl	800611c <__errno>
 80061e8:	2321      	movs	r3, #33	@ 0x21
 80061ea:	6003      	str	r3, [r0, #0]
 80061ec:	e00f      	b.n	800620e <powf+0x9e>
 80061ee:	eef5 8a40 	vcmp.f32	s17, #0.0
 80061f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f6:	d10a      	bne.n	800620e <powf+0x9e>
 80061f8:	eeb0 0a49 	vmov.f32	s0, s18
 80061fc:	f000 f80f 	bl	800621e <finitef>
 8006200:	b128      	cbz	r0, 800620e <powf+0x9e>
 8006202:	eeb0 0a48 	vmov.f32	s0, s16
 8006206:	f000 f80a 	bl	800621e <finitef>
 800620a:	2800      	cmp	r0, #0
 800620c:	d1d4      	bne.n	80061b8 <powf+0x48>
 800620e:	eeb0 0a68 	vmov.f32	s0, s17
 8006212:	ecbd 8b04 	vpop	{d8-d9}
 8006216:	bd08      	pop	{r3, pc}
 8006218:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800621c:	e7f7      	b.n	800620e <powf+0x9e>

0800621e <finitef>:
 800621e:	ee10 3a10 	vmov	r3, s0
 8006222:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8006226:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800622a:	bfac      	ite	ge
 800622c:	2000      	movge	r0, #0
 800622e:	2001      	movlt	r0, #1
 8006230:	4770      	bx	lr
	...

08006234 <roundf>:
 8006234:	ee10 0a10 	vmov	r0, s0
 8006238:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800623c:	3a7f      	subs	r2, #127	@ 0x7f
 800623e:	2a16      	cmp	r2, #22
 8006240:	dc15      	bgt.n	800626e <roundf+0x3a>
 8006242:	2a00      	cmp	r2, #0
 8006244:	da08      	bge.n	8006258 <roundf+0x24>
 8006246:	3201      	adds	r2, #1
 8006248:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800624c:	d101      	bne.n	8006252 <roundf+0x1e>
 800624e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8006252:	ee00 3a10 	vmov	s0, r3
 8006256:	4770      	bx	lr
 8006258:	4907      	ldr	r1, [pc, #28]	@ (8006278 <roundf+0x44>)
 800625a:	4111      	asrs	r1, r2
 800625c:	4201      	tst	r1, r0
 800625e:	d0fa      	beq.n	8006256 <roundf+0x22>
 8006260:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006264:	4113      	asrs	r3, r2
 8006266:	4403      	add	r3, r0
 8006268:	ea23 0301 	bic.w	r3, r3, r1
 800626c:	e7f1      	b.n	8006252 <roundf+0x1e>
 800626e:	2a80      	cmp	r2, #128	@ 0x80
 8006270:	d1f1      	bne.n	8006256 <roundf+0x22>
 8006272:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006276:	4770      	bx	lr
 8006278:	007fffff 	.word	0x007fffff

0800627c <__ieee754_powf>:
 800627c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006280:	ee10 4a90 	vmov	r4, s1
 8006284:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8006288:	ed2d 8b02 	vpush	{d8}
 800628c:	ee10 6a10 	vmov	r6, s0
 8006290:	eeb0 8a40 	vmov.f32	s16, s0
 8006294:	eef0 8a60 	vmov.f32	s17, s1
 8006298:	d10c      	bne.n	80062b4 <__ieee754_powf+0x38>
 800629a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800629e:	0076      	lsls	r6, r6, #1
 80062a0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80062a4:	f240 829c 	bls.w	80067e0 <__ieee754_powf+0x564>
 80062a8:	ee38 0a28 	vadd.f32	s0, s16, s17
 80062ac:	ecbd 8b02 	vpop	{d8}
 80062b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80062b8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80062bc:	d802      	bhi.n	80062c4 <__ieee754_powf+0x48>
 80062be:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80062c2:	d908      	bls.n	80062d6 <__ieee754_powf+0x5a>
 80062c4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80062c8:	d1ee      	bne.n	80062a8 <__ieee754_powf+0x2c>
 80062ca:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80062ce:	0064      	lsls	r4, r4, #1
 80062d0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80062d4:	e7e6      	b.n	80062a4 <__ieee754_powf+0x28>
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	da1e      	bge.n	8006318 <__ieee754_powf+0x9c>
 80062da:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80062de:	d22b      	bcs.n	8006338 <__ieee754_powf+0xbc>
 80062e0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80062e4:	d332      	bcc.n	800634c <__ieee754_powf+0xd0>
 80062e6:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80062ea:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80062ee:	fa49 f503 	asr.w	r5, r9, r3
 80062f2:	fa05 f303 	lsl.w	r3, r5, r3
 80062f6:	454b      	cmp	r3, r9
 80062f8:	d126      	bne.n	8006348 <__ieee754_powf+0xcc>
 80062fa:	f005 0501 	and.w	r5, r5, #1
 80062fe:	f1c5 0502 	rsb	r5, r5, #2
 8006302:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8006306:	d122      	bne.n	800634e <__ieee754_powf+0xd2>
 8006308:	2c00      	cmp	r4, #0
 800630a:	f280 826f 	bge.w	80067ec <__ieee754_powf+0x570>
 800630e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006312:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006316:	e7c9      	b.n	80062ac <__ieee754_powf+0x30>
 8006318:	2500      	movs	r5, #0
 800631a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800631e:	d1f0      	bne.n	8006302 <__ieee754_powf+0x86>
 8006320:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8006324:	f000 825c 	beq.w	80067e0 <__ieee754_powf+0x564>
 8006328:	d908      	bls.n	800633c <__ieee754_powf+0xc0>
 800632a:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800668c <__ieee754_powf+0x410>
 800632e:	2c00      	cmp	r4, #0
 8006330:	bfa8      	it	ge
 8006332:	eeb0 0a68 	vmovge.f32	s0, s17
 8006336:	e7b9      	b.n	80062ac <__ieee754_powf+0x30>
 8006338:	2502      	movs	r5, #2
 800633a:	e7ee      	b.n	800631a <__ieee754_powf+0x9e>
 800633c:	2c00      	cmp	r4, #0
 800633e:	f280 8252 	bge.w	80067e6 <__ieee754_powf+0x56a>
 8006342:	eeb1 0a68 	vneg.f32	s0, s17
 8006346:	e7b1      	b.n	80062ac <__ieee754_powf+0x30>
 8006348:	2500      	movs	r5, #0
 800634a:	e7da      	b.n	8006302 <__ieee754_powf+0x86>
 800634c:	2500      	movs	r5, #0
 800634e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8006352:	d102      	bne.n	800635a <__ieee754_powf+0xde>
 8006354:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006358:	e7a8      	b.n	80062ac <__ieee754_powf+0x30>
 800635a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800635e:	d109      	bne.n	8006374 <__ieee754_powf+0xf8>
 8006360:	2e00      	cmp	r6, #0
 8006362:	db07      	blt.n	8006374 <__ieee754_powf+0xf8>
 8006364:	eeb0 0a48 	vmov.f32	s0, s16
 8006368:	ecbd 8b02 	vpop	{d8}
 800636c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006370:	f000 bae8 	b.w	8006944 <__ieee754_sqrtf>
 8006374:	eeb0 0a48 	vmov.f32	s0, s16
 8006378:	f000 fa50 	bl	800681c <fabsf>
 800637c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8006380:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8006384:	4647      	mov	r7, r8
 8006386:	d002      	beq.n	800638e <__ieee754_powf+0x112>
 8006388:	f1b8 0f00 	cmp.w	r8, #0
 800638c:	d117      	bne.n	80063be <__ieee754_powf+0x142>
 800638e:	2c00      	cmp	r4, #0
 8006390:	bfbc      	itt	lt
 8006392:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8006396:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800639a:	2e00      	cmp	r6, #0
 800639c:	da86      	bge.n	80062ac <__ieee754_powf+0x30>
 800639e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80063a2:	ea58 0805 	orrs.w	r8, r8, r5
 80063a6:	d104      	bne.n	80063b2 <__ieee754_powf+0x136>
 80063a8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80063ac:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80063b0:	e77c      	b.n	80062ac <__ieee754_powf+0x30>
 80063b2:	2d01      	cmp	r5, #1
 80063b4:	f47f af7a 	bne.w	80062ac <__ieee754_powf+0x30>
 80063b8:	eeb1 0a40 	vneg.f32	s0, s0
 80063bc:	e776      	b.n	80062ac <__ieee754_powf+0x30>
 80063be:	0ff0      	lsrs	r0, r6, #31
 80063c0:	3801      	subs	r0, #1
 80063c2:	ea55 0300 	orrs.w	r3, r5, r0
 80063c6:	d104      	bne.n	80063d2 <__ieee754_powf+0x156>
 80063c8:	ee38 8a48 	vsub.f32	s16, s16, s16
 80063cc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80063d0:	e76c      	b.n	80062ac <__ieee754_powf+0x30>
 80063d2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80063d6:	d973      	bls.n	80064c0 <__ieee754_powf+0x244>
 80063d8:	4bad      	ldr	r3, [pc, #692]	@ (8006690 <__ieee754_powf+0x414>)
 80063da:	4598      	cmp	r8, r3
 80063dc:	d808      	bhi.n	80063f0 <__ieee754_powf+0x174>
 80063de:	2c00      	cmp	r4, #0
 80063e0:	da0b      	bge.n	80063fa <__ieee754_powf+0x17e>
 80063e2:	2000      	movs	r0, #0
 80063e4:	ecbd 8b02 	vpop	{d8}
 80063e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ec:	f000 baa4 	b.w	8006938 <__math_oflowf>
 80063f0:	4ba8      	ldr	r3, [pc, #672]	@ (8006694 <__ieee754_powf+0x418>)
 80063f2:	4598      	cmp	r8, r3
 80063f4:	d908      	bls.n	8006408 <__ieee754_powf+0x18c>
 80063f6:	2c00      	cmp	r4, #0
 80063f8:	dcf3      	bgt.n	80063e2 <__ieee754_powf+0x166>
 80063fa:	2000      	movs	r0, #0
 80063fc:	ecbd 8b02 	vpop	{d8}
 8006400:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006404:	f000 ba92 	b.w	800692c <__math_uflowf>
 8006408:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800640c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006410:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8006698 <__ieee754_powf+0x41c>
 8006414:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8006418:	eee0 6a67 	vfms.f32	s13, s0, s15
 800641c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006420:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006424:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800642c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800669c <__ieee754_powf+0x420>
 8006430:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8006434:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80066a0 <__ieee754_powf+0x424>
 8006438:	eee0 7a07 	vfma.f32	s15, s0, s14
 800643c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80066a4 <__ieee754_powf+0x428>
 8006440:	eef0 6a67 	vmov.f32	s13, s15
 8006444:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006448:	ee16 3a90 	vmov	r3, s13
 800644c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006450:	f023 030f 	bic.w	r3, r3, #15
 8006454:	ee06 3a90 	vmov	s13, r3
 8006458:	eee0 6a47 	vfms.f32	s13, s0, s14
 800645c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006460:	3d01      	subs	r5, #1
 8006462:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8006466:	4305      	orrs	r5, r0
 8006468:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800646c:	f024 040f 	bic.w	r4, r4, #15
 8006470:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8006474:	bf18      	it	ne
 8006476:	eeb0 8a47 	vmovne.f32	s16, s14
 800647a:	ee07 4a10 	vmov	s14, r4
 800647e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006482:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800648e:	ee07 4a10 	vmov	s14, r4
 8006492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006496:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800649a:	ee17 1a10 	vmov	r1, s14
 800649e:	2900      	cmp	r1, #0
 80064a0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80064a4:	f340 80dd 	ble.w	8006662 <__ieee754_powf+0x3e6>
 80064a8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80064ac:	f240 80ca 	bls.w	8006644 <__ieee754_powf+0x3c8>
 80064b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80064b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b8:	bf4c      	ite	mi
 80064ba:	2001      	movmi	r0, #1
 80064bc:	2000      	movpl	r0, #0
 80064be:	e791      	b.n	80063e4 <__ieee754_powf+0x168>
 80064c0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80064c4:	bf01      	itttt	eq
 80064c6:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80066a8 <__ieee754_powf+0x42c>
 80064ca:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80064ce:	f06f 0317 	mvneq.w	r3, #23
 80064d2:	ee17 7a90 	vmoveq	r7, s15
 80064d6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80064da:	bf18      	it	ne
 80064dc:	2300      	movne	r3, #0
 80064de:	3a7f      	subs	r2, #127	@ 0x7f
 80064e0:	441a      	add	r2, r3
 80064e2:	4b72      	ldr	r3, [pc, #456]	@ (80066ac <__ieee754_powf+0x430>)
 80064e4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80064e8:	429f      	cmp	r7, r3
 80064ea:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80064ee:	dd06      	ble.n	80064fe <__ieee754_powf+0x282>
 80064f0:	4b6f      	ldr	r3, [pc, #444]	@ (80066b0 <__ieee754_powf+0x434>)
 80064f2:	429f      	cmp	r7, r3
 80064f4:	f340 80a4 	ble.w	8006640 <__ieee754_powf+0x3c4>
 80064f8:	3201      	adds	r2, #1
 80064fa:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80064fe:	2600      	movs	r6, #0
 8006500:	4b6c      	ldr	r3, [pc, #432]	@ (80066b4 <__ieee754_powf+0x438>)
 8006502:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8006506:	ee07 1a10 	vmov	s14, r1
 800650a:	edd3 5a00 	vldr	s11, [r3]
 800650e:	4b6a      	ldr	r3, [pc, #424]	@ (80066b8 <__ieee754_powf+0x43c>)
 8006510:	ee75 7a87 	vadd.f32	s15, s11, s14
 8006514:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006518:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800651c:	1049      	asrs	r1, r1, #1
 800651e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8006522:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8006526:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800652a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800652e:	ee07 1a90 	vmov	s15, r1
 8006532:	ee26 5a24 	vmul.f32	s10, s12, s9
 8006536:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800653a:	ee15 7a10 	vmov	r7, s10
 800653e:	401f      	ands	r7, r3
 8006540:	ee06 7a90 	vmov	s13, r7
 8006544:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8006548:	ee37 7a65 	vsub.f32	s14, s14, s11
 800654c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8006550:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006554:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80066bc <__ieee754_powf+0x440>
 8006558:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80066c0 <__ieee754_powf+0x444>
 800655c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8006560:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80066c4 <__ieee754_powf+0x448>
 8006564:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006568:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8006698 <__ieee754_powf+0x41c>
 800656c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006570:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80066c8 <__ieee754_powf+0x44c>
 8006574:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006578:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80066cc <__ieee754_powf+0x450>
 800657c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006580:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006584:	ee35 7a26 	vadd.f32	s14, s10, s13
 8006588:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800658c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006590:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8006594:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8006598:	eef0 5a67 	vmov.f32	s11, s15
 800659c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80065a0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80065a4:	ee15 1a90 	vmov	r1, s11
 80065a8:	4019      	ands	r1, r3
 80065aa:	ee05 1a90 	vmov	s11, r1
 80065ae:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80065b2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80065b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065ba:	ee67 7a85 	vmul.f32	s15, s15, s10
 80065be:	eee6 7a25 	vfma.f32	s15, s12, s11
 80065c2:	eeb0 6a67 	vmov.f32	s12, s15
 80065c6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80065ca:	ee16 1a10 	vmov	r1, s12
 80065ce:	4019      	ands	r1, r3
 80065d0:	ee06 1a10 	vmov	s12, r1
 80065d4:	eeb0 7a46 	vmov.f32	s14, s12
 80065d8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80065dc:	493c      	ldr	r1, [pc, #240]	@ (80066d0 <__ieee754_powf+0x454>)
 80065de:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80065e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065e6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80066d4 <__ieee754_powf+0x458>
 80065ea:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80066d8 <__ieee754_powf+0x45c>
 80065ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065f2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80066dc <__ieee754_powf+0x460>
 80065f6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80065fa:	ed91 7a00 	vldr	s14, [r1]
 80065fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006602:	ee07 2a10 	vmov	s14, r2
 8006606:	eef0 6a67 	vmov.f32	s13, s15
 800660a:	4a35      	ldr	r2, [pc, #212]	@ (80066e0 <__ieee754_powf+0x464>)
 800660c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006610:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8006614:	ed92 5a00 	vldr	s10, [r2]
 8006618:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800661c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006620:	ee76 6a87 	vadd.f32	s13, s13, s14
 8006624:	ee16 2a90 	vmov	r2, s13
 8006628:	4013      	ands	r3, r2
 800662a:	ee06 3a90 	vmov	s13, r3
 800662e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006632:	ee37 7a45 	vsub.f32	s14, s14, s10
 8006636:	eea6 7a65 	vfms.f32	s14, s12, s11
 800663a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800663e:	e70f      	b.n	8006460 <__ieee754_powf+0x1e4>
 8006640:	2601      	movs	r6, #1
 8006642:	e75d      	b.n	8006500 <__ieee754_powf+0x284>
 8006644:	d152      	bne.n	80066ec <__ieee754_powf+0x470>
 8006646:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80066e4 <__ieee754_powf+0x468>
 800664a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800664e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006652:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665a:	f73f af29 	bgt.w	80064b0 <__ieee754_powf+0x234>
 800665e:	2386      	movs	r3, #134	@ 0x86
 8006660:	e048      	b.n	80066f4 <__ieee754_powf+0x478>
 8006662:	4a21      	ldr	r2, [pc, #132]	@ (80066e8 <__ieee754_powf+0x46c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d907      	bls.n	8006678 <__ieee754_powf+0x3fc>
 8006668:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800666c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006670:	bf4c      	ite	mi
 8006672:	2001      	movmi	r0, #1
 8006674:	2000      	movpl	r0, #0
 8006676:	e6c1      	b.n	80063fc <__ieee754_powf+0x180>
 8006678:	d138      	bne.n	80066ec <__ieee754_powf+0x470>
 800667a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800667e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006686:	dbea      	blt.n	800665e <__ieee754_powf+0x3e2>
 8006688:	e7ee      	b.n	8006668 <__ieee754_powf+0x3ec>
 800668a:	bf00      	nop
 800668c:	00000000 	.word	0x00000000
 8006690:	3f7ffff3 	.word	0x3f7ffff3
 8006694:	3f800007 	.word	0x3f800007
 8006698:	3eaaaaab 	.word	0x3eaaaaab
 800669c:	3fb8aa3b 	.word	0x3fb8aa3b
 80066a0:	36eca570 	.word	0x36eca570
 80066a4:	3fb8aa00 	.word	0x3fb8aa00
 80066a8:	4b800000 	.word	0x4b800000
 80066ac:	001cc471 	.word	0x001cc471
 80066b0:	005db3d6 	.word	0x005db3d6
 80066b4:	080069cc 	.word	0x080069cc
 80066b8:	fffff000 	.word	0xfffff000
 80066bc:	3e6c3255 	.word	0x3e6c3255
 80066c0:	3e53f142 	.word	0x3e53f142
 80066c4:	3e8ba305 	.word	0x3e8ba305
 80066c8:	3edb6db7 	.word	0x3edb6db7
 80066cc:	3f19999a 	.word	0x3f19999a
 80066d0:	080069bc 	.word	0x080069bc
 80066d4:	3f76384f 	.word	0x3f76384f
 80066d8:	3f763800 	.word	0x3f763800
 80066dc:	369dc3a0 	.word	0x369dc3a0
 80066e0:	080069c4 	.word	0x080069c4
 80066e4:	3338aa3c 	.word	0x3338aa3c
 80066e8:	43160000 	.word	0x43160000
 80066ec:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80066f0:	d971      	bls.n	80067d6 <__ieee754_powf+0x55a>
 80066f2:	15db      	asrs	r3, r3, #23
 80066f4:	3b7e      	subs	r3, #126	@ 0x7e
 80066f6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80066fa:	4118      	asrs	r0, r3
 80066fc:	4408      	add	r0, r1
 80066fe:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006702:	4a3c      	ldr	r2, [pc, #240]	@ (80067f4 <__ieee754_powf+0x578>)
 8006704:	3b7f      	subs	r3, #127	@ 0x7f
 8006706:	411a      	asrs	r2, r3
 8006708:	4002      	ands	r2, r0
 800670a:	ee07 2a10 	vmov	s14, r2
 800670e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8006712:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8006716:	f1c3 0317 	rsb	r3, r3, #23
 800671a:	4118      	asrs	r0, r3
 800671c:	2900      	cmp	r1, #0
 800671e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006722:	bfb8      	it	lt
 8006724:	4240      	neglt	r0, r0
 8006726:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800672a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80067f8 <__ieee754_powf+0x57c>
 800672e:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80067fc <__ieee754_powf+0x580>
 8006732:	ee17 3a10 	vmov	r3, s14
 8006736:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800673a:	f023 030f 	bic.w	r3, r3, #15
 800673e:	ee07 3a10 	vmov	s14, r3
 8006742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006746:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800674a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800674e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8006800 <__ieee754_powf+0x584>
 8006752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006756:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800675a:	eef0 6a67 	vmov.f32	s13, s15
 800675e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006762:	eef0 5a66 	vmov.f32	s11, s13
 8006766:	eee7 5a46 	vfms.f32	s11, s14, s12
 800676a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800676e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006772:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8006804 <__ieee754_powf+0x588>
 8006776:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8006808 <__ieee754_powf+0x58c>
 800677a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800677e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800680c <__ieee754_powf+0x590>
 8006782:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006786:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8006810 <__ieee754_powf+0x594>
 800678a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800678e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8006814 <__ieee754_powf+0x598>
 8006792:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006796:	eeb0 6a66 	vmov.f32	s12, s13
 800679a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800679e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80067a2:	ee66 5a86 	vmul.f32	s11, s13, s12
 80067a6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80067aa:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80067ae:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80067b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80067be:	ee10 3a10 	vmov	r3, s0
 80067c2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80067c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067ca:	da06      	bge.n	80067da <__ieee754_powf+0x55e>
 80067cc:	f000 f82e 	bl	800682c <scalbnf>
 80067d0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80067d4:	e56a      	b.n	80062ac <__ieee754_powf+0x30>
 80067d6:	2000      	movs	r0, #0
 80067d8:	e7a5      	b.n	8006726 <__ieee754_powf+0x4aa>
 80067da:	ee00 3a10 	vmov	s0, r3
 80067de:	e7f7      	b.n	80067d0 <__ieee754_powf+0x554>
 80067e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80067e4:	e562      	b.n	80062ac <__ieee754_powf+0x30>
 80067e6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8006818 <__ieee754_powf+0x59c>
 80067ea:	e55f      	b.n	80062ac <__ieee754_powf+0x30>
 80067ec:	eeb0 0a48 	vmov.f32	s0, s16
 80067f0:	e55c      	b.n	80062ac <__ieee754_powf+0x30>
 80067f2:	bf00      	nop
 80067f4:	ff800000 	.word	0xff800000
 80067f8:	3f317218 	.word	0x3f317218
 80067fc:	3f317200 	.word	0x3f317200
 8006800:	35bfbe8c 	.word	0x35bfbe8c
 8006804:	b5ddea0e 	.word	0xb5ddea0e
 8006808:	3331bb4c 	.word	0x3331bb4c
 800680c:	388ab355 	.word	0x388ab355
 8006810:	bb360b61 	.word	0xbb360b61
 8006814:	3e2aaaab 	.word	0x3e2aaaab
 8006818:	00000000 	.word	0x00000000

0800681c <fabsf>:
 800681c:	ee10 3a10 	vmov	r3, s0
 8006820:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006824:	ee00 3a10 	vmov	s0, r3
 8006828:	4770      	bx	lr
	...

0800682c <scalbnf>:
 800682c:	ee10 3a10 	vmov	r3, s0
 8006830:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006834:	d02b      	beq.n	800688e <scalbnf+0x62>
 8006836:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800683a:	d302      	bcc.n	8006842 <scalbnf+0x16>
 800683c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006840:	4770      	bx	lr
 8006842:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006846:	d123      	bne.n	8006890 <scalbnf+0x64>
 8006848:	4b24      	ldr	r3, [pc, #144]	@ (80068dc <scalbnf+0xb0>)
 800684a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80068e0 <scalbnf+0xb4>
 800684e:	4298      	cmp	r0, r3
 8006850:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006854:	db17      	blt.n	8006886 <scalbnf+0x5a>
 8006856:	ee10 3a10 	vmov	r3, s0
 800685a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800685e:	3a19      	subs	r2, #25
 8006860:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006864:	4288      	cmp	r0, r1
 8006866:	dd15      	ble.n	8006894 <scalbnf+0x68>
 8006868:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80068e4 <scalbnf+0xb8>
 800686c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80068e8 <scalbnf+0xbc>
 8006870:	ee10 3a10 	vmov	r3, s0
 8006874:	eeb0 7a67 	vmov.f32	s14, s15
 8006878:	2b00      	cmp	r3, #0
 800687a:	bfb8      	it	lt
 800687c:	eef0 7a66 	vmovlt.f32	s15, s13
 8006880:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006884:	4770      	bx	lr
 8006886:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80068ec <scalbnf+0xc0>
 800688a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800688e:	4770      	bx	lr
 8006890:	0dd2      	lsrs	r2, r2, #23
 8006892:	e7e5      	b.n	8006860 <scalbnf+0x34>
 8006894:	4410      	add	r0, r2
 8006896:	28fe      	cmp	r0, #254	@ 0xfe
 8006898:	dce6      	bgt.n	8006868 <scalbnf+0x3c>
 800689a:	2800      	cmp	r0, #0
 800689c:	dd06      	ble.n	80068ac <scalbnf+0x80>
 800689e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80068a2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80068a6:	ee00 3a10 	vmov	s0, r3
 80068aa:	4770      	bx	lr
 80068ac:	f110 0f16 	cmn.w	r0, #22
 80068b0:	da09      	bge.n	80068c6 <scalbnf+0x9a>
 80068b2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80068ec <scalbnf+0xc0>
 80068b6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80068f0 <scalbnf+0xc4>
 80068ba:	ee10 3a10 	vmov	r3, s0
 80068be:	eeb0 7a67 	vmov.f32	s14, s15
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	e7d9      	b.n	800687a <scalbnf+0x4e>
 80068c6:	3019      	adds	r0, #25
 80068c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80068cc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80068d0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80068f4 <scalbnf+0xc8>
 80068d4:	ee07 3a90 	vmov	s15, r3
 80068d8:	e7d7      	b.n	800688a <scalbnf+0x5e>
 80068da:	bf00      	nop
 80068dc:	ffff3cb0 	.word	0xffff3cb0
 80068e0:	4c000000 	.word	0x4c000000
 80068e4:	7149f2ca 	.word	0x7149f2ca
 80068e8:	f149f2ca 	.word	0xf149f2ca
 80068ec:	0da24260 	.word	0x0da24260
 80068f0:	8da24260 	.word	0x8da24260
 80068f4:	33000000 	.word	0x33000000

080068f8 <with_errnof>:
 80068f8:	b510      	push	{r4, lr}
 80068fa:	ed2d 8b02 	vpush	{d8}
 80068fe:	eeb0 8a40 	vmov.f32	s16, s0
 8006902:	4604      	mov	r4, r0
 8006904:	f7ff fc0a 	bl	800611c <__errno>
 8006908:	eeb0 0a48 	vmov.f32	s0, s16
 800690c:	ecbd 8b02 	vpop	{d8}
 8006910:	6004      	str	r4, [r0, #0]
 8006912:	bd10      	pop	{r4, pc}

08006914 <xflowf>:
 8006914:	b130      	cbz	r0, 8006924 <xflowf+0x10>
 8006916:	eef1 7a40 	vneg.f32	s15, s0
 800691a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800691e:	2022      	movs	r0, #34	@ 0x22
 8006920:	f7ff bfea 	b.w	80068f8 <with_errnof>
 8006924:	eef0 7a40 	vmov.f32	s15, s0
 8006928:	e7f7      	b.n	800691a <xflowf+0x6>
	...

0800692c <__math_uflowf>:
 800692c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006934 <__math_uflowf+0x8>
 8006930:	f7ff bff0 	b.w	8006914 <xflowf>
 8006934:	10000000 	.word	0x10000000

08006938 <__math_oflowf>:
 8006938:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006940 <__math_oflowf+0x8>
 800693c:	f7ff bfea 	b.w	8006914 <xflowf>
 8006940:	70000000 	.word	0x70000000

08006944 <__ieee754_sqrtf>:
 8006944:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006948:	4770      	bx	lr
	...

0800694c <_init>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr

08006958 <_fini>:
 8006958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695a:	bf00      	nop
 800695c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695e:	bc08      	pop	{r3}
 8006960:	469e      	mov	lr, r3
 8006962:	4770      	bx	lr
