
mic_tst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f02c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d908  0800f1c0  0800f1c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802cac8  0802cac8  0002e60c  2**0
                  CONTENTS
  4 .ARM          00000008  0802cac8  0802cac8  0002dac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802cad0  0802cad0  0002e60c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802cad0  0802cad0  0002dad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802cad4  0802cad4  0002dad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000060c  20000000  0802cad8  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002e60c  2**0
                  CONTENTS
 10 .bss          0000293c  2000060c  2000060c  0002e60c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002f48  20002f48  0002e60c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002e60c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e6d1  00000000  00000000  0002e63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f9e  00000000  00000000  0004cd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00050cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c60  00000000  00000000  00051e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235bb  00000000  00000000  00052a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184ad  00000000  00000000  0007602b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf5fa  00000000  00000000  0008e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000013b  00000000  00000000  0015dad2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dbc  00000000  00000000  0015dc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  001639cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002fbb  00000000  00000000  00163a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000d0  00000000  00000000  00166a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000060c 	.word	0x2000060c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f1a4 	.word	0x0800f1a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000610 	.word	0x20000610
 80001cc:	0800f1a4 	.word	0x0800f1a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000fe8:	4814      	ldr	r0, [pc, #80]	@ (800103c <I2Cx_Init+0x58>)
 8000fea:	f003 fa61 	bl	80044b0 <HAL_I2C_GetState>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d121      	bne.n	8001038 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <I2Cx_Init+0x58>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <I2Cx_Init+0x5c>)
 8000ff8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <I2Cx_Init+0x58>)
 8000ffc:	2243      	movs	r2, #67	@ 0x43
 8000ffe:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001000:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <I2Cx_Init+0x58>)
 8001002:	4a10      	ldr	r2, [pc, #64]	@ (8001044 <I2Cx_Init+0x60>)
 8001004:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <I2Cx_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100c:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <I2Cx_Init+0x58>)
 800100e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001012:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <I2Cx_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <I2Cx_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <I2Cx_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8001026:	4b05      	ldr	r3, [pc, #20]	@ (800103c <I2Cx_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <I2Cx_Init+0x58>)
 800102e:	f000 f86b 	bl	8001108 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001032:	4802      	ldr	r0, [pc, #8]	@ (800103c <I2Cx_Init+0x58>)
 8001034:	f002 fda8 	bl	8003b88 <HAL_I2C_Init>
  }
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000062c 	.word	0x2000062c
 8001040:	40005400 	.word	0x40005400
 8001044:	000186a0 	.word	0x000186a0

08001048 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
 8001052:	460b      	mov	r3, r1
 8001054:	717b      	strb	r3, [r7, #5]
 8001056:	4613      	mov	r3, r2
 8001058:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800105e:	797b      	ldrb	r3, [r7, #5]
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <I2Cx_WriteData+0x48>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	88f9      	ldrh	r1, [r7, #6]
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	2301      	movs	r3, #1
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <I2Cx_WriteData+0x4c>)
 8001076:	f002 fefb 	bl	8003e70 <HAL_I2C_Mem_Write>
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001084:	f000 f834 	bl	80010f0 <I2Cx_Error>
  }
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000400 	.word	0x20000400
 8001094:	2000062c 	.word	0x2000062c

08001098 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af04      	add	r7, sp, #16
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	80fb      	strh	r3, [r7, #6]
 80010a4:	4613      	mov	r3, r2
 80010a6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80010b0:	797b      	ldrb	r3, [r7, #5]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <I2Cx_ReadData+0x50>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	88f9      	ldrh	r1, [r7, #6]
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 030e 	add.w	r3, r7, #14
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	4808      	ldr	r0, [pc, #32]	@ (80010ec <I2Cx_ReadData+0x54>)
 80010ca:	f002 ffcb 	bl	8004064 <HAL_I2C_Mem_Read>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80010d8:	f000 f80a 	bl	80010f0 <I2Cx_Error>
  }
  return value;
 80010dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000400 	.word	0x20000400
 80010ec:	2000062c 	.word	0x2000062c

080010f0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80010f4:	4803      	ldr	r0, [pc, #12]	@ (8001104 <I2Cx_Error+0x14>)
 80010f6:	f002 fe8b 	bl	8003e10 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80010fa:	f7ff ff73 	bl	8000fe4 <I2Cx_Init>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000062c 	.word	0x2000062c

08001108 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	4a24      	ldr	r2, [pc, #144]	@ (80011ac <I2Cx_MspInit+0xa4>)
 800111a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800111e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001120:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	6313      	str	r3, [r2, #48]	@ 0x30
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <I2Cx_MspInit+0xa4>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8001148:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800114e:	2312      	movs	r3, #18
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001156:	2302      	movs	r3, #2
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 800115a:	2304      	movs	r3, #4
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4812      	ldr	r0, [pc, #72]	@ (80011b0 <I2Cx_MspInit+0xa8>)
 8001166:	f002 fa45 	bl	80035f4 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <I2Cx_MspInit+0xa4>)
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001170:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001174:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8001176:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	4a0c      	ldr	r2, [pc, #48]	@ (80011ac <I2Cx_MspInit+0xa4>)
 800117c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001180:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	210f      	movs	r1, #15
 8001186:	201f      	movs	r0, #31
 8001188:	f001 fe71 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 800118c:	201f      	movs	r0, #31
 800118e:	f001 fe8a 	bl	8002ea6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	210f      	movs	r1, #15
 8001196:	2020      	movs	r0, #32
 8001198:	f001 fe69 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 800119c:	2020      	movs	r0, #32
 800119e:	f001 fe82 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	@ 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020400 	.word	0x40020400

080011b4 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <AUDIO_IO_Init+0x68>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a16      	ldr	r2, [pc, #88]	@ (800121c <AUDIO_IO_Init+0x68>)
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <AUDIO_IO_Init+0x68>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 80011d6:	2310      	movs	r3, #16
 80011d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80011de:	2302      	movs	r3, #2
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	480d      	ldr	r0, [pc, #52]	@ (8001220 <AUDIO_IO_Init+0x6c>)
 80011ec:	f002 fa02 	bl	80035f4 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80011f0:	f7ff fef8 	bl	8000fe4 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 80011f4:	2200      	movs	r2, #0
 80011f6:	2110      	movs	r1, #16
 80011f8:	4809      	ldr	r0, [pc, #36]	@ (8001220 <AUDIO_IO_Init+0x6c>)
 80011fa:	f002 fc93 	bl	8003b24 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80011fe:	2005      	movs	r0, #5
 8001200:	f001 fd36 	bl	8002c70 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8001204:	2201      	movs	r2, #1
 8001206:	2110      	movs	r1, #16
 8001208:	4805      	ldr	r0, [pc, #20]	@ (8001220 <AUDIO_IO_Init+0x6c>)
 800120a:	f002 fc8b 	bl	8003b24 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800120e:	2005      	movs	r0, #5
 8001210:	f001 fd2e 	bl	8002c70 <HAL_Delay>
}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	40020c00 	.word	0x40020c00

08001224 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	460b      	mov	r3, r1
 800123e:	71bb      	strb	r3, [r7, #6]
 8001240:	4613      	mov	r3, r2
 8001242:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	b29b      	uxth	r3, r3
 8001248:	797a      	ldrb	r2, [r7, #5]
 800124a:	79b9      	ldrb	r1, [r7, #6]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fefb 	bl	8001048 <I2Cx_WriteData>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	460a      	mov	r2, r1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	4613      	mov	r3, r2
 8001268:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	b29b      	uxth	r3, r3
 800126e:	79ba      	ldrb	r2, [r7, #6]
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff10 	bl	8001098 <I2Cx_ReadData>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	4603      	mov	r3, r0
 800128e:	81fb      	strh	r3, [r7, #14]
 8001290:	460b      	mov	r3, r1
 8001292:	81bb      	strh	r3, [r7, #12]
 8001294:	4613      	mov	r3, r2
 8001296:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 800129c:	f7ff ff8a 	bl	80011b4 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	229e      	movs	r2, #158	@ 0x9e
 80012a6:	2102      	movs	r1, #2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fb01 	bl	80018b0 <CODEC_IO_Write>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	4413      	add	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80012b8:	89bb      	ldrh	r3, [r7, #12]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d81b      	bhi.n	80012f8 <cs43l22_Init+0x74>
 80012c0:	a201      	add	r2, pc, #4	@ (adr r2, 80012c8 <cs43l22_Init+0x44>)
 80012c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c6:	bf00      	nop
 80012c8:	080012d9 	.word	0x080012d9
 80012cc:	080012e1 	.word	0x080012e1
 80012d0:	080012e9 	.word	0x080012e9
 80012d4:	080012f1 	.word	0x080012f1
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80012d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001448 <cs43l22_Init+0x1c4>)
 80012da:	22fa      	movs	r2, #250	@ 0xfa
 80012dc:	701a      	strb	r2, [r3, #0]
    break;
 80012de:	e00f      	b.n	8001300 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 80012e0:	4b59      	ldr	r3, [pc, #356]	@ (8001448 <cs43l22_Init+0x1c4>)
 80012e2:	22af      	movs	r2, #175	@ 0xaf
 80012e4:	701a      	strb	r2, [r3, #0]
    break;
 80012e6:	e00b      	b.n	8001300 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 80012e8:	4b57      	ldr	r3, [pc, #348]	@ (8001448 <cs43l22_Init+0x1c4>)
 80012ea:	22aa      	movs	r2, #170	@ 0xaa
 80012ec:	701a      	strb	r2, [r3, #0]
    break;
 80012ee:	e007      	b.n	8001300 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 80012f0:	4b55      	ldr	r3, [pc, #340]	@ (8001448 <cs43l22_Init+0x1c4>)
 80012f2:	2205      	movs	r2, #5
 80012f4:	701a      	strb	r2, [r3, #0]
    break;    
 80012f6:	e003      	b.n	8001300 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 80012f8:	4b53      	ldr	r3, [pc, #332]	@ (8001448 <cs43l22_Init+0x1c4>)
 80012fa:	2205      	movs	r2, #5
 80012fc:	701a      	strb	r2, [r3, #0]
    break;    
 80012fe:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4a50      	ldr	r2, [pc, #320]	@ (8001448 <cs43l22_Init+0x1c4>)
 8001306:	7812      	ldrb	r2, [r2, #0]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	2104      	movs	r1, #4
 800130c:	4618      	mov	r0, r3
 800130e:	f000 facf 	bl	80018b0 <CODEC_IO_Write>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 800131c:	89fb      	ldrh	r3, [r7, #14]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2281      	movs	r2, #129	@ 0x81
 8001322:	2105      	movs	r1, #5
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fac3 	bl	80018b0 <CODEC_IO_Write>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	4413      	add	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001334:	89fb      	ldrh	r3, [r7, #14]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2204      	movs	r2, #4
 800133a:	2106      	movs	r1, #6
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fab7 	bl	80018b0 <CODEC_IO_Write>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	4413      	add	r3, r2
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800134c:	7afa      	ldrb	r2, [r7, #11]
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f964 	bl	8001620 <cs43l22_SetVolume>
 8001358:	4602      	mov	r2, r0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8001360:	89bb      	ldrh	r3, [r7, #12]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d023      	beq.n	80013ae <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8001366:	89fb      	ldrh	r3, [r7, #14]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2206      	movs	r2, #6
 800136c:	210f      	movs	r1, #15
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fa9e 	bl	80018b0 <CODEC_IO_Write>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	4413      	add	r3, r2
 800137c:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2200      	movs	r2, #0
 8001384:	2124      	movs	r1, #36	@ 0x24
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fa92 	bl	80018b0 <CODEC_IO_Write>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	4413      	add	r3, r2
 8001394:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2200      	movs	r2, #0
 800139c:	2125      	movs	r1, #37	@ 0x25
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fa86 	bl	80018b0 <CODEC_IO_Write>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	4413      	add	r3, r2
 80013ac:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2200      	movs	r2, #0
 80013b4:	210a      	movs	r1, #10
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fa7a 	bl	80018b0 <CODEC_IO_Write>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	4413      	add	r3, r2
 80013c4:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2204      	movs	r2, #4
 80013cc:	210e      	movs	r1, #14
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fa6e 	bl	80018b0 <CODEC_IO_Write>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	4413      	add	r3, r2
 80013dc:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2200      	movs	r2, #0
 80013e4:	2127      	movs	r1, #39	@ 0x27
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fa62 	bl	80018b0 <CODEC_IO_Write>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	4413      	add	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	220f      	movs	r2, #15
 80013fc:	211f      	movs	r1, #31
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fa56 	bl	80018b0 <CODEC_IO_Write>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	4413      	add	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x00);
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2200      	movs	r2, #0
 8001414:	211a      	movs	r1, #26
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fa4a 	bl	80018b0 <CODEC_IO_Write>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4413      	add	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x00);
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2200      	movs	r2, #0
 800142c:	211b      	movs	r1, #27
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fa3e 	bl	80018b0 <CODEC_IO_Write>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	4413      	add	r3, r2
 800143c:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 800143e:	697b      	ldr	r3, [r7, #20]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000680 	.word	0x20000680

0800144c <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001450:	f7ff fee8 	bl	8001224 <AUDIO_IO_DeInit>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8001462:	f7ff fea7 	bl	80011b4 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2101      	movs	r1, #1
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fef4 	bl	800125a <AUDIO_IO_Read>
 8001472:	4603      	mov	r3, r0
 8001474:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	f023 0307 	bic.w	r3, r3, #7
 800147c:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	80fb      	strh	r3, [r7, #6]
 8001494:	4613      	mov	r3, r2
 8001496:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <cs43l22_Play+0x70>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d123      	bne.n	80014ec <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2206      	movs	r2, #6
 80014aa:	210e      	movs	r1, #14
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f9ff 	bl	80018b0 <CODEC_IO_Write>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f919 	bl	80016f8 <cs43l22_SetMute>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	229e      	movs	r2, #158	@ 0x9e
 80014d4:	2102      	movs	r1, #2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f9ea 	bl	80018b0 <CODEC_IO_Write>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80014e6:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <cs43l22_Play+0x70>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 80014ec:	68fb      	ldr	r3, [r7, #12]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000434 	.word	0x20000434

080014fc <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	2101      	movs	r1, #1
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f8f2 	bl	80016f8 <cs43l22_SetMute>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2201      	movs	r2, #1
 8001522:	2102      	movs	r1, #2
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f9c3 	bl	80018b0 <CODEC_IO_Write>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f8ce 	bl	80016f8 <cs43l22_SetMute>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	e002      	b.n	8001570 <cs43l22_Resume+0x30>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3301      	adds	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2bfe      	cmp	r3, #254	@ 0xfe
 8001574:	d9f9      	bls.n	800156a <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4a0e      	ldr	r2, [pc, #56]	@ (80015b4 <cs43l22_Resume+0x74>)
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	2104      	movs	r1, #4
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f994 	bl	80018b0 <CODEC_IO_Write>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	229e      	movs	r2, #158	@ 0x9e
 8001598:	2102      	movs	r1, #2
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f988 	bl	80018b0 <CODEC_IO_Write>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000680 	.word	0x20000680

080015b8 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	2101      	movs	r1, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f893 	bl	80016f8 <cs43l22_SetMute>
 80015d2:	4602      	mov	r2, r0
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2204      	movs	r2, #4
 80015e0:	210e      	movs	r1, #14
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f964 	bl	80018b0 <CODEC_IO_Write>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	229f      	movs	r2, #159	@ 0x9f
 80015f8:	2102      	movs	r1, #2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f958 	bl	80018b0 <CODEC_IO_Write>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800160a:	4b04      	ldr	r3, [pc, #16]	@ (800161c <cs43l22_Stop+0x64>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001610:	68fb      	ldr	r3, [r7, #12]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000434 	.word	0x20000434

08001620 <cs43l22_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	460a      	mov	r2, r1
 800162a:	80fb      	strh	r3, [r7, #6]
 800162c:	4613      	mov	r3, r2
 800162e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001634:	797b      	ldrb	r3, [r7, #5]
 8001636:	2b64      	cmp	r3, #100	@ 0x64
 8001638:	d80b      	bhi.n	8001652 <cs43l22_SetVolume+0x32>
 800163a:	797a      	ldrb	r2, [r7, #5]
 800163c:	4613      	mov	r3, r2
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	4a25      	ldr	r2, [pc, #148]	@ (80016d8 <cs43l22_SetVolume+0xb8>)
 8001644:	fb82 1203 	smull	r1, r2, r2, r3
 8001648:	1152      	asrs	r2, r2, #5
 800164a:	17db      	asrs	r3, r3, #31
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	e000      	b.n	8001654 <cs43l22_SetVolume+0x34>
 8001652:	2364      	movs	r3, #100	@ 0x64
 8001654:	72fb      	strb	r3, [r7, #11]

  if(Volume > 0xE6)
 8001656:	797b      	ldrb	r3, [r7, #5]
 8001658:	2be6      	cmp	r3, #230	@ 0xe6
 800165a:	d91c      	bls.n	8001696 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	b2d8      	uxtb	r0, r3
 8001660:	7afb      	ldrb	r3, [r7, #11]
 8001662:	3319      	adds	r3, #25
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	2120      	movs	r1, #32
 800166a:	f000 f921 	bl	80018b0 <CODEC_IO_Write>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	b2d8      	uxtb	r0, r3
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	3319      	adds	r3, #25
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	2121      	movs	r1, #33	@ 0x21
 8001686:	f000 f913 	bl	80018b0 <CODEC_IO_Write>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e01b      	b.n	80016ce <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	b2d8      	uxtb	r0, r3
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	3319      	adds	r3, #25
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	2120      	movs	r1, #32
 80016a4:	f000 f904 	bl	80018b0 <CODEC_IO_Write>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	b2d8      	uxtb	r0, r3
 80016b6:	7afb      	ldrb	r3, [r7, #11]
 80016b8:	3319      	adds	r3, #25
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	2121      	movs	r1, #33	@ 0x21
 80016c0:	f000 f8f6 	bl	80018b0 <CODEC_IO_Write>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	51eb851f 	.word	0x51eb851f

080016dc <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	80fb      	strh	r3, [r7, #6]
  return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d124      	bne.n	8001758 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	22ff      	movs	r2, #255	@ 0xff
 8001714:	2104      	movs	r1, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f8ca 	bl	80018b0 <CODEC_IO_Write>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2201      	movs	r2, #1
 800172c:	2122      	movs	r1, #34	@ 0x22
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f8be 	bl	80018b0 <CODEC_IO_Write>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2201      	movs	r2, #1
 8001744:	2123      	movs	r1, #35	@ 0x23
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f8b2 	bl	80018b0 <CODEC_IO_Write>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e025      	b.n	80017a4 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2200      	movs	r2, #0
 800175e:	2122      	movs	r1, #34	@ 0x22
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f8a5 	bl	80018b0 <CODEC_IO_Write>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4413      	add	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2200      	movs	r2, #0
 8001776:	2123      	movs	r1, #35	@ 0x23
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f899 	bl	80018b0 <CODEC_IO_Write>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4413      	add	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <cs43l22_SetMute+0xb8>)
 800178e:	7812      	ldrb	r2, [r2, #0]
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	2104      	movs	r1, #4
 8001794:	4618      	mov	r0, r3
 8001796:	f000 f88b 	bl	80018b0 <CODEC_IO_Write>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000680 	.word	0x20000680

080017b4 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	80fb      	strh	r3, [r7, #6]
 80017c0:	4613      	mov	r3, r2
 80017c2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80017c8:	797b      	ldrb	r3, [r7, #5]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d84b      	bhi.n	8001868 <cs43l22_SetOutputMode+0xb4>
 80017d0:	a201      	add	r2, pc, #4	@ (adr r2, 80017d8 <cs43l22_SetOutputMode+0x24>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	08001809 	.word	0x08001809
 80017e0:	08001829 	.word	0x08001829
 80017e4:	08001849 	.word	0x08001849
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	22fa      	movs	r2, #250	@ 0xfa
 80017ee:	2104      	movs	r1, #4
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f85d 	bl	80018b0 <CODEC_IO_Write>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001800:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <cs43l22_SetOutputMode+0xe0>)
 8001802:	22fa      	movs	r2, #250	@ 0xfa
 8001804:	701a      	strb	r2, [r3, #0]
      break;
 8001806:	e03f      	b.n	8001888 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	22af      	movs	r2, #175	@ 0xaf
 800180e:	2104      	movs	r1, #4
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f84d 	bl	80018b0 <CODEC_IO_Write>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4413      	add	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <cs43l22_SetOutputMode+0xe0>)
 8001822:	22af      	movs	r2, #175	@ 0xaf
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e02f      	b.n	8001888 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	22aa      	movs	r2, #170	@ 0xaa
 800182e:	2104      	movs	r1, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f83d 	bl	80018b0 <CODEC_IO_Write>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <cs43l22_SetOutputMode+0xe0>)
 8001842:	22aa      	movs	r2, #170	@ 0xaa
 8001844:	701a      	strb	r2, [r3, #0]
      break;
 8001846:	e01f      	b.n	8001888 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2205      	movs	r2, #5
 800184e:	2104      	movs	r1, #4
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f82d 	bl	80018b0 <CODEC_IO_Write>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <cs43l22_SetOutputMode+0xe0>)
 8001862:	2205      	movs	r2, #5
 8001864:	701a      	strb	r2, [r3, #0]
      break;    
 8001866:	e00f      	b.n	8001888 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2205      	movs	r2, #5
 800186e:	2104      	movs	r1, #4
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f81d 	bl	80018b0 <CODEC_IO_Write>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4413      	add	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <cs43l22_SetOutputMode+0xe0>)
 8001882:	2205      	movs	r2, #5
 8001884:	701a      	strb	r2, [r3, #0]
      break;
 8001886:	bf00      	nop
  }  
  return counter;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000680 	.word	0x20000680

08001898 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
  return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	460b      	mov	r3, r1
 80018bc:	71bb      	strb	r3, [r7, #6]
 80018be:	4613      	mov	r3, r2
 80018c0:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80018c6:	797a      	ldrb	r2, [r7, #5]
 80018c8:	79b9      	ldrb	r1, [r7, #6]
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fcb0 	bl	8001232 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	b2db      	uxtb	r3, r3
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <FifoWrite>:
uint8_t fifo_w_ptr = 0;
uint8_t fifo_r_ptr = 0;
uint8_t fifo_read_enabled = 0;

void FifoWrite(int16_t data)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
  fifobuf[fifo_w_ptr] = data;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <FifoWrite+0x30>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <FifoWrite+0x34>)
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
  fifo_w_ptr++;
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <FifoWrite+0x30>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <FifoWrite+0x30>)
 8001902:	701a      	strb	r2, [r3, #0]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20002d9c 	.word	0x20002d9c
 8001914:	20002b9c 	.word	0x20002b9c

08001918 <process_fft_target_vrms>:
float complexABS(float real, float compl )
{
  return 2 * sqrtf(real * real + compl *compl );
}
void process_fft_target_vrms(float32_t *fft_in_buf)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001926:	f843 0c24 	str.w	r0, [r3, #-36]
  arm_rfft_fast_f32(&fft_instance, fft_in_buf, fft_out_buf, 0);
 800192a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192e:	4619      	mov	r1, r3
 8001930:	2300      	movs	r3, #0
 8001932:	4a82      	ldr	r2, [pc, #520]	@ (8001b3c <process_fft_target_vrms+0x224>)
 8001934:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8001938:	4881      	ldr	r0, [pc, #516]	@ (8001b40 <process_fft_target_vrms+0x228>)
 800193a:	f007 fc4d 	bl	80091d8 <arm_rfft_fast_f32>
  int freqs[1024];
  int freqpoint = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001944:	f102 0204 	add.w	r2, r2, #4
 8001948:	6013      	str	r3, [r2, #0]
  int offset = 40;
 800194a:	2328      	movs	r3, #40	@ 0x28
 800194c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001950:	f102 0218 	add.w	r2, r2, #24
 8001954:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 1024; i = i + 2)
 8001956:	2300      	movs	r3, #0
 8001958:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e08c      	b.n	8001a7a <process_fft_target_vrms+0x162>
  {
    float real = fft_out_buf[i];
 8001960:	4a76      	ldr	r2, [pc, #472]	@ (8001b3c <process_fft_target_vrms+0x224>)
 8001962:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001972:	f102 0214 	add.w	r2, r2, #20
 8001976:	6013      	str	r3, [r2, #0]
    float imag = fft_out_buf[i + 1];
 8001978:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	4a6e      	ldr	r2, [pc, #440]	@ (8001b3c <process_fft_target_vrms+0x224>)
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800198c:	f102 0210 	add.w	r2, r2, #16
 8001990:	6013      	str	r3, [r2, #0]
    float magnitude = 2 * sqrtf(real * real + imag * imag);
 8001992:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001996:	f103 0314 	add.w	r3, r3, #20
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019a2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80019a6:	f103 0310 	add.w	r3, r3, #16
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	f00c fef5 	bl	800e7a8 <sqrtf>
 80019be:	eef0 7a40 	vmov.f32	s15, s0
 80019c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019c6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80019ca:	f103 030c 	add.w	r3, r3, #12
 80019ce:	edc3 7a00 	vstr	s15, [r3]
    int db_value = (int)(20 * log10f(magnitude)) - offset;
 80019d2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80019d6:	f103 030c 	add.w	r3, r3, #12
 80019da:	ed93 0a00 	vldr	s0, [r3]
 80019de:	f00c fe5d 	bl	800e69c <log10f>
 80019e2:	eef0 7a40 	vmov.f32	s15, s0
 80019e6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80019ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f2:	ee17 2a90 	vmov	r2, s15
 80019f6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80019fa:	f103 0318 	add.w	r3, r3, #24
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a06:	f102 021c 	add.w	r2, r2, #28
 8001a0a:	6013      	str	r3, [r2, #0]
    if (db_value < 0)
 8001a0c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a10:	f103 031c 	add.w	r3, r3, #28
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da05      	bge.n	8001a26 <process_fft_target_vrms+0x10e>
      db_value = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a20:	f102 021c 	add.w	r2, r2, #28
 8001a24:	6013      	str	r3, [r2, #0]
    if (db_value > 255)
 8001a26:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a2a:	f103 031c 	add.w	r3, r3, #28
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2bff      	cmp	r3, #255	@ 0xff
 8001a32:	dd05      	ble.n	8001a40 <process_fft_target_vrms+0x128>
      db_value = 255;
 8001a34:	23ff      	movs	r3, #255	@ 0xff
 8001a36:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a3a:	f102 021c 	add.w	r2, r2, #28
 8001a3e:	6013      	str	r3, [r2, #0]
    freqs[freqpoint++] = db_value;
 8001a40:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001a44:	f103 0304 	add.w	r3, r3, #4
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8001a50:	f101 0104 	add.w	r1, r1, #4
 8001a54:	600a      	str	r2, [r1, #0]
 8001a56:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a62:	f102 021c 	add.w	r2, r2, #28
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	f843 2c1c 	str.w	r2, [r3, #-28]
  for (int i = 0; i < 1024; i = i + 2)
 8001a6c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3302      	adds	r3, #2
 8001a74:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a84:	f6ff af6c 	blt.w	8001960 <process_fft_target_vrms+0x48>
  }

  outarray[0] = 0xFF;                 // Start byte
 8001a88:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001a8a:	22ff      	movs	r2, #255	@ 0xff
 8001a8c:	701a      	strb	r2, [r3, #0]
  outarray[1] = (uint8_t)freqs[1];    // 31-5 Hz
 8001a8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a92:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b2a      	ldr	r3, [pc, #168]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001a9a:	705a      	strb	r2, [r3, #1]
  outarray[2] = (uint8_t)freqs[2];    // 63 Hz
 8001a9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aa0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001aa8:	709a      	strb	r2, [r3, #2]
  outarray[3] = (uint8_t)freqs[3];    // 125 Hz
 8001aaa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aae:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001ab6:	70da      	strb	r2, [r3, #3]
  outarray[4] = (uint8_t)freqs[5];    // 250 Hz
 8001ab8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001abc:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001ac4:	711a      	strb	r2, [r3, #4]
  outarray[5] = (uint8_t)freqs[11];   // 500 Hz
 8001ac6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001ad0:	715a      	strb	r2, [r3, #5]
  outarray[6] = (uint8_t)freqs[22];   // 1 kHz
 8001ad2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001adc:	719a      	strb	r2, [r3, #6]
  outarray[7] = (uint8_t)freqs[47];   // 2.2 kHz
 8001ade:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ae2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001aea:	71da      	strb	r2, [r3, #7]
  outarray[8] = (uint8_t)freqs[96];   // 4.5 kHz
 8001aec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001af0:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001af8:	721a      	strb	r2, [r3, #8]
  outarray[9] = (uint8_t)freqs[192];  // 9 kHz
 8001afa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001afe:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001b06:	725a      	strb	r2, [r3, #9]
  outarray[10] = (uint8_t)freqs[320]; // 15 kHz
 8001b08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b0c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001b14:	729a      	strb	r2, [r3, #10]

  if (uartfree == 1)
 8001b16:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <process_fft_target_vrms+0x230>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <process_fft_target_vrms+0x216>
  {
    HAL_UART_Transmit_DMA(&huart2, outarray, 11);
 8001b1e:	220b      	movs	r2, #11
 8001b20:	4908      	ldr	r1, [pc, #32]	@ (8001b44 <process_fft_target_vrms+0x22c>)
 8001b22:	480a      	ldr	r0, [pc, #40]	@ (8001b4c <process_fft_target_vrms+0x234>)
 8001b24:	f004 fde2 	bl	80066ec <HAL_UART_Transmit_DMA>
    uartfree = 0; //
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <process_fft_target_vrms+0x230>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
  }
}
 8001b2e:	bf00      	nop
 8001b30:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20001688 	.word	0x20001688
 8001b40:	20002698 	.word	0x20002698
 8001b44:	20002688 	.word	0x20002688
 8001b48:	20000435 	.word	0x20000435
 8001b4c:	200028b4 	.word	0x200028b4

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b56:	f001 f819 	bl	8002b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b5a:	f000 f8e3 	bl	8001d24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001b5e:	f000 f94b 	bl	8001df8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b62:	f000 fa9b 	bl	800209c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b66:	f000 fa69 	bl	800203c <MX_DMA_Init>
  MX_I2C1_Init();
 8001b6a:	f000 f97d 	bl	8001e68 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001b6e:	f000 f9d7 	bl	8001f20 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001b72:	f000 fa03 	bl	8001f7c <MX_SPI1_Init>
  MX_CRC_Init();
 8001b76:	f000 f95b 	bl	8001e30 <MX_CRC_Init>
  MX_I2S2_Init();
 8001b7a:	f000 f9a3 	bl	8001ec4 <MX_I2S2_Init>
  MX_PDM2PCM_Init();
 8001b7e:	f005 fa59 	bl	8007034 <MX_PDM2PCM_Init>
  MX_USART2_UART_Init();
 8001b82:	f000 fa31 	bl	8001fe8 <MX_USART2_UART_Init>
//  PDM1_filter_config.output_samples_number = 32;
//  PDM1_filter_config.mic_gain = 25;
//  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_32; // DAC CLK: 46875 kS/s * 32 bit = 1500000 MHz, PDM2PCM: 1500000 / 32 = 46875 kS/s
//  PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM1_filter_handler, &PDM1_filter_config);

  uint16_t readid = 0, initret = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	80fb      	strh	r3, [r7, #6]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	80bb      	strh	r3, [r7, #4]
  /* Retieve audio codec identifier */
  readid = cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS); // & CS43L22_ID_MASK) == CS43L22_ID)
 8001b8e:	4b57      	ldr	r3, [pc, #348]	@ (8001cec <main+0x19c>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2094      	movs	r0, #148	@ 0x94
 8001b94:	4798      	blx	r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
  initret = cs43l22_Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_BOTH, 80, AUDIO_FREQUENCY_48K);
 8001b9a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8001b9e:	2250      	movs	r2, #80	@ 0x50
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	2094      	movs	r0, #148	@ 0x94
 8001ba4:	f7ff fb6e 	bl	8001284 <cs43l22_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	80bb      	strh	r3, [r7, #4]
  arm_rfft_fast_init_f32(&fft_instance, 1024);
 8001bac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bb0:	484f      	ldr	r0, [pc, #316]	@ (8001cf0 <main+0x1a0>)
 8001bb2:	f007 fa27 	bl	8009004 <arm_rfft_fast_init_f32>
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)&txBuf[0], 64);
 8001bb6:	2240      	movs	r2, #64	@ 0x40
 8001bb8:	494e      	ldr	r1, [pc, #312]	@ (8001cf4 <main+0x1a4>)
 8001bba:	484f      	ldr	r0, [pc, #316]	@ (8001cf8 <main+0x1a8>)
 8001bbc:	f003 f922 	bl	8004e04 <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0], 64);
 8001bc0:	2240      	movs	r2, #64	@ 0x40
 8001bc2:	494e      	ldr	r1, [pc, #312]	@ (8001cfc <main+0x1ac>)
 8001bc4:	484e      	ldr	r0, [pc, #312]	@ (8001d00 <main+0x1b0>)
 8001bc6:	f003 f9c5 	bl	8004f54 <HAL_I2S_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (button_flag)
 8001bca:	4b4e      	ldr	r3, [pc, #312]	@ (8001d04 <main+0x1b4>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00e      	beq.n	8001bf2 <main+0xa2>
    {
      if (start_stop_recording)
 8001bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8001d08 <main+0x1b8>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <main+0x96>
      {
        start_stop_recording = 0;
 8001bde:	4b4a      	ldr	r3, [pc, #296]	@ (8001d08 <main+0x1b8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	e002      	b.n	8001bec <main+0x9c>
        //  printf("stop recording \n");
      }
      else
      {
        start_stop_recording = 1;
 8001be6:	4b48      	ldr	r3, [pc, #288]	@ (8001d08 <main+0x1b8>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
        // printf("start recording \n");
      }

      button_flag = 0;
 8001bec:	4b45      	ldr	r3, [pc, #276]	@ (8001d04 <main+0x1b4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
    }
    if (rxstate == 1 && start_stop_recording == 1)
 8001bf2:	4b46      	ldr	r3, [pc, #280]	@ (8001d0c <main+0x1bc>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d139      	bne.n	8001c6e <main+0x11e>
 8001bfa:	4b43      	ldr	r3, [pc, #268]	@ (8001d08 <main+0x1b8>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d134      	bne.n	8001c6e <main+0x11e>
    {
      PDM_Filter(&pdmRxBuf[0], &MidBuffer[0], &PDM1_filter_handler);
 8001c04:	4a42      	ldr	r2, [pc, #264]	@ (8001d10 <main+0x1c0>)
 8001c06:	4943      	ldr	r1, [pc, #268]	@ (8001d14 <main+0x1c4>)
 8001c08:	483c      	ldr	r0, [pc, #240]	@ (8001cfc <main+0x1ac>)
 8001c0a:	f007 f909 	bl	8008e20 <PDM_Filter>
      for (int i = 0; i < 16; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e01b      	b.n	8001c4c <main+0xfc>
      {
        FifoWrite(MidBuffer[i]);
 8001c14:	4a3f      	ldr	r2, [pc, #252]	@ (8001d14 <main+0x1c4>)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fe5f 	bl	80018e0 <FifoWrite>
        fft_input_buffer[fft_input_index++] = (float32_t)MidBuffer[i];
 8001c22:	4a3c      	ldr	r2, [pc, #240]	@ (8001d14 <main+0x1c4>)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d18 <main+0x1c8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	4939      	ldr	r1, [pc, #228]	@ (8001d18 <main+0x1c8>)
 8001c32:	600a      	str	r2, [r1, #0]
 8001c34:	ee07 0a90 	vmov	s15, r0
 8001c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3c:	4a37      	ldr	r2, [pc, #220]	@ (8001d1c <main+0x1cc>)
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 16; i++)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	dde0      	ble.n	8001c14 <main+0xc4>
      }

      if (fft_input_index >= 1024)
 8001c52:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <main+0x1c8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5a:	db05      	blt.n	8001c68 <main+0x118>
      {
        process_fft_target_vrms(fft_input_buffer);
 8001c5c:	482f      	ldr	r0, [pc, #188]	@ (8001d1c <main+0x1cc>)
 8001c5e:	f7ff fe5b 	bl	8001918 <process_fft_target_vrms>
        fft_input_index = 0;
 8001c62:	4b2d      	ldr	r3, [pc, #180]	@ (8001d18 <main+0x1c8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
      }
      rxstate = 0;
 8001c68:	4b28      	ldr	r3, [pc, #160]	@ (8001d0c <main+0x1bc>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
    }
    if (rxstate == 2 && start_stop_recording == 1)
 8001c6e:	4b27      	ldr	r3, [pc, #156]	@ (8001d0c <main+0x1bc>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d1a9      	bne.n	8001bca <main+0x7a>
 8001c76:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <main+0x1b8>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d1a4      	bne.n	8001bca <main+0x7a>
    {
      PDM_Filter(&pdmRxBuf[64], &MidBuffer[0], &PDM1_filter_handler);
 8001c80:	4a23      	ldr	r2, [pc, #140]	@ (8001d10 <main+0x1c0>)
 8001c82:	4924      	ldr	r1, [pc, #144]	@ (8001d14 <main+0x1c4>)
 8001c84:	4826      	ldr	r0, [pc, #152]	@ (8001d20 <main+0x1d0>)
 8001c86:	f007 f8cb 	bl	8008e20 <PDM_Filter>
      for (int i = 0; i < 16; i++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	e01b      	b.n	8001cc8 <main+0x178>
      {
        FifoWrite(MidBuffer[i]);
 8001c90:	4a20      	ldr	r2, [pc, #128]	@ (8001d14 <main+0x1c4>)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fe21 	bl	80018e0 <FifoWrite>
        fft_input_buffer[fft_input_index++] = (float32_t)MidBuffer[i];
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001d14 <main+0x1c4>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <main+0x1c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	491a      	ldr	r1, [pc, #104]	@ (8001d18 <main+0x1c8>)
 8001cae:	600a      	str	r2, [r1, #0]
 8001cb0:	ee07 0a90 	vmov	s15, r0
 8001cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb8:	4a18      	ldr	r2, [pc, #96]	@ (8001d1c <main+0x1cc>)
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 16; i++)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	dde0      	ble.n	8001c90 <main+0x140>
      }
      if (fft_input_index >= 1024)
 8001cce:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <main+0x1c8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd6:	db05      	blt.n	8001ce4 <main+0x194>
      {
        process_fft_target_vrms(fft_input_buffer);
 8001cd8:	4810      	ldr	r0, [pc, #64]	@ (8001d1c <main+0x1cc>)
 8001cda:	f7ff fe1d 	bl	8001918 <process_fft_target_vrms>
        fft_input_index = 0;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <main+0x1c8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
      }
      rxstate = 0;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <main+0x1bc>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
    if (button_flag)
 8001cea:	e76e      	b.n	8001bca <main+0x7a>
 8001cec:	20000404 	.word	0x20000404
 8001cf0:	20002698 	.word	0x20002698
 8001cf4:	20002958 	.word	0x20002958
 8001cf8:	20002754 	.word	0x20002754
 8001cfc:	20002a58 	.word	0x20002a58
 8001d00:	2000270c 	.word	0x2000270c
 8001d04:	20000681 	.word	0x20000681
 8001d08:	20000682 	.word	0x20000682
 8001d0c:	20002b99 	.word	0x20002b99
 8001d10:	20002da8 	.word	0x20002da8
 8001d14:	20002b58 	.word	0x20002b58
 8001d18:	20001684 	.word	0x20001684
 8001d1c:	20000684 	.word	0x20000684
 8001d20:	20002ad8 	.word	0x20002ad8

08001d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b094      	sub	sp, #80	@ 0x50
 8001d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	f107 0320 	add.w	r3, r7, #32
 8001d2e:	2230      	movs	r2, #48	@ 0x30
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f009 f8db 	bl	800aeee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	4b28      	ldr	r3, [pc, #160]	@ (8001df0 <SystemClock_Config+0xcc>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	4a27      	ldr	r2, [pc, #156]	@ (8001df0 <SystemClock_Config+0xcc>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d58:	4b25      	ldr	r3, [pc, #148]	@ (8001df0 <SystemClock_Config+0xcc>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <SystemClock_Config+0xd0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a21      	ldr	r2, [pc, #132]	@ (8001df4 <SystemClock_Config+0xd0>)
 8001d6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b1f      	ldr	r3, [pc, #124]	@ (8001df4 <SystemClock_Config+0xd0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d80:	2301      	movs	r3, #1
 8001d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d94:	2308      	movs	r3, #8
 8001d96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d98:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001da2:	2307      	movs	r3, #7
 8001da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 fd5e 	bl	800586c <HAL_RCC_OscConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001db6:	f000 faf7 	bl	80023a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dba:	230f      	movs	r3, #15
 8001dbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dc6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001dca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	2105      	movs	r1, #5
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 ffbf 	bl	8005d5c <HAL_RCC_ClockConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001de4:	f000 fae0 	bl	80023a8 <Error_Handler>
  }
}
 8001de8:	bf00      	nop
 8001dea:	3750      	adds	r7, #80	@ 0x50
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000

08001df8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dfe:	463b      	mov	r3, r7
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001e0e:	23c0      	movs	r3, #192	@ 0xc0
 8001e10:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e12:	2302      	movs	r3, #2
 8001e14:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e16:	463b      	mov	r3, r7
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f004 f9bf 	bl	800619c <HAL_RCCEx_PeriphCLKConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8001e24:	f000 fac0 	bl	80023a8 <Error_Handler>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001e34:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <MX_CRC_Init+0x30>)
 8001e36:	4a0b      	ldr	r2, [pc, #44]	@ (8001e64 <MX_CRC_Init+0x34>)
 8001e38:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e3a:	4809      	ldr	r0, [pc, #36]	@ (8001e60 <MX_CRC_Init+0x30>)
 8001e3c:	f001 f84d 	bl	8002eda <HAL_CRC_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001e46:	f000 faaf 	bl	80023a8 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8001e4a:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <MX_CRC_Init+0x30>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	4b03      	ldr	r3, [pc, #12]	@ (8001e60 <MX_CRC_Init+0x30>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200026b0 	.word	0x200026b0
 8001e64:	40023000 	.word	0x40023000

08001e68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <MX_I2C1_Init+0x50>)
 8001e6e:	4a13      	ldr	r2, [pc, #76]	@ (8001ebc <MX_I2C1_Init+0x54>)
 8001e70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <MX_I2C1_Init+0x50>)
 8001e74:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <MX_I2C1_Init+0x58>)
 8001e76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <MX_I2C1_Init+0x50>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <MX_I2C1_Init+0x50>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <MX_I2C1_Init+0x50>)
 8001e86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <MX_I2C1_Init+0x50>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <MX_I2C1_Init+0x50>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e98:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <MX_I2C1_Init+0x50>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <MX_I2C1_Init+0x50>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	@ (8001eb8 <MX_I2C1_Init+0x50>)
 8001ea6:	f001 fe6f 	bl	8003b88 <HAL_I2C_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001eb0:	f000 fa7a 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200026b8 	.word	0x200026b8
 8001ebc:	40005400 	.word	0x40005400
 8001ec0:	000186a0 	.word	0x000186a0

08001ec4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001ec8:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <MX_I2S2_Init+0x54>)
 8001eca:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <MX_I2S2_Init+0x58>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <MX_I2S2_Init+0x54>)
 8001ed0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ed4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <MX_I2S2_Init+0x54>)
 8001ed8:	2210      	movs	r2, #16
 8001eda:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001edc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <MX_I2S2_Init+0x54>)
 8001ede:	2203      	movs	r2, #3
 8001ee0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <MX_I2S2_Init+0x54>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <MX_I2S2_Init+0x54>)
 8001eea:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001eee:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <MX_I2S2_Init+0x54>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <MX_I2S2_Init+0x54>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_I2S2_Init+0x54>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_I2S2_Init+0x54>)
 8001f04:	f002 fe3e 	bl	8004b84 <HAL_I2S_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8001f0e:	f000 fa4b 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000270c 	.word	0x2000270c
 8001f1c:	40003800 	.word	0x40003800

08001f20 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <MX_I2S3_Init+0x54>)
 8001f26:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <MX_I2S3_Init+0x58>)
 8001f28:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <MX_I2S3_Init+0x54>)
 8001f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f30:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <MX_I2S3_Init+0x54>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001f38:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <MX_I2S3_Init+0x54>)
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <MX_I2S3_Init+0x54>)
 8001f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f44:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <MX_I2S3_Init+0x54>)
 8001f48:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001f4c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <MX_I2S3_Init+0x54>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <MX_I2S3_Init+0x54>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <MX_I2S3_Init+0x54>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <MX_I2S3_Init+0x54>)
 8001f62:	f002 fe0f 	bl	8004b84 <HAL_I2S_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001f6c:	f000 fa1c 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20002754 	.word	0x20002754
 8001f78:	40003c00 	.word	0x40003c00

08001f7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001f82:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <MX_SPI1_Init+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001f88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8e:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001fc8:	220a      	movs	r2, #10
 8001fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	@ (8001fe0 <MX_SPI1_Init+0x64>)
 8001fce:	f004 fa25 	bl	800641c <HAL_SPI_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fd8:	f000 f9e6 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	2000285c 	.word	0x2000285c
 8001fe4:	40013000 	.word	0x40013000

08001fe8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <MX_USART2_UART_Init+0x4c>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <MX_USART2_UART_Init+0x50>)
 8001ff0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <MX_USART2_UART_Init+0x4c>)
 8001ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <MX_USART2_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <MX_USART2_UART_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <MX_USART2_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <MX_USART2_UART_Init+0x4c>)
 800200e:	220c      	movs	r2, #12
 8002010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <MX_USART2_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <MX_USART2_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <MX_USART2_UART_Init+0x4c>)
 8002020:	f004 fa85 	bl	800652e <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800202a:	f000 f9bd 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200028b4 	.word	0x200028b4
 8002038:	40004400 	.word	0x40004400

0800203c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <MX_DMA_Init+0x5c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <MX_DMA_Init+0x5c>)
 800204c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002050:	6313      	str	r3, [r2, #48]	@ 0x30
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <MX_DMA_Init+0x5c>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	200e      	movs	r0, #14
 8002064:	f000 ff03 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002068:	200e      	movs	r0, #14
 800206a:	f000 ff1c 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2010      	movs	r0, #16
 8002074:	f000 fefb 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002078:	2010      	movs	r0, #16
 800207a:	f000 ff14 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	2011      	movs	r0, #17
 8002084:	f000 fef3 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002088:	2011      	movs	r0, #17
 800208a:	f000 ff0c 	bl	8002ea6 <HAL_NVIC_EnableIRQ>

}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800

0800209c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	@ 0x30
 80020a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	4b74      	ldr	r3, [pc, #464]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	4a73      	ldr	r2, [pc, #460]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c2:	4b71      	ldr	r3, [pc, #452]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4a6c      	ldr	r2, [pc, #432]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4b6a      	ldr	r3, [pc, #424]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b66      	ldr	r3, [pc, #408]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4a65      	ldr	r2, [pc, #404]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 80020f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4b63      	ldr	r3, [pc, #396]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b5f      	ldr	r3, [pc, #380]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4a5e      	ldr	r2, [pc, #376]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4b5c      	ldr	r3, [pc, #368]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	4b58      	ldr	r3, [pc, #352]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	4a57      	ldr	r2, [pc, #348]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6313      	str	r3, [r2, #48]	@ 0x30
 8002132:	4b55      	ldr	r3, [pc, #340]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4b51      	ldr	r3, [pc, #324]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a50      	ldr	r2, [pc, #320]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b4e      	ldr	r3, [pc, #312]	@ (8002288 <MX_GPIO_Init+0x1ec>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	2108      	movs	r1, #8
 800215e:	484b      	ldr	r0, [pc, #300]	@ (800228c <MX_GPIO_Init+0x1f0>)
 8002160:	f001 fce0 	bl	8003b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002164:	2201      	movs	r2, #1
 8002166:	2101      	movs	r1, #1
 8002168:	4849      	ldr	r0, [pc, #292]	@ (8002290 <MX_GPIO_Init+0x1f4>)
 800216a:	f001 fcdb 	bl	8003b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800216e:	2200      	movs	r2, #0
 8002170:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002174:	4847      	ldr	r0, [pc, #284]	@ (8002294 <MX_GPIO_Init+0x1f8>)
 8002176:	f001 fcd5 	bl	8003b24 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800217a:	2308      	movs	r3, #8
 800217c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	2301      	movs	r3, #1
 8002180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	483e      	ldr	r0, [pc, #248]	@ (800228c <MX_GPIO_Init+0x1f0>)
 8002192:	f001 fa2f 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002196:	2301      	movs	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	4838      	ldr	r0, [pc, #224]	@ (8002290 <MX_GPIO_Init+0x1f4>)
 80021ae:	f001 fa21 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4619      	mov	r1, r3
 80021c6:	4834      	ldr	r0, [pc, #208]	@ (8002298 <MX_GPIO_Init+0x1fc>)
 80021c8:	f001 fa14 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80021cc:	2304      	movs	r3, #4
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	4619      	mov	r1, r3
 80021de:	482f      	ldr	r0, [pc, #188]	@ (800229c <MX_GPIO_Init+0x200>)
 80021e0:	f001 fa08 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80021e4:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80021e8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	4619      	mov	r1, r3
 80021fc:	4825      	ldr	r0, [pc, #148]	@ (8002294 <MX_GPIO_Init+0x1f8>)
 80021fe:	f001 f9f9 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	4619      	mov	r1, r3
 8002216:	4820      	ldr	r0, [pc, #128]	@ (8002298 <MX_GPIO_Init+0x1fc>)
 8002218:	f001 f9ec 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800221c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800222e:	230a      	movs	r3, #10
 8002230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	4619      	mov	r1, r3
 8002238:	4817      	ldr	r0, [pc, #92]	@ (8002298 <MX_GPIO_Init+0x1fc>)
 800223a:	f001 f9db 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800223e:	2320      	movs	r3, #32
 8002240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	4810      	ldr	r0, [pc, #64]	@ (8002294 <MX_GPIO_Init+0x1f8>)
 8002252:	f001 f9cf 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002256:	2302      	movs	r3, #2
 8002258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800225a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800225e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4619      	mov	r1, r3
 800226a:	4808      	ldr	r0, [pc, #32]	@ (800228c <MX_GPIO_Init+0x1f0>)
 800226c:	f001 f9c2 	bl	80035f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0); // �?ặt mức ưu tiên cho ngắt
 8002270:	2200      	movs	r2, #0
 8002272:	2102      	movs	r1, #2
 8002274:	2006      	movs	r0, #6
 8002276:	f000 fdfa 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);         // Bật ngắt EXTI0
 800227a:	2006      	movs	r0, #6
 800227c:	f000 fe13 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8002280:	bf00      	nop
 8002282:	3730      	adds	r7, #48	@ 0x30
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	40021000 	.word	0x40021000
 8002290:	40020800 	.word	0x40020800
 8002294:	40020c00 	.word	0x40020c00
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400

080022a0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80022a8:	1d39      	adds	r1, r7, #4
 80022aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022ae:	2201      	movs	r2, #1
 80022b0:	4803      	ldr	r0, [pc, #12]	@ (80022c0 <__io_putchar+0x20>)
 80022b2:	f004 f989 	bl	80065c8 <HAL_UART_Transmit>
  return ch;
 80022b6:	687b      	ldr	r3, [r7, #4]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200028b4 	.word	0x200028b4

080022c4 <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uartfree = 1;
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_UART_TxHalfCpltCallback+0x24>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
  huart2.gState = HAL_UART_STATE_READY;
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_UART_TxHalfCpltCallback+0x28>)
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000435 	.word	0x20000435
 80022ec:	200028b4 	.word	0x200028b4

080022f0 <HAL_I2S_TxHalfCpltCallback>:
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  txstate = 1;
 80022f8:	4b04      	ldr	r3, [pc, #16]	@ (800230c <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20002b98 	.word	0x20002b98

08002310 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  txstate = 2;
 8002318:	4b04      	ldr	r3, [pc, #16]	@ (800232c <HAL_I2S_TxCpltCallback+0x1c>)
 800231a:	2202      	movs	r2, #2
 800231c:	701a      	strb	r2, [r3, #0]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20002b98 	.word	0x20002b98

08002330 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  rxstate = 1;
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <HAL_I2S_RxHalfCpltCallback+0x1c>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20002b99 	.word	0x20002b99

08002350 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  rxstate = 2;
 8002358:	4b04      	ldr	r3, [pc, #16]	@ (800236c <HAL_I2S_RxCpltCallback+0x1c>)
 800235a:	2202      	movs	r2, #2
 800235c:	701a      	strb	r2, [r3, #0]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20002b99 	.word	0x20002b99

08002370 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // Xử lý ngắt qua HAL
 8002374:	2001      	movs	r0, #1
 8002376:	f001 fbef 	bl	8003b58 <HAL_GPIO_EXTI_IRQHandler>
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0) // Kiểm tra ngắt từ PA0
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d102      	bne.n	8002396 <HAL_GPIO_EXTI_Callback+0x16>
  {
    button_flag = 1; // �?ặt c�? khi nút được nhấn
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <HAL_GPIO_EXTI_Callback+0x24>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000681 	.word	0x20000681

080023a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023ac:	b672      	cpsid	i
}
 80023ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <Error_Handler+0x8>

080023b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <HAL_MspInit+0x4c>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002400 <HAL_MspInit+0x4c>)
 80023c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <HAL_MspInit+0x4c>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	4b09      	ldr	r3, [pc, #36]	@ (8002400 <HAL_MspInit+0x4c>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	4a08      	ldr	r2, [pc, #32]	@ (8002400 <HAL_MspInit+0x4c>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <HAL_MspInit+0x4c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023f2:	2007      	movs	r0, #7
 80023f4:	f000 fd30 	bl	8002e58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800

08002404 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0b      	ldr	r2, [pc, #44]	@ (8002440 <HAL_CRC_MspInit+0x3c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10d      	bne.n	8002432 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <HAL_CRC_MspInit+0x40>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	4a09      	ldr	r2, [pc, #36]	@ (8002444 <HAL_CRC_MspInit+0x40>)
 8002420:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002424:	6313      	str	r3, [r2, #48]	@ 0x30
 8002426:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <HAL_CRC_MspInit+0x40>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023000 	.word	0x40023000
 8002444:	40023800 	.word	0x40023800

08002448 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	@ 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a19      	ldr	r2, [pc, #100]	@ (80024cc <HAL_I2C_MspInit+0x84>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d12c      	bne.n	80024c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <HAL_I2C_MspInit+0x88>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	4a17      	ldr	r2, [pc, #92]	@ (80024d0 <HAL_I2C_MspInit+0x88>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	6313      	str	r3, [r2, #48]	@ 0x30
 800247a:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <HAL_I2C_MspInit+0x88>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002486:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800248a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800248c:	2312      	movs	r3, #18
 800248e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002490:	2301      	movs	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002498:	2304      	movs	r3, #4
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	4619      	mov	r1, r3
 80024a2:	480c      	ldr	r0, [pc, #48]	@ (80024d4 <HAL_I2C_MspInit+0x8c>)
 80024a4:	f001 f8a6 	bl	80035f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <HAL_I2C_MspInit+0x88>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	4a07      	ldr	r2, [pc, #28]	@ (80024d0 <HAL_I2C_MspInit+0x88>)
 80024b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b8:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_I2C_MspInit+0x88>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	3728      	adds	r7, #40	@ 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40005400 	.word	0x40005400
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020400 	.word	0x40020400

080024d8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <HAL_I2C_MspDeInit+0x38>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d10e      	bne.n	8002508 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <HAL_I2C_MspDeInit+0x3c>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	4a09      	ldr	r2, [pc, #36]	@ (8002514 <HAL_I2C_MspDeInit+0x3c>)
 80024f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80024f4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 80024f6:	2140      	movs	r1, #64	@ 0x40
 80024f8:	4807      	ldr	r0, [pc, #28]	@ (8002518 <HAL_I2C_MspDeInit+0x40>)
 80024fa:	f001 fa17 	bl	800392c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 80024fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002502:	4805      	ldr	r0, [pc, #20]	@ (8002518 <HAL_I2C_MspDeInit+0x40>)
 8002504:	f001 fa12 	bl	800392c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40005400 	.word	0x40005400
 8002514:	40023800 	.word	0x40023800
 8002518:	40020400 	.word	0x40020400

0800251c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08e      	sub	sp, #56	@ 0x38
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a81      	ldr	r2, [pc, #516]	@ (8002740 <HAL_I2S_MspInit+0x224>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d17b      	bne.n	8002636 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
 8002542:	4b80      	ldr	r3, [pc, #512]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	4a7f      	ldr	r2, [pc, #508]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800254c:	6413      	str	r3, [r2, #64]	@ 0x40
 800254e:	4b7d      	ldr	r3, [pc, #500]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002556:	623b      	str	r3, [r7, #32]
 8002558:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	4b79      	ldr	r3, [pc, #484]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	4a78      	ldr	r2, [pc, #480]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002564:	f043 0304 	orr.w	r3, r3, #4
 8002568:	6313      	str	r3, [r2, #48]	@ 0x30
 800256a:	4b76      	ldr	r3, [pc, #472]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	4b72      	ldr	r3, [pc, #456]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	4a71      	ldr	r2, [pc, #452]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	6313      	str	r3, [r2, #48]	@ 0x30
 8002586:	4b6f      	ldr	r3, [pc, #444]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002592:	2308      	movs	r3, #8
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025a2:	2305      	movs	r3, #5
 80025a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80025a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025aa:	4619      	mov	r1, r3
 80025ac:	4866      	ldr	r0, [pc, #408]	@ (8002748 <HAL_I2S_MspInit+0x22c>)
 80025ae:	f001 f821 	bl	80035f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80025b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025c4:	2305      	movs	r3, #5
 80025c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025cc:	4619      	mov	r1, r3
 80025ce:	485f      	ldr	r0, [pc, #380]	@ (800274c <HAL_I2S_MspInit+0x230>)
 80025d0:	f001 f810 	bl	80035f4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80025d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 80025d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002754 <HAL_I2S_MspInit+0x238>)
 80025d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80025da:	4b5d      	ldr	r3, [pc, #372]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 80025dc:	2200      	movs	r2, #0
 80025de:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025e0:	4b5b      	ldr	r3, [pc, #364]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025ec:	4b58      	ldr	r3, [pc, #352]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 80025ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025f2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025f4:	4b56      	ldr	r3, [pc, #344]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 80025f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025fa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025fc:	4b54      	ldr	r3, [pc, #336]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 80025fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002602:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002604:	4b52      	ldr	r3, [pc, #328]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 8002606:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800260a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800260c:	4b50      	ldr	r3, [pc, #320]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 800260e:	2200      	movs	r2, #0
 8002610:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002612:	4b4f      	ldr	r3, [pc, #316]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 8002614:	2200      	movs	r2, #0
 8002616:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002618:	484d      	ldr	r0, [pc, #308]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 800261a:	f000 fc7b 	bl	8002f14 <HAL_DMA_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8002624:	f7ff fec0 	bl	80023a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a49      	ldr	r2, [pc, #292]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 800262c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800262e:	4a48      	ldr	r2, [pc, #288]	@ (8002750 <HAL_I2S_MspInit+0x234>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002634:	e07f      	b.n	8002736 <HAL_I2S_MspInit+0x21a>
  else if(hi2s->Instance==SPI3)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a47      	ldr	r2, [pc, #284]	@ (8002758 <HAL_I2S_MspInit+0x23c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d17a      	bne.n	8002736 <HAL_I2S_MspInit+0x21a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	4b3f      	ldr	r3, [pc, #252]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	4a3e      	ldr	r2, [pc, #248]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 800264a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800264e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002650:	4b3c      	ldr	r3, [pc, #240]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	4b38      	ldr	r3, [pc, #224]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002664:	4a37      	ldr	r2, [pc, #220]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6313      	str	r3, [r2, #48]	@ 0x30
 800266c:	4b35      	ldr	r3, [pc, #212]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	4b31      	ldr	r3, [pc, #196]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	4a30      	ldr	r2, [pc, #192]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	6313      	str	r3, [r2, #48]	@ 0x30
 8002688:	4b2e      	ldr	r3, [pc, #184]	@ (8002744 <HAL_I2S_MspInit+0x228>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002694:	2310      	movs	r3, #16
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026a4:	2306      	movs	r3, #6
 80026a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80026a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ac:	4619      	mov	r1, r3
 80026ae:	482b      	ldr	r0, [pc, #172]	@ (800275c <HAL_I2S_MspInit+0x240>)
 80026b0:	f000 ffa0 	bl	80035f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80026b4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026c6:	2306      	movs	r3, #6
 80026c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ce:	4619      	mov	r1, r3
 80026d0:	481d      	ldr	r0, [pc, #116]	@ (8002748 <HAL_I2S_MspInit+0x22c>)
 80026d2:	f000 ff8f 	bl	80035f4 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80026d6:	4b22      	ldr	r3, [pc, #136]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 80026d8:	4a22      	ldr	r2, [pc, #136]	@ (8002764 <HAL_I2S_MspInit+0x248>)
 80026da:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80026dc:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 80026de:	2200      	movs	r2, #0
 80026e0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 80026e4:	2240      	movs	r2, #64	@ 0x40
 80026e6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 80026f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026f4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 80026f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026fc:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026fe:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 8002700:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002704:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002706:	4b16      	ldr	r3, [pc, #88]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 8002708:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800270c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800270e:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002714:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800271a:	4811      	ldr	r0, [pc, #68]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 800271c:	f000 fbfa 	bl	8002f14 <HAL_DMA_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2S_MspInit+0x20e>
      Error_Handler();
 8002726:	f7ff fe3f 	bl	80023a8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a0c      	ldr	r2, [pc, #48]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 800272e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002730:	4a0b      	ldr	r2, [pc, #44]	@ (8002760 <HAL_I2S_MspInit+0x244>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002736:	bf00      	nop
 8002738:	3738      	adds	r7, #56	@ 0x38
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40003800 	.word	0x40003800
 8002744:	40023800 	.word	0x40023800
 8002748:	40020800 	.word	0x40020800
 800274c:	40020400 	.word	0x40020400
 8002750:	2000279c 	.word	0x2000279c
 8002754:	40026058 	.word	0x40026058
 8002758:	40003c00 	.word	0x40003c00
 800275c:	40020000 	.word	0x40020000
 8002760:	200027fc 	.word	0x200027fc
 8002764:	40026088 	.word	0x40026088

08002768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a19      	ldr	r2, [pc, #100]	@ (80027ec <HAL_SPI_MspInit+0x84>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d12b      	bne.n	80027e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 8002794:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002798:	6453      	str	r3, [r2, #68]	@ 0x44
 800279a:	4b15      	ldr	r3, [pc, #84]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b6:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80027c2:	23e0      	movs	r3, #224	@ 0xe0
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027d2:	2305      	movs	r3, #5
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4805      	ldr	r0, [pc, #20]	@ (80027f4 <HAL_SPI_MspInit+0x8c>)
 80027de:	f000 ff09 	bl	80035f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	@ 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40013000 	.word	0x40013000
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020000 	.word	0x40020000

080027f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a30      	ldr	r2, [pc, #192]	@ (80028d8 <HAL_UART_MspInit+0xe0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d159      	bne.n	80028ce <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	4b2f      	ldr	r3, [pc, #188]	@ (80028dc <HAL_UART_MspInit+0xe4>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a2e      	ldr	r2, [pc, #184]	@ (80028dc <HAL_UART_MspInit+0xe4>)
 8002824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b2c      	ldr	r3, [pc, #176]	@ (80028dc <HAL_UART_MspInit+0xe4>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b28      	ldr	r3, [pc, #160]	@ (80028dc <HAL_UART_MspInit+0xe4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a27      	ldr	r2, [pc, #156]	@ (80028dc <HAL_UART_MspInit+0xe4>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b25      	ldr	r3, [pc, #148]	@ (80028dc <HAL_UART_MspInit+0xe4>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002852:	230c      	movs	r3, #12
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002862:	2307      	movs	r3, #7
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	481c      	ldr	r0, [pc, #112]	@ (80028e0 <HAL_UART_MspInit+0xe8>)
 800286e:	f000 fec1 	bl	80035f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002872:	4b1c      	ldr	r3, [pc, #112]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 8002874:	4a1c      	ldr	r2, [pc, #112]	@ (80028e8 <HAL_UART_MspInit+0xf0>)
 8002876:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002878:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 800287a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800287e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002880:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 8002882:	2240      	movs	r2, #64	@ 0x40
 8002884:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002886:	4b17      	ldr	r3, [pc, #92]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 8002888:	2200      	movs	r2, #0
 800288a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800288c:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 800288e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002892:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002894:	4b13      	ldr	r3, [pc, #76]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 8002896:	2200      	movs	r2, #0
 8002898:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800289a:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028a0:	4b10      	ldr	r3, [pc, #64]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028a6:	4b0f      	ldr	r3, [pc, #60]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ac:	4b0d      	ldr	r3, [pc, #52]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028b2:	480c      	ldr	r0, [pc, #48]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 80028b4:	f000 fb2e 	bl	8002f14 <HAL_DMA_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80028be:	f7ff fd73 	bl	80023a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a07      	ldr	r2, [pc, #28]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 80028c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80028c8:	4a06      	ldr	r2, [pc, #24]	@ (80028e4 <HAL_UART_MspInit+0xec>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	@ 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40004400 	.word	0x40004400
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	200028f8 	.word	0x200028f8
 80028e8:	400260a0 	.word	0x400260a0

080028ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <NMI_Handler+0x4>

080028f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <HardFault_Handler+0x4>

080028fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <MemManage_Handler+0x4>

08002904 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <BusFault_Handler+0x4>

0800290c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <UsageFault_Handler+0x4>

08002914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002942:	f000 f975 	bl	8002c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <DMA1_Stream3_IRQHandler+0x10>)
 8002952:	f000 fbe5 	bl	8003120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000279c 	.word	0x2000279c

08002960 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002964:	4802      	ldr	r0, [pc, #8]	@ (8002970 <DMA1_Stream5_IRQHandler+0x10>)
 8002966:	f000 fbdb 	bl	8003120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200027fc 	.word	0x200027fc

08002974 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002978:	4802      	ldr	r0, [pc, #8]	@ (8002984 <DMA1_Stream6_IRQHandler+0x10>)
 800297a:	f000 fbd1 	bl	8003120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200028f8 	.word	0x200028f8

08002988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return 1;
 800298c:	2301      	movs	r3, #1
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_kill>:

int _kill(int pid, int sig)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029a2:	f008 faf7 	bl	800af94 <__errno>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2216      	movs	r2, #22
 80029aa:	601a      	str	r2, [r3, #0]
  return -1;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_exit>:

void _exit (int status)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029c0:	f04f 31ff 	mov.w	r1, #4294967295
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ffe7 	bl	8002998 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029ca:	bf00      	nop
 80029cc:	e7fd      	b.n	80029ca <_exit+0x12>

080029ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e00a      	b.n	80029f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029e0:	f3af 8000 	nop.w
 80029e4:	4601      	mov	r1, r0
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	60ba      	str	r2, [r7, #8]
 80029ec:	b2ca      	uxtb	r2, r1
 80029ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3301      	adds	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	dbf0      	blt.n	80029e0 <_read+0x12>
  }

  return len;
 80029fe:	687b      	ldr	r3, [r7, #4]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	e009      	b.n	8002a2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	60ba      	str	r2, [r7, #8]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fc3c 	bl	80022a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	dbf1      	blt.n	8002a1a <_write+0x12>
  }
  return len;
 8002a36:	687b      	ldr	r3, [r7, #4]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_close>:

int _close(int file)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a68:	605a      	str	r2, [r3, #4]
  return 0;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <_isatty>:

int _isatty(int file)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a80:	2301      	movs	r3, #1
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab0:	4a14      	ldr	r2, [pc, #80]	@ (8002b04 <_sbrk+0x5c>)
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <_sbrk+0x60>)
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002abc:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <_sbrk+0x64>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <_sbrk+0x64>)
 8002ac6:	4a12      	ldr	r2, [pc, #72]	@ (8002b10 <_sbrk+0x68>)
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <_sbrk+0x64>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d207      	bcs.n	8002ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad8:	f008 fa5c 	bl	800af94 <__errno>
 8002adc:	4603      	mov	r3, r0
 8002ade:	220c      	movs	r2, #12
 8002ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae6:	e009      	b.n	8002afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae8:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <_sbrk+0x64>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <_sbrk+0x64>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	4a05      	ldr	r2, [pc, #20]	@ (8002b0c <_sbrk+0x64>)
 8002af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20020000 	.word	0x20020000
 8002b08:	00000400 	.word	0x00000400
 8002b0c:	20002da0 	.word	0x20002da0
 8002b10:	20002f48 	.word	0x20002f48

08002b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b18:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <SystemInit+0x20>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1e:	4a05      	ldr	r2, [pc, #20]	@ (8002b34 <SystemInit+0x20>)
 8002b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b3c:	480d      	ldr	r0, [pc, #52]	@ (8002b74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b3e:	490e      	ldr	r1, [pc, #56]	@ (8002b78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b40:	4a0e      	ldr	r2, [pc, #56]	@ (8002b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b44:	e002      	b.n	8002b4c <LoopCopyDataInit>

08002b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b4a:	3304      	adds	r3, #4

08002b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b50:	d3f9      	bcc.n	8002b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b52:	4a0b      	ldr	r2, [pc, #44]	@ (8002b80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b54:	4c0b      	ldr	r4, [pc, #44]	@ (8002b84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b58:	e001      	b.n	8002b5e <LoopFillZerobss>

08002b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b5c:	3204      	adds	r2, #4

08002b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b60:	d3fb      	bcc.n	8002b5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b62:	f7ff ffd7 	bl	8002b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b66:	f008 fa1b 	bl	800afa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b6a:	f7fe fff1 	bl	8001b50 <main>
  bx  lr    
 8002b6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b78:	2000060c 	.word	0x2000060c
  ldr r2, =_sidata
 8002b7c:	0802cad8 	.word	0x0802cad8
  ldr r2, =_sbss
 8002b80:	2000060c 	.word	0x2000060c
  ldr r4, =_ebss
 8002b84:	20002f48 	.word	0x20002f48

08002b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b88:	e7fe      	b.n	8002b88 <ADC_IRQHandler>
	...

08002b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b90:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0d      	ldr	r2, [pc, #52]	@ (8002bcc <HAL_Init+0x40>)
 8002b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bcc <HAL_Init+0x40>)
 8002ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba8:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <HAL_Init+0x40>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a07      	ldr	r2, [pc, #28]	@ (8002bcc <HAL_Init+0x40>)
 8002bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb4:	2003      	movs	r0, #3
 8002bb6:	f000 f94f 	bl	8002e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f000 f808 	bl	8002bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc0:	f7ff fbf8 	bl	80023b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023c00 	.word	0x40023c00

08002bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd8:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <HAL_InitTick+0x54>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <HAL_InitTick+0x58>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f967 	bl	8002ec2 <HAL_SYSTICK_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00e      	b.n	8002c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b0f      	cmp	r3, #15
 8002c02:	d80a      	bhi.n	8002c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c04:	2200      	movs	r2, #0
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0c:	f000 f92f 	bl	8002e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c10:	4a06      	ldr	r2, [pc, #24]	@ (8002c2c <HAL_InitTick+0x5c>)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20000438 	.word	0x20000438
 8002c28:	20000440 	.word	0x20000440
 8002c2c:	2000043c 	.word	0x2000043c

08002c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c34:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_IncTick+0x20>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_IncTick+0x24>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <HAL_IncTick+0x24>)
 8002c42:	6013      	str	r3, [r2, #0]
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000440 	.word	0x20000440
 8002c54:	20002da4 	.word	0x20002da4

08002c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <HAL_GetTick+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20002da4 	.word	0x20002da4

08002c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c78:	f7ff ffee 	bl	8002c58 <HAL_GetTick>
 8002c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d005      	beq.n	8002c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <HAL_Delay+0x44>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4413      	add	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c96:	bf00      	nop
 8002c98:	f7ff ffde 	bl	8002c58 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d8f7      	bhi.n	8002c98 <HAL_Delay+0x28>
  {
  }
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000440 	.word	0x20000440

08002cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <__NVIC_SetPriorityGrouping+0x44>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cea:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <__NVIC_SetPriorityGrouping+0x44>)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	60d3      	str	r3, [r2, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d04:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <__NVIC_GetPriorityGrouping+0x18>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	f003 0307 	and.w	r3, r3, #7
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	db0b      	blt.n	8002d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	4907      	ldr	r1, [pc, #28]	@ (8002d54 <__NVIC_EnableIRQ+0x38>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000e100 	.word	0xe000e100

08002d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	db0a      	blt.n	8002d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	490c      	ldr	r1, [pc, #48]	@ (8002da4 <__NVIC_SetPriority+0x4c>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	0112      	lsls	r2, r2, #4
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d80:	e00a      	b.n	8002d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4908      	ldr	r1, [pc, #32]	@ (8002da8 <__NVIC_SetPriority+0x50>)
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	3b04      	subs	r3, #4
 8002d90:	0112      	lsls	r2, r2, #4
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	440b      	add	r3, r1
 8002d96:	761a      	strb	r2, [r3, #24]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000e100 	.word	0xe000e100
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	@ 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f1c3 0307 	rsb	r3, r3, #7
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	bf28      	it	cs
 8002dca:	2304      	movcs	r3, #4
 8002dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2b06      	cmp	r3, #6
 8002dd4:	d902      	bls.n	8002ddc <NVIC_EncodePriority+0x30>
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3b03      	subs	r3, #3
 8002dda:	e000      	b.n	8002dde <NVIC_EncodePriority+0x32>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43da      	mvns	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	401a      	ands	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df4:	f04f 31ff 	mov.w	r1, #4294967295
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfe:	43d9      	mvns	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	4313      	orrs	r3, r2
         );
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3724      	adds	r7, #36	@ 0x24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e24:	d301      	bcc.n	8002e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00f      	b.n	8002e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e54 <SysTick_Config+0x40>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e32:	210f      	movs	r1, #15
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	f7ff ff8e 	bl	8002d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e3c:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <SysTick_Config+0x40>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e42:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <SysTick_Config+0x40>)
 8002e44:	2207      	movs	r2, #7
 8002e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	e000e010 	.word	0xe000e010

08002e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ff29 	bl	8002cb8 <__NVIC_SetPriorityGrouping>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e80:	f7ff ff3e 	bl	8002d00 <__NVIC_GetPriorityGrouping>
 8002e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	6978      	ldr	r0, [r7, #20]
 8002e8c:	f7ff ff8e 	bl	8002dac <NVIC_EncodePriority>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff5d 	bl	8002d58 <__NVIC_SetPriority>
}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff31 	bl	8002d1c <__NVIC_EnableIRQ>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ffa2 	bl	8002e14 <SysTick_Config>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e00e      	b.n	8002f0a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	795b      	ldrb	r3, [r3, #5]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d105      	bne.n	8002f02 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff fa81 	bl	8002404 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7ff fe9a 	bl	8002c58 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e099      	b.n	8003064 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f50:	e00f      	b.n	8002f72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f52:	f7ff fe81 	bl	8002c58 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b05      	cmp	r3, #5
 8002f5e:	d908      	bls.n	8002f72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2203      	movs	r2, #3
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e078      	b.n	8003064 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e8      	bne.n	8002f52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4b38      	ldr	r3, [pc, #224]	@ (800306c <HAL_DMA_Init+0x158>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d107      	bne.n	8002fdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0307 	bic.w	r3, r3, #7
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	2b04      	cmp	r3, #4
 8003004:	d117      	bne.n	8003036 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fa6f 	bl	80034fc <DMA_CheckFifoParam>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2240      	movs	r2, #64	@ 0x40
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003032:	2301      	movs	r3, #1
 8003034:	e016      	b.n	8003064 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fa26 	bl	8003490 <DMA_CalcBaseAndBitshift>
 8003044:	4603      	mov	r3, r0
 8003046:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304c:	223f      	movs	r2, #63	@ 0x3f
 800304e:	409a      	lsls	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	f010803f 	.word	0xf010803f

08003070 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_DMA_Start_IT+0x26>
 8003092:	2302      	movs	r3, #2
 8003094:	e040      	b.n	8003118 <HAL_DMA_Start_IT+0xa8>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d12f      	bne.n	800310a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f9b8 	bl	8003434 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	223f      	movs	r2, #63	@ 0x3f
 80030ca:	409a      	lsls	r2, r3
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0216 	orr.w	r2, r2, #22
 80030de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0208 	orr.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e005      	b.n	8003116 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003112:	2302      	movs	r3, #2
 8003114:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003116:	7dfb      	ldrb	r3, [r7, #23]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800312c:	4b8e      	ldr	r3, [pc, #568]	@ (8003368 <HAL_DMA_IRQHandler+0x248>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a8e      	ldr	r2, [pc, #568]	@ (800336c <HAL_DMA_IRQHandler+0x24c>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	2208      	movs	r2, #8
 800314c:	409a      	lsls	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01a      	beq.n	800318c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0204 	bic.w	r2, r2, #4
 8003172:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	2208      	movs	r2, #8
 800317a:	409a      	lsls	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	2201      	movs	r2, #1
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ae:	2201      	movs	r2, #1
 80031b0:	409a      	lsls	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ba:	f043 0202 	orr.w	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c6:	2204      	movs	r2, #4
 80031c8:	409a      	lsls	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d012      	beq.n	80031f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e4:	2204      	movs	r2, #4
 80031e6:	409a      	lsls	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f0:	f043 0204 	orr.w	r2, r3, #4
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fc:	2210      	movs	r2, #16
 80031fe:	409a      	lsls	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d043      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d03c      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	2210      	movs	r2, #16
 800321c:	409a      	lsls	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d018      	beq.n	8003262 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d024      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
 800324e:	e01f      	b.n	8003290 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01b      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
 8003260:	e016      	b.n	8003290 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0208 	bic.w	r2, r2, #8
 800327e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003294:	2220      	movs	r2, #32
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 808f 	beq.w	80033c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8087 	beq.w	80033c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b6:	2220      	movs	r2, #32
 80032b8:	409a      	lsls	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d136      	bne.n	8003338 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0216 	bic.w	r2, r2, #22
 80032d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d103      	bne.n	80032fa <HAL_DMA_IRQHandler+0x1da>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0208 	bic.w	r2, r2, #8
 8003308:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330e:	223f      	movs	r2, #63	@ 0x3f
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332a:	2b00      	cmp	r3, #0
 800332c:	d07e      	beq.n	800342c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
        }
        return;
 8003336:	e079      	b.n	800342c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01d      	beq.n	8003382 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003358:	2b00      	cmp	r3, #0
 800335a:	d031      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
 8003364:	e02c      	b.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
 8003366:	bf00      	nop
 8003368:	20000438 	.word	0x20000438
 800336c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d023      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
 8003380:	e01e      	b.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10f      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0210 	bic.w	r2, r2, #16
 800339e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d032      	beq.n	800342e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d022      	beq.n	800341a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2205      	movs	r2, #5
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	3301      	adds	r3, #1
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d307      	bcc.n	8003408 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f2      	bne.n	80033ec <HAL_DMA_IRQHandler+0x2cc>
 8003406:	e000      	b.n	800340a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003408:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
 800342a:	e000      	b.n	800342e <HAL_DMA_IRQHandler+0x30e>
        return;
 800342c:	bf00      	nop
    }
  }
}
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003450:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b40      	cmp	r3, #64	@ 0x40
 8003460:	d108      	bne.n	8003474 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003472:	e007      	b.n	8003484 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	3b10      	subs	r3, #16
 80034a0:	4a14      	ldr	r2, [pc, #80]	@ (80034f4 <DMA_CalcBaseAndBitshift+0x64>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034aa:	4a13      	ldr	r2, [pc, #76]	@ (80034f8 <DMA_CalcBaseAndBitshift+0x68>)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d909      	bls.n	80034d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034c6:	f023 0303 	bic.w	r3, r3, #3
 80034ca:	1d1a      	adds	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80034d0:	e007      	b.n	80034e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	aaaaaaab 	.word	0xaaaaaaab
 80034f8:	0800f210 	.word	0x0800f210

080034fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11f      	bne.n	8003556 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d856      	bhi.n	80035ca <DMA_CheckFifoParam+0xce>
 800351c:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <DMA_CheckFifoParam+0x28>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003535 	.word	0x08003535
 8003528:	08003547 	.word	0x08003547
 800352c:	08003535 	.word	0x08003535
 8003530:	080035cb 	.word	0x080035cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d046      	beq.n	80035ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003544:	e043      	b.n	80035ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800354e:	d140      	bne.n	80035d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003554:	e03d      	b.n	80035d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355e:	d121      	bne.n	80035a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b03      	cmp	r3, #3
 8003564:	d837      	bhi.n	80035d6 <DMA_CheckFifoParam+0xda>
 8003566:	a201      	add	r2, pc, #4	@ (adr r2, 800356c <DMA_CheckFifoParam+0x70>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	0800357d 	.word	0x0800357d
 8003570:	08003583 	.word	0x08003583
 8003574:	0800357d 	.word	0x0800357d
 8003578:	08003595 	.word	0x08003595
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e030      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003586:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d025      	beq.n	80035da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003592:	e022      	b.n	80035da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800359c:	d11f      	bne.n	80035de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035a2:	e01c      	b.n	80035de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d903      	bls.n	80035b2 <DMA_CheckFifoParam+0xb6>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d003      	beq.n	80035b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035b0:	e018      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      break;
 80035b6:	e015      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      break;
 80035c8:	e00b      	b.n	80035e2 <DMA_CheckFifoParam+0xe6>
      break;
 80035ca:	bf00      	nop
 80035cc:	e00a      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035ce:	bf00      	nop
 80035d0:	e008      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035d2:	bf00      	nop
 80035d4:	e006      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035d6:	bf00      	nop
 80035d8:	e004      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e002      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
    }
  } 
  
  return status; 
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop

080035f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	@ 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	e16b      	b.n	80038e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003610:	2201      	movs	r2, #1
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	429a      	cmp	r2, r3
 800362a:	f040 815a 	bne.w	80038e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b01      	cmp	r3, #1
 8003638:	d005      	beq.n	8003646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003642:	2b02      	cmp	r3, #2
 8003644:	d130      	bne.n	80036a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800367c:	2201      	movs	r2, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 0201 	and.w	r2, r3, #1
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d017      	beq.n	80036e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	2203      	movs	r2, #3
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d123      	bne.n	8003738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	08da      	lsrs	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3208      	adds	r2, #8
 80036f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	220f      	movs	r2, #15
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	08da      	lsrs	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3208      	adds	r2, #8
 8003732:	69b9      	ldr	r1, [r7, #24]
 8003734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	2203      	movs	r2, #3
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0203 	and.w	r2, r3, #3
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80b4 	beq.w	80038e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	4b60      	ldr	r3, [pc, #384]	@ (8003900 <HAL_GPIO_Init+0x30c>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	4a5f      	ldr	r2, [pc, #380]	@ (8003900 <HAL_GPIO_Init+0x30c>)
 8003784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003788:	6453      	str	r3, [r2, #68]	@ 0x44
 800378a:	4b5d      	ldr	r3, [pc, #372]	@ (8003900 <HAL_GPIO_Init+0x30c>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003796:	4a5b      	ldr	r2, [pc, #364]	@ (8003904 <HAL_GPIO_Init+0x310>)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	220f      	movs	r2, #15
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a52      	ldr	r2, [pc, #328]	@ (8003908 <HAL_GPIO_Init+0x314>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02b      	beq.n	800381a <HAL_GPIO_Init+0x226>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a51      	ldr	r2, [pc, #324]	@ (800390c <HAL_GPIO_Init+0x318>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d025      	beq.n	8003816 <HAL_GPIO_Init+0x222>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a50      	ldr	r2, [pc, #320]	@ (8003910 <HAL_GPIO_Init+0x31c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01f      	beq.n	8003812 <HAL_GPIO_Init+0x21e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003914 <HAL_GPIO_Init+0x320>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d019      	beq.n	800380e <HAL_GPIO_Init+0x21a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003918 <HAL_GPIO_Init+0x324>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_GPIO_Init+0x216>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a4d      	ldr	r2, [pc, #308]	@ (800391c <HAL_GPIO_Init+0x328>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00d      	beq.n	8003806 <HAL_GPIO_Init+0x212>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003920 <HAL_GPIO_Init+0x32c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <HAL_GPIO_Init+0x20e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003924 <HAL_GPIO_Init+0x330>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_GPIO_Init+0x20a>
 80037fa:	2307      	movs	r3, #7
 80037fc:	e00e      	b.n	800381c <HAL_GPIO_Init+0x228>
 80037fe:	2308      	movs	r3, #8
 8003800:	e00c      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003802:	2306      	movs	r3, #6
 8003804:	e00a      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003806:	2305      	movs	r3, #5
 8003808:	e008      	b.n	800381c <HAL_GPIO_Init+0x228>
 800380a:	2304      	movs	r3, #4
 800380c:	e006      	b.n	800381c <HAL_GPIO_Init+0x228>
 800380e:	2303      	movs	r3, #3
 8003810:	e004      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003812:	2302      	movs	r3, #2
 8003814:	e002      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_GPIO_Init+0x228>
 800381a:	2300      	movs	r3, #0
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	f002 0203 	and.w	r2, r2, #3
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	4093      	lsls	r3, r2
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800382c:	4935      	ldr	r1, [pc, #212]	@ (8003904 <HAL_GPIO_Init+0x310>)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800383a:	4b3b      	ldr	r3, [pc, #236]	@ (8003928 <HAL_GPIO_Init+0x334>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800385e:	4a32      	ldr	r2, [pc, #200]	@ (8003928 <HAL_GPIO_Init+0x334>)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003864:	4b30      	ldr	r3, [pc, #192]	@ (8003928 <HAL_GPIO_Init+0x334>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003888:	4a27      	ldr	r2, [pc, #156]	@ (8003928 <HAL_GPIO_Init+0x334>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800388e:	4b26      	ldr	r3, [pc, #152]	@ (8003928 <HAL_GPIO_Init+0x334>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003928 <HAL_GPIO_Init+0x334>)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003928 <HAL_GPIO_Init+0x334>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038dc:	4a12      	ldr	r2, [pc, #72]	@ (8003928 <HAL_GPIO_Init+0x334>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3301      	adds	r3, #1
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	f67f ae90 	bls.w	8003610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3724      	adds	r7, #36	@ 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	40013800 	.word	0x40013800
 8003908:	40020000 	.word	0x40020000
 800390c:	40020400 	.word	0x40020400
 8003910:	40020800 	.word	0x40020800
 8003914:	40020c00 	.word	0x40020c00
 8003918:	40021000 	.word	0x40021000
 800391c:	40021400 	.word	0x40021400
 8003920:	40021800 	.word	0x40021800
 8003924:	40021c00 	.word	0x40021c00
 8003928:	40013c00 	.word	0x40013c00

0800392c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	e0cd      	b.n	8003ae4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003948:	2201      	movs	r2, #1
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	f040 80bd 	bne.w	8003ade <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003964:	4a65      	ldr	r2, [pc, #404]	@ (8003afc <HAL_GPIO_DeInit+0x1d0>)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003970:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a5d      	ldr	r2, [pc, #372]	@ (8003b00 <HAL_GPIO_DeInit+0x1d4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02b      	beq.n	80039e6 <HAL_GPIO_DeInit+0xba>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a5c      	ldr	r2, [pc, #368]	@ (8003b04 <HAL_GPIO_DeInit+0x1d8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d025      	beq.n	80039e2 <HAL_GPIO_DeInit+0xb6>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a5b      	ldr	r2, [pc, #364]	@ (8003b08 <HAL_GPIO_DeInit+0x1dc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01f      	beq.n	80039de <HAL_GPIO_DeInit+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b0c <HAL_GPIO_DeInit+0x1e0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d019      	beq.n	80039da <HAL_GPIO_DeInit+0xae>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a59      	ldr	r2, [pc, #356]	@ (8003b10 <HAL_GPIO_DeInit+0x1e4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <HAL_GPIO_DeInit+0xaa>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a58      	ldr	r2, [pc, #352]	@ (8003b14 <HAL_GPIO_DeInit+0x1e8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00d      	beq.n	80039d2 <HAL_GPIO_DeInit+0xa6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a57      	ldr	r2, [pc, #348]	@ (8003b18 <HAL_GPIO_DeInit+0x1ec>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <HAL_GPIO_DeInit+0xa2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a56      	ldr	r2, [pc, #344]	@ (8003b1c <HAL_GPIO_DeInit+0x1f0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <HAL_GPIO_DeInit+0x9e>
 80039c6:	2307      	movs	r3, #7
 80039c8:	e00e      	b.n	80039e8 <HAL_GPIO_DeInit+0xbc>
 80039ca:	2308      	movs	r3, #8
 80039cc:	e00c      	b.n	80039e8 <HAL_GPIO_DeInit+0xbc>
 80039ce:	2306      	movs	r3, #6
 80039d0:	e00a      	b.n	80039e8 <HAL_GPIO_DeInit+0xbc>
 80039d2:	2305      	movs	r3, #5
 80039d4:	e008      	b.n	80039e8 <HAL_GPIO_DeInit+0xbc>
 80039d6:	2304      	movs	r3, #4
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_DeInit+0xbc>
 80039da:	2303      	movs	r3, #3
 80039dc:	e004      	b.n	80039e8 <HAL_GPIO_DeInit+0xbc>
 80039de:	2302      	movs	r3, #2
 80039e0:	e002      	b.n	80039e8 <HAL_GPIO_DeInit+0xbc>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_GPIO_DeInit+0xbc>
 80039e6:	2300      	movs	r3, #0
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	f002 0203 	and.w	r2, r2, #3
 80039ee:	0092      	lsls	r2, r2, #2
 80039f0:	4093      	lsls	r3, r2
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d132      	bne.n	8003a5e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80039f8:	4b49      	ldr	r3, [pc, #292]	@ (8003b20 <HAL_GPIO_DeInit+0x1f4>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	4947      	ldr	r1, [pc, #284]	@ (8003b20 <HAL_GPIO_DeInit+0x1f4>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a06:	4b46      	ldr	r3, [pc, #280]	@ (8003b20 <HAL_GPIO_DeInit+0x1f4>)
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	4944      	ldr	r1, [pc, #272]	@ (8003b20 <HAL_GPIO_DeInit+0x1f4>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a14:	4b42      	ldr	r3, [pc, #264]	@ (8003b20 <HAL_GPIO_DeInit+0x1f4>)
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	4940      	ldr	r1, [pc, #256]	@ (8003b20 <HAL_GPIO_DeInit+0x1f4>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a22:	4b3f      	ldr	r3, [pc, #252]	@ (8003b20 <HAL_GPIO_DeInit+0x1f4>)
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	493d      	ldr	r1, [pc, #244]	@ (8003b20 <HAL_GPIO_DeInit+0x1f4>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	220f      	movs	r2, #15
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a40:	4a2e      	ldr	r2, [pc, #184]	@ (8003afc <HAL_GPIO_DeInit+0x1d0>)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	482a      	ldr	r0, [pc, #168]	@ (8003afc <HAL_GPIO_DeInit+0x1d0>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	400a      	ands	r2, r1
 8003a58:	3302      	adds	r3, #2
 8003a5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2103      	movs	r1, #3
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	401a      	ands	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	08da      	lsrs	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3208      	adds	r2, #8
 8003a7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	220f      	movs	r2, #15
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	08d2      	lsrs	r2, r2, #3
 8003a94:	4019      	ands	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	2103      	movs	r1, #3
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	401a      	ands	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	2101      	movs	r1, #1
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	2103      	movs	r1, #3
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	401a      	ands	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b0f      	cmp	r3, #15
 8003ae8:	f67f af2e 	bls.w	8003948 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40013800 	.word	0x40013800
 8003b00:	40020000 	.word	0x40020000
 8003b04:	40020400 	.word	0x40020400
 8003b08:	40020800 	.word	0x40020800
 8003b0c:	40020c00 	.word	0x40020c00
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40021400 	.word	0x40021400
 8003b18:	40021800 	.word	0x40021800
 8003b1c:	40021c00 	.word	0x40021c00
 8003b20:	40013c00 	.word	0x40013c00

08003b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	807b      	strh	r3, [r7, #2]
 8003b30:	4613      	mov	r3, r2
 8003b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b34:	787b      	ldrb	r3, [r7, #1]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b40:	e003      	b.n	8003b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b42:	887b      	ldrh	r3, [r7, #2]
 8003b44:	041a      	lsls	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	619a      	str	r2, [r3, #24]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b62:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b6e:	4a05      	ldr	r2, [pc, #20]	@ (8003b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe fc02 	bl	8002380 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40013c00 	.word	0x40013c00

08003b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e12b      	b.n	8003df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fe fc4a 	bl	8002448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2224      	movs	r2, #36	@ 0x24
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bec:	f002 faae 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8003bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a81      	ldr	r2, [pc, #516]	@ (8003dfc <HAL_I2C_Init+0x274>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d807      	bhi.n	8003c0c <HAL_I2C_Init+0x84>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a80      	ldr	r2, [pc, #512]	@ (8003e00 <HAL_I2C_Init+0x278>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	bf94      	ite	ls
 8003c04:	2301      	movls	r3, #1
 8003c06:	2300      	movhi	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e006      	b.n	8003c1a <HAL_I2C_Init+0x92>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a7d      	ldr	r2, [pc, #500]	@ (8003e04 <HAL_I2C_Init+0x27c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	bf94      	ite	ls
 8003c14:	2301      	movls	r3, #1
 8003c16:	2300      	movhi	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0e7      	b.n	8003df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a78      	ldr	r2, [pc, #480]	@ (8003e08 <HAL_I2C_Init+0x280>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	0c9b      	lsrs	r3, r3, #18
 8003c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4a6a      	ldr	r2, [pc, #424]	@ (8003dfc <HAL_I2C_Init+0x274>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d802      	bhi.n	8003c5c <HAL_I2C_Init+0xd4>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	e009      	b.n	8003c70 <HAL_I2C_Init+0xe8>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	4a69      	ldr	r2, [pc, #420]	@ (8003e0c <HAL_I2C_Init+0x284>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	3301      	adds	r3, #1
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	495c      	ldr	r1, [pc, #368]	@ (8003dfc <HAL_I2C_Init+0x274>)
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	d819      	bhi.n	8003cc4 <HAL_I2C_Init+0x13c>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1e59      	subs	r1, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c9e:	1c59      	adds	r1, r3, #1
 8003ca0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ca4:	400b      	ands	r3, r1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_I2C_Init+0x138>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1e59      	subs	r1, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbe:	e051      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	e04f      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d111      	bne.n	8003cf0 <HAL_I2C_Init+0x168>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1e58      	subs	r0, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	440b      	add	r3, r1
 8003cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cde:	3301      	adds	r3, #1
 8003ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e012      	b.n	8003d16 <HAL_I2C_Init+0x18e>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e58      	subs	r0, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	0099      	lsls	r1, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_I2C_Init+0x196>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e022      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10e      	bne.n	8003d44 <HAL_I2C_Init+0x1bc>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1e58      	subs	r0, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	440b      	add	r3, r1
 8003d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d42:	e00f      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e58      	subs	r0, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	0099      	lsls	r1, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	6809      	ldr	r1, [r1, #0]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6911      	ldr	r1, [r2, #16]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	4311      	orrs	r1, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	000186a0 	.word	0x000186a0
 8003e00:	001e847f 	.word	0x001e847f
 8003e04:	003d08ff 	.word	0x003d08ff
 8003e08:	431bde83 	.word	0x431bde83
 8003e0c:	10624dd3 	.word	0x10624dd3

08003e10 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e021      	b.n	8003e66 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2224      	movs	r2, #36	@ 0x24
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fe fb4c 	bl	80024d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	4608      	mov	r0, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	817b      	strh	r3, [r7, #10]
 8003e82:	460b      	mov	r3, r1
 8003e84:	813b      	strh	r3, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e8a:	f7fe fee5 	bl	8002c58 <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	f040 80d9 	bne.w	8004050 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2319      	movs	r3, #25
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	496d      	ldr	r1, [pc, #436]	@ (800405c <HAL_I2C_Mem_Write+0x1ec>)
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 fc8d 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e0cc      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2C_Mem_Write+0x56>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e0c5      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d007      	beq.n	8003eec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2221      	movs	r2, #33	@ 0x21
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2240      	movs	r2, #64	@ 0x40
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a3a      	ldr	r2, [r7, #32]
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a4d      	ldr	r2, [pc, #308]	@ (8004060 <HAL_I2C_Mem_Write+0x1f0>)
 8003f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f2e:	88f8      	ldrh	r0, [r7, #6]
 8003f30:	893a      	ldrh	r2, [r7, #8]
 8003f32:	8979      	ldrh	r1, [r7, #10]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fac4 	bl	80044cc <I2C_RequestMemoryWrite>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d052      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e081      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fd0e 	bl	8004974 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d107      	bne.n	8003f76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e06b      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_I2C_Mem_Write+0x180>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d017      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1aa      	bne.n	8003f4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fcfa 	bl	80049f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	2b04      	cmp	r3, #4
 800400e:	d107      	bne.n	8004020 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800401e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e016      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	00100002 	.word	0x00100002
 8004060:	ffff0000 	.word	0xffff0000

08004064 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08c      	sub	sp, #48	@ 0x30
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800407e:	f7fe fdeb 	bl	8002c58 <HAL_GetTick>
 8004082:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	f040 8208 	bne.w	80044a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2319      	movs	r3, #25
 8004098:	2201      	movs	r2, #1
 800409a:	497b      	ldr	r1, [pc, #492]	@ (8004288 <HAL_I2C_Mem_Read+0x224>)
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fb93 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
 80040aa:	e1fb      	b.n	80044a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_I2C_Mem_Read+0x56>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e1f4      	b.n	80044a4 <HAL_I2C_Mem_Read+0x440>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d007      	beq.n	80040e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2222      	movs	r2, #34	@ 0x22
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2240      	movs	r2, #64	@ 0x40
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800410a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004110:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4a5b      	ldr	r2, [pc, #364]	@ (800428c <HAL_I2C_Mem_Read+0x228>)
 8004120:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004122:	88f8      	ldrh	r0, [r7, #6]
 8004124:	893a      	ldrh	r2, [r7, #8]
 8004126:	8979      	ldrh	r1, [r7, #10]
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	4603      	mov	r3, r0
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fa60 	bl	80045f8 <I2C_RequestMemoryRead>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e1b0      	b.n	80044a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004146:	2b00      	cmp	r3, #0
 8004148:	d113      	bne.n	8004172 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414a:	2300      	movs	r3, #0
 800414c:	623b      	str	r3, [r7, #32]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	623b      	str	r3, [r7, #32]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e184      	b.n	800447c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004176:	2b01      	cmp	r3, #1
 8004178:	d11b      	bne.n	80041b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	e164      	b.n	800447c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d11b      	bne.n	80041f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	e144      	b.n	800447c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004208:	e138      	b.n	800447c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420e:	2b03      	cmp	r3, #3
 8004210:	f200 80f1 	bhi.w	80043f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	2b01      	cmp	r3, #1
 800421a:	d123      	bne.n	8004264 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fc29 	bl	8004a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e139      	b.n	80044a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004262:	e10b      	b.n	800447c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004268:	2b02      	cmp	r3, #2
 800426a:	d14e      	bne.n	800430a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004272:	2200      	movs	r2, #0
 8004274:	4906      	ldr	r1, [pc, #24]	@ (8004290 <HAL_I2C_Mem_Read+0x22c>)
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 faa6 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e10e      	b.n	80044a4 <HAL_I2C_Mem_Read+0x440>
 8004286:	bf00      	nop
 8004288:	00100002 	.word	0x00100002
 800428c:	ffff0000 	.word	0xffff0000
 8004290:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004308:	e0b8      	b.n	800447c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004310:	2200      	movs	r2, #0
 8004312:	4966      	ldr	r1, [pc, #408]	@ (80044ac <HAL_I2C_Mem_Read+0x448>)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fa57 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0bf      	b.n	80044a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436c:	2200      	movs	r2, #0
 800436e:	494f      	ldr	r1, [pc, #316]	@ (80044ac <HAL_I2C_Mem_Read+0x448>)
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fa29 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e091      	b.n	80044a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043f4:	e042      	b.n	800447c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fb3c 	bl	8004a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e04c      	b.n	80044a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b04      	cmp	r3, #4
 8004448:	d118      	bne.n	800447c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004480:	2b00      	cmp	r3, #0
 8004482:	f47f aec2 	bne.w	800420a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	e000      	b.n	80044a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044a2:	2302      	movs	r3, #2
  }
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3728      	adds	r7, #40	@ 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	00010004 	.word	0x00010004

080044b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044be:	b2db      	uxtb	r3, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	4608      	mov	r0, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	461a      	mov	r2, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	817b      	strh	r3, [r7, #10]
 80044de:	460b      	mov	r3, r1
 80044e0:	813b      	strh	r3, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f960 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800451c:	d103      	bne.n	8004526 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004524:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e05f      	b.n	80045ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800452a:	897b      	ldrh	r3, [r7, #10]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004538:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	492d      	ldr	r1, [pc, #180]	@ (80045f4 <I2C_RequestMemoryWrite+0x128>)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f998 	bl	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e04c      	b.n	80045ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004568:	6a39      	ldr	r1, [r7, #32]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fa02 	bl	8004974 <I2C_WaitOnTXEFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00d      	beq.n	8004592 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	2b04      	cmp	r3, #4
 800457c:	d107      	bne.n	800458e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800458c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e02b      	b.n	80045ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d105      	bne.n	80045a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004598:	893b      	ldrh	r3, [r7, #8]
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	611a      	str	r2, [r3, #16]
 80045a2:	e021      	b.n	80045e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045a4:	893b      	ldrh	r3, [r7, #8]
 80045a6:	0a1b      	lsrs	r3, r3, #8
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b4:	6a39      	ldr	r1, [r7, #32]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f9dc 	bl	8004974 <I2C_WaitOnTXEFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d107      	bne.n	80045da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e005      	b.n	80045ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045de:	893b      	ldrh	r3, [r7, #8]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	00010002 	.word	0x00010002

080045f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	4608      	mov	r0, r1
 8004602:	4611      	mov	r1, r2
 8004604:	461a      	mov	r2, r3
 8004606:	4603      	mov	r3, r0
 8004608:	817b      	strh	r3, [r7, #10]
 800460a:	460b      	mov	r3, r1
 800460c:	813b      	strh	r3, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004620:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004630:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	2200      	movs	r2, #0
 800463a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f8c2 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004658:	d103      	bne.n	8004662 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004660:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e0aa      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004666:	897b      	ldrh	r3, [r7, #10]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	6a3a      	ldr	r2, [r7, #32]
 800467a:	4952      	ldr	r1, [pc, #328]	@ (80047c4 <I2C_RequestMemoryRead+0x1cc>)
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f8fa 	bl	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e097      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a4:	6a39      	ldr	r1, [r7, #32]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f964 	bl	8004974 <I2C_WaitOnTXEFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00d      	beq.n	80046ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d107      	bne.n	80046ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e076      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d105      	bne.n	80046e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046d4:	893b      	ldrh	r3, [r7, #8]
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	611a      	str	r2, [r3, #16]
 80046de:	e021      	b.n	8004724 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046e0:	893b      	ldrh	r3, [r7, #8]
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f0:	6a39      	ldr	r1, [r7, #32]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f93e 	bl	8004974 <I2C_WaitOnTXEFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	2b04      	cmp	r3, #4
 8004704:	d107      	bne.n	8004716 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e050      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800471a:	893b      	ldrh	r3, [r7, #8]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004726:	6a39      	ldr	r1, [r7, #32]
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f923 	bl	8004974 <I2C_WaitOnTXEFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00d      	beq.n	8004750 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	2b04      	cmp	r3, #4
 800473a:	d107      	bne.n	800474c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800474a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e035      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800475e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	2200      	movs	r2, #0
 8004768:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f82b 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00d      	beq.n	8004794 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004786:	d103      	bne.n	8004790 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800478e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e013      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004794:	897b      	ldrh	r3, [r7, #10]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a6:	6a3a      	ldr	r2, [r7, #32]
 80047a8:	4906      	ldr	r1, [pc, #24]	@ (80047c4 <I2C_RequestMemoryRead+0x1cc>)
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f863 	bl	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	00010002 	.word	0x00010002

080047c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d8:	e025      	b.n	8004826 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d021      	beq.n	8004826 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7fe fa39 	bl	8002c58 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d116      	bne.n	8004826 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	f043 0220 	orr.w	r2, r3, #32
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e023      	b.n	800486e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d10d      	bne.n	800484c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	43da      	mvns	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4013      	ands	r3, r2
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	bf0c      	ite	eq
 8004842:	2301      	moveq	r3, #1
 8004844:	2300      	movne	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	e00c      	b.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	43da      	mvns	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d0b6      	beq.n	80047da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004884:	e051      	b.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004894:	d123      	bne.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	f043 0204 	orr.w	r2, r3, #4
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e046      	b.n	800496c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d021      	beq.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e6:	f7fe f9b7 	bl	8002c58 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d302      	bcc.n	80048fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d116      	bne.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	f043 0220 	orr.w	r2, r3, #32
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e020      	b.n	800496c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d10c      	bne.n	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	43da      	mvns	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	e00b      	b.n	8004966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	43da      	mvns	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4013      	ands	r3, r2
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d18d      	bne.n	8004886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004980:	e02d      	b.n	80049de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f8ce 	bl	8004b24 <I2C_IsAcknowledgeFailed>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e02d      	b.n	80049ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d021      	beq.n	80049de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499a:	f7fe f95d 	bl	8002c58 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d302      	bcc.n	80049b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d116      	bne.n	80049de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	f043 0220 	orr.w	r2, r3, #32
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e007      	b.n	80049ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e8:	2b80      	cmp	r3, #128	@ 0x80
 80049ea:	d1ca      	bne.n	8004982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a02:	e02d      	b.n	8004a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f88d 	bl	8004b24 <I2C_IsAcknowledgeFailed>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e02d      	b.n	8004a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d021      	beq.n	8004a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1c:	f7fe f91c 	bl	8002c58 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d116      	bne.n	8004a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	f043 0220 	orr.w	r2, r3, #32
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e007      	b.n	8004a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d1ca      	bne.n	8004a04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a84:	e042      	b.n	8004b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d119      	bne.n	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0210 	mvn.w	r2, #16
 8004a9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e029      	b.n	8004b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac8:	f7fe f8c6 	bl	8002c58 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d302      	bcc.n	8004ade <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d116      	bne.n	8004b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	f043 0220 	orr.w	r2, r3, #32
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e007      	b.n	8004b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b16:	2b40      	cmp	r3, #64	@ 0x40
 8004b18:	d1b5      	bne.n	8004a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3a:	d11b      	bne.n	8004b74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b60:	f043 0204 	orr.w	r2, r3, #4
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e128      	b.n	8004de8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a90      	ldr	r2, [pc, #576]	@ (8004df0 <HAL_I2S_Init+0x26c>)
 8004bae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7fd fcb3 	bl	800251c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004bcc:	f023 030f 	bic.w	r3, r3, #15
 8004bd0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d060      	beq.n	8004ca4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004bea:	2310      	movs	r3, #16
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e001      	b.n	8004bf4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d802      	bhi.n	8004c02 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c02:	2001      	movs	r0, #1
 8004c04:	f001 fbac 	bl	8006360 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c08:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c12:	d125      	bne.n	8004c60 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d010      	beq.n	8004c3e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	3305      	adds	r3, #5
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	e01f      	b.n	8004c7e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	3305      	adds	r3, #5
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e00e      	b.n	8004c7e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	461a      	mov	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7a:	3305      	adds	r3, #5
 8004c7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	4a5c      	ldr	r2, [pc, #368]	@ (8004df4 <HAL_I2S_Init+0x270>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	08db      	lsrs	r3, r3, #3
 8004c88:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e003      	b.n	8004cac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d902      	bls.n	8004cb8 <HAL_I2S_Init+0x134>
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	2bff      	cmp	r3, #255	@ 0xff
 8004cb6:	d907      	bls.n	8004cc8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbc:	f043 0210 	orr.w	r2, r3, #16
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e08f      	b.n	8004de8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	ea42 0103 	orr.w	r1, r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004ce6:	f023 030f 	bic.w	r3, r3, #15
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6851      	ldr	r1, [r2, #4]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6892      	ldr	r2, [r2, #8]
 8004cf2:	4311      	orrs	r1, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68d2      	ldr	r2, [r2, #12]
 8004cf8:	4311      	orrs	r1, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6992      	ldr	r2, [r2, #24]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d0a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d161      	bne.n	8004dd8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a38      	ldr	r2, [pc, #224]	@ (8004df8 <HAL_I2S_Init+0x274>)
 8004d18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a37      	ldr	r2, [pc, #220]	@ (8004dfc <HAL_I2S_Init+0x278>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d101      	bne.n	8004d28 <HAL_I2S_Init+0x1a4>
 8004d24:	4b36      	ldr	r3, [pc, #216]	@ (8004e00 <HAL_I2S_Init+0x27c>)
 8004d26:	e001      	b.n	8004d2c <HAL_I2S_Init+0x1a8>
 8004d28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6812      	ldr	r2, [r2, #0]
 8004d32:	4932      	ldr	r1, [pc, #200]	@ (8004dfc <HAL_I2S_Init+0x278>)
 8004d34:	428a      	cmp	r2, r1
 8004d36:	d101      	bne.n	8004d3c <HAL_I2S_Init+0x1b8>
 8004d38:	4a31      	ldr	r2, [pc, #196]	@ (8004e00 <HAL_I2S_Init+0x27c>)
 8004d3a:	e001      	b.n	8004d40 <HAL_I2S_Init+0x1bc>
 8004d3c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004d40:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004d44:	f023 030f 	bic.w	r3, r3, #15
 8004d48:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8004dfc <HAL_I2S_Init+0x278>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d101      	bne.n	8004d58 <HAL_I2S_Init+0x1d4>
 8004d54:	4b2a      	ldr	r3, [pc, #168]	@ (8004e00 <HAL_I2S_Init+0x27c>)
 8004d56:	e001      	b.n	8004d5c <HAL_I2S_Init+0x1d8>
 8004d58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a25      	ldr	r2, [pc, #148]	@ (8004dfc <HAL_I2S_Init+0x278>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d101      	bne.n	8004d6e <HAL_I2S_Init+0x1ea>
 8004d6a:	4b25      	ldr	r3, [pc, #148]	@ (8004e00 <HAL_I2S_Init+0x27c>)
 8004d6c:	e001      	b.n	8004d72 <HAL_I2S_Init+0x1ee>
 8004d6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d7e:	d003      	beq.n	8004d88 <HAL_I2S_Init+0x204>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	e001      	b.n	8004d94 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004da8:	4313      	orrs	r3, r2
 8004daa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004db2:	4313      	orrs	r3, r2
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	897b      	ldrh	r3, [r7, #10]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004dc0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8004dfc <HAL_I2S_Init+0x278>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d101      	bne.n	8004dd0 <HAL_I2S_Init+0x24c>
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e00 <HAL_I2S_Init+0x27c>)
 8004dce:	e001      	b.n	8004dd4 <HAL_I2S_Init+0x250>
 8004dd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dd4:	897a      	ldrh	r2, [r7, #10]
 8004dd6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	080052a3 	.word	0x080052a3
 8004df4:	cccccccd 	.word	0xcccccccd
 8004df8:	080053b9 	.word	0x080053b9
 8004dfc:	40003800 	.word	0x40003800
 8004e00:	40003400 	.word	0x40003400

08004e04 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <HAL_I2S_Transmit_DMA+0x1a>
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e08e      	b.n	8004f40 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_I2S_Transmit_DMA+0x2e>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e086      	b.n	8004f40 <HAL_I2S_Transmit_DMA+0x13c>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d005      	beq.n	8004e52 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e076      	b.n	8004f40 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2203      	movs	r2, #3
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d002      	beq.n	8004e7e <HAL_I2S_Transmit_DMA+0x7a>
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d10a      	bne.n	8004e94 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e92:	e005      	b.n	8004ea0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	88fa      	ldrh	r2, [r7, #6]
 8004e98:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	88fa      	ldrh	r2, [r7, #6]
 8004e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	4a28      	ldr	r2, [pc, #160]	@ (8004f48 <HAL_I2S_Transmit_DMA+0x144>)
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eac:	4a27      	ldr	r2, [pc, #156]	@ (8004f4c <HAL_I2S_Transmit_DMA+0x148>)
 8004eae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb4:	4a26      	ldr	r2, [pc, #152]	@ (8004f50 <HAL_I2S_Transmit_DMA+0x14c>)
 8004eb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004ec0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004ec8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ece:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004ed0:	f7fe f8ce 	bl	8003070 <HAL_DMA_Start_IT>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00f      	beq.n	8004efa <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ede:	f043 0208 	orr.w	r2, r3, #8
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e022      	b.n	8004f40 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d107      	bne.n	8004f18 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f16:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0202 	orr.w	r2, r2, #2
 8004f34:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	08005123 	.word	0x08005123
 8004f4c:	080050e1 	.word	0x080050e1
 8004f50:	0800519d 	.word	0x0800519d

08004f54 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_I2S_Receive_DMA+0x1a>
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e0a1      	b.n	80050b6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_I2S_Receive_DMA+0x2e>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e099      	b.n	80050b6 <HAL_I2S_Receive_DMA+0x162>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d005      	beq.n	8004fa2 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e089      	b.n	80050b6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d002      	beq.n	8004fce <HAL_I2S_Receive_DMA+0x7a>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	d10a      	bne.n	8004fe4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	865a      	strh	r2, [r3, #50]	@ 0x32
 8004fe2:	e005      	b.n	8004ff0 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	88fa      	ldrh	r2, [r7, #6]
 8004fe8:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	88fa      	ldrh	r2, [r7, #6]
 8004fee:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff4:	4a32      	ldr	r2, [pc, #200]	@ (80050c0 <HAL_I2S_Receive_DMA+0x16c>)
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffc:	4a31      	ldr	r2, [pc, #196]	@ (80050c4 <HAL_I2S_Receive_DMA+0x170>)
 8004ffe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005004:	4a30      	ldr	r2, [pc, #192]	@ (80050c8 <HAL_I2S_Receive_DMA+0x174>)
 8005006:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005012:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005016:	d10a      	bne.n	800502e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005018:	2300      	movs	r3, #0
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	4619      	mov	r1, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005044:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005046:	f7fe f813 	bl	8003070 <HAL_DMA_Start_IT>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00f      	beq.n	8005070 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005054:	f043 0208 	orr.w	r2, r3, #8
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e022      	b.n	80050b6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507a:	2b00      	cmp	r3, #0
 800507c:	d107      	bne.n	800508e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800508c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d107      	bne.n	80050ac <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	08005181 	.word	0x08005181
 80050c4:	0800513f 	.word	0x0800513f
 80050c8:	0800519d 	.word	0x0800519d

080050cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ec:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10e      	bne.n	8005114 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0202 	bic.w	r2, r2, #2
 8005104:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7fd f8fb 	bl	8002310 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7fd f8dd 	bl	80022f0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10e      	bne.n	8005172 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7fd f8ec 	bl	8002350 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f7fd f8ce 	bl	8002330 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005194:	bf00      	nop
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0203 	bic.w	r2, r2, #3
 80051b8:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d2:	f043 0208 	orr.w	r2, r3, #8
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7ff ff76 	bl	80050cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	881a      	ldrh	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005200:	1c9a      	adds	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10e      	bne.n	800523c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800522c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fd f86a 	bl	8002310 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800523c:	bf00      	nop
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005256:	b292      	uxth	r2, r2
 8005258:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	1c9a      	adds	r2, r3, #2
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10e      	bne.n	800529a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800528a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7fd f85b 	bl	8002350 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b086      	sub	sp, #24
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d13a      	bne.n	8005334 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d109      	bne.n	80052dc <I2S_IRQHandler+0x3a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d2:	2b40      	cmp	r3, #64	@ 0x40
 80052d4:	d102      	bne.n	80052dc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff ffb4 	bl	8005244 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e2:	2b40      	cmp	r3, #64	@ 0x40
 80052e4:	d126      	bne.n	8005334 <I2S_IRQHandler+0x92>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d11f      	bne.n	8005334 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005302:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005304:	2300      	movs	r3, #0
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005326:	f043 0202 	orr.w	r2, r3, #2
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fecc 	bl	80050cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b03      	cmp	r3, #3
 800533e:	d136      	bne.n	80053ae <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b02      	cmp	r3, #2
 8005348:	d109      	bne.n	800535e <I2S_IRQHandler+0xbc>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005354:	2b80      	cmp	r3, #128	@ 0x80
 8005356:	d102      	bne.n	800535e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff ff45 	bl	80051e8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b08      	cmp	r3, #8
 8005366:	d122      	bne.n	80053ae <I2S_IRQHandler+0x10c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b20      	cmp	r3, #32
 8005374:	d11b      	bne.n	80053ae <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005384:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a0:	f043 0204 	orr.w	r2, r3, #4
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fe8f 	bl	80050cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a92      	ldr	r2, [pc, #584]	@ (8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d101      	bne.n	80053d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80053d2:	4b92      	ldr	r3, [pc, #584]	@ (800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053d4:	e001      	b.n	80053da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80053d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a8b      	ldr	r2, [pc, #556]	@ (8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d101      	bne.n	80053f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80053f0:	4b8a      	ldr	r3, [pc, #552]	@ (800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053f2:	e001      	b.n	80053f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80053f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005404:	d004      	beq.n	8005410 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f040 8099 	bne.w	8005542 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b02      	cmp	r3, #2
 8005418:	d107      	bne.n	800542a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f925 	bl	8005674 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b01      	cmp	r3, #1
 8005432:	d107      	bne.n	8005444 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f9c8 	bl	80057d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544a:	2b40      	cmp	r3, #64	@ 0x40
 800544c:	d13a      	bne.n	80054c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d035      	beq.n	80054c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a6e      	ldr	r2, [pc, #440]	@ (8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d101      	bne.n	8005466 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005462:	4b6e      	ldr	r3, [pc, #440]	@ (800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005464:	e001      	b.n	800546a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005466:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4969      	ldr	r1, [pc, #420]	@ (8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005472:	428b      	cmp	r3, r1
 8005474:	d101      	bne.n	800547a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005476:	4b69      	ldr	r3, [pc, #420]	@ (800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005478:	e001      	b.n	800547e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800547a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800547e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005482:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005492:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b6:	f043 0202 	orr.w	r2, r3, #2
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff fe04 	bl	80050cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	f040 80c3 	bne.w	8005656 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80bd 	beq.w	8005656 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80054ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a49      	ldr	r2, [pc, #292]	@ (8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d101      	bne.n	80054fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80054f6:	4b49      	ldr	r3, [pc, #292]	@ (800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054f8:	e001      	b.n	80054fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80054fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4944      	ldr	r1, [pc, #272]	@ (8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005506:	428b      	cmp	r3, r1
 8005508:	d101      	bne.n	800550e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800550a:	4b44      	ldr	r3, [pc, #272]	@ (800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800550c:	e001      	b.n	8005512 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800550e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005512:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005516:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005518:	2300      	movs	r3, #0
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	60bb      	str	r3, [r7, #8]
 8005524:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005532:	f043 0204 	orr.w	r2, r3, #4
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff fdc6 	bl	80050cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005540:	e089      	b.n	8005656 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b02      	cmp	r3, #2
 800554a:	d107      	bne.n	800555c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8be 	bl	80056d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b01      	cmp	r3, #1
 8005564:	d107      	bne.n	8005576 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f8fd 	bl	8005770 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557c:	2b40      	cmp	r3, #64	@ 0x40
 800557e:	d12f      	bne.n	80055e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	d02a      	beq.n	80055e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005598:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1e      	ldr	r2, [pc, #120]	@ (8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d101      	bne.n	80055a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80055a4:	4b1d      	ldr	r3, [pc, #116]	@ (800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055a6:	e001      	b.n	80055ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80055a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4919      	ldr	r1, [pc, #100]	@ (8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055b4:	428b      	cmp	r3, r1
 80055b6:	d101      	bne.n	80055bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80055b8:	4b18      	ldr	r3, [pc, #96]	@ (800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055ba:	e001      	b.n	80055c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80055bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d2:	f043 0202 	orr.w	r2, r3, #2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fd76 	bl	80050cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d136      	bne.n	8005658 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d031      	beq.n	8005658 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a07      	ldr	r2, [pc, #28]	@ (8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d101      	bne.n	8005602 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80055fe:	4b07      	ldr	r3, [pc, #28]	@ (800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005600:	e001      	b.n	8005606 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005602:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4902      	ldr	r1, [pc, #8]	@ (8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800560e:	428b      	cmp	r3, r1
 8005610:	d106      	bne.n	8005620 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005612:	4b02      	ldr	r3, [pc, #8]	@ (800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005614:	e006      	b.n	8005624 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005616:	bf00      	nop
 8005618:	40003800 	.word	0x40003800
 800561c:	40003400 	.word	0x40003400
 8005620:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005624:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005628:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005638:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	f043 0204 	orr.w	r2, r3, #4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fd3c 	bl	80050cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005654:	e000      	b.n	8005658 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005656:	bf00      	nop
}
 8005658:	bf00      	nop
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005680:	1c99      	adds	r1, r3, #2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6251      	str	r1, [r2, #36]	@ 0x24
 8005686:	881a      	ldrh	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d113      	bne.n	80056ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80056b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d106      	bne.n	80056ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff ffc9 	bl	8005660 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e4:	1c99      	adds	r1, r3, #2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6251      	str	r1, [r2, #36]	@ 0x24
 80056ea:	8819      	ldrh	r1, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005768 <I2SEx_TxISR_I2SExt+0x90>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d101      	bne.n	80056fa <I2SEx_TxISR_I2SExt+0x22>
 80056f6:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <I2SEx_TxISR_I2SExt+0x94>)
 80056f8:	e001      	b.n	80056fe <I2SEx_TxISR_I2SExt+0x26>
 80056fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056fe:	460a      	mov	r2, r1
 8005700:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d121      	bne.n	800575e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a12      	ldr	r2, [pc, #72]	@ (8005768 <I2SEx_TxISR_I2SExt+0x90>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d101      	bne.n	8005728 <I2SEx_TxISR_I2SExt+0x50>
 8005724:	4b11      	ldr	r3, [pc, #68]	@ (800576c <I2SEx_TxISR_I2SExt+0x94>)
 8005726:	e001      	b.n	800572c <I2SEx_TxISR_I2SExt+0x54>
 8005728:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	490d      	ldr	r1, [pc, #52]	@ (8005768 <I2SEx_TxISR_I2SExt+0x90>)
 8005734:	428b      	cmp	r3, r1
 8005736:	d101      	bne.n	800573c <I2SEx_TxISR_I2SExt+0x64>
 8005738:	4b0c      	ldr	r3, [pc, #48]	@ (800576c <I2SEx_TxISR_I2SExt+0x94>)
 800573a:	e001      	b.n	8005740 <I2SEx_TxISR_I2SExt+0x68>
 800573c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005740:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005744:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff ff81 	bl	8005660 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40003800 	.word	0x40003800
 800576c:	40003400 	.word	0x40003400

08005770 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68d8      	ldr	r0, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	1c99      	adds	r1, r3, #2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005788:	b282      	uxth	r2, r0
 800578a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d113      	bne.n	80057cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff ff4a 	bl	8005660 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057cc:	bf00      	nop
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a20      	ldr	r2, [pc, #128]	@ (8005864 <I2SEx_RxISR_I2SExt+0x90>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d101      	bne.n	80057ea <I2SEx_RxISR_I2SExt+0x16>
 80057e6:	4b20      	ldr	r3, [pc, #128]	@ (8005868 <I2SEx_RxISR_I2SExt+0x94>)
 80057e8:	e001      	b.n	80057ee <I2SEx_RxISR_I2SExt+0x1a>
 80057ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057ee:	68d8      	ldr	r0, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	1c99      	adds	r1, r3, #2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80057fa:	b282      	uxth	r2, r0
 80057fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d121      	bne.n	800585a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a12      	ldr	r2, [pc, #72]	@ (8005864 <I2SEx_RxISR_I2SExt+0x90>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d101      	bne.n	8005824 <I2SEx_RxISR_I2SExt+0x50>
 8005820:	4b11      	ldr	r3, [pc, #68]	@ (8005868 <I2SEx_RxISR_I2SExt+0x94>)
 8005822:	e001      	b.n	8005828 <I2SEx_RxISR_I2SExt+0x54>
 8005824:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	490d      	ldr	r1, [pc, #52]	@ (8005864 <I2SEx_RxISR_I2SExt+0x90>)
 8005830:	428b      	cmp	r3, r1
 8005832:	d101      	bne.n	8005838 <I2SEx_RxISR_I2SExt+0x64>
 8005834:	4b0c      	ldr	r3, [pc, #48]	@ (8005868 <I2SEx_RxISR_I2SExt+0x94>)
 8005836:	e001      	b.n	800583c <I2SEx_RxISR_I2SExt+0x68>
 8005838:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800583c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005840:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff ff03 	bl	8005660 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40003800 	.word	0x40003800
 8005868:	40003400 	.word	0x40003400

0800586c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e267      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d075      	beq.n	8005976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800588a:	4b88      	ldr	r3, [pc, #544]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
 8005892:	2b04      	cmp	r3, #4
 8005894:	d00c      	beq.n	80058b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005896:	4b85      	ldr	r3, [pc, #532]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d112      	bne.n	80058c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058a2:	4b82      	ldr	r3, [pc, #520]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058ae:	d10b      	bne.n	80058c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b0:	4b7e      	ldr	r3, [pc, #504]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d05b      	beq.n	8005974 <HAL_RCC_OscConfig+0x108>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d157      	bne.n	8005974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e242      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d0:	d106      	bne.n	80058e0 <HAL_RCC_OscConfig+0x74>
 80058d2:	4b76      	ldr	r3, [pc, #472]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a75      	ldr	r2, [pc, #468]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	e01d      	b.n	800591c <HAL_RCC_OscConfig+0xb0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058e8:	d10c      	bne.n	8005904 <HAL_RCC_OscConfig+0x98>
 80058ea:	4b70      	ldr	r3, [pc, #448]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6f      	ldr	r2, [pc, #444]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	4b6d      	ldr	r3, [pc, #436]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a6c      	ldr	r2, [pc, #432]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e00b      	b.n	800591c <HAL_RCC_OscConfig+0xb0>
 8005904:	4b69      	ldr	r3, [pc, #420]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a68      	ldr	r2, [pc, #416]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 800590a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	4b66      	ldr	r3, [pc, #408]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a65      	ldr	r2, [pc, #404]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800591a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d013      	beq.n	800594c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005924:	f7fd f998 	bl	8002c58 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800592c:	f7fd f994 	bl	8002c58 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	@ 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e207      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800593e:	4b5b      	ldr	r3, [pc, #364]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0xc0>
 800594a:	e014      	b.n	8005976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594c:	f7fd f984 	bl	8002c58 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005954:	f7fd f980 	bl	8002c58 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	@ 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e1f3      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005966:	4b51      	ldr	r3, [pc, #324]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0xe8>
 8005972:	e000      	b.n	8005976 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d063      	beq.n	8005a4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005982:	4b4a      	ldr	r3, [pc, #296]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800598e:	4b47      	ldr	r3, [pc, #284]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005996:	2b08      	cmp	r3, #8
 8005998:	d11c      	bne.n	80059d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800599a:	4b44      	ldr	r3, [pc, #272]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d116      	bne.n	80059d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059a6:	4b41      	ldr	r3, [pc, #260]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_RCC_OscConfig+0x152>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d001      	beq.n	80059be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e1c7      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059be:	4b3b      	ldr	r3, [pc, #236]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4937      	ldr	r1, [pc, #220]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059d2:	e03a      	b.n	8005a4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d020      	beq.n	8005a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059dc:	4b34      	ldr	r3, [pc, #208]	@ (8005ab0 <HAL_RCC_OscConfig+0x244>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e2:	f7fd f939 	bl	8002c58 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ea:	f7fd f935 	bl	8002c58 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e1a8      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fc:	4b2b      	ldr	r3, [pc, #172]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0f0      	beq.n	80059ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a08:	4b28      	ldr	r3, [pc, #160]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	4925      	ldr	r1, [pc, #148]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	600b      	str	r3, [r1, #0]
 8005a1c:	e015      	b.n	8005a4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a1e:	4b24      	ldr	r3, [pc, #144]	@ (8005ab0 <HAL_RCC_OscConfig+0x244>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7fd f918 	bl	8002c58 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a2c:	f7fd f914 	bl	8002c58 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e187      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f0      	bne.n	8005a2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d036      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d016      	beq.n	8005a8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a5e:	4b15      	ldr	r3, [pc, #84]	@ (8005ab4 <HAL_RCC_OscConfig+0x248>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a64:	f7fd f8f8 	bl	8002c58 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a6c:	f7fd f8f4 	bl	8002c58 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e167      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x200>
 8005a8a:	e01b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a8c:	4b09      	ldr	r3, [pc, #36]	@ (8005ab4 <HAL_RCC_OscConfig+0x248>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a92:	f7fd f8e1 	bl	8002c58 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a98:	e00e      	b.n	8005ab8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a9a:	f7fd f8dd 	bl	8002c58 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d907      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e150      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	42470000 	.word	0x42470000
 8005ab4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab8:	4b88      	ldr	r3, [pc, #544]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ea      	bne.n	8005a9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8097 	beq.w	8005c00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad6:	4b81      	ldr	r3, [pc, #516]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10f      	bne.n	8005b02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	4b7d      	ldr	r3, [pc, #500]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aea:	4a7c      	ldr	r2, [pc, #496]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005af2:	4b7a      	ldr	r3, [pc, #488]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b02:	4b77      	ldr	r3, [pc, #476]	@ (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d118      	bne.n	8005b40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b0e:	4b74      	ldr	r3, [pc, #464]	@ (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a73      	ldr	r2, [pc, #460]	@ (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1a:	f7fd f89d 	bl	8002c58 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b22:	f7fd f899 	bl	8002c58 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e10c      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b34:	4b6a      	ldr	r3, [pc, #424]	@ (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d106      	bne.n	8005b56 <HAL_RCC_OscConfig+0x2ea>
 8005b48:	4b64      	ldr	r3, [pc, #400]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4c:	4a63      	ldr	r2, [pc, #396]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b54:	e01c      	b.n	8005b90 <HAL_RCC_OscConfig+0x324>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b05      	cmp	r3, #5
 8005b5c:	d10c      	bne.n	8005b78 <HAL_RCC_OscConfig+0x30c>
 8005b5e:	4b5f      	ldr	r3, [pc, #380]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b62:	4a5e      	ldr	r2, [pc, #376]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b64:	f043 0304 	orr.w	r3, r3, #4
 8005b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6e:	4a5b      	ldr	r2, [pc, #364]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b76:	e00b      	b.n	8005b90 <HAL_RCC_OscConfig+0x324>
 8005b78:	4b58      	ldr	r3, [pc, #352]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b7c:	4a57      	ldr	r2, [pc, #348]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b84:	4b55      	ldr	r3, [pc, #340]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b88:	4a54      	ldr	r2, [pc, #336]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b8a:	f023 0304 	bic.w	r3, r3, #4
 8005b8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b98:	f7fd f85e 	bl	8002c58 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b9e:	e00a      	b.n	8005bb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba0:	f7fd f85a 	bl	8002c58 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e0cb      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb6:	4b49      	ldr	r3, [pc, #292]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0ee      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x334>
 8005bc2:	e014      	b.n	8005bee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc4:	f7fd f848 	bl	8002c58 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bca:	e00a      	b.n	8005be2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bcc:	f7fd f844 	bl	8002c58 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0b5      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be2:	4b3e      	ldr	r3, [pc, #248]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1ee      	bne.n	8005bcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d105      	bne.n	8005c00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf4:	4b39      	ldr	r3, [pc, #228]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf8:	4a38      	ldr	r2, [pc, #224]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80a1 	beq.w	8005d4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c0a:	4b34      	ldr	r3, [pc, #208]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d05c      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d141      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c1e:	4b31      	ldr	r3, [pc, #196]	@ (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c24:	f7fd f818 	bl	8002c58 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c2c:	f7fd f814 	bl	8002c58 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e087      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3e:	4b27      	ldr	r3, [pc, #156]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c58:	019b      	lsls	r3, r3, #6
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	3b01      	subs	r3, #1
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	491b      	ldr	r1, [pc, #108]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c74:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7a:	f7fc ffed 	bl	8002c58 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c82:	f7fc ffe9 	bl	8002c58 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e05c      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c94:	4b11      	ldr	r3, [pc, #68]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0f0      	beq.n	8005c82 <HAL_RCC_OscConfig+0x416>
 8005ca0:	e054      	b.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca2:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca8:	f7fc ffd6 	bl	8002c58 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cb0:	f7fc ffd2 	bl	8002c58 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e045      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc2:	4b06      	ldr	r3, [pc, #24]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x444>
 8005cce:	e03d      	b.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d107      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e038      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40007000 	.word	0x40007000
 8005ce4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d58 <HAL_RCC_OscConfig+0x4ec>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d028      	beq.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d121      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d11a      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d18:	4013      	ands	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d111      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	3b01      	subs	r3, #1
 8005d32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d107      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d001      	beq.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40023800 	.word	0x40023800

08005d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0cc      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d70:	4b68      	ldr	r3, [pc, #416]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d90c      	bls.n	8005d98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7e:	4b65      	ldr	r3, [pc, #404]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d86:	4b63      	ldr	r3, [pc, #396]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0b8      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d020      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005db0:	4b59      	ldr	r3, [pc, #356]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4a58      	ldr	r2, [pc, #352]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005dba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dc8:	4b53      	ldr	r3, [pc, #332]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	4a52      	ldr	r2, [pc, #328]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005dd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd4:	4b50      	ldr	r3, [pc, #320]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	494d      	ldr	r1, [pc, #308]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d044      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d107      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dfa:	4b47      	ldr	r3, [pc, #284]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d119      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e07f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d003      	beq.n	8005e1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d107      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e06f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e067      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e3a:	4b37      	ldr	r3, [pc, #220]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f023 0203 	bic.w	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	4934      	ldr	r1, [pc, #208]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e4c:	f7fc ff04 	bl	8002c58 <HAL_GetTick>
 8005e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e52:	e00a      	b.n	8005e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e54:	f7fc ff00 	bl	8002c58 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e04f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 020c 	and.w	r2, r3, #12
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d1eb      	bne.n	8005e54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b25      	ldr	r3, [pc, #148]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d20c      	bcs.n	8005ea4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b22      	ldr	r3, [pc, #136]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b20      	ldr	r3, [pc, #128]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e032      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eb0:	4b19      	ldr	r3, [pc, #100]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	4916      	ldr	r1, [pc, #88]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ece:	4b12      	ldr	r3, [pc, #72]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	490e      	ldr	r1, [pc, #56]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ee2:	f000 f821 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	490a      	ldr	r1, [pc, #40]	@ (8005f1c <HAL_RCC_ClockConfig+0x1c0>)
 8005ef4:	5ccb      	ldrb	r3, [r1, r3]
 8005ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8005efa:	4a09      	ldr	r2, [pc, #36]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c4>)
 8005efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005efe:	4b09      	ldr	r3, [pc, #36]	@ (8005f24 <HAL_RCC_ClockConfig+0x1c8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fc fe64 	bl	8002bd0 <HAL_InitTick>

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40023c00 	.word	0x40023c00
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	0800f1f8 	.word	0x0800f1f8
 8005f20:	20000438 	.word	0x20000438
 8005f24:	2000043c 	.word	0x2000043c

08005f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f2c:	b094      	sub	sp, #80	@ 0x50
 8005f2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f34:	2300      	movs	r3, #0
 8005f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f38:	2300      	movs	r3, #0
 8005f3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f40:	4b79      	ldr	r3, [pc, #484]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 030c 	and.w	r3, r3, #12
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d00d      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0x40>
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	f200 80e1 	bhi.w	8006114 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0x34>
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d003      	beq.n	8005f62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f5a:	e0db      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f5c:	4b73      	ldr	r3, [pc, #460]	@ (800612c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005f60:	e0db      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f62:	4b73      	ldr	r3, [pc, #460]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f66:	e0d8      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f68:	4b6f      	ldr	r3, [pc, #444]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f70:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f72:	4b6d      	ldr	r3, [pc, #436]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d063      	beq.n	8006046 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	099b      	lsrs	r3, r3, #6
 8005f84:	2200      	movs	r2, #0
 8005f86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f92:	2300      	movs	r3, #0
 8005f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	462b      	mov	r3, r5
 8005f9e:	f04f 0000 	mov.w	r0, #0
 8005fa2:	f04f 0100 	mov.w	r1, #0
 8005fa6:	0159      	lsls	r1, r3, #5
 8005fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fac:	0150      	lsls	r0, r2, #5
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	1a51      	subs	r1, r2, r1
 8005fb6:	6139      	str	r1, [r7, #16]
 8005fb8:	4629      	mov	r1, r5
 8005fba:	eb63 0301 	sbc.w	r3, r3, r1
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fcc:	4659      	mov	r1, fp
 8005fce:	018b      	lsls	r3, r1, #6
 8005fd0:	4651      	mov	r1, sl
 8005fd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fd6:	4651      	mov	r1, sl
 8005fd8:	018a      	lsls	r2, r1, #6
 8005fda:	4651      	mov	r1, sl
 8005fdc:	ebb2 0801 	subs.w	r8, r2, r1
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	eb63 0901 	sbc.w	r9, r3, r1
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ffa:	4690      	mov	r8, r2
 8005ffc:	4699      	mov	r9, r3
 8005ffe:	4623      	mov	r3, r4
 8006000:	eb18 0303 	adds.w	r3, r8, r3
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	462b      	mov	r3, r5
 8006008:	eb49 0303 	adc.w	r3, r9, r3
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800601a:	4629      	mov	r1, r5
 800601c:	024b      	lsls	r3, r1, #9
 800601e:	4621      	mov	r1, r4
 8006020:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006024:	4621      	mov	r1, r4
 8006026:	024a      	lsls	r2, r1, #9
 8006028:	4610      	mov	r0, r2
 800602a:	4619      	mov	r1, r3
 800602c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800602e:	2200      	movs	r2, #0
 8006030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006032:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006034:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006038:	f7fa fe26 	bl	8000c88 <__aeabi_uldivmod>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4613      	mov	r3, r2
 8006042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006044:	e058      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006046:	4b38      	ldr	r3, [pc, #224]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	099b      	lsrs	r3, r3, #6
 800604c:	2200      	movs	r2, #0
 800604e:	4618      	mov	r0, r3
 8006050:	4611      	mov	r1, r2
 8006052:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006056:	623b      	str	r3, [r7, #32]
 8006058:	2300      	movs	r3, #0
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
 800605c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006060:	4642      	mov	r2, r8
 8006062:	464b      	mov	r3, r9
 8006064:	f04f 0000 	mov.w	r0, #0
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	0159      	lsls	r1, r3, #5
 800606e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006072:	0150      	lsls	r0, r2, #5
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4641      	mov	r1, r8
 800607a:	ebb2 0a01 	subs.w	sl, r2, r1
 800607e:	4649      	mov	r1, r9
 8006080:	eb63 0b01 	sbc.w	fp, r3, r1
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006090:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006094:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006098:	ebb2 040a 	subs.w	r4, r2, sl
 800609c:	eb63 050b 	sbc.w	r5, r3, fp
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	00eb      	lsls	r3, r5, #3
 80060aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ae:	00e2      	lsls	r2, r4, #3
 80060b0:	4614      	mov	r4, r2
 80060b2:	461d      	mov	r5, r3
 80060b4:	4643      	mov	r3, r8
 80060b6:	18e3      	adds	r3, r4, r3
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	464b      	mov	r3, r9
 80060bc:	eb45 0303 	adc.w	r3, r5, r3
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060ce:	4629      	mov	r1, r5
 80060d0:	028b      	lsls	r3, r1, #10
 80060d2:	4621      	mov	r1, r4
 80060d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060d8:	4621      	mov	r1, r4
 80060da:	028a      	lsls	r2, r1, #10
 80060dc:	4610      	mov	r0, r2
 80060de:	4619      	mov	r1, r3
 80060e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060e2:	2200      	movs	r2, #0
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	61fa      	str	r2, [r7, #28]
 80060e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ec:	f7fa fdcc 	bl	8000c88 <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4613      	mov	r3, r2
 80060f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	3301      	adds	r3, #1
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006108:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800610a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800610c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006110:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006112:	e002      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006114:	4b05      	ldr	r3, [pc, #20]	@ (800612c <HAL_RCC_GetSysClockFreq+0x204>)
 8006116:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800611a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800611c:	4618      	mov	r0, r3
 800611e:	3750      	adds	r7, #80	@ 0x50
 8006120:	46bd      	mov	sp, r7
 8006122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800
 800612c:	00f42400 	.word	0x00f42400
 8006130:	007a1200 	.word	0x007a1200

08006134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006138:	4b03      	ldr	r3, [pc, #12]	@ (8006148 <HAL_RCC_GetHCLKFreq+0x14>)
 800613a:	681b      	ldr	r3, [r3, #0]
}
 800613c:	4618      	mov	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000438 	.word	0x20000438

0800614c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006150:	f7ff fff0 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 8006154:	4602      	mov	r2, r0
 8006156:	4b05      	ldr	r3, [pc, #20]	@ (800616c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	0a9b      	lsrs	r3, r3, #10
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	4903      	ldr	r1, [pc, #12]	@ (8006170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006162:	5ccb      	ldrb	r3, [r1, r3]
 8006164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006168:	4618      	mov	r0, r3
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40023800 	.word	0x40023800
 8006170:	0800f208 	.word	0x0800f208

08006174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006178:	f7ff ffdc 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b05      	ldr	r3, [pc, #20]	@ (8006194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	0b5b      	lsrs	r3, r3, #13
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	4903      	ldr	r1, [pc, #12]	@ (8006198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006190:	4618      	mov	r0, r3
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40023800 	.word	0x40023800
 8006198:	0800f208 	.word	0x0800f208

0800619c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d105      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d035      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061c4:	4b62      	ldr	r3, [pc, #392]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061ca:	f7fc fd45 	bl	8002c58 <HAL_GetTick>
 80061ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061d0:	e008      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061d2:	f7fc fd41 	bl	8002c58 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e0b0      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1f0      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	019a      	lsls	r2, r3, #6
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	071b      	lsls	r3, r3, #28
 80061fc:	4955      	ldr	r1, [pc, #340]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006204:	4b52      	ldr	r3, [pc, #328]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006206:	2201      	movs	r2, #1
 8006208:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800620a:	f7fc fd25 	bl	8002c58 <HAL_GetTick>
 800620e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006210:	e008      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006212:	f7fc fd21 	bl	8002c58 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d901      	bls.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e090      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006224:	4b4b      	ldr	r3, [pc, #300]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0f0      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8083 	beq.w	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	4b44      	ldr	r3, [pc, #272]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006246:	4a43      	ldr	r2, [pc, #268]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800624c:	6413      	str	r3, [r2, #64]	@ 0x40
 800624e:	4b41      	ldr	r3, [pc, #260]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800625a:	4b3f      	ldr	r3, [pc, #252]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a3e      	ldr	r2, [pc, #248]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006264:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006266:	f7fc fcf7 	bl	8002c58 <HAL_GetTick>
 800626a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800626c:	e008      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800626e:	f7fc fcf3 	bl	8002c58 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e062      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006280:	4b35      	ldr	r3, [pc, #212]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800628c:	4b31      	ldr	r3, [pc, #196]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800628e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006290:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006294:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d02f      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d028      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062b4:	4b29      	ldr	r3, [pc, #164]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062ba:	4b28      	ldr	r3, [pc, #160]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062c0:	4a24      	ldr	r2, [pc, #144]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062c6:	4b23      	ldr	r3, [pc, #140]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d114      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80062d2:	f7fc fcc1 	bl	8002c58 <HAL_GetTick>
 80062d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d8:	e00a      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062da:	f7fc fcbd 	bl	8002c58 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e02a      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f0:	4b18      	ldr	r3, [pc, #96]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0ee      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006304:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006308:	d10d      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800630a:	4b12      	ldr	r3, [pc, #72]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800631a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800631e:	490d      	ldr	r1, [pc, #52]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006320:	4313      	orrs	r3, r2
 8006322:	608b      	str	r3, [r1, #8]
 8006324:	e005      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006326:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	4a0a      	ldr	r2, [pc, #40]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800632c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006330:	6093      	str	r3, [r2, #8]
 8006332:	4b08      	ldr	r3, [pc, #32]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006334:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800633e:	4905      	ldr	r1, [pc, #20]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006340:	4313      	orrs	r3, r2
 8006342:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	42470068 	.word	0x42470068
 8006354:	40023800 	.word	0x40023800
 8006358:	40007000 	.word	0x40007000
 800635c:	42470e40 	.word	0x42470e40

08006360 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d13e      	bne.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800637e:	4b23      	ldr	r3, [pc, #140]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d12f      	bne.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006394:	4b1e      	ldr	r3, [pc, #120]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006396:	617b      	str	r3, [r7, #20]
          break;
 8006398:	e02f      	b.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800639a:	4b1c      	ldr	r3, [pc, #112]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063a6:	d108      	bne.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80063a8:	4b18      	ldr	r3, [pc, #96]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063b0:	4a18      	ldr	r2, [pc, #96]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80063b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	e007      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80063ba:	4b14      	ldr	r3, [pc, #80]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063c2:	4a15      	ldr	r2, [pc, #84]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80063c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80063ca:	4b10      	ldr	r3, [pc, #64]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80063cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063d0:	099b      	lsrs	r3, r3, #6
 80063d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	fb02 f303 	mul.w	r3, r2, r3
 80063dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80063de:	4b0b      	ldr	r3, [pc, #44]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80063e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063e4:	0f1b      	lsrs	r3, r3, #28
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	617b      	str	r3, [r7, #20]
          break;
 80063f2:	e002      	b.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
          break;
 80063f8:	bf00      	nop
        }
      }
      break;
 80063fa:	bf00      	nop
    }
  }
  return frequency;
 80063fc:	697b      	ldr	r3, [r7, #20]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	371c      	adds	r7, #28
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40023800 	.word	0x40023800
 8006410:	00bb8000 	.word	0x00bb8000
 8006414:	007a1200 	.word	0x007a1200
 8006418:	00f42400 	.word	0x00f42400

0800641c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e07b      	b.n	8006526 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006432:	2b00      	cmp	r3, #0
 8006434:	d108      	bne.n	8006448 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800643e:	d009      	beq.n	8006454 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	61da      	str	r2, [r3, #28]
 8006446:	e005      	b.n	8006454 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fc f97a 	bl	8002768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800648a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	431a      	orrs	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064c4:	431a      	orrs	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d8:	ea42 0103 	orr.w	r1, r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	0c1b      	lsrs	r3, r3, #16
 80064f2:	f003 0104 	and.w	r1, r3, #4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	f003 0210 	and.w	r2, r3, #16
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006514:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e03f      	b.n	80065c0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fc f94f 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2224      	movs	r2, #36	@ 0x24
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006570:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 faea 	bl	8006b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006586:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695a      	ldr	r2, [r3, #20]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006596:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	@ 0x28
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d17c      	bne.n	80066e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <HAL_UART_Transmit+0x2c>
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e075      	b.n	80066e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_UART_Transmit+0x3e>
 8006602:	2302      	movs	r3, #2
 8006604:	e06e      	b.n	80066e4 <HAL_UART_Transmit+0x11c>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2221      	movs	r2, #33	@ 0x21
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800661c:	f7fc fb1c 	bl	8002c58 <HAL_GetTick>
 8006620:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	88fa      	ldrh	r2, [r7, #6]
 8006626:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006636:	d108      	bne.n	800664a <HAL_UART_Transmit+0x82>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	61bb      	str	r3, [r7, #24]
 8006648:	e003      	b.n	8006652 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800665a:	e02a      	b.n	80066b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2200      	movs	r2, #0
 8006664:	2180      	movs	r1, #128	@ 0x80
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f977 	bl	800695a <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e036      	b.n	80066e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10b      	bne.n	8006694 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800668a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	3302      	adds	r3, #2
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	e007      	b.n	80066a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	781a      	ldrb	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	3301      	adds	r3, #1
 80066a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1cf      	bne.n	800665c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2200      	movs	r2, #0
 80066c4:	2140      	movs	r1, #64	@ 0x40
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 f947 	bl	800695a <UART_WaitOnFlagUntilTimeout>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e006      	b.n	80066e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	e000      	b.n	80066e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066e2:	2302      	movs	r3, #2
  }
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3720      	adds	r7, #32
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08c      	sub	sp, #48	@ 0x30
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	4613      	mov	r3, r2
 80066f8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b20      	cmp	r3, #32
 8006704:	d165      	bne.n	80067d2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <HAL_UART_Transmit_DMA+0x26>
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e05e      	b.n	80067d4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <HAL_UART_Transmit_DMA+0x38>
 8006720:	2302      	movs	r3, #2
 8006722:	e057      	b.n	80067d4 <HAL_UART_Transmit_DMA+0xe8>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	88fa      	ldrh	r2, [r7, #6]
 8006736:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	88fa      	ldrh	r2, [r7, #6]
 800673c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2221      	movs	r2, #33	@ 0x21
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006750:	4a22      	ldr	r2, [pc, #136]	@ (80067dc <HAL_UART_Transmit_DMA+0xf0>)
 8006752:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006758:	4a21      	ldr	r2, [pc, #132]	@ (80067e0 <HAL_UART_Transmit_DMA+0xf4>)
 800675a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006760:	4a20      	ldr	r2, [pc, #128]	@ (80067e4 <HAL_UART_Transmit_DMA+0xf8>)
 8006762:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006768:	2200      	movs	r2, #0
 800676a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800676c:	f107 0308 	add.w	r3, r7, #8
 8006770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006778:	6819      	ldr	r1, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3304      	adds	r3, #4
 8006780:	461a      	mov	r2, r3
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	f7fc fc74 	bl	8003070 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006790:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3314      	adds	r3, #20
 80067a0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	617b      	str	r3, [r7, #20]
   return(result);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3314      	adds	r3, #20
 80067b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80067bc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6a39      	ldr	r1, [r7, #32]
 80067c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e5      	bne.n	800679a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e000      	b.n	80067d4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80067d2:	2302      	movs	r3, #2
  }
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3730      	adds	r7, #48	@ 0x30
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	08006811 	.word	0x08006811
 80067e0:	080068ab 	.word	0x080068ab
 80067e4:	080068c7 	.word	0x080068c7

080067e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b090      	sub	sp, #64	@ 0x40
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006828:	2b00      	cmp	r3, #0
 800682a:	d137      	bne.n	800689c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800682c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682e:	2200      	movs	r2, #0
 8006830:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3314      	adds	r3, #20
 8006838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	623b      	str	r3, [r7, #32]
   return(result);
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006848:	63bb      	str	r3, [r7, #56]	@ 0x38
 800684a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3314      	adds	r3, #20
 8006850:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006852:	633a      	str	r2, [r7, #48]	@ 0x30
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e5      	bne.n	8006832 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	330c      	adds	r3, #12
 800686c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	60fb      	str	r3, [r7, #12]
   return(result);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800687c:	637b      	str	r3, [r7, #52]	@ 0x34
 800687e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	330c      	adds	r3, #12
 8006884:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006886:	61fa      	str	r2, [r7, #28]
 8006888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	69b9      	ldr	r1, [r7, #24]
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	617b      	str	r3, [r7, #20]
   return(result);
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e5      	bne.n	8006866 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800689a:	e002      	b.n	80068a2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800689c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800689e:	f7ff ffa3 	bl	80067e8 <HAL_UART_TxCpltCallback>
}
 80068a2:	bf00      	nop
 80068a4:	3740      	adds	r7, #64	@ 0x40
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f7fb fd03 	bl	80022c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e2:	2b80      	cmp	r3, #128	@ 0x80
 80068e4:	bf0c      	ite	eq
 80068e6:	2301      	moveq	r3, #1
 80068e8:	2300      	movne	r3, #0
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b21      	cmp	r3, #33	@ 0x21
 80068f8:	d108      	bne.n	800690c <UART_DMAError+0x46>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2200      	movs	r2, #0
 8006904:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006906:	68b8      	ldr	r0, [r7, #8]
 8006908:	f000 f895 	bl	8006a36 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006916:	2b40      	cmp	r3, #64	@ 0x40
 8006918:	bf0c      	ite	eq
 800691a:	2301      	moveq	r3, #1
 800691c:	2300      	movne	r3, #0
 800691e:	b2db      	uxtb	r3, r3
 8006920:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b22      	cmp	r3, #34	@ 0x22
 800692c:	d108      	bne.n	8006940 <UART_DMAError+0x7a>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2200      	movs	r2, #0
 8006938:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800693a:	68b8      	ldr	r0, [r7, #8]
 800693c:	f000 f8a3 	bl	8006a86 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006944:	f043 0210 	orr.w	r2, r3, #16
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800694c:	68b8      	ldr	r0, [r7, #8]
 800694e:	f7ff ff55 	bl	80067fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006952:	bf00      	nop
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b090      	sub	sp, #64	@ 0x40
 800695e:	af00      	add	r7, sp, #0
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	603b      	str	r3, [r7, #0]
 8006966:	4613      	mov	r3, r2
 8006968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696a:	e050      	b.n	8006a0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800696c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d04c      	beq.n	8006a0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006976:	2b00      	cmp	r3, #0
 8006978:	d007      	beq.n	800698a <UART_WaitOnFlagUntilTimeout+0x30>
 800697a:	f7fc f96d 	bl	8002c58 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006986:	429a      	cmp	r2, r3
 8006988:	d241      	bcs.n	8006a0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80069a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069aa:	637a      	str	r2, [r7, #52]	@ 0x34
 80069ac:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80069b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e5      	bne.n	800698a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3314      	adds	r3, #20
 80069c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	613b      	str	r3, [r7, #16]
   return(result);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3314      	adds	r3, #20
 80069dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069de:	623a      	str	r2, [r7, #32]
 80069e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	69f9      	ldr	r1, [r7, #28]
 80069e4:	6a3a      	ldr	r2, [r7, #32]
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e5      	bne.n	80069be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e00f      	b.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4013      	ands	r3, r2
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	bf0c      	ite	eq
 8006a1e:	2301      	moveq	r3, #1
 8006a20:	2300      	movne	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d09f      	beq.n	800696c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3740      	adds	r7, #64	@ 0x40
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b089      	sub	sp, #36	@ 0x24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	330c      	adds	r3, #12
 8006a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	61ba      	str	r2, [r7, #24]
 8006a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6979      	ldr	r1, [r7, #20]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e5      	bne.n	8006a3e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8006a7a:	bf00      	nop
 8006a7c:	3724      	adds	r7, #36	@ 0x24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b095      	sub	sp, #84	@ 0x54
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	330c      	adds	r3, #12
 8006a94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006aae:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ab4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e5      	bne.n	8006a8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3314      	adds	r3, #20
 8006ac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3314      	adds	r3, #20
 8006ae0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ae2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ae8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e5      	bne.n	8006ac2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d119      	bne.n	8006b32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	330c      	adds	r3, #12
 8006b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f023 0310 	bic.w	r3, r3, #16
 8006b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	330c      	adds	r3, #12
 8006b1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b1e:	61ba      	str	r2, [r7, #24]
 8006b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6979      	ldr	r1, [r7, #20]
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e5      	bne.n	8006afe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b40:	bf00      	nop
 8006b42:	3754      	adds	r7, #84	@ 0x54
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b50:	b0c0      	sub	sp, #256	@ 0x100
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b68:	68d9      	ldr	r1, [r3, #12]
 8006b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	ea40 0301 	orr.w	r3, r0, r1
 8006b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ba4:	f021 010c 	bic.w	r1, r1, #12
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc6:	6999      	ldr	r1, [r3, #24]
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	ea40 0301 	orr.w	r3, r0, r1
 8006bd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b8f      	ldr	r3, [pc, #572]	@ (8006e18 <UART_SetConfig+0x2cc>)
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d005      	beq.n	8006bec <UART_SetConfig+0xa0>
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b8d      	ldr	r3, [pc, #564]	@ (8006e1c <UART_SetConfig+0x2d0>)
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d104      	bne.n	8006bf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bec:	f7ff fac2 	bl	8006174 <HAL_RCC_GetPCLK2Freq>
 8006bf0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006bf4:	e003      	b.n	8006bfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bf6:	f7ff faa9 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8006bfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c08:	f040 810c 	bne.w	8006e24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c1e:	4622      	mov	r2, r4
 8006c20:	462b      	mov	r3, r5
 8006c22:	1891      	adds	r1, r2, r2
 8006c24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c26:	415b      	adcs	r3, r3
 8006c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c2e:	4621      	mov	r1, r4
 8006c30:	eb12 0801 	adds.w	r8, r2, r1
 8006c34:	4629      	mov	r1, r5
 8006c36:	eb43 0901 	adc.w	r9, r3, r1
 8006c3a:	f04f 0200 	mov.w	r2, #0
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c4e:	4690      	mov	r8, r2
 8006c50:	4699      	mov	r9, r3
 8006c52:	4623      	mov	r3, r4
 8006c54:	eb18 0303 	adds.w	r3, r8, r3
 8006c58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c5c:	462b      	mov	r3, r5
 8006c5e:	eb49 0303 	adc.w	r3, r9, r3
 8006c62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	18db      	adds	r3, r3, r3
 8006c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c80:	4613      	mov	r3, r2
 8006c82:	eb42 0303 	adc.w	r3, r2, r3
 8006c86:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c90:	f7f9 fffa 	bl	8000c88 <__aeabi_uldivmod>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4b61      	ldr	r3, [pc, #388]	@ (8006e20 <UART_SetConfig+0x2d4>)
 8006c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	011c      	lsls	r4, r3, #4
 8006ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006cb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	1891      	adds	r1, r2, r2
 8006cba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006cbc:	415b      	adcs	r3, r3
 8006cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006cc4:	4641      	mov	r1, r8
 8006cc6:	eb12 0a01 	adds.w	sl, r2, r1
 8006cca:	4649      	mov	r1, r9
 8006ccc:	eb43 0b01 	adc.w	fp, r3, r1
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ce4:	4692      	mov	sl, r2
 8006ce6:	469b      	mov	fp, r3
 8006ce8:	4643      	mov	r3, r8
 8006cea:	eb1a 0303 	adds.w	r3, sl, r3
 8006cee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8006cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d10:	460b      	mov	r3, r1
 8006d12:	18db      	adds	r3, r3, r3
 8006d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d16:	4613      	mov	r3, r2
 8006d18:	eb42 0303 	adc.w	r3, r2, r3
 8006d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d26:	f7f9 ffaf 	bl	8000c88 <__aeabi_uldivmod>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4b3b      	ldr	r3, [pc, #236]	@ (8006e20 <UART_SetConfig+0x2d4>)
 8006d32:	fba3 2301 	umull	r2, r3, r3, r1
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	2264      	movs	r2, #100	@ 0x64
 8006d3a:	fb02 f303 	mul.w	r3, r2, r3
 8006d3e:	1acb      	subs	r3, r1, r3
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d46:	4b36      	ldr	r3, [pc, #216]	@ (8006e20 <UART_SetConfig+0x2d4>)
 8006d48:	fba3 2302 	umull	r2, r3, r3, r2
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d54:	441c      	add	r4, r3
 8006d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d68:	4642      	mov	r2, r8
 8006d6a:	464b      	mov	r3, r9
 8006d6c:	1891      	adds	r1, r2, r2
 8006d6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d70:	415b      	adcs	r3, r3
 8006d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d78:	4641      	mov	r1, r8
 8006d7a:	1851      	adds	r1, r2, r1
 8006d7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d7e:	4649      	mov	r1, r9
 8006d80:	414b      	adcs	r3, r1
 8006d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d90:	4659      	mov	r1, fp
 8006d92:	00cb      	lsls	r3, r1, #3
 8006d94:	4651      	mov	r1, sl
 8006d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d9a:	4651      	mov	r1, sl
 8006d9c:	00ca      	lsls	r2, r1, #3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	4619      	mov	r1, r3
 8006da2:	4603      	mov	r3, r0
 8006da4:	4642      	mov	r2, r8
 8006da6:	189b      	adds	r3, r3, r2
 8006da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dac:	464b      	mov	r3, r9
 8006dae:	460a      	mov	r2, r1
 8006db0:	eb42 0303 	adc.w	r3, r2, r3
 8006db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006dc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006dcc:	460b      	mov	r3, r1
 8006dce:	18db      	adds	r3, r3, r3
 8006dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	eb42 0303 	adc.w	r3, r2, r3
 8006dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006de2:	f7f9 ff51 	bl	8000c88 <__aeabi_uldivmod>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4b0d      	ldr	r3, [pc, #52]	@ (8006e20 <UART_SetConfig+0x2d4>)
 8006dec:	fba3 1302 	umull	r1, r3, r3, r2
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	2164      	movs	r1, #100	@ 0x64
 8006df4:	fb01 f303 	mul.w	r3, r1, r3
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	3332      	adds	r3, #50	@ 0x32
 8006dfe:	4a08      	ldr	r2, [pc, #32]	@ (8006e20 <UART_SetConfig+0x2d4>)
 8006e00:	fba2 2303 	umull	r2, r3, r2, r3
 8006e04:	095b      	lsrs	r3, r3, #5
 8006e06:	f003 0207 	and.w	r2, r3, #7
 8006e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4422      	add	r2, r4
 8006e12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e14:	e106      	b.n	8007024 <UART_SetConfig+0x4d8>
 8006e16:	bf00      	nop
 8006e18:	40011000 	.word	0x40011000
 8006e1c:	40011400 	.word	0x40011400
 8006e20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e36:	4642      	mov	r2, r8
 8006e38:	464b      	mov	r3, r9
 8006e3a:	1891      	adds	r1, r2, r2
 8006e3c:	6239      	str	r1, [r7, #32]
 8006e3e:	415b      	adcs	r3, r3
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e46:	4641      	mov	r1, r8
 8006e48:	1854      	adds	r4, r2, r1
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	eb43 0501 	adc.w	r5, r3, r1
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	f04f 0300 	mov.w	r3, #0
 8006e58:	00eb      	lsls	r3, r5, #3
 8006e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e5e:	00e2      	lsls	r2, r4, #3
 8006e60:	4614      	mov	r4, r2
 8006e62:	461d      	mov	r5, r3
 8006e64:	4643      	mov	r3, r8
 8006e66:	18e3      	adds	r3, r4, r3
 8006e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e6c:	464b      	mov	r3, r9
 8006e6e:	eb45 0303 	adc.w	r3, r5, r3
 8006e72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	f04f 0300 	mov.w	r3, #0
 8006e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e92:	4629      	mov	r1, r5
 8006e94:	008b      	lsls	r3, r1, #2
 8006e96:	4621      	mov	r1, r4
 8006e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	008a      	lsls	r2, r1, #2
 8006ea0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ea4:	f7f9 fef0 	bl	8000c88 <__aeabi_uldivmod>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4b60      	ldr	r3, [pc, #384]	@ (8007030 <UART_SetConfig+0x4e4>)
 8006eae:	fba3 2302 	umull	r2, r3, r3, r2
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	011c      	lsls	r4, r3, #4
 8006eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ec0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ec4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ec8:	4642      	mov	r2, r8
 8006eca:	464b      	mov	r3, r9
 8006ecc:	1891      	adds	r1, r2, r2
 8006ece:	61b9      	str	r1, [r7, #24]
 8006ed0:	415b      	adcs	r3, r3
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ed8:	4641      	mov	r1, r8
 8006eda:	1851      	adds	r1, r2, r1
 8006edc:	6139      	str	r1, [r7, #16]
 8006ede:	4649      	mov	r1, r9
 8006ee0:	414b      	adcs	r3, r1
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ef0:	4659      	mov	r1, fp
 8006ef2:	00cb      	lsls	r3, r1, #3
 8006ef4:	4651      	mov	r1, sl
 8006ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006efa:	4651      	mov	r1, sl
 8006efc:	00ca      	lsls	r2, r1, #3
 8006efe:	4610      	mov	r0, r2
 8006f00:	4619      	mov	r1, r3
 8006f02:	4603      	mov	r3, r0
 8006f04:	4642      	mov	r2, r8
 8006f06:	189b      	adds	r3, r3, r2
 8006f08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f0c:	464b      	mov	r3, r9
 8006f0e:	460a      	mov	r2, r1
 8006f10:	eb42 0303 	adc.w	r3, r2, r3
 8006f14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f30:	4649      	mov	r1, r9
 8006f32:	008b      	lsls	r3, r1, #2
 8006f34:	4641      	mov	r1, r8
 8006f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f3a:	4641      	mov	r1, r8
 8006f3c:	008a      	lsls	r2, r1, #2
 8006f3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f42:	f7f9 fea1 	bl	8000c88 <__aeabi_uldivmod>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	4b38      	ldr	r3, [pc, #224]	@ (8007030 <UART_SetConfig+0x4e4>)
 8006f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	2264      	movs	r2, #100	@ 0x64
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
 8006f5a:	1acb      	subs	r3, r1, r3
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	3332      	adds	r3, #50	@ 0x32
 8006f60:	4a33      	ldr	r2, [pc, #204]	@ (8007030 <UART_SetConfig+0x4e4>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f6c:	441c      	add	r4, r3
 8006f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f72:	2200      	movs	r2, #0
 8006f74:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f76:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	464b      	mov	r3, r9
 8006f80:	1891      	adds	r1, r2, r2
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	415b      	adcs	r3, r3
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f8c:	4641      	mov	r1, r8
 8006f8e:	1851      	adds	r1, r2, r1
 8006f90:	6039      	str	r1, [r7, #0]
 8006f92:	4649      	mov	r1, r9
 8006f94:	414b      	adcs	r3, r1
 8006f96:	607b      	str	r3, [r7, #4]
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	f04f 0300 	mov.w	r3, #0
 8006fa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fa4:	4659      	mov	r1, fp
 8006fa6:	00cb      	lsls	r3, r1, #3
 8006fa8:	4651      	mov	r1, sl
 8006faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fae:	4651      	mov	r1, sl
 8006fb0:	00ca      	lsls	r2, r1, #3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	4642      	mov	r2, r8
 8006fba:	189b      	adds	r3, r3, r2
 8006fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	460a      	mov	r2, r1
 8006fc2:	eb42 0303 	adc.w	r3, r2, r3
 8006fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	008b      	lsls	r3, r1, #2
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fea:	4641      	mov	r1, r8
 8006fec:	008a      	lsls	r2, r1, #2
 8006fee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006ff2:	f7f9 fe49 	bl	8000c88 <__aeabi_uldivmod>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8007030 <UART_SetConfig+0x4e4>)
 8006ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	2164      	movs	r1, #100	@ 0x64
 8007004:	fb01 f303 	mul.w	r3, r1, r3
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	011b      	lsls	r3, r3, #4
 800700c:	3332      	adds	r3, #50	@ 0x32
 800700e:	4a08      	ldr	r2, [pc, #32]	@ (8007030 <UART_SetConfig+0x4e4>)
 8007010:	fba2 2303 	umull	r2, r3, r2, r3
 8007014:	095b      	lsrs	r3, r3, #5
 8007016:	f003 020f 	and.w	r2, r3, #15
 800701a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4422      	add	r2, r4
 8007022:	609a      	str	r2, [r3, #8]
}
 8007024:	bf00      	nop
 8007026:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800702a:	46bd      	mov	sp, r7
 800702c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007030:	51eb851f 	.word	0x51eb851f

08007034 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8007038:	4b10      	ldr	r3, [pc, #64]	@ (800707c <MX_PDM2PCM_Init+0x48>)
 800703a:	2201      	movs	r2, #1
 800703c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800703e:	4b0f      	ldr	r3, [pc, #60]	@ (800707c <MX_PDM2PCM_Init+0x48>)
 8007040:	2201      	movs	r2, #1
 8007042:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8007044:	4b0d      	ldr	r3, [pc, #52]	@ (800707c <MX_PDM2PCM_Init+0x48>)
 8007046:	4a0e      	ldr	r2, [pc, #56]	@ (8007080 <MX_PDM2PCM_Init+0x4c>)
 8007048:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800704a:	4b0c      	ldr	r3, [pc, #48]	@ (800707c <MX_PDM2PCM_Init+0x48>)
 800704c:	2201      	movs	r2, #1
 800704e:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8007050:	4b0a      	ldr	r3, [pc, #40]	@ (800707c <MX_PDM2PCM_Init+0x48>)
 8007052:	2201      	movs	r2, #1
 8007054:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8007056:	4809      	ldr	r0, [pc, #36]	@ (800707c <MX_PDM2PCM_Init+0x48>)
 8007058:	f001 fd66 	bl	8008b28 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800705c:	4b09      	ldr	r3, [pc, #36]	@ (8007084 <MX_PDM2PCM_Init+0x50>)
 800705e:	2202      	movs	r2, #2
 8007060:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8007062:	4b08      	ldr	r3, [pc, #32]	@ (8007084 <MX_PDM2PCM_Init+0x50>)
 8007064:	2210      	movs	r2, #16
 8007066:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8007068:	4b06      	ldr	r3, [pc, #24]	@ (8007084 <MX_PDM2PCM_Init+0x50>)
 800706a:	2200      	movs	r2, #0
 800706c:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800706e:	4905      	ldr	r1, [pc, #20]	@ (8007084 <MX_PDM2PCM_Init+0x50>)
 8007070:	4802      	ldr	r0, [pc, #8]	@ (800707c <MX_PDM2PCM_Init+0x48>)
 8007072:	f001 fde3 	bl	8008c3c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8007076:	bf00      	nop
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20002da8 	.word	0x20002da8
 8007080:	7d70a3d6 	.word	0x7d70a3d6
 8007084:	20002df4 	.word	0x20002df4

08007088 <D16_GENERIC>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	b089      	sub	sp, #36	@ 0x24
 800708e:	68d4      	ldr	r4, [r2, #12]
 8007090:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8007092:	6993      	ldr	r3, [r2, #24]
 8007094:	9407      	str	r4, [sp, #28]
 8007096:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007098:	9306      	str	r3, [sp, #24]
 800709a:	9402      	str	r4, [sp, #8]
 800709c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80070a0:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80070a4:	69d3      	ldr	r3, [r2, #28]
 80070a6:	6896      	ldr	r6, [r2, #8]
 80070a8:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80070aa:	9103      	str	r1, [sp, #12]
 80070ac:	2d00      	cmp	r5, #0
 80070ae:	d066      	beq.n	800717e <D16_GENERIC+0xf6>
 80070b0:	f004 0510 	and.w	r5, r4, #16
 80070b4:	f004 0420 	and.w	r4, r4, #32
 80070b8:	9504      	str	r5, [sp, #16]
 80070ba:	4938      	ldr	r1, [pc, #224]	@ (800719c <D16_GENERIC+0x114>)
 80070bc:	9405      	str	r4, [sp, #20]
 80070be:	f04f 0e00 	mov.w	lr, #0
 80070c2:	4635      	mov	r5, r6
 80070c4:	e04f      	b.n	8007166 <D16_GENERIC+0xde>
 80070c6:	5d87      	ldrb	r7, [r0, r6]
 80070c8:	7804      	ldrb	r4, [r0, #0]
 80070ca:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80070ce:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80070d2:	b2e6      	uxtb	r6, r4
 80070d4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80070d8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80070dc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80070e0:	4433      	add	r3, r6
 80070e2:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80070e6:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80070ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ee:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80070f2:	0aa3      	lsrs	r3, r4, #10
 80070f4:	4c2a      	ldr	r4, [pc, #168]	@ (80071a0 <D16_GENERIC+0x118>)
 80070f6:	fb26 5404 	smlad	r4, r6, r4, r5
 80070fa:	4d2a      	ldr	r5, [pc, #168]	@ (80071a4 <D16_GENERIC+0x11c>)
 80070fc:	fb26 f505 	smuad	r5, r6, r5
 8007100:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8007104:	eb04 080a 	add.w	r8, r4, sl
 8007108:	eba8 080b 	sub.w	r8, r8, fp
 800710c:	4646      	mov	r6, r8
 800710e:	17f7      	asrs	r7, r6, #31
 8007110:	e9cd 6700 	strd	r6, r7, [sp]
 8007114:	9e04      	ldr	r6, [sp, #16]
 8007116:	f10e 0c01 	add.w	ip, lr, #1
 800711a:	b16e      	cbz	r6, 8007138 <D16_GENERIC+0xb0>
 800711c:	6a16      	ldr	r6, [r2, #32]
 800711e:	9f01      	ldr	r7, [sp, #4]
 8007120:	fba8 8906 	umull	r8, r9, r8, r6
 8007124:	fb06 9907 	mla	r9, r6, r7, r9
 8007128:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 800712c:	f149 0900 	adc.w	r9, r9, #0
 8007130:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007134:	46a3      	mov	fp, r4
 8007136:	4654      	mov	r4, sl
 8007138:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 800713a:	9f02      	ldr	r7, [sp, #8]
 800713c:	0424      	lsls	r4, r4, #16
 800713e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007142:	f04f 0900 	mov.w	r9, #0
 8007146:	fb0e fe06 	mul.w	lr, lr, r6
 800714a:	fbc7 8904 	smlal	r8, r9, r7, r4
 800714e:	9e03      	ldr	r6, [sp, #12]
 8007150:	464f      	mov	r7, r9
 8007152:	10bc      	asrs	r4, r7, #2
 8007154:	f304 040f 	ssat	r4, #16, r4
 8007158:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800715c:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 800715e:	fa1f fe8c 	uxth.w	lr, ip
 8007162:	4574      	cmp	r4, lr
 8007164:	d90a      	bls.n	800717c <D16_GENERIC+0xf4>
 8007166:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8007168:	2c01      	cmp	r4, #1
 800716a:	b2e6      	uxtb	r6, r4
 800716c:	d1ab      	bne.n	80070c6 <D16_GENERIC+0x3e>
 800716e:	9e05      	ldr	r6, [sp, #20]
 8007170:	f850 4b02 	ldr.w	r4, [r0], #2
 8007174:	2e00      	cmp	r6, #0
 8007176:	d0ac      	beq.n	80070d2 <D16_GENERIC+0x4a>
 8007178:	ba64      	rev16	r4, r4
 800717a:	e7aa      	b.n	80070d2 <D16_GENERIC+0x4a>
 800717c:	462e      	mov	r6, r5
 800717e:	9907      	ldr	r1, [sp, #28]
 8007180:	61d3      	str	r3, [r2, #28]
 8007182:	9b06      	ldr	r3, [sp, #24]
 8007184:	6096      	str	r6, [r2, #8]
 8007186:	2000      	movs	r0, #0
 8007188:	60d1      	str	r1, [r2, #12]
 800718a:	f8c2 a010 	str.w	sl, [r2, #16]
 800718e:	f8c2 b014 	str.w	fp, [r2, #20]
 8007192:	6193      	str	r3, [r2, #24]
 8007194:	b009      	add	sp, #36	@ 0x24
 8007196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719a:	bf00      	nop
 800719c:	20000000 	.word	0x20000000
 80071a0:	00030001 	.word	0x00030001
 80071a4:	00010003 	.word	0x00010003

080071a8 <D24_GENERIC>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 80071ae:	6993      	ldr	r3, [r2, #24]
 80071b0:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80071b2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80071b6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80071ba:	6894      	ldr	r4, [r2, #8]
 80071bc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80071c0:	b089      	sub	sp, #36	@ 0x24
 80071c2:	9307      	str	r3, [sp, #28]
 80071c4:	9503      	str	r5, [sp, #12]
 80071c6:	69d3      	ldr	r3, [r2, #28]
 80071c8:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80071ca:	9104      	str	r1, [sp, #16]
 80071cc:	2e00      	cmp	r6, #0
 80071ce:	f000 8096 	beq.w	80072fe <D24_GENERIC+0x156>
 80071d2:	f005 0610 	and.w	r6, r5, #16
 80071d6:	f005 0520 	and.w	r5, r5, #32
 80071da:	4954      	ldr	r1, [pc, #336]	@ (800732c <D24_GENERIC+0x184>)
 80071dc:	9605      	str	r6, [sp, #20]
 80071de:	9506      	str	r5, [sp, #24]
 80071e0:	f04f 0e00 	mov.w	lr, #0
 80071e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80071e8:	e06a      	b.n	80072c0 <D24_GENERIC+0x118>
 80071ea:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80071ee:	f810 8007 	ldrb.w	r8, [r0, r7]
 80071f2:	f890 c000 	ldrb.w	ip, [r0]
 80071f6:	042d      	lsls	r5, r5, #16
 80071f8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80071fc:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8007200:	44ac      	add	ip, r5
 8007202:	4438      	add	r0, r7
 8007204:	fa5f f68c 	uxtb.w	r6, ip
 8007208:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800720c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007210:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8007214:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007218:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800721c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8007220:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8007224:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8007228:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800722c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007230:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8007234:	4d3e      	ldr	r5, [pc, #248]	@ (8007330 <D24_GENERIC+0x188>)
 8007236:	fb26 b705 	smlad	r7, r6, r5, fp
 800723a:	4d3e      	ldr	r5, [pc, #248]	@ (8007334 <D24_GENERIC+0x18c>)
 800723c:	fb26 4b05 	smlad	fp, r6, r5, r4
 8007240:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8007244:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8007248:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800724c:	2401      	movs	r4, #1
 800724e:	fb26 f604 	smuad	r6, r6, r4
 8007252:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8007256:	9f02      	ldr	r7, [sp, #8]
 8007258:	eb0e 0c04 	add.w	ip, lr, r4
 800725c:	eb08 0406 	add.w	r4, r8, r6
 8007260:	eb05 060a 	add.w	r6, r5, sl
 8007264:	1bf6      	subs	r6, r6, r7
 8007266:	4637      	mov	r7, r6
 8007268:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800726c:	e9cd 7800 	strd	r7, r8, [sp]
 8007270:	9f05      	ldr	r7, [sp, #20]
 8007272:	b177      	cbz	r7, 8007292 <D24_GENERIC+0xea>
 8007274:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8007278:	9502      	str	r5, [sp, #8]
 800727a:	fba6 9a08 	umull	r9, sl, r6, r8
 800727e:	9e01      	ldr	r6, [sp, #4]
 8007280:	fb08 aa06 	mla	sl, r8, r6, sl
 8007284:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8007288:	f14a 0700 	adc.w	r7, sl, #0
 800728c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8007290:	4655      	mov	r5, sl
 8007292:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8007294:	9f03      	ldr	r7, [sp, #12]
 8007296:	03ad      	lsls	r5, r5, #14
 8007298:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 800729c:	f04f 0900 	mov.w	r9, #0
 80072a0:	fb0e fe06 	mul.w	lr, lr, r6
 80072a4:	fbc7 8905 	smlal	r8, r9, r7, r5
 80072a8:	9e04      	ldr	r6, [sp, #16]
 80072aa:	464f      	mov	r7, r9
 80072ac:	10bd      	asrs	r5, r7, #2
 80072ae:	f305 050f 	ssat	r5, #16, r5
 80072b2:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 80072b6:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80072b8:	fa1f fe8c 	uxth.w	lr, ip
 80072bc:	4575      	cmp	r5, lr
 80072be:	d91c      	bls.n	80072fa <D24_GENERIC+0x152>
 80072c0:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80072c2:	b2ef      	uxtb	r7, r5
 80072c4:	2d01      	cmp	r5, #1
 80072c6:	b23e      	sxth	r6, r7
 80072c8:	d18f      	bne.n	80071ea <D24_GENERIC+0x42>
 80072ca:	9d06      	ldr	r5, [sp, #24]
 80072cc:	b15d      	cbz	r5, 80072e6 <D24_GENERIC+0x13e>
 80072ce:	f01e 0f01 	tst.w	lr, #1
 80072d2:	d122      	bne.n	800731a <D24_GENERIC+0x172>
 80072d4:	7805      	ldrb	r5, [r0, #0]
 80072d6:	78c7      	ldrb	r7, [r0, #3]
 80072d8:	7846      	ldrb	r6, [r0, #1]
 80072da:	022d      	lsls	r5, r5, #8
 80072dc:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80072e0:	44b4      	add	ip, r6
 80072e2:	3002      	adds	r0, #2
 80072e4:	e78e      	b.n	8007204 <D24_GENERIC+0x5c>
 80072e6:	7846      	ldrb	r6, [r0, #1]
 80072e8:	f890 c002 	ldrb.w	ip, [r0, #2]
 80072ec:	f810 5b03 	ldrb.w	r5, [r0], #3
 80072f0:	0236      	lsls	r6, r6, #8
 80072f2:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 80072f6:	44ac      	add	ip, r5
 80072f8:	e784      	b.n	8007204 <D24_GENERIC+0x5c>
 80072fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80072fe:	61d3      	str	r3, [r2, #28]
 8007300:	9b07      	ldr	r3, [sp, #28]
 8007302:	6094      	str	r4, [r2, #8]
 8007304:	2000      	movs	r0, #0
 8007306:	f8c2 b00c 	str.w	fp, [r2, #12]
 800730a:	f8c2 a010 	str.w	sl, [r2, #16]
 800730e:	f8c2 9014 	str.w	r9, [r2, #20]
 8007312:	6193      	str	r3, [r2, #24]
 8007314:	b009      	add	sp, #36	@ 0x24
 8007316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731a:	78c5      	ldrb	r5, [r0, #3]
 800731c:	7887      	ldrb	r7, [r0, #2]
 800731e:	f810 6b04 	ldrb.w	r6, [r0], #4
 8007322:	022d      	lsls	r5, r5, #8
 8007324:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8007328:	44b4      	add	ip, r6
 800732a:	e76b      	b.n	8007204 <D24_GENERIC+0x5c>
 800732c:	20000000 	.word	0x20000000
 8007330:	00030001 	.word	0x00030001
 8007334:	00060007 	.word	0x00060007

08007338 <D32_GENERIC>:
 8007338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800733e:	6993      	ldr	r3, [r2, #24]
 8007340:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007342:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007346:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800734a:	69d6      	ldr	r6, [r2, #28]
 800734c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8007350:	b089      	sub	sp, #36	@ 0x24
 8007352:	9307      	str	r3, [sp, #28]
 8007354:	9403      	str	r4, [sp, #12]
 8007356:	6893      	ldr	r3, [r2, #8]
 8007358:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 800735a:	9104      	str	r1, [sp, #16]
 800735c:	2d00      	cmp	r5, #0
 800735e:	f000 809f 	beq.w	80074a0 <D32_GENERIC+0x168>
 8007362:	f004 0510 	and.w	r5, r4, #16
 8007366:	f004 0420 	and.w	r4, r4, #32
 800736a:	9505      	str	r5, [sp, #20]
 800736c:	4953      	ldr	r1, [pc, #332]	@ (80074bc <D32_GENERIC+0x184>)
 800736e:	9406      	str	r4, [sp, #24]
 8007370:	f04f 0c00 	mov.w	ip, #0
 8007374:	f8cd 9008 	str.w	r9, [sp, #8]
 8007378:	461d      	mov	r5, r3
 800737a:	4617      	mov	r7, r2
 800737c:	e077      	b.n	800746e <D32_GENERIC+0x136>
 800737e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8007382:	f810 800e 	ldrb.w	r8, [r0, lr]
 8007386:	f810 e002 	ldrb.w	lr, [r0, r2]
 800738a:	7800      	ldrb	r0, [r0, #0]
 800738c:	041b      	lsls	r3, r3, #16
 800738e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8007392:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8007396:	4403      	add	r3, r0
 8007398:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800739c:	b2dc      	uxtb	r4, r3
 800739e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80073a2:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80073a6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80073aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80073ae:	0e1b      	lsrs	r3, r3, #24
 80073b0:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 80073b4:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80073b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80073bc:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80073c0:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 80073c4:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 80073c8:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80073cc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80073d0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80073d4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80073d8:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 80073dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073e0:	4b37      	ldr	r3, [pc, #220]	@ (80074c0 <D32_GENERIC+0x188>)
 80073e2:	fb22 b403 	smlad	r4, r2, r3, fp
 80073e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80073ea:	fb2e 4803 	smlad	r8, lr, r3, r4
 80073ee:	4b35      	ldr	r3, [pc, #212]	@ (80074c4 <D32_GENERIC+0x18c>)
 80073f0:	fb22 5503 	smlad	r5, r2, r3, r5
 80073f4:	4b34      	ldr	r3, [pc, #208]	@ (80074c8 <D32_GENERIC+0x190>)
 80073f6:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80073fa:	2301      	movs	r3, #1
 80073fc:	fb22 f203 	smuad	r2, r2, r3
 8007400:	4b32      	ldr	r3, [pc, #200]	@ (80074cc <D32_GENERIC+0x194>)
 8007402:	fb2e 2503 	smlad	r5, lr, r3, r2
 8007406:	9b02      	ldr	r3, [sp, #8]
 8007408:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 800740c:	eb04 080a 	add.w	r8, r4, sl
 8007410:	eba8 0803 	sub.w	r8, r8, r3
 8007414:	4642      	mov	r2, r8
 8007416:	17d3      	asrs	r3, r2, #31
 8007418:	e9cd 2300 	strd	r2, r3, [sp]
 800741c:	9b05      	ldr	r3, [sp, #20]
 800741e:	f10c 0e01 	add.w	lr, ip, #1
 8007422:	b16b      	cbz	r3, 8007440 <D32_GENERIC+0x108>
 8007424:	6a3a      	ldr	r2, [r7, #32]
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	9402      	str	r4, [sp, #8]
 800742a:	fba8 8902 	umull	r8, r9, r8, r2
 800742e:	fb02 9903 	mla	r9, r2, r3, r9
 8007432:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8007436:	f149 0900 	adc.w	r9, r9, #0
 800743a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800743e:	4654      	mov	r4, sl
 8007440:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007442:	9a04      	ldr	r2, [sp, #16]
 8007444:	fb0c fc03 	mul.w	ip, ip, r3
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	0364      	lsls	r4, r4, #13
 800744c:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007450:	f04f 0900 	mov.w	r9, #0
 8007454:	fbc3 8904 	smlal	r8, r9, r3, r4
 8007458:	464b      	mov	r3, r9
 800745a:	109b      	asrs	r3, r3, #2
 800745c:	f303 030f 	ssat	r3, #16, r3
 8007460:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8007464:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007466:	fa1f fc8e 	uxth.w	ip, lr
 800746a:	4563      	cmp	r3, ip
 800746c:	d914      	bls.n	8007498 <D32_GENERIC+0x160>
 800746e:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 8007470:	b2e2      	uxtb	r2, r4
 8007472:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8007476:	eb00 080e 	add.w	r8, r0, lr
 800747a:	4253      	negs	r3, r2
 800747c:	2c01      	cmp	r4, #1
 800747e:	eb08 0403 	add.w	r4, r8, r3
 8007482:	f47f af7c 	bne.w	800737e <D32_GENERIC+0x46>
 8007486:	1d02      	adds	r2, r0, #4
 8007488:	6803      	ldr	r3, [r0, #0]
 800748a:	9806      	ldr	r0, [sp, #24]
 800748c:	b110      	cbz	r0, 8007494 <D32_GENERIC+0x15c>
 800748e:	ba5b      	rev16	r3, r3
 8007490:	4610      	mov	r0, r2
 8007492:	e783      	b.n	800739c <D32_GENERIC+0x64>
 8007494:	4610      	mov	r0, r2
 8007496:	e781      	b.n	800739c <D32_GENERIC+0x64>
 8007498:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800749c:	462b      	mov	r3, r5
 800749e:	463a      	mov	r2, r7
 80074a0:	6093      	str	r3, [r2, #8]
 80074a2:	9b07      	ldr	r3, [sp, #28]
 80074a4:	f8c2 b00c 	str.w	fp, [r2, #12]
 80074a8:	2000      	movs	r0, #0
 80074aa:	61d6      	str	r6, [r2, #28]
 80074ac:	f8c2 a010 	str.w	sl, [r2, #16]
 80074b0:	f8c2 9014 	str.w	r9, [r2, #20]
 80074b4:	6193      	str	r3, [r2, #24]
 80074b6:	b009      	add	sp, #36	@ 0x24
 80074b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074bc:	20000000 	.word	0x20000000
 80074c0:	00060003 	.word	0x00060003
 80074c4:	000a000c 	.word	0x000a000c
 80074c8:	000c000a 	.word	0x000c000a
 80074cc:	00030006 	.word	0x00030006

080074d0 <D48_GENERIC>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	b089      	sub	sp, #36	@ 0x24
 80074d6:	6953      	ldr	r3, [r2, #20]
 80074d8:	68d4      	ldr	r4, [r2, #12]
 80074da:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80074dc:	9302      	str	r3, [sp, #8]
 80074de:	9400      	str	r4, [sp, #0]
 80074e0:	6993      	ldr	r3, [r2, #24]
 80074e2:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80074e4:	9307      	str	r3, [sp, #28]
 80074e6:	9403      	str	r4, [sp, #12]
 80074e8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80074ec:	69d6      	ldr	r6, [r2, #28]
 80074ee:	6893      	ldr	r3, [r2, #8]
 80074f0:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80074f2:	9104      	str	r1, [sp, #16]
 80074f4:	2d00      	cmp	r5, #0
 80074f6:	f000 80c5 	beq.w	8007684 <D48_GENERIC+0x1b4>
 80074fa:	f004 0510 	and.w	r5, r4, #16
 80074fe:	f004 0420 	and.w	r4, r4, #32
 8007502:	4967      	ldr	r1, [pc, #412]	@ (80076a0 <D48_GENERIC+0x1d0>)
 8007504:	9505      	str	r5, [sp, #20]
 8007506:	9406      	str	r4, [sp, #24]
 8007508:	f04f 0c00 	mov.w	ip, #0
 800750c:	4657      	mov	r7, sl
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	e09c      	b.n	800764c <D48_GENERIC+0x17c>
 8007512:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8007516:	f810 b009 	ldrb.w	fp, [r0, r9]
 800751a:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800751e:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8007522:	7800      	ldrb	r0, [r0, #0]
 8007524:	0424      	lsls	r4, r4, #16
 8007526:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800752a:	f818 4005 	ldrb.w	r4, [r8, r5]
 800752e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8007532:	44a8      	add	r8, r5
 8007534:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8007538:	eb0b 0500 	add.w	r5, fp, r0
 800753c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8007540:	fa5f f885 	uxtb.w	r8, r5
 8007544:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8007548:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800754c:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8007550:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8007554:	0e2d      	lsrs	r5, r5, #24
 8007556:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800755a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800755e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8007562:	b2e6      	uxtb	r6, r4
 8007564:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8007568:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800756c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8007570:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007574:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8007578:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800757c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8007580:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8007584:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007588:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800758c:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8007590:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007594:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007598:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800759c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 80075a0:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 80075a4:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 80075a8:	4c3e      	ldr	r4, [pc, #248]	@ (80076a4 <D48_GENERIC+0x1d4>)
 80075aa:	9d00      	ldr	r5, [sp, #0]
 80075ac:	fb2a 5404 	smlad	r4, sl, r4, r5
 80075b0:	4d3d      	ldr	r5, [pc, #244]	@ (80076a8 <D48_GENERIC+0x1d8>)
 80075b2:	fb28 4405 	smlad	r4, r8, r5, r4
 80075b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80075ba:	fb2e 4b03 	smlad	fp, lr, r3, r4
 80075be:	4c3b      	ldr	r4, [pc, #236]	@ (80076ac <D48_GENERIC+0x1dc>)
 80075c0:	9b01      	ldr	r3, [sp, #4]
 80075c2:	fb2a 3304 	smlad	r3, sl, r4, r3
 80075c6:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 80075ca:	fb28 3304 	smlad	r3, r8, r4, r3
 80075ce:	4c38      	ldr	r4, [pc, #224]	@ (80076b0 <D48_GENERIC+0x1e0>)
 80075d0:	fb2e 3304 	smlad	r3, lr, r4, r3
 80075d4:	2501      	movs	r5, #1
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	fb2a fa05 	smuad	sl, sl, r5
 80075dc:	4b35      	ldr	r3, [pc, #212]	@ (80076b4 <D48_GENERIC+0x1e4>)
 80075de:	fb28 a803 	smlad	r8, r8, r3, sl
 80075e2:	4b35      	ldr	r3, [pc, #212]	@ (80076b8 <D48_GENERIC+0x1e8>)
 80075e4:	fb2e 8303 	smlad	r3, lr, r3, r8
 80075e8:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	9b02      	ldr	r3, [sp, #8]
 80075f0:	eb04 0807 	add.w	r8, r4, r7
 80075f4:	eba8 0803 	sub.w	r8, r8, r3
 80075f8:	9b05      	ldr	r3, [sp, #20]
 80075fa:	4465      	add	r5, ip
 80075fc:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8007600:	b163      	cbz	r3, 800761c <D48_GENERIC+0x14c>
 8007602:	6a17      	ldr	r7, [r2, #32]
 8007604:	9402      	str	r4, [sp, #8]
 8007606:	fba8 8907 	umull	r8, r9, r8, r7
 800760a:	fb07 990b 	mla	r9, r7, fp, r9
 800760e:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8007612:	f149 0900 	adc.w	r9, r9, #0
 8007616:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800761a:	463c      	mov	r4, r7
 800761c:	f8b2 e028 	ldrh.w	lr, [r2, #40]	@ 0x28
 8007620:	9b03      	ldr	r3, [sp, #12]
 8007622:	02e4      	lsls	r4, r4, #11
 8007624:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007628:	f04f 0900 	mov.w	r9, #0
 800762c:	fb0c fc0e 	mul.w	ip, ip, lr
 8007630:	fbc3 8904 	smlal	r8, r9, r3, r4
 8007634:	9b04      	ldr	r3, [sp, #16]
 8007636:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800763a:	f304 040f 	ssat	r4, #16, r4
 800763e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8007642:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8007644:	fa1f fc85 	uxth.w	ip, r5
 8007648:	4564      	cmp	r4, ip
 800764a:	d919      	bls.n	8007680 <D48_GENERIC+0x1b0>
 800764c:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 800764e:	fa5f fe84 	uxtb.w	lr, r4
 8007652:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8007656:	f1ce 0500 	rsb	r5, lr, #0
 800765a:	eb00 0b09 	add.w	fp, r0, r9
 800765e:	eb0b 0a05 	add.w	sl, fp, r5
 8007662:	2c01      	cmp	r4, #1
 8007664:	eb0a 0809 	add.w	r8, sl, r9
 8007668:	f47f af53 	bne.w	8007512 <D48_GENERIC+0x42>
 800766c:	9b06      	ldr	r3, [sp, #24]
 800766e:	6805      	ldr	r5, [r0, #0]
 8007670:	6844      	ldr	r4, [r0, #4]
 8007672:	3006      	adds	r0, #6
 8007674:	2b00      	cmp	r3, #0
 8007676:	f43f af63 	beq.w	8007540 <D48_GENERIC+0x70>
 800767a:	ba6d      	rev16	r5, r5
 800767c:	ba64      	rev16	r4, r4
 800767e:	e75f      	b.n	8007540 <D48_GENERIC+0x70>
 8007680:	9b01      	ldr	r3, [sp, #4]
 8007682:	46ba      	mov	sl, r7
 8007684:	6093      	str	r3, [r2, #8]
 8007686:	9b00      	ldr	r3, [sp, #0]
 8007688:	60d3      	str	r3, [r2, #12]
 800768a:	9b02      	ldr	r3, [sp, #8]
 800768c:	6153      	str	r3, [r2, #20]
 800768e:	9b07      	ldr	r3, [sp, #28]
 8007690:	61d6      	str	r6, [r2, #28]
 8007692:	2000      	movs	r0, #0
 8007694:	f8c2 a010 	str.w	sl, [r2, #16]
 8007698:	6193      	str	r3, [r2, #24]
 800769a:	b009      	add	sp, #36	@ 0x24
 800769c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a0:	20000000 	.word	0x20000000
 80076a4:	000f000a 	.word	0x000f000a
 80076a8:	00060003 	.word	0x00060003
 80076ac:	00150019 	.word	0x00150019
 80076b0:	00190015 	.word	0x00190015
 80076b4:	00030006 	.word	0x00030006
 80076b8:	000a000f 	.word	0x000a000f

080076bc <D64_GENERIC>:
 80076bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	b089      	sub	sp, #36	@ 0x24
 80076c2:	6913      	ldr	r3, [r2, #16]
 80076c4:	6895      	ldr	r5, [r2, #8]
 80076c6:	9303      	str	r3, [sp, #12]
 80076c8:	9501      	str	r5, [sp, #4]
 80076ca:	6953      	ldr	r3, [r2, #20]
 80076cc:	68d5      	ldr	r5, [r2, #12]
 80076ce:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	9500      	str	r5, [sp, #0]
 80076d4:	6993      	ldr	r3, [r2, #24]
 80076d6:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80076d8:	9307      	str	r3, [sp, #28]
 80076da:	9505      	str	r5, [sp, #20]
 80076dc:	69d3      	ldr	r3, [r2, #28]
 80076de:	9106      	str	r1, [sp, #24]
 80076e0:	2c00      	cmp	r4, #0
 80076e2:	f000 80d9 	beq.w	8007898 <D64_GENERIC+0x1dc>
 80076e6:	6a11      	ldr	r1, [r2, #32]
 80076e8:	9102      	str	r1, [sp, #8]
 80076ea:	f8df e1ec 	ldr.w	lr, [pc, #492]	@ 80078d8 <D64_GENERIC+0x21c>
 80076ee:	f04f 0c00 	mov.w	ip, #0
 80076f2:	4681      	mov	r9, r0
 80076f4:	e0c1      	b.n	800787a <D64_GENERIC+0x1be>
 80076f6:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80076fa:	4274      	negs	r4, r6
 80076fc:	eb09 0708 	add.w	r7, r9, r8
 8007700:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8007704:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8007708:	5d38      	ldrb	r0, [r7, r4]
 800770a:	5d29      	ldrb	r1, [r5, r4]
 800770c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8007710:	f819 a008 	ldrb.w	sl, [r9, r8]
 8007714:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8007718:	f899 7000 	ldrb.w	r7, [r9]
 800771c:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8007720:	4425      	add	r5, r4
 8007722:	0409      	lsls	r1, r1, #16
 8007724:	0400      	lsls	r0, r0, #16
 8007726:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800772a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800772e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8007732:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8007736:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800773a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800773e:	4459      	add	r1, fp
 8007740:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8007744:	4438      	add	r0, r7
 8007746:	b2c5      	uxtb	r5, r0
 8007748:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800774c:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8007750:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8007754:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8007758:	0e00      	lsrs	r0, r0, #24
 800775a:	eb03 0806 	add.w	r8, r3, r6
 800775e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8007762:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8007766:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800776a:	b2c8      	uxtb	r0, r1
 800776c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8007770:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8007774:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8007778:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800777c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8007780:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8007784:	0e09      	lsrs	r1, r1, #24
 8007786:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800778a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800778e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8007792:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8007796:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800779a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800779e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 80077a2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80077a6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80077aa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80077ae:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 80077b2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80077b6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80077ba:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80077be:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80077c2:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80077c6:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80077ca:	0a8b      	lsrs	r3, r1, #10
 80077cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80077d0:	4939      	ldr	r1, [pc, #228]	@ (80078b8 <D64_GENERIC+0x1fc>)
 80077d2:	9c00      	ldr	r4, [sp, #0]
 80077d4:	fb28 4101 	smlad	r1, r8, r1, r4
 80077d8:	4c38      	ldr	r4, [pc, #224]	@ (80078bc <D64_GENERIC+0x200>)
 80077da:	fb27 1104 	smlad	r1, r7, r4, r1
 80077de:	4c38      	ldr	r4, [pc, #224]	@ (80078c0 <D64_GENERIC+0x204>)
 80077e0:	fb20 1104 	smlad	r1, r0, r4, r1
 80077e4:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 80077e8:	fb2a 1106 	smlad	r1, sl, r6, r1
 80077ec:	4c35      	ldr	r4, [pc, #212]	@ (80078c4 <D64_GENERIC+0x208>)
 80077ee:	9d01      	ldr	r5, [sp, #4]
 80077f0:	fb28 5404 	smlad	r4, r8, r4, r5
 80077f4:	4d33      	ldr	r5, [pc, #204]	@ (80078c4 <D64_GENERIC+0x208>)
 80077f6:	fb2a 4415 	smladx	r4, sl, r5, r4
 80077fa:	4d33      	ldr	r5, [pc, #204]	@ (80078c8 <D64_GENERIC+0x20c>)
 80077fc:	fb27 4405 	smlad	r4, r7, r5, r4
 8007800:	fb20 4415 	smladx	r4, r0, r5, r4
 8007804:	2501      	movs	r5, #1
 8007806:	9400      	str	r4, [sp, #0]
 8007808:	fb28 f805 	smuad	r8, r8, r5
 800780c:	4c2f      	ldr	r4, [pc, #188]	@ (80078cc <D64_GENERIC+0x210>)
 800780e:	fb27 8704 	smlad	r7, r7, r4, r8
 8007812:	4c2f      	ldr	r4, [pc, #188]	@ (80078d0 <D64_GENERIC+0x214>)
 8007814:	fb20 7004 	smlad	r0, r0, r4, r7
 8007818:	4c2e      	ldr	r4, [pc, #184]	@ (80078d4 <D64_GENERIC+0x218>)
 800781a:	fb2a 0004 	smlad	r0, sl, r4, r0
 800781e:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 8007822:	9902      	ldr	r1, [sp, #8]
 8007824:	9001      	str	r0, [sp, #4]
 8007826:	b189      	cbz	r1, 800784c <D64_GENERIC+0x190>
 8007828:	9803      	ldr	r0, [sp, #12]
 800782a:	9c04      	ldr	r4, [sp, #16]
 800782c:	9604      	str	r6, [sp, #16]
 800782e:	4430      	add	r0, r6
 8007830:	1b00      	subs	r0, r0, r4
 8007832:	17c5      	asrs	r5, r0, #31
 8007834:	460f      	mov	r7, r1
 8007836:	fba0 0101 	umull	r0, r1, r0, r1
 800783a:	fb07 1105 	mla	r1, r7, r5, r1
 800783e:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 8007842:	f141 0100 	adc.w	r1, r1, #0
 8007846:	0049      	lsls	r1, r1, #1
 8007848:	9103      	str	r1, [sp, #12]
 800784a:	460e      	mov	r6, r1
 800784c:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 800784e:	9905      	ldr	r1, [sp, #20]
 8007850:	9806      	ldr	r0, [sp, #24]
 8007852:	02b6      	lsls	r6, r6, #10
 8007854:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8007858:	f04f 0800 	mov.w	r8, #0
 800785c:	fb0c f404 	mul.w	r4, ip, r4
 8007860:	fbc1 7806 	smlal	r7, r8, r1, r6
 8007864:	4641      	mov	r1, r8
 8007866:	1089      	asrs	r1, r1, #2
 8007868:	f301 010f 	ssat	r1, #16, r1
 800786c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8007870:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8007872:	f10c 0c01 	add.w	ip, ip, #1
 8007876:	4561      	cmp	r1, ip
 8007878:	dd0e      	ble.n	8007898 <D64_GENERIC+0x1dc>
 800787a:	8d56      	ldrh	r6, [r2, #42]	@ 0x2a
 800787c:	2e01      	cmp	r6, #1
 800787e:	f47f af3a 	bne.w	80076f6 <D64_GENERIC+0x3a>
 8007882:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8007884:	06b4      	lsls	r4, r6, #26
 8007886:	e899 0003 	ldmia.w	r9, {r0, r1}
 800788a:	f109 0908 	add.w	r9, r9, #8
 800788e:	f57f af5a 	bpl.w	8007746 <D64_GENERIC+0x8a>
 8007892:	ba40      	rev16	r0, r0
 8007894:	ba49      	rev16	r1, r1
 8007896:	e756      	b.n	8007746 <D64_GENERIC+0x8a>
 8007898:	61d3      	str	r3, [r2, #28]
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	9901      	ldr	r1, [sp, #4]
 800789e:	6113      	str	r3, [r2, #16]
 80078a0:	9b04      	ldr	r3, [sp, #16]
 80078a2:	6091      	str	r1, [r2, #8]
 80078a4:	6153      	str	r3, [r2, #20]
 80078a6:	9900      	ldr	r1, [sp, #0]
 80078a8:	9b07      	ldr	r3, [sp, #28]
 80078aa:	60d1      	str	r1, [r2, #12]
 80078ac:	2000      	movs	r0, #0
 80078ae:	6193      	str	r3, [r2, #24]
 80078b0:	b009      	add	sp, #36	@ 0x24
 80078b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b6:	bf00      	nop
 80078b8:	001c0015 	.word	0x001c0015
 80078bc:	000f000a 	.word	0x000f000a
 80078c0:	00060003 	.word	0x00060003
 80078c4:	0024002a 	.word	0x0024002a
 80078c8:	002e0030 	.word	0x002e0030
 80078cc:	00030006 	.word	0x00030006
 80078d0:	000a000f 	.word	0x000a000f
 80078d4:	0015001c 	.word	0x0015001c
 80078d8:	20000000 	.word	0x20000000

080078dc <D80_GENERIC>:
 80078dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	b08b      	sub	sp, #44	@ 0x2c
 80078e2:	6914      	ldr	r4, [r2, #16]
 80078e4:	9404      	str	r4, [sp, #16]
 80078e6:	6954      	ldr	r4, [r2, #20]
 80078e8:	9405      	str	r4, [sp, #20]
 80078ea:	6994      	ldr	r4, [r2, #24]
 80078ec:	9409      	str	r4, [sp, #36]	@ 0x24
 80078ee:	6894      	ldr	r4, [r2, #8]
 80078f0:	9402      	str	r4, [sp, #8]
 80078f2:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80078f4:	68d4      	ldr	r4, [r2, #12]
 80078f6:	9401      	str	r4, [sp, #4]
 80078f8:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80078fa:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80078fe:	9406      	str	r4, [sp, #24]
 8007900:	9107      	str	r1, [sp, #28]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 810f 	beq.w	8007b26 <D80_GENERIC+0x24a>
 8007908:	6a13      	ldr	r3, [r2, #32]
 800790a:	9308      	str	r3, [sp, #32]
 800790c:	2300      	movs	r3, #0
 800790e:	9200      	str	r2, [sp, #0]
 8007910:	f8df 9264 	ldr.w	r9, [pc, #612]	@ 8007b78 <D80_GENERIC+0x29c>
 8007914:	f8cd b00c 	str.w	fp, [sp, #12]
 8007918:	461a      	mov	r2, r3
 800791a:	e0ed      	b.n	8007af8 <D80_GENERIC+0x21c>
 800791c:	fa5f fc8c 	uxtb.w	ip, ip
 8007920:	fa0f f48c 	sxth.w	r4, ip
 8007924:	0066      	lsls	r6, r4, #1
 8007926:	eb06 0804 	add.w	r8, r6, r4
 800792a:	f1cc 0500 	rsb	r5, ip, #0
 800792e:	eb00 0108 	add.w	r1, r0, r8
 8007932:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007936:	194b      	adds	r3, r1, r5
 8007938:	5d49      	ldrb	r1, [r1, r5]
 800793a:	f810 a008 	ldrb.w	sl, [r0, r8]
 800793e:	f813 b004 	ldrb.w	fp, [r3, r4]
 8007942:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8007946:	f890 8000 	ldrb.w	r8, [r0]
 800794a:	eb03 0e04 	add.w	lr, r3, r4
 800794e:	eb0e 0705 	add.w	r7, lr, r5
 8007952:	0409      	lsls	r1, r1, #16
 8007954:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8007958:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800795c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8007960:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8007964:	eb0a 0004 	add.w	r0, sl, r4
 8007968:	041b      	lsls	r3, r3, #16
 800796a:	f81a a004 	ldrb.w	sl, [sl, r4]
 800796e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8007972:	5d44      	ldrb	r4, [r0, r5]
 8007974:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8007978:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800797c:	4428      	add	r0, r5
 800797e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8007982:	4441      	add	r1, r8
 8007984:	4430      	add	r0, r6
 8007986:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800798a:	441f      	add	r7, r3
 800798c:	b2cd      	uxtb	r5, r1
 800798e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007992:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8007996:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800799a:	9b03      	ldr	r3, [sp, #12]
 800799c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80079a0:	0e09      	lsrs	r1, r1, #24
 80079a2:	4433      	add	r3, r6
 80079a4:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 80079a8:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 80079ac:	b2fd      	uxtb	r5, r7
 80079ae:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 80079b2:	469b      	mov	fp, r3
 80079b4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80079b8:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 80079bc:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 80079c0:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80079c4:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80079c8:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80079cc:	0e3b      	lsrs	r3, r7, #24
 80079ce:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80079d2:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 80079d6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80079da:	fa5f fe84 	uxtb.w	lr, r4
 80079de:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 80079e2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80079e6:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80079ea:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80079ee:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80079f2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80079f6:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 80079fa:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80079fe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a06:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8007a0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007a0e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007a12:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007a16:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8007a1a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8007a1e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8007a22:	0aa3      	lsrs	r3, r4, #10
 8007a24:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007a28:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007a2c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007a30:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8007a34:	9303      	str	r3, [sp, #12]
 8007a36:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8007a3a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8007a3e:	4b42      	ldr	r3, [pc, #264]	@ (8007b48 <D80_GENERIC+0x26c>)
 8007a40:	9901      	ldr	r1, [sp, #4]
 8007a42:	fb2b 1303 	smlad	r3, fp, r3, r1
 8007a46:	4941      	ldr	r1, [pc, #260]	@ (8007b4c <D80_GENERIC+0x270>)
 8007a48:	fb28 3301 	smlad	r3, r8, r1, r3
 8007a4c:	4940      	ldr	r1, [pc, #256]	@ (8007b50 <D80_GENERIC+0x274>)
 8007a4e:	fb2c 3301 	smlad	r3, ip, r1, r3
 8007a52:	4940      	ldr	r1, [pc, #256]	@ (8007b54 <D80_GENERIC+0x278>)
 8007a54:	fb27 3301 	smlad	r3, r7, r1, r3
 8007a58:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8007a5c:	fb2e 3301 	smlad	r3, lr, r1, r3
 8007a60:	493d      	ldr	r1, [pc, #244]	@ (8007b58 <D80_GENERIC+0x27c>)
 8007a62:	9c02      	ldr	r4, [sp, #8]
 8007a64:	fb2b 4401 	smlad	r4, fp, r1, r4
 8007a68:	493c      	ldr	r1, [pc, #240]	@ (8007b5c <D80_GENERIC+0x280>)
 8007a6a:	fb28 4401 	smlad	r4, r8, r1, r4
 8007a6e:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 8007a72:	fb2c 4101 	smlad	r1, ip, r1, r4
 8007a76:	4c3a      	ldr	r4, [pc, #232]	@ (8007b60 <D80_GENERIC+0x284>)
 8007a78:	fb27 1104 	smlad	r1, r7, r4, r1
 8007a7c:	4c39      	ldr	r4, [pc, #228]	@ (8007b64 <D80_GENERIC+0x288>)
 8007a7e:	fb2e 1104 	smlad	r1, lr, r4, r1
 8007a82:	9101      	str	r1, [sp, #4]
 8007a84:	2101      	movs	r1, #1
 8007a86:	fb2b fb01 	smuad	fp, fp, r1
 8007a8a:	4937      	ldr	r1, [pc, #220]	@ (8007b68 <D80_GENERIC+0x28c>)
 8007a8c:	fb28 b801 	smlad	r8, r8, r1, fp
 8007a90:	4d36      	ldr	r5, [pc, #216]	@ (8007b6c <D80_GENERIC+0x290>)
 8007a92:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8007a96:	4d36      	ldr	r5, [pc, #216]	@ (8007b70 <D80_GENERIC+0x294>)
 8007a98:	fb27 c705 	smlad	r7, r7, r5, ip
 8007a9c:	4d35      	ldr	r5, [pc, #212]	@ (8007b74 <D80_GENERIC+0x298>)
 8007a9e:	fb2e 7105 	smlad	r1, lr, r5, r7
 8007aa2:	9102      	str	r1, [sp, #8]
 8007aa4:	9908      	ldr	r1, [sp, #32]
 8007aa6:	f5a3 337a 	sub.w	r3, r3, #256000	@ 0x3e800
 8007aaa:	b181      	cbz	r1, 8007ace <D80_GENERIC+0x1f2>
 8007aac:	9c04      	ldr	r4, [sp, #16]
 8007aae:	9d05      	ldr	r5, [sp, #20]
 8007ab0:	9305      	str	r3, [sp, #20]
 8007ab2:	441c      	add	r4, r3
 8007ab4:	1b64      	subs	r4, r4, r5
 8007ab6:	17e7      	asrs	r7, r4, #31
 8007ab8:	fba4 4501 	umull	r4, r5, r4, r1
 8007abc:	fb01 5507 	mla	r5, r1, r7, r5
 8007ac0:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8007ac4:	f145 0500 	adc.w	r5, r5, #0
 8007ac8:	0069      	lsls	r1, r5, #1
 8007aca:	9104      	str	r1, [sp, #16]
 8007acc:	460b      	mov	r3, r1
 8007ace:	9e00      	ldr	r6, [sp, #0]
 8007ad0:	9f06      	ldr	r7, [sp, #24]
 8007ad2:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8007ad4:	025b      	lsls	r3, r3, #9
 8007ad6:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8007ada:	2500      	movs	r5, #0
 8007adc:	fb02 f101 	mul.w	r1, r2, r1
 8007ae0:	fbc7 4503 	smlal	r4, r5, r7, r3
 8007ae4:	9c07      	ldr	r4, [sp, #28]
 8007ae6:	10ab      	asrs	r3, r5, #2
 8007ae8:	f303 030f 	ssat	r3, #16, r3
 8007aec:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8007af0:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 8007af2:	3201      	adds	r2, #1
 8007af4:	4293      	cmp	r3, r2
 8007af6:	dd13      	ble.n	8007b20 <D80_GENERIC+0x244>
 8007af8:	9b00      	ldr	r3, [sp, #0]
 8007afa:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	@ 0x2a
 8007afe:	f1bc 0f01 	cmp.w	ip, #1
 8007b02:	f47f af0b 	bne.w	800791c <D80_GENERIC+0x40>
 8007b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b08:	6884      	ldr	r4, [r0, #8]
 8007b0a:	069b      	lsls	r3, r3, #26
 8007b0c:	e890 0082 	ldmia.w	r0, {r1, r7}
 8007b10:	f100 000a 	add.w	r0, r0, #10
 8007b14:	f57f af3a 	bpl.w	800798c <D80_GENERIC+0xb0>
 8007b18:	ba49      	rev16	r1, r1
 8007b1a:	ba7f      	rev16	r7, r7
 8007b1c:	ba64      	rev16	r4, r4
 8007b1e:	e735      	b.n	800798c <D80_GENERIC+0xb0>
 8007b20:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007b24:	4632      	mov	r2, r6
 8007b26:	9b02      	ldr	r3, [sp, #8]
 8007b28:	6093      	str	r3, [r2, #8]
 8007b2a:	9b01      	ldr	r3, [sp, #4]
 8007b2c:	60d3      	str	r3, [r2, #12]
 8007b2e:	9b04      	ldr	r3, [sp, #16]
 8007b30:	6113      	str	r3, [r2, #16]
 8007b32:	9b05      	ldr	r3, [sp, #20]
 8007b34:	6153      	str	r3, [r2, #20]
 8007b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b38:	f8c2 b01c 	str.w	fp, [r2, #28]
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	6193      	str	r3, [r2, #24]
 8007b40:	b00b      	add	sp, #44	@ 0x2c
 8007b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b46:	bf00      	nop
 8007b48:	002d0024 	.word	0x002d0024
 8007b4c:	001c0015 	.word	0x001c0015
 8007b50:	000f000a 	.word	0x000f000a
 8007b54:	00060003 	.word	0x00060003
 8007b58:	0037003f 	.word	0x0037003f
 8007b5c:	00450049 	.word	0x00450049
 8007b60:	00490045 	.word	0x00490045
 8007b64:	003f0037 	.word	0x003f0037
 8007b68:	00030006 	.word	0x00030006
 8007b6c:	000a000f 	.word	0x000a000f
 8007b70:	0015001c 	.word	0x0015001c
 8007b74:	0024002d 	.word	0x0024002d
 8007b78:	20000000 	.word	0x20000000

08007b7c <D128_GENERIC>:
 8007b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b80:	b093      	sub	sp, #76	@ 0x4c
 8007b82:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8007b84:	9005      	str	r0, [sp, #20]
 8007b86:	4610      	mov	r0, r2
 8007b88:	9201      	str	r2, [sp, #4]
 8007b8a:	6912      	ldr	r2, [r2, #16]
 8007b8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b8e:	4602      	mov	r2, r0
 8007b90:	6940      	ldr	r0, [r0, #20]
 8007b92:	900d      	str	r0, [sp, #52]	@ 0x34
 8007b94:	4610      	mov	r0, r2
 8007b96:	4614      	mov	r4, r2
 8007b98:	6992      	ldr	r2, [r2, #24]
 8007b9a:	9211      	str	r2, [sp, #68]	@ 0x44
 8007b9c:	69c2      	ldr	r2, [r0, #28]
 8007b9e:	9202      	str	r2, [sp, #8]
 8007ba0:	68e2      	ldr	r2, [r4, #12]
 8007ba2:	6880      	ldr	r0, [r0, #8]
 8007ba4:	9203      	str	r2, [sp, #12]
 8007ba6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007ba8:	9004      	str	r0, [sp, #16]
 8007baa:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bac:	910f      	str	r1, [sp, #60]	@ 0x3c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 819b 	beq.w	8007eea <D128_GENERIC+0x36e>
 8007bb4:	6a23      	ldr	r3, [r4, #32]
 8007bb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f8df 93a8 	ldr.w	r9, [pc, #936]	@ 8007f64 <D128_GENERIC+0x3e8>
 8007bbe:	9306      	str	r3, [sp, #24]
 8007bc0:	e17a      	b.n	8007eb8 <D128_GENERIC+0x33c>
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	9d05      	ldr	r5, [sp, #20]
 8007bc6:	b214      	sxth	r4, r2
 8007bc8:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8007bcc:	4250      	negs	r0, r2
 8007bce:	eb05 010a 	add.w	r1, r5, sl
 8007bd2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bd6:	eb01 0800 	add.w	r8, r1, r0
 8007bda:	eb0b 0c04 	add.w	ip, fp, r4
 8007bde:	eb08 070c 	add.w	r7, r8, ip
 8007be2:	183b      	adds	r3, r7, r0
 8007be4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8007be8:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8007bec:	eb0e 0604 	add.w	r6, lr, r4
 8007bf0:	9307      	str	r3, [sp, #28]
 8007bf2:	1833      	adds	r3, r6, r0
 8007bf4:	9305      	str	r3, [sp, #20]
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8007bfc:	f8cd a020 	str.w	sl, [sp, #32]
 8007c00:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8007c04:	f813 c002 	ldrb.w	ip, [r3, r2]
 8007c08:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8007c0c:	5c3a      	ldrb	r2, [r7, r0]
 8007c0e:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8007c12:	781f      	ldrb	r7, [r3, #0]
 8007c14:	9b07      	ldr	r3, [sp, #28]
 8007c16:	9d05      	ldr	r5, [sp, #20]
 8007c18:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8007c1c:	5c09      	ldrb	r1, [r1, r0]
 8007c1e:	9709      	str	r7, [sp, #36]	@ 0x24
 8007c20:	9307      	str	r3, [sp, #28]
 8007c22:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8007c26:	5c33      	ldrb	r3, [r6, r0]
 8007c28:	0412      	lsls	r2, r2, #16
 8007c2a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8007c2e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8007c32:	9d08      	ldr	r5, [sp, #32]
 8007c34:	eb06 0a04 	add.w	sl, r6, r4
 8007c38:	0409      	lsls	r1, r1, #16
 8007c3a:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8007c3e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8007c42:	5d36      	ldrb	r6, [r6, r4]
 8007c44:	9c05      	ldr	r4, [sp, #20]
 8007c46:	042d      	lsls	r5, r5, #16
 8007c48:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8007c4c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8007c50:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8007c54:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8007c58:	eb0a 0c00 	add.w	ip, sl, r0
 8007c5c:	041b      	lsls	r3, r3, #16
 8007c5e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8007c62:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8007c66:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8007c6a:	9d07      	ldr	r5, [sp, #28]
 8007c6c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8007c70:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8007c74:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007c76:	4458      	add	r0, fp
 8007c78:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8007c7c:	9005      	str	r0, [sp, #20]
 8007c7e:	4439      	add	r1, r7
 8007c80:	442a      	add	r2, r5
 8007c82:	44b2      	add	sl, r6
 8007c84:	1918      	adds	r0, r3, r4
 8007c86:	b2cb      	uxtb	r3, r1
 8007c88:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8007c8c:	9e02      	ldr	r6, [sp, #8]
 8007c8e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007c92:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8007c96:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8007c9a:	441e      	add	r6, r3
 8007c9c:	0e09      	lsrs	r1, r1, #24
 8007c9e:	4633      	mov	r3, r6
 8007ca0:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8007ca4:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8007ca8:	b2d4      	uxtb	r4, r2
 8007caa:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8007cae:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007cb2:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8007cb6:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8007cba:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007cbe:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007cc2:	0e12      	lsrs	r2, r2, #24
 8007cc4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8007cc8:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8007ccc:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8007cd0:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8007cd4:	9702      	str	r7, [sp, #8]
 8007cd6:	b2c2      	uxtb	r2, r0
 8007cd8:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8007cdc:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8007ce0:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8007ce4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8007ce8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8007cec:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8007cf0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8007cf4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8007cf8:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8007cfc:	0e00      	lsrs	r0, r0, #24
 8007cfe:	fa5f f68a 	uxtb.w	r6, sl
 8007d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d06:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d08:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8007d0c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8007d10:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8007d14:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8007d18:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007d1c:	950a      	str	r5, [sp, #40]	@ 0x28
 8007d1e:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8007d22:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8007d26:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8007d2a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007d2e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8007d32:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007d36:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007d38:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8007d3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d3e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8007d42:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007d46:	9307      	str	r3, [sp, #28]
 8007d48:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8007d4c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8007d50:	9b02      	ldr	r3, [sp, #8]
 8007d52:	f8cd c008 	str.w	ip, [sp, #8]
 8007d56:	4694      	mov	ip, r2
 8007d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d5a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8007d5e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8007d62:	9a02      	ldr	r2, [sp, #8]
 8007d64:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007d68:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8007d6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007d70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d72:	f8cd a020 	str.w	sl, [sp, #32]
 8007d76:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007d7a:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8007d7e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007d82:	9b07      	ldr	r3, [sp, #28]
 8007d84:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007d88:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8007d8c:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8007d90:	9a08      	ldr	r2, [sp, #32]
 8007d92:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d9a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8007d9e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007da2:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8007da6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007daa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007dae:	0a96      	lsrs	r6, r2, #10
 8007db0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007db4:	9602      	str	r6, [sp, #8]
 8007db6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007dba:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8007dbe:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8007dc2:	4e53      	ldr	r6, [pc, #332]	@ (8007f10 <D128_GENERIC+0x394>)
 8007dc4:	9f03      	ldr	r7, [sp, #12]
 8007dc6:	fb2c 7606 	smlad	r6, ip, r6, r7
 8007dca:	4f52      	ldr	r7, [pc, #328]	@ (8007f14 <D128_GENERIC+0x398>)
 8007dcc:	fb2a 6607 	smlad	r6, sl, r7, r6
 8007dd0:	4f51      	ldr	r7, [pc, #324]	@ (8007f18 <D128_GENERIC+0x39c>)
 8007dd2:	fb21 6607 	smlad	r6, r1, r7, r6
 8007dd6:	4f51      	ldr	r7, [pc, #324]	@ (8007f1c <D128_GENERIC+0x3a0>)
 8007dd8:	fb24 6607 	smlad	r6, r4, r7, r6
 8007ddc:	4f50      	ldr	r7, [pc, #320]	@ (8007f20 <D128_GENERIC+0x3a4>)
 8007dde:	fb28 6607 	smlad	r6, r8, r7, r6
 8007de2:	4f50      	ldr	r7, [pc, #320]	@ (8007f24 <D128_GENERIC+0x3a8>)
 8007de4:	fb20 6607 	smlad	r6, r0, r7, r6
 8007de8:	4f4f      	ldr	r7, [pc, #316]	@ (8007f28 <D128_GENERIC+0x3ac>)
 8007dea:	fb23 6607 	smlad	r6, r3, r7, r6
 8007dee:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8007df2:	fb25 6607 	smlad	r6, r5, r7, r6
 8007df6:	4f4d      	ldr	r7, [pc, #308]	@ (8007f2c <D128_GENERIC+0x3b0>)
 8007df8:	9a04      	ldr	r2, [sp, #16]
 8007dfa:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8007dfe:	4a4c      	ldr	r2, [pc, #304]	@ (8007f30 <D128_GENERIC+0x3b4>)
 8007e00:	fb2a ee02 	smlad	lr, sl, r2, lr
 8007e04:	4f4b      	ldr	r7, [pc, #300]	@ (8007f34 <D128_GENERIC+0x3b8>)
 8007e06:	fb21 ee07 	smlad	lr, r1, r7, lr
 8007e0a:	4f4b      	ldr	r7, [pc, #300]	@ (8007f38 <D128_GENERIC+0x3bc>)
 8007e0c:	fb24 ee07 	smlad	lr, r4, r7, lr
 8007e10:	4f4a      	ldr	r7, [pc, #296]	@ (8007f3c <D128_GENERIC+0x3c0>)
 8007e12:	fb28 ee07 	smlad	lr, r8, r7, lr
 8007e16:	4f4a      	ldr	r7, [pc, #296]	@ (8007f40 <D128_GENERIC+0x3c4>)
 8007e18:	fb20 ee07 	smlad	lr, r0, r7, lr
 8007e1c:	4f49      	ldr	r7, [pc, #292]	@ (8007f44 <D128_GENERIC+0x3c8>)
 8007e1e:	fb23 e707 	smlad	r7, r3, r7, lr
 8007e22:	f8df e144 	ldr.w	lr, [pc, #324]	@ 8007f68 <D128_GENERIC+0x3ec>
 8007e26:	fb25 720e 	smlad	r2, r5, lr, r7
 8007e2a:	f04f 0b01 	mov.w	fp, #1
 8007e2e:	9203      	str	r2, [sp, #12]
 8007e30:	fb2c fb0b 	smuad	fp, ip, fp
 8007e34:	4f44      	ldr	r7, [pc, #272]	@ (8007f48 <D128_GENERIC+0x3cc>)
 8007e36:	fb2a ba07 	smlad	sl, sl, r7, fp
 8007e3a:	4f44      	ldr	r7, [pc, #272]	@ (8007f4c <D128_GENERIC+0x3d0>)
 8007e3c:	fb21 aa07 	smlad	sl, r1, r7, sl
 8007e40:	4f43      	ldr	r7, [pc, #268]	@ (8007f50 <D128_GENERIC+0x3d4>)
 8007e42:	fb24 aa07 	smlad	sl, r4, r7, sl
 8007e46:	4f43      	ldr	r7, [pc, #268]	@ (8007f54 <D128_GENERIC+0x3d8>)
 8007e48:	fb28 a707 	smlad	r7, r8, r7, sl
 8007e4c:	4a42      	ldr	r2, [pc, #264]	@ (8007f58 <D128_GENERIC+0x3dc>)
 8007e4e:	fb20 7702 	smlad	r7, r0, r2, r7
 8007e52:	4a42      	ldr	r2, [pc, #264]	@ (8007f5c <D128_GENERIC+0x3e0>)
 8007e54:	fb23 7702 	smlad	r7, r3, r2, r7
 8007e58:	4b41      	ldr	r3, [pc, #260]	@ (8007f60 <D128_GENERIC+0x3e4>)
 8007e5a:	fb25 7303 	smlad	r3, r5, r3, r7
 8007e5e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	f5a6 1680 	sub.w	r6, r6, #1048576	@ 0x100000
 8007e66:	b185      	cbz	r5, 8007e8a <D128_GENERIC+0x30e>
 8007e68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007e6a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007e6c:	960d      	str	r6, [sp, #52]	@ 0x34
 8007e6e:	4432      	add	r2, r6
 8007e70:	1a52      	subs	r2, r2, r1
 8007e72:	17d1      	asrs	r1, r2, #31
 8007e74:	fba2 2305 	umull	r2, r3, r2, r5
 8007e78:	fb05 3301 	mla	r3, r5, r1, r3
 8007e7c:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8007e80:	f143 0300 	adc.w	r3, r3, #0
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e88:	461e      	mov	r6, r3
 8007e8a:	9801      	ldr	r0, [sp, #4]
 8007e8c:	9c06      	ldr	r4, [sp, #24]
 8007e8e:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8007e90:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8007e92:	01f6      	lsls	r6, r6, #7
 8007e94:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e98:	2300      	movs	r3, #0
 8007e9a:	fbc5 2306 	smlal	r2, r3, r5, r6
 8007e9e:	fb04 f101 	mul.w	r1, r4, r1
 8007ea2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007ea4:	109b      	asrs	r3, r3, #2
 8007ea6:	f303 030f 	ssat	r3, #16, r3
 8007eaa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8007eae:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8007eb0:	1c62      	adds	r2, r4, #1
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	9206      	str	r2, [sp, #24]
 8007eb6:	dd18      	ble.n	8007eea <D128_GENERIC+0x36e>
 8007eb8:	9b01      	ldr	r3, [sp, #4]
 8007eba:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8007ebc:	2a01      	cmp	r2, #1
 8007ebe:	f47f ae80 	bne.w	8007bc2 <D128_GENERIC+0x46>
 8007ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ec4:	9d05      	ldr	r5, [sp, #20]
 8007ec6:	069b      	lsls	r3, r3, #26
 8007ec8:	6829      	ldr	r1, [r5, #0]
 8007eca:	686a      	ldr	r2, [r5, #4]
 8007ecc:	68a8      	ldr	r0, [r5, #8]
 8007ece:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8007ed2:	f105 0410 	add.w	r4, r5, #16
 8007ed6:	d506      	bpl.n	8007ee6 <D128_GENERIC+0x36a>
 8007ed8:	ba49      	rev16	r1, r1
 8007eda:	ba52      	rev16	r2, r2
 8007edc:	ba40      	rev16	r0, r0
 8007ede:	fa9a fa9a 	rev16.w	sl, sl
 8007ee2:	9405      	str	r4, [sp, #20]
 8007ee4:	e6cf      	b.n	8007c86 <D128_GENERIC+0x10a>
 8007ee6:	9405      	str	r4, [sp, #20]
 8007ee8:	e6cd      	b.n	8007c86 <D128_GENERIC+0x10a>
 8007eea:	9a01      	ldr	r2, [sp, #4]
 8007eec:	9904      	ldr	r1, [sp, #16]
 8007eee:	6091      	str	r1, [r2, #8]
 8007ef0:	9903      	ldr	r1, [sp, #12]
 8007ef2:	60d1      	str	r1, [r2, #12]
 8007ef4:	9b02      	ldr	r3, [sp, #8]
 8007ef6:	61d3      	str	r3, [r2, #28]
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4613      	mov	r3, r2
 8007efc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007efe:	610a      	str	r2, [r1, #16]
 8007f00:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007f02:	6159      	str	r1, [r3, #20]
 8007f04:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007f06:	6199      	str	r1, [r3, #24]
 8007f08:	2000      	movs	r0, #0
 8007f0a:	b013      	add	sp, #76	@ 0x4c
 8007f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f10:	00780069 	.word	0x00780069
 8007f14:	005b004e 	.word	0x005b004e
 8007f18:	00420037 	.word	0x00420037
 8007f1c:	002d0024 	.word	0x002d0024
 8007f20:	001c0015 	.word	0x001c0015
 8007f24:	000f000a 	.word	0x000f000a
 8007f28:	00060003 	.word	0x00060003
 8007f2c:	00880096 	.word	0x00880096
 8007f30:	00a200ac 	.word	0x00a200ac
 8007f34:	00b400ba 	.word	0x00b400ba
 8007f38:	00be00c0 	.word	0x00be00c0
 8007f3c:	00c000be 	.word	0x00c000be
 8007f40:	00ba00b4 	.word	0x00ba00b4
 8007f44:	00ac00a2 	.word	0x00ac00a2
 8007f48:	00030006 	.word	0x00030006
 8007f4c:	000a000f 	.word	0x000a000f
 8007f50:	0015001c 	.word	0x0015001c
 8007f54:	0024002d 	.word	0x0024002d
 8007f58:	00370042 	.word	0x00370042
 8007f5c:	004e005b 	.word	0x004e005b
 8007f60:	00690078 	.word	0x00690078
 8007f64:	20000000 	.word	0x20000000
 8007f68:	00960088 	.word	0x00960088

08007f6c <D16_1CH_HTONS_VOL_HP>:
 8007f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f70:	4691      	mov	r9, r2
 8007f72:	b083      	sub	sp, #12
 8007f74:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8007f76:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8007f7a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	4680      	mov	r8, r0
 8007f82:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8007f86:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007f8a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f8e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8007f92:	9401      	str	r4, [sp, #4]
 8007f94:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8007f98:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8007f9c:	2a00      	cmp	r2, #0
 8007f9e:	d04e      	beq.n	800803e <D16_1CH_HTONS_VOL_HP+0xd2>
 8007fa0:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 800804c <D16_1CH_HTONS_VOL_HP+0xe0>
 8007fa4:	1e8c      	subs	r4, r1, #2
 8007fa6:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8007faa:	f858 2b02 	ldr.w	r2, [r8], #2
 8007fae:	ba52      	rev16	r2, r2
 8007fb0:	b2d6      	uxtb	r6, r2
 8007fb2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007fb6:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8007fba:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8007fc4:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8007fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007fd0:	0a93      	lsrs	r3, r2, #10
 8007fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8008044 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8007fd4:	fb21 5202 	smlad	r2, r1, r2, r5
 8007fd8:	4d1b      	ldr	r5, [pc, #108]	@ (8008048 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8007fda:	fb21 f505 	smuad	r5, r1, r5
 8007fde:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8007fe2:	4410      	add	r0, r2
 8007fe4:	1bc0      	subs	r0, r0, r7
 8007fe6:	17c7      	asrs	r7, r0, #31
 8007fe8:	fba0 010e 	umull	r0, r1, r0, lr
 8007fec:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 8007ff0:	fb0e 1107 	mla	r1, lr, r7, r1
 8007ff4:	f141 0100 	adc.w	r1, r1, #0
 8007ff8:	0448      	lsls	r0, r1, #17
 8007ffa:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8007ffe:	2700      	movs	r7, #0
 8008000:	fbc0 670a 	smlal	r6, r7, r0, sl
 8008004:	45d8      	cmp	r8, fp
 8008006:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800800a:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800800e:	4617      	mov	r7, r2
 8008010:	f301 010f 	ssat	r1, #16, r1
 8008014:	f824 1f02 	strh.w	r1, [r4, #2]!
 8008018:	d1c7      	bne.n	8007faa <D16_1CH_HTONS_VOL_HP+0x3e>
 800801a:	9901      	ldr	r1, [sp, #4]
 800801c:	f8c9 301c 	str.w	r3, [r9, #28]
 8008020:	9b00      	ldr	r3, [sp, #0]
 8008022:	f8c9 0010 	str.w	r0, [r9, #16]
 8008026:	2000      	movs	r0, #0
 8008028:	f8c9 5008 	str.w	r5, [r9, #8]
 800802c:	f8c9 100c 	str.w	r1, [r9, #12]
 8008030:	f8c9 2014 	str.w	r2, [r9, #20]
 8008034:	f8c9 3018 	str.w	r3, [r9, #24]
 8008038:	b003      	add	sp, #12
 800803a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803e:	463a      	mov	r2, r7
 8008040:	4621      	mov	r1, r4
 8008042:	e7eb      	b.n	800801c <D16_1CH_HTONS_VOL_HP+0xb0>
 8008044:	00030001 	.word	0x00030001
 8008048:	00010003 	.word	0x00010003
 800804c:	20000000 	.word	0x20000000

08008050 <D24_1CH_HTONS_VOL_HP>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	b089      	sub	sp, #36	@ 0x24
 8008056:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008058:	6996      	ldr	r6, [r2, #24]
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 800805e:	9207      	str	r2, [sp, #28]
 8008060:	6915      	ldr	r5, [r2, #16]
 8008062:	6954      	ldr	r4, [r2, #20]
 8008064:	9606      	str	r6, [sp, #24]
 8008066:	6893      	ldr	r3, [r2, #8]
 8008068:	69d6      	ldr	r6, [r2, #28]
 800806a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800806e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8008072:	9a04      	ldr	r2, [sp, #16]
 8008074:	9705      	str	r7, [sp, #20]
 8008076:	2a00      	cmp	r2, #0
 8008078:	d07e      	beq.n	8008178 <D24_1CH_HTONS_VOL_HP+0x128>
 800807a:	f1a1 0b02 	sub.w	fp, r1, #2
 800807e:	2700      	movs	r7, #0
 8008080:	46a8      	mov	r8, r5
 8008082:	f8cd b004 	str.w	fp, [sp, #4]
 8008086:	4655      	mov	r5, sl
 8008088:	46e3      	mov	fp, ip
 800808a:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 8008184 <D24_1CH_HTONS_VOL_HP+0x134>
 800808e:	46ba      	mov	sl, r7
 8008090:	469c      	mov	ip, r3
 8008092:	e055      	b.n	8008140 <D24_1CH_HTONS_VOL_HP+0xf0>
 8008094:	7802      	ldrb	r2, [r0, #0]
 8008096:	78c3      	ldrb	r3, [r0, #3]
 8008098:	7841      	ldrb	r1, [r0, #1]
 800809a:	0212      	lsls	r2, r2, #8
 800809c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80080a0:	440b      	add	r3, r1
 80080a2:	3002      	adds	r0, #2
 80080a4:	b2d9      	uxtb	r1, r3
 80080a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80080aa:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 80080ae:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 80080b2:	0c1b      	lsrs	r3, r3, #16
 80080b4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80080b8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80080bc:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 80080c0:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80080c4:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80080c8:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80080cc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80080d0:	4a2a      	ldr	r2, [pc, #168]	@ (800817c <D24_1CH_HTONS_VOL_HP+0x12c>)
 80080d2:	fb23 b102 	smlad	r1, r3, r2, fp
 80080d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008180 <D24_1CH_HTONS_VOL_HP+0x130>)
 80080d8:	fb23 cb02 	smlad	fp, r3, r2, ip
 80080dc:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 80080e0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80080e4:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 80080e8:	2201      	movs	r2, #1
 80080ea:	fb23 f702 	smuad	r7, r3, r2
 80080ee:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 80080f2:	eb01 0208 	add.w	r2, r1, r8
 80080f6:	1b12      	subs	r2, r2, r4
 80080f8:	17d4      	asrs	r4, r2, #31
 80080fa:	fba2 2305 	umull	r2, r3, r2, r5
 80080fe:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8008102:	fb05 3304 	mla	r3, r5, r4, r3
 8008106:	f143 0300 	adc.w	r3, r3, #0
 800810a:	9c05      	ldr	r4, [sp, #20]
 800810c:	03da      	lsls	r2, r3, #15
 800810e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8008112:	f04f 0900 	mov.w	r9, #0
 8008116:	fbc4 8902 	smlal	r8, r9, r4, r2
 800811a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800811e:	9a01      	ldr	r2, [sp, #4]
 8008120:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	109b      	asrs	r3, r3, #2
 8008128:	f303 030f 	ssat	r3, #16, r3
 800812c:	f822 3f02 	strh.w	r3, [r2, #2]!
 8008130:	9b04      	ldr	r3, [sp, #16]
 8008132:	9201      	str	r2, [sp, #4]
 8008134:	f10a 0a01 	add.w	sl, sl, #1
 8008138:	459a      	cmp	sl, r3
 800813a:	44bc      	add	ip, r7
 800813c:	460c      	mov	r4, r1
 800813e:	d00b      	beq.n	8008158 <D24_1CH_HTONS_VOL_HP+0x108>
 8008140:	f01a 0f01 	tst.w	sl, #1
 8008144:	d0a6      	beq.n	8008094 <D24_1CH_HTONS_VOL_HP+0x44>
 8008146:	78c2      	ldrb	r2, [r0, #3]
 8008148:	7883      	ldrb	r3, [r0, #2]
 800814a:	f810 1b04 	ldrb.w	r1, [r0], #4
 800814e:	0212      	lsls	r2, r2, #8
 8008150:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8008154:	440b      	add	r3, r1
 8008156:	e7a5      	b.n	80080a4 <D24_1CH_HTONS_VOL_HP+0x54>
 8008158:	4663      	mov	r3, ip
 800815a:	4645      	mov	r5, r8
 800815c:	46dc      	mov	ip, fp
 800815e:	9807      	ldr	r0, [sp, #28]
 8008160:	6141      	str	r1, [r0, #20]
 8008162:	9906      	ldr	r1, [sp, #24]
 8008164:	6083      	str	r3, [r0, #8]
 8008166:	f8c0 c00c 	str.w	ip, [r0, #12]
 800816a:	61c6      	str	r6, [r0, #28]
 800816c:	6105      	str	r5, [r0, #16]
 800816e:	6181      	str	r1, [r0, #24]
 8008170:	2000      	movs	r0, #0
 8008172:	b009      	add	sp, #36	@ 0x24
 8008174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008178:	4621      	mov	r1, r4
 800817a:	e7f0      	b.n	800815e <D24_1CH_HTONS_VOL_HP+0x10e>
 800817c:	00030001 	.word	0x00030001
 8008180:	00060007 	.word	0x00060007
 8008184:	20000000 	.word	0x20000000

08008188 <D32_1CH_HTONS_VOL_HP>:
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	4692      	mov	sl, r2
 800818e:	b087      	sub	sp, #28
 8008190:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8008192:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008196:	f8da 5030 	ldr.w	r5, [sl, #48]	@ 0x30
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	f8da 4010 	ldr.w	r4, [sl, #16]
 80081a0:	f8da 8014 	ldr.w	r8, [sl, #20]
 80081a4:	f8da 601c 	ldr.w	r6, [sl, #28]
 80081a8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80081ac:	f8da e00c 	ldr.w	lr, [sl, #12]
 80081b0:	9501      	str	r5, [sp, #4]
 80081b2:	f8da c020 	ldr.w	ip, [sl, #32]
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	d07b      	beq.n	80082b2 <D32_1CH_HTONS_VOL_HP+0x12a>
 80081ba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80081be:	4f3e      	ldr	r7, [pc, #248]	@ (80082b8 <D32_1CH_HTONS_VOL_HP+0x130>)
 80081c0:	f8cd c00c 	str.w	ip, [sp, #12]
 80081c4:	9202      	str	r2, [sp, #8]
 80081c6:	460d      	mov	r5, r1
 80081c8:	46a1      	mov	r9, r4
 80081ca:	4684      	mov	ip, r0
 80081cc:	f8cd a014 	str.w	sl, [sp, #20]
 80081d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80081d4:	ba49      	rev16	r1, r1
 80081d6:	b2c8      	uxtb	r0, r1
 80081d8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80081dc:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80081e0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80081e4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80081e8:	0e09      	lsrs	r1, r1, #24
 80081ea:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80081ee:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 80081f2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80081f6:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 80081fa:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 80081fe:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8008202:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008206:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800820a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800820e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008212:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8008216:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800821a:	4a28      	ldr	r2, [pc, #160]	@ (80082bc <D32_1CH_HTONS_VOL_HP+0x134>)
 800821c:	fb20 e202 	smlad	r2, r0, r2, lr
 8008220:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8008224:	fb2a 2101 	smlad	r1, sl, r1, r2
 8008228:	4a25      	ldr	r2, [pc, #148]	@ (80082c0 <D32_1CH_HTONS_VOL_HP+0x138>)
 800822a:	fb20 3302 	smlad	r3, r0, r2, r3
 800822e:	4a25      	ldr	r2, [pc, #148]	@ (80082c4 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8008230:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8008234:	2301      	movs	r3, #1
 8008236:	fb20 f003 	smuad	r0, r0, r3
 800823a:	4b23      	ldr	r3, [pc, #140]	@ (80082c8 <D32_1CH_HTONS_VOL_HP+0x140>)
 800823c:	fb2a 0303 	smlad	r3, sl, r3, r0
 8008240:	f5a1 4280 	sub.w	r2, r1, #16384	@ 0x4000
 8008244:	9c03      	ldr	r4, [sp, #12]
 8008246:	eb02 0009 	add.w	r0, r2, r9
 800824a:	eba0 0008 	sub.w	r0, r0, r8
 800824e:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8008252:	fba0 0104 	umull	r0, r1, r0, r4
 8008256:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 800825a:	fb04 110b 	mla	r1, r4, fp, r1
 800825e:	f141 0100 	adc.w	r1, r1, #0
 8008262:	9c01      	ldr	r4, [sp, #4]
 8008264:	0388      	lsls	r0, r1, #14
 8008266:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 800826a:	f04f 0900 	mov.w	r9, #0
 800826e:	fbc0 8904 	smlal	r8, r9, r0, r4
 8008272:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8008276:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800827a:	f300 000f 	ssat	r0, #16, r0
 800827e:	9902      	ldr	r1, [sp, #8]
 8008280:	f825 0b02 	strh.w	r0, [r5], #2
 8008284:	428d      	cmp	r5, r1
 8008286:	4690      	mov	r8, r2
 8008288:	d1a2      	bne.n	80081d0 <D32_1CH_HTONS_VOL_HP+0x48>
 800828a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800828e:	464c      	mov	r4, r9
 8008290:	f8ca 3008 	str.w	r3, [sl, #8]
 8008294:	9b04      	ldr	r3, [sp, #16]
 8008296:	f8ca e00c 	str.w	lr, [sl, #12]
 800829a:	2000      	movs	r0, #0
 800829c:	f8ca 601c 	str.w	r6, [sl, #28]
 80082a0:	f8ca 4010 	str.w	r4, [sl, #16]
 80082a4:	f8ca 2014 	str.w	r2, [sl, #20]
 80082a8:	f8ca 3018 	str.w	r3, [sl, #24]
 80082ac:	b007      	add	sp, #28
 80082ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b2:	4642      	mov	r2, r8
 80082b4:	e7ec      	b.n	8008290 <D32_1CH_HTONS_VOL_HP+0x108>
 80082b6:	bf00      	nop
 80082b8:	20000000 	.word	0x20000000
 80082bc:	00060003 	.word	0x00060003
 80082c0:	000a000c 	.word	0x000a000c
 80082c4:	000c000a 	.word	0x000c000a
 80082c8:	00030006 	.word	0x00030006

080082cc <D48_1CH_HTONS_VOL_HP>:
 80082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	4613      	mov	r3, r2
 80082d2:	461c      	mov	r4, r3
 80082d4:	b087      	sub	sp, #28
 80082d6:	4625      	mov	r5, r4
 80082d8:	4626      	mov	r6, r4
 80082da:	6b2d      	ldr	r5, [r5, #48]	@ 0x30
 80082dc:	9205      	str	r2, [sp, #20]
 80082de:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80082e0:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80082e4:	9501      	str	r5, [sp, #4]
 80082e6:	4680      	mov	r8, r0
 80082e8:	6a35      	ldr	r5, [r6, #32]
 80082ea:	6918      	ldr	r0, [r3, #16]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 80082f4:	68a3      	ldr	r3, [r4, #8]
 80082f6:	9502      	str	r5, [sp, #8]
 80082f8:	68e4      	ldr	r4, [r4, #12]
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	f000 808c 	beq.w	8008418 <D48_1CH_HTONS_VOL_HP+0x14c>
 8008300:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008304:	4d45      	ldr	r5, [pc, #276]	@ (800841c <D48_1CH_HTONS_VOL_HP+0x150>)
 8008306:	9203      	str	r2, [sp, #12]
 8008308:	468c      	mov	ip, r1
 800830a:	e898 0044 	ldmia.w	r8, {r2, r6}
 800830e:	f108 0806 	add.w	r8, r8, #6
 8008312:	ba52      	rev16	r2, r2
 8008314:	ba76      	rev16	r6, r6
 8008316:	b2d7      	uxtb	r7, r2
 8008318:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800831c:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8008320:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8008324:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8008328:	0e12      	lsrs	r2, r2, #24
 800832a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800832e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8008332:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008336:	fa5f fb86 	uxtb.w	fp, r6
 800833a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800833e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8008342:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8008346:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800834a:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800834e:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8008352:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8008356:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800835a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800835e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008362:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8008366:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800836a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800836e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008372:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8008376:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800837a:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800837e:	4a28      	ldr	r2, [pc, #160]	@ (8008420 <D48_1CH_HTONS_VOL_HP+0x154>)
 8008380:	fb2a 4202 	smlad	r2, sl, r2, r4
 8008384:	4927      	ldr	r1, [pc, #156]	@ (8008424 <D48_1CH_HTONS_VOL_HP+0x158>)
 8008386:	fb27 2201 	smlad	r2, r7, r1, r2
 800838a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800838e:	fb26 2201 	smlad	r2, r6, r1, r2
 8008392:	4925      	ldr	r1, [pc, #148]	@ (8008428 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8008394:	fb2a 3401 	smlad	r4, sl, r1, r3
 8008398:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 800839c:	fb27 4403 	smlad	r4, r7, r3, r4
 80083a0:	4b22      	ldr	r3, [pc, #136]	@ (800842c <D48_1CH_HTONS_VOL_HP+0x160>)
 80083a2:	fb26 4403 	smlad	r4, r6, r3, r4
 80083a6:	2101      	movs	r1, #1
 80083a8:	fb2a fa01 	smuad	sl, sl, r1
 80083ac:	4b20      	ldr	r3, [pc, #128]	@ (8008430 <D48_1CH_HTONS_VOL_HP+0x164>)
 80083ae:	fb27 a703 	smlad	r7, r7, r3, sl
 80083b2:	4b20      	ldr	r3, [pc, #128]	@ (8008434 <D48_1CH_HTONS_VOL_HP+0x168>)
 80083b4:	fb26 7303 	smlad	r3, r6, r3, r7
 80083b8:	f5a2 4258 	sub.w	r2, r2, #55296	@ 0xd800
 80083bc:	9e02      	ldr	r6, [sp, #8]
 80083be:	9f01      	ldr	r7, [sp, #4]
 80083c0:	4410      	add	r0, r2
 80083c2:	eba0 0009 	sub.w	r0, r0, r9
 80083c6:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 80083ca:	fba0 0106 	umull	r0, r1, r0, r6
 80083ce:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 80083d2:	fb06 110a 	mla	r1, r6, sl, r1
 80083d6:	f141 0100 	adc.w	r1, r1, #0
 80083da:	0308      	lsls	r0, r1, #12
 80083dc:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 80083e0:	f04f 0a00 	mov.w	sl, #0
 80083e4:	fbc0 9a07 	smlal	r9, sl, r0, r7
 80083e8:	4657      	mov	r7, sl
 80083ea:	10b8      	asrs	r0, r7, #2
 80083ec:	f300 000f 	ssat	r0, #16, r0
 80083f0:	f82c 0b02 	strh.w	r0, [ip], #2
 80083f4:	0048      	lsls	r0, r1, #1
 80083f6:	9903      	ldr	r1, [sp, #12]
 80083f8:	458c      	cmp	ip, r1
 80083fa:	4691      	mov	r9, r2
 80083fc:	d185      	bne.n	800830a <D48_1CH_HTONS_VOL_HP+0x3e>
 80083fe:	9d05      	ldr	r5, [sp, #20]
 8008400:	616a      	str	r2, [r5, #20]
 8008402:	9a04      	ldr	r2, [sp, #16]
 8008404:	6128      	str	r0, [r5, #16]
 8008406:	2000      	movs	r0, #0
 8008408:	60ab      	str	r3, [r5, #8]
 800840a:	60ec      	str	r4, [r5, #12]
 800840c:	f8c5 e01c 	str.w	lr, [r5, #28]
 8008410:	61aa      	str	r2, [r5, #24]
 8008412:	b007      	add	sp, #28
 8008414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008418:	464a      	mov	r2, r9
 800841a:	e7f0      	b.n	80083fe <D48_1CH_HTONS_VOL_HP+0x132>
 800841c:	20000000 	.word	0x20000000
 8008420:	000f000a 	.word	0x000f000a
 8008424:	00060003 	.word	0x00060003
 8008428:	00150019 	.word	0x00150019
 800842c:	00190015 	.word	0x00190015
 8008430:	00030006 	.word	0x00030006
 8008434:	000a000f 	.word	0x000a000f

08008438 <D64_1CH_HTONS_VOL_HP>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	b089      	sub	sp, #36	@ 0x24
 800843e:	4614      	mov	r4, r2
 8008440:	9207      	str	r2, [sp, #28]
 8008442:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008444:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8008448:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800844c:	6992      	ldr	r2, [r2, #24]
 800844e:	9206      	str	r2, [sp, #24]
 8008450:	68e2      	ldr	r2, [r4, #12]
 8008452:	9201      	str	r2, [sp, #4]
 8008454:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008456:	9203      	str	r2, [sp, #12]
 8008458:	6a22      	ldr	r2, [r4, #32]
 800845a:	69e5      	ldr	r5, [r4, #28]
 800845c:	68a6      	ldr	r6, [r4, #8]
 800845e:	9204      	str	r2, [sp, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80b0 	beq.w	80085c6 <D64_1CH_HTONS_VOL_HP+0x18e>
 8008466:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800846a:	4f58      	ldr	r7, [pc, #352]	@ (80085cc <D64_1CH_HTONS_VOL_HP+0x194>)
 800846c:	9305      	str	r3, [sp, #20]
 800846e:	9102      	str	r1, [sp, #8]
 8008470:	f850 2b08 	ldr.w	r2, [r0], #8
 8008474:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008478:	ba52      	rev16	r2, r2
 800847a:	fa93 f993 	rev16.w	r9, r3
 800847e:	b2d4      	uxtb	r4, r2
 8008480:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008484:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8008488:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800848c:	9901      	ldr	r1, [sp, #4]
 800848e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008492:	0e12      	lsrs	r2, r2, #24
 8008494:	44ab      	add	fp, r5
 8008496:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800849a:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800849e:	fa5f f289 	uxtb.w	r2, r9
 80084a2:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 80084a6:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80084aa:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 80084ae:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80084b2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80084b6:	f3c9 4507 	ubfx	r5, r9, #16, #8
 80084ba:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 80084be:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80084c2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80084c6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80084ca:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80084ce:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 80084d2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80084d6:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80084da:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80084de:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80084e2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80084e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084ea:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80084ee:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 80084f2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80084f6:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 80084fa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80084fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8008502:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8008506:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800850a:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800850e:	4b30      	ldr	r3, [pc, #192]	@ (80085d0 <D64_1CH_HTONS_VOL_HP+0x198>)
 8008510:	fb2b 1303 	smlad	r3, fp, r3, r1
 8008514:	492f      	ldr	r1, [pc, #188]	@ (80085d4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8008516:	fb24 3301 	smlad	r3, r4, r1, r3
 800851a:	492f      	ldr	r1, [pc, #188]	@ (80085d8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800851c:	fb22 3301 	smlad	r3, r2, r1, r3
 8008520:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8008524:	fb2e 390a 	smlad	r9, lr, sl, r3
 8008528:	4b2c      	ldr	r3, [pc, #176]	@ (80085dc <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800852a:	fb2b 6603 	smlad	r6, fp, r3, r6
 800852e:	fb2e 6613 	smladx	r6, lr, r3, r6
 8008532:	4b2b      	ldr	r3, [pc, #172]	@ (80085e0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8008534:	fb24 6603 	smlad	r6, r4, r3, r6
 8008538:	fb22 6313 	smladx	r3, r2, r3, r6
 800853c:	f04f 0a01 	mov.w	sl, #1
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	fb2b fb0a 	smuad	fp, fp, sl
 8008546:	4b27      	ldr	r3, [pc, #156]	@ (80085e4 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8008548:	fb24 ba03 	smlad	sl, r4, r3, fp
 800854c:	4b26      	ldr	r3, [pc, #152]	@ (80085e8 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800854e:	fb22 a203 	smlad	r2, r2, r3, sl
 8008552:	4b26      	ldr	r3, [pc, #152]	@ (80085ec <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8008554:	fb2e 2603 	smlad	r6, lr, r3, r2
 8008558:	f5a9 3a00 	sub.w	sl, r9, #131072	@ 0x20000
 800855c:	eb0a 020c 	add.w	r2, sl, ip
 8008560:	9c04      	ldr	r4, [sp, #16]
 8008562:	9903      	ldr	r1, [sp, #12]
 8008564:	eba2 0208 	sub.w	r2, r2, r8
 8008568:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800856c:	fba2 2304 	umull	r2, r3, r2, r4
 8008570:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8008574:	fb04 3309 	mla	r3, r4, r9, r3
 8008578:	f143 0300 	adc.w	r3, r3, #0
 800857c:	02da      	lsls	r2, r3, #11
 800857e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8008582:	f04f 0900 	mov.w	r9, #0
 8008586:	fbc1 8902 	smlal	r8, r9, r1, r2
 800858a:	9902      	ldr	r1, [sp, #8]
 800858c:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8008590:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008594:	f302 020f 	ssat	r2, #16, r2
 8008598:	9b05      	ldr	r3, [sp, #20]
 800859a:	f821 2b02 	strh.w	r2, [r1], #2
 800859e:	4299      	cmp	r1, r3
 80085a0:	9102      	str	r1, [sp, #8]
 80085a2:	46d0      	mov	r8, sl
 80085a4:	f47f af64 	bne.w	8008470 <D64_1CH_HTONS_VOL_HP+0x38>
 80085a8:	9a07      	ldr	r2, [sp, #28]
 80085aa:	9901      	ldr	r1, [sp, #4]
 80085ac:	60d1      	str	r1, [r2, #12]
 80085ae:	9906      	ldr	r1, [sp, #24]
 80085b0:	6096      	str	r6, [r2, #8]
 80085b2:	2000      	movs	r0, #0
 80085b4:	61d5      	str	r5, [r2, #28]
 80085b6:	f8c2 c010 	str.w	ip, [r2, #16]
 80085ba:	f8c2 a014 	str.w	sl, [r2, #20]
 80085be:	6191      	str	r1, [r2, #24]
 80085c0:	b009      	add	sp, #36	@ 0x24
 80085c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c6:	46c2      	mov	sl, r8
 80085c8:	4622      	mov	r2, r4
 80085ca:	e7ee      	b.n	80085aa <D64_1CH_HTONS_VOL_HP+0x172>
 80085cc:	20000000 	.word	0x20000000
 80085d0:	001c0015 	.word	0x001c0015
 80085d4:	000f000a 	.word	0x000f000a
 80085d8:	00060003 	.word	0x00060003
 80085dc:	0024002a 	.word	0x0024002a
 80085e0:	002e0030 	.word	0x002e0030
 80085e4:	00030006 	.word	0x00030006
 80085e8:	000a000f 	.word	0x000a000f
 80085ec:	0015001c 	.word	0x0015001c

080085f0 <D80_1CH_HTONS_VOL_HP>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	4613      	mov	r3, r2
 80085f6:	b089      	sub	sp, #36	@ 0x24
 80085f8:	4686      	mov	lr, r0
 80085fa:	6918      	ldr	r0, [r3, #16]
 80085fc:	9000      	str	r0, [sp, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	461c      	mov	r4, r3
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	9302      	str	r3, [sp, #8]
 8008606:	6983      	ldr	r3, [r0, #24]
 8008608:	9306      	str	r3, [sp, #24]
 800860a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800860e:	69c3      	ldr	r3, [r0, #28]
 8008610:	68c0      	ldr	r0, [r0, #12]
 8008612:	9207      	str	r2, [sp, #28]
 8008614:	9001      	str	r0, [sp, #4]
 8008616:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8008618:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800861a:	9003      	str	r0, [sp, #12]
 800861c:	6a20      	ldr	r0, [r4, #32]
 800861e:	9004      	str	r0, [sp, #16]
 8008620:	2a00      	cmp	r2, #0
 8008622:	f000 80d2 	beq.w	80087ca <D80_1CH_HTONS_VOL_HP+0x1da>
 8008626:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800862a:	4869      	ldr	r0, [pc, #420]	@ (80087d0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800862c:	9205      	str	r2, [sp, #20]
 800862e:	461c      	mov	r4, r3
 8008630:	f8de 5000 	ldr.w	r5, [lr]
 8008634:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008638:	f8de 3008 	ldr.w	r3, [lr, #8]
 800863c:	f10e 0e0a 	add.w	lr, lr, #10
 8008640:	ba6d      	rev16	r5, r5
 8008642:	ba52      	rev16	r2, r2
 8008644:	fa93 fb93 	rev16.w	fp, r3
 8008648:	b2ee      	uxtb	r6, r5
 800864a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800864e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8008652:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008656:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800865a:	eb04 0a07 	add.w	sl, r4, r7
 800865e:	0e2d      	lsrs	r5, r5, #24
 8008660:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8008664:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8008668:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800866c:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8008670:	b2d5      	uxtb	r5, r2
 8008672:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008676:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800867a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800867e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008682:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8008686:	0e12      	lsrs	r2, r2, #24
 8008688:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800868c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8008690:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8008694:	fa5f f48b 	uxtb.w	r4, fp
 8008698:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800869c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80086a0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80086a4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80086a8:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 80086ac:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80086b0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 80086b4:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 80086b8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80086bc:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80086c0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80086c4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80086c8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80086cc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80086d0:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80086d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086d8:	f3cb 0609 	ubfx	r6, fp, #0, #10
 80086dc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80086e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80086e4:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80086e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80086ec:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80086f0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80086f4:	ea4f 249b 	mov.w	r4, fp, lsr #10
 80086f8:	4d36      	ldr	r5, [pc, #216]	@ (80087d4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80086fa:	9f01      	ldr	r7, [sp, #4]
 80086fc:	fb23 7505 	smlad	r5, r3, r5, r7
 8008700:	4f35      	ldr	r7, [pc, #212]	@ (80087d8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008702:	fb29 5507 	smlad	r5, r9, r7, r5
 8008706:	4f35      	ldr	r7, [pc, #212]	@ (80087dc <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008708:	fb28 5507 	smlad	r5, r8, r7, r5
 800870c:	4f34      	ldr	r7, [pc, #208]	@ (80087e0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800870e:	fb22 5507 	smlad	r5, r2, r7, r5
 8008712:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8008716:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800871a:	4d32      	ldr	r5, [pc, #200]	@ (80087e4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800871c:	fb23 cc05 	smlad	ip, r3, r5, ip
 8008720:	4d31      	ldr	r5, [pc, #196]	@ (80087e8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008722:	fb29 cc05 	smlad	ip, r9, r5, ip
 8008726:	f04f 154b 	mov.w	r5, #4915275	@ 0x4b004b
 800872a:	fb28 c505 	smlad	r5, r8, r5, ip
 800872e:	4f2f      	ldr	r7, [pc, #188]	@ (80087ec <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8008730:	fb22 5507 	smlad	r5, r2, r7, r5
 8008734:	4f2e      	ldr	r7, [pc, #184]	@ (80087f0 <D80_1CH_HTONS_VOL_HP+0x200>)
 8008736:	fb26 5507 	smlad	r5, r6, r7, r5
 800873a:	f04f 0a01 	mov.w	sl, #1
 800873e:	9501      	str	r5, [sp, #4]
 8008740:	fb23 fa0a 	smuad	sl, r3, sl
 8008744:	4b2b      	ldr	r3, [pc, #172]	@ (80087f4 <D80_1CH_HTONS_VOL_HP+0x204>)
 8008746:	fb29 a903 	smlad	r9, r9, r3, sl
 800874a:	4d2b      	ldr	r5, [pc, #172]	@ (80087f8 <D80_1CH_HTONS_VOL_HP+0x208>)
 800874c:	fb28 9805 	smlad	r8, r8, r5, r9
 8008750:	4d2a      	ldr	r5, [pc, #168]	@ (80087fc <D80_1CH_HTONS_VOL_HP+0x20c>)
 8008752:	fb22 8205 	smlad	r2, r2, r5, r8
 8008756:	4b2a      	ldr	r3, [pc, #168]	@ (8008800 <D80_1CH_HTONS_VOL_HP+0x210>)
 8008758:	fb26 2c03 	smlad	ip, r6, r3, r2
 800875c:	9b00      	ldr	r3, [sp, #0]
 800875e:	9d04      	ldr	r5, [sp, #16]
 8008760:	f5ab 3a7a 	sub.w	sl, fp, #256000	@ 0x3e800
 8008764:	4453      	add	r3, sl
 8008766:	461a      	mov	r2, r3
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	f8cd a008 	str.w	sl, [sp, #8]
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	17d7      	asrs	r7, r2, #31
 8008772:	fba2 2305 	umull	r2, r3, r2, r5
 8008776:	fb05 3307 	mla	r3, r5, r7, r3
 800877a:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 800877e:	f143 0300 	adc.w	r3, r3, #0
 8008782:	9d03      	ldr	r5, [sp, #12]
 8008784:	029a      	lsls	r2, r3, #10
 8008786:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 800878a:	2700      	movs	r7, #0
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	fbc5 6702 	smlal	r6, r7, r5, r2
 8008792:	10ba      	asrs	r2, r7, #2
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	f302 020f 	ssat	r2, #16, r2
 800879a:	9b05      	ldr	r3, [sp, #20]
 800879c:	f821 2b02 	strh.w	r2, [r1], #2
 80087a0:	4299      	cmp	r1, r3
 80087a2:	f47f af45 	bne.w	8008630 <D80_1CH_HTONS_VOL_HP+0x40>
 80087a6:	4623      	mov	r3, r4
 80087a8:	9907      	ldr	r1, [sp, #28]
 80087aa:	9801      	ldr	r0, [sp, #4]
 80087ac:	60c8      	str	r0, [r1, #12]
 80087ae:	9a00      	ldr	r2, [sp, #0]
 80087b0:	f8c1 c008 	str.w	ip, [r1, #8]
 80087b4:	4608      	mov	r0, r1
 80087b6:	61cb      	str	r3, [r1, #28]
 80087b8:	610a      	str	r2, [r1, #16]
 80087ba:	f8c1 a014 	str.w	sl, [r1, #20]
 80087be:	9906      	ldr	r1, [sp, #24]
 80087c0:	6181      	str	r1, [r0, #24]
 80087c2:	2000      	movs	r0, #0
 80087c4:	b009      	add	sp, #36	@ 0x24
 80087c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	f8dd a008 	ldr.w	sl, [sp, #8]
 80087ce:	e7eb      	b.n	80087a8 <D80_1CH_HTONS_VOL_HP+0x1b8>
 80087d0:	20000000 	.word	0x20000000
 80087d4:	002d0024 	.word	0x002d0024
 80087d8:	001c0015 	.word	0x001c0015
 80087dc:	000f000a 	.word	0x000f000a
 80087e0:	00060003 	.word	0x00060003
 80087e4:	0037003f 	.word	0x0037003f
 80087e8:	00450049 	.word	0x00450049
 80087ec:	00490045 	.word	0x00490045
 80087f0:	003f0037 	.word	0x003f0037
 80087f4:	00030006 	.word	0x00030006
 80087f8:	000a000f 	.word	0x000a000f
 80087fc:	0015001c 	.word	0x0015001c
 8008800:	0024002d 	.word	0x0024002d

08008804 <D128_1CH_HTONS_VOL_HP>:
 8008804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008808:	b093      	sub	sp, #76	@ 0x4c
 800880a:	4614      	mov	r4, r2
 800880c:	9211      	str	r2, [sp, #68]	@ 0x44
 800880e:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008810:	6912      	ldr	r2, [r2, #16]
 8008812:	9203      	str	r2, [sp, #12]
 8008814:	4622      	mov	r2, r4
 8008816:	4615      	mov	r5, r2
 8008818:	6964      	ldr	r4, [r4, #20]
 800881a:	9406      	str	r4, [sp, #24]
 800881c:	4614      	mov	r4, r2
 800881e:	6992      	ldr	r2, [r2, #24]
 8008820:	9210      	str	r2, [sp, #64]	@ 0x40
 8008822:	68ea      	ldr	r2, [r5, #12]
 8008824:	9204      	str	r2, [sp, #16]
 8008826:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8008828:	69e6      	ldr	r6, [r4, #28]
 800882a:	920d      	str	r2, [sp, #52]	@ 0x34
 800882c:	68a4      	ldr	r4, [r4, #8]
 800882e:	6a2a      	ldr	r2, [r5, #32]
 8008830:	9405      	str	r4, [sp, #20]
 8008832:	920e      	str	r2, [sp, #56]	@ 0x38
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 8145 	beq.w	8008ac4 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800883a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800883e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008840:	f8df 82dc 	ldr.w	r8, [pc, #732]	@ 8008b20 <D128_1CH_HTONS_VOL_HP+0x31c>
 8008844:	9107      	str	r1, [sp, #28]
 8008846:	f100 0310 	add.w	r3, r0, #16
 800884a:	4699      	mov	r9, r3
 800884c:	f1a9 0110 	sub.w	r1, r9, #16
 8008850:	c90e      	ldmia	r1, {r1, r2, r3}
 8008852:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8008856:	ba49      	rev16	r1, r1
 8008858:	ba52      	rev16	r2, r2
 800885a:	ba5b      	rev16	r3, r3
 800885c:	fa90 fa90 	rev16.w	sl, r0
 8008860:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8008864:	b2cc      	uxtb	r4, r1
 8008866:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800886a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800886e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8008872:	0e09      	lsrs	r1, r1, #24
 8008874:	4426      	add	r6, r4
 8008876:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800887a:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800887e:	b2d0      	uxtb	r0, r2
 8008880:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8008884:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8008888:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800888c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8008890:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8008894:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8008898:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800889c:	0e12      	lsrs	r2, r2, #24
 800889e:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80088a2:	9701      	str	r7, [sp, #4]
 80088a4:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80088a8:	4627      	mov	r7, r4
 80088aa:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80088ae:	9702      	str	r7, [sp, #8]
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80088b6:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 80088ba:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 80088be:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80088c2:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 80088c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80088ca:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80088ce:	0e1b      	lsrs	r3, r3, #24
 80088d0:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80088d4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80088d8:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80088dc:	fa5f f38a 	uxtb.w	r3, sl
 80088e0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80088e4:	960a      	str	r6, [sp, #40]	@ 0x28
 80088e6:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80088ea:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80088ee:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80088f2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80088f6:	950b      	str	r5, [sp, #44]	@ 0x2c
 80088f8:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80088fc:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008900:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8008904:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8008908:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800890c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008910:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8008914:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8008918:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800891c:	9308      	str	r3, [sp, #32]
 800891e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008922:	9b01      	ldr	r3, [sp, #4]
 8008924:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008928:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800892c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008930:	9b02      	ldr	r3, [sp, #8]
 8008932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008936:	9302      	str	r3, [sp, #8]
 8008938:	9b08      	ldr	r3, [sp, #32]
 800893a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800893e:	9308      	str	r3, [sp, #32]
 8008940:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008942:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008946:	950c      	str	r5, [sp, #48]	@ 0x30
 8008948:	461d      	mov	r5, r3
 800894a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800894c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008950:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008954:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8008958:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	9b02      	ldr	r3, [sp, #8]
 8008960:	9202      	str	r2, [sp, #8]
 8008962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008964:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008966:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800896a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800896e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008972:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008976:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800897a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800897e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8008982:	9b08      	ldr	r3, [sp, #32]
 8008984:	9f01      	ldr	r7, [sp, #4]
 8008986:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800898a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800898e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008992:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008996:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800899a:	46be      	mov	lr, r7
 800899c:	0a96      	lsrs	r6, r2, #10
 800899e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80089a2:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80089a6:	4f49      	ldr	r7, [pc, #292]	@ (8008acc <D128_1CH_HTONS_VOL_HP+0x2c8>)
 80089a8:	9a04      	ldr	r2, [sp, #16]
 80089aa:	fb2e 2e07 	smlad	lr, lr, r7, r2
 80089ae:	4a48      	ldr	r2, [pc, #288]	@ (8008ad0 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 80089b0:	fb2a ee02 	smlad	lr, sl, r2, lr
 80089b4:	4a47      	ldr	r2, [pc, #284]	@ (8008ad4 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 80089b6:	fb21 ee02 	smlad	lr, r1, r2, lr
 80089ba:	4a47      	ldr	r2, [pc, #284]	@ (8008ad8 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 80089bc:	fb24 ee02 	smlad	lr, r4, r2, lr
 80089c0:	4a46      	ldr	r2, [pc, #280]	@ (8008adc <D128_1CH_HTONS_VOL_HP+0x2d8>)
 80089c2:	9f02      	ldr	r7, [sp, #8]
 80089c4:	fb27 ee02 	smlad	lr, r7, r2, lr
 80089c8:	4a45      	ldr	r2, [pc, #276]	@ (8008ae0 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80089ca:	fb20 ee02 	smlad	lr, r0, r2, lr
 80089ce:	4a45      	ldr	r2, [pc, #276]	@ (8008ae4 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80089d0:	fb23 e702 	smlad	r7, r3, r2, lr
 80089d4:	f44f 3e80 	mov.w	lr, #65536	@ 0x10000
 80089d8:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80089dc:	9f01      	ldr	r7, [sp, #4]
 80089de:	4a42      	ldr	r2, [pc, #264]	@ (8008ae8 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 80089e0:	46bc      	mov	ip, r7
 80089e2:	9f05      	ldr	r7, [sp, #20]
 80089e4:	fb2c 7c02 	smlad	ip, ip, r2, r7
 80089e8:	4a40      	ldr	r2, [pc, #256]	@ (8008aec <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80089ea:	fb2a cc02 	smlad	ip, sl, r2, ip
 80089ee:	4f40      	ldr	r7, [pc, #256]	@ (8008af0 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80089f0:	fb21 cc07 	smlad	ip, r1, r7, ip
 80089f4:	4f3f      	ldr	r7, [pc, #252]	@ (8008af4 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80089f6:	fb24 cc07 	smlad	ip, r4, r7, ip
 80089fa:	4f3f      	ldr	r7, [pc, #252]	@ (8008af8 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80089fc:	9a02      	ldr	r2, [sp, #8]
 80089fe:	fb22 cc07 	smlad	ip, r2, r7, ip
 8008a02:	4f3e      	ldr	r7, [pc, #248]	@ (8008afc <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8008a04:	fb20 cc07 	smlad	ip, r0, r7, ip
 8008a08:	4f3d      	ldr	r7, [pc, #244]	@ (8008b00 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8008a0a:	fb23 c707 	smlad	r7, r3, r7, ip
 8008a0e:	f8df c114 	ldr.w	ip, [pc, #276]	@ 8008b24 <D128_1CH_HTONS_VOL_HP+0x320>
 8008a12:	fb25 720c 	smlad	r2, r5, ip, r7
 8008a16:	f04f 0b01 	mov.w	fp, #1
 8008a1a:	9204      	str	r2, [sp, #16]
 8008a1c:	9f01      	ldr	r7, [sp, #4]
 8008a1e:	fb27 fb0b 	smuad	fp, r7, fp
 8008a22:	4f38      	ldr	r7, [pc, #224]	@ (8008b04 <D128_1CH_HTONS_VOL_HP+0x300>)
 8008a24:	fb2a ba07 	smlad	sl, sl, r7, fp
 8008a28:	4f37      	ldr	r7, [pc, #220]	@ (8008b08 <D128_1CH_HTONS_VOL_HP+0x304>)
 8008a2a:	fb21 aa07 	smlad	sl, r1, r7, sl
 8008a2e:	4f37      	ldr	r7, [pc, #220]	@ (8008b0c <D128_1CH_HTONS_VOL_HP+0x308>)
 8008a30:	fb24 aa07 	smlad	sl, r4, r7, sl
 8008a34:	4f36      	ldr	r7, [pc, #216]	@ (8008b10 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8008a36:	9a02      	ldr	r2, [sp, #8]
 8008a38:	fb22 a707 	smlad	r7, r2, r7, sl
 8008a3c:	4a35      	ldr	r2, [pc, #212]	@ (8008b14 <D128_1CH_HTONS_VOL_HP+0x310>)
 8008a3e:	fb20 7702 	smlad	r7, r0, r2, r7
 8008a42:	4a35      	ldr	r2, [pc, #212]	@ (8008b18 <D128_1CH_HTONS_VOL_HP+0x314>)
 8008a44:	fb23 7702 	smlad	r7, r3, r2, r7
 8008a48:	4b34      	ldr	r3, [pc, #208]	@ (8008b1c <D128_1CH_HTONS_VOL_HP+0x318>)
 8008a4a:	fb25 7303 	smlad	r3, r5, r3, r7
 8008a4e:	9305      	str	r3, [sp, #20]
 8008a50:	9b03      	ldr	r3, [sp, #12]
 8008a52:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8008a54:	f5ae 1e80 	sub.w	lr, lr, #1048576	@ 0x100000
 8008a58:	4473      	add	r3, lr
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	9b06      	ldr	r3, [sp, #24]
 8008a5e:	f8cd e018 	str.w	lr, [sp, #24]
 8008a62:	1ad2      	subs	r2, r2, r3
 8008a64:	17d1      	asrs	r1, r2, #31
 8008a66:	fba2 2304 	umull	r2, r3, r2, r4
 8008a6a:	fb04 3301 	mla	r3, r4, r1, r3
 8008a6e:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8008a72:	f143 0300 	adc.w	r3, r3, #0
 8008a76:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8008a78:	021a      	lsls	r2, r3, #8
 8008a7a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008a7e:	2100      	movs	r1, #0
 8008a80:	fbc4 0102 	smlal	r0, r1, r4, r2
 8008a84:	108a      	asrs	r2, r1, #2
 8008a86:	9907      	ldr	r1, [sp, #28]
 8008a88:	f302 020f 	ssat	r2, #16, r2
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	f821 2b02 	strh.w	r2, [r1], #2
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a96:	9107      	str	r1, [sp, #28]
 8008a98:	4299      	cmp	r1, r3
 8008a9a:	f109 0910 	add.w	r9, r9, #16
 8008a9e:	f47f aed5 	bne.w	800884c <D128_1CH_HTONS_VOL_HP+0x48>
 8008aa2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008aa4:	9905      	ldr	r1, [sp, #20]
 8008aa6:	6091      	str	r1, [r2, #8]
 8008aa8:	9904      	ldr	r1, [sp, #16]
 8008aaa:	60d1      	str	r1, [r2, #12]
 8008aac:	4613      	mov	r3, r2
 8008aae:	61d6      	str	r6, [r2, #28]
 8008ab0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008ab2:	9a03      	ldr	r2, [sp, #12]
 8008ab4:	611a      	str	r2, [r3, #16]
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	f8c3 e014 	str.w	lr, [r3, #20]
 8008abc:	6199      	str	r1, [r3, #24]
 8008abe:	b013      	add	sp, #76	@ 0x4c
 8008ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac4:	f8dd e018 	ldr.w	lr, [sp, #24]
 8008ac8:	e7eb      	b.n	8008aa2 <D128_1CH_HTONS_VOL_HP+0x29e>
 8008aca:	bf00      	nop
 8008acc:	00780069 	.word	0x00780069
 8008ad0:	005b004e 	.word	0x005b004e
 8008ad4:	00420037 	.word	0x00420037
 8008ad8:	002d0024 	.word	0x002d0024
 8008adc:	001c0015 	.word	0x001c0015
 8008ae0:	000f000a 	.word	0x000f000a
 8008ae4:	00060003 	.word	0x00060003
 8008ae8:	00880096 	.word	0x00880096
 8008aec:	00a200ac 	.word	0x00a200ac
 8008af0:	00b400ba 	.word	0x00b400ba
 8008af4:	00be00c0 	.word	0x00be00c0
 8008af8:	00c000be 	.word	0x00c000be
 8008afc:	00ba00b4 	.word	0x00ba00b4
 8008b00:	00ac00a2 	.word	0x00ac00a2
 8008b04:	00030006 	.word	0x00030006
 8008b08:	000a000f 	.word	0x000a000f
 8008b0c:	0015001c 	.word	0x0015001c
 8008b10:	0024002d 	.word	0x0024002d
 8008b14:	00370042 	.word	0x00370042
 8008b18:	004e005b 	.word	0x004e005b
 8008b1c:	00690078 	.word	0x00690078
 8008b20:	20000000 	.word	0x20000000
 8008b24:	00960088 	.word	0x00960088

08008b28 <PDM_Filter_Init>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	2240      	movs	r2, #64	@ 0x40
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	2100      	movs	r1, #0
 8008b30:	300c      	adds	r0, #12
 8008b32:	f002 f9dc 	bl	800aeee <memset>
 8008b36:	493b      	ldr	r1, [pc, #236]	@ (8008c24 <PDM_Filter_Init+0xfc>)
 8008b38:	483b      	ldr	r0, [pc, #236]	@ (8008c28 <PDM_Filter_Init+0x100>)
 8008b3a:	f000 f98d 	bl	8008e58 <CRC_Lock>
 8008b3e:	8822      	ldrh	r2, [r4, #0]
 8008b40:	8963      	ldrh	r3, [r4, #10]
 8008b42:	4938      	ldr	r1, [pc, #224]	@ (8008c24 <PDM_Filter_Init+0xfc>)
 8008b44:	8925      	ldrh	r5, [r4, #8]
 8008b46:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8008b48:	2801      	cmp	r0, #1
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	bf18      	it	ne
 8008b50:	2100      	movne	r1, #0
 8008b52:	2a01      	cmp	r2, #1
 8008b54:	6461      	str	r1, [r4, #68]	@ 0x44
 8008b56:	86e5      	strh	r5, [r4, #54]	@ 0x36
 8008b58:	61a3      	str	r3, [r4, #24]
 8008b5a:	6123      	str	r3, [r4, #16]
 8008b5c:	6163      	str	r3, [r4, #20]
 8008b5e:	60e3      	str	r3, [r4, #12]
 8008b60:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b62:	61e3      	str	r3, [r4, #28]
 8008b64:	6223      	str	r3, [r4, #32]
 8008b66:	6423      	str	r3, [r4, #64]	@ 0x40
 8008b68:	d918      	bls.n	8008b9c <PDM_Filter_Init+0x74>
 8008b6a:	2003      	movs	r0, #3
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	8862      	ldrh	r2, [r4, #2]
 8008b70:	2a01      	cmp	r2, #1
 8008b72:	d91d      	bls.n	8008bb0 <PDM_Filter_Init+0x88>
 8008b74:	2140      	movs	r1, #64	@ 0x40
 8008b76:	2300      	movs	r3, #0
 8008b78:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008b7a:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8008b7e:	6862      	ldr	r2, [r4, #4]
 8008b80:	bf04      	itt	eq
 8008b82:	6421      	streq	r1, [r4, #64]	@ 0x40
 8008b84:	460b      	moveq	r3, r1
 8008b86:	b11a      	cbz	r2, 8008b90 <PDM_Filter_Init+0x68>
 8008b88:	f043 0310 	orr.w	r3, r3, #16
 8008b8c:	6423      	str	r3, [r4, #64]	@ 0x40
 8008b8e:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8008b90:	2200      	movs	r2, #0
 8008b92:	8722      	strh	r2, [r4, #56]	@ 0x38
 8008b94:	b908      	cbnz	r0, 8008b9a <PDM_Filter_Init+0x72>
 8008b96:	3380      	adds	r3, #128	@ 0x80
 8008b98:	6423      	str	r3, [r4, #64]	@ 0x40
 8008b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b9c:	4d23      	ldr	r5, [pc, #140]	@ (8008c2c <PDM_Filter_Init+0x104>)
 8008b9e:	d010      	beq.n	8008bc2 <PDM_Filter_Init+0x9a>
 8008ba0:	782a      	ldrb	r2, [r5, #0]
 8008ba2:	2a01      	cmp	r2, #1
 8008ba4:	d027      	beq.n	8008bf6 <PDM_Filter_Init+0xce>
 8008ba6:	8862      	ldrh	r2, [r4, #2]
 8008ba8:	2a01      	cmp	r2, #1
 8008baa:	f04f 0001 	mov.w	r0, #1
 8008bae:	d8e1      	bhi.n	8008b74 <PDM_Filter_Init+0x4c>
 8008bb0:	d001      	beq.n	8008bb6 <PDM_Filter_Init+0x8e>
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	e7de      	b.n	8008b74 <PDM_Filter_Init+0x4c>
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	4618      	mov	r0, r3
 8008bba:	6422      	str	r2, [r4, #64]	@ 0x40
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	2160      	movs	r1, #96	@ 0x60
 8008bc0:	e7da      	b.n	8008b78 <PDM_Filter_Init+0x50>
 8008bc2:	7829      	ldrb	r1, [r5, #0]
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	d1ee      	bne.n	8008ba6 <PDM_Filter_Init+0x7e>
 8008bc8:	4919      	ldr	r1, [pc, #100]	@ (8008c30 <PDM_Filter_Init+0x108>)
 8008bca:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8008c38 <PDM_Filter_Init+0x110>
 8008bce:	4f19      	ldr	r7, [pc, #100]	@ (8008c34 <PDM_Filter_Init+0x10c>)
 8008bd0:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8008bd4:	684a      	ldr	r2, [r1, #4]
 8008bd6:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8008bda:	ea02 0007 	and.w	r0, r2, r7
 8008bde:	4303      	orrs	r3, r0
 8008be0:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8008be4:	4413      	add	r3, r2
 8008be6:	f841 3f04 	str.w	r3, [r1, #4]!
 8008bea:	428e      	cmp	r6, r1
 8008bec:	d1f2      	bne.n	8008bd4 <PDM_Filter_Init+0xac>
 8008bee:	2001      	movs	r0, #1
 8008bf0:	7028      	strb	r0, [r5, #0]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e7bb      	b.n	8008b6e <PDM_Filter_Init+0x46>
 8008bf6:	490e      	ldr	r1, [pc, #56]	@ (8008c30 <PDM_Filter_Init+0x108>)
 8008bf8:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8008c38 <PDM_Filter_Init+0x110>
 8008bfc:	4f0d      	ldr	r7, [pc, #52]	@ (8008c34 <PDM_Filter_Init+0x10c>)
 8008bfe:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8008c02:	684a      	ldr	r2, [r1, #4]
 8008c04:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8008c08:	ea02 0007 	and.w	r0, r2, r7
 8008c0c:	4303      	orrs	r3, r0
 8008c0e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8008c12:	4413      	add	r3, r2
 8008c14:	f841 3f04 	str.w	r3, [r1, #4]!
 8008c18:	428e      	cmp	r6, r1
 8008c1a:	d1f2      	bne.n	8008c02 <PDM_Filter_Init+0xda>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	702b      	strb	r3, [r5, #0]
 8008c20:	e7c1      	b.n	8008ba6 <PDM_Filter_Init+0x7e>
 8008c22:	bf00      	nop
 8008c24:	b5e8b5cd 	.word	0xb5e8b5cd
 8008c28:	f407a5c2 	.word	0xf407a5c2
 8008c2c:	20000628 	.word	0x20000628
 8008c30:	1ffffffc 	.word	0x1ffffffc
 8008c34:	000ffc00 	.word	0x000ffc00
 8008c38:	3ff00000 	.word	0x3ff00000

08008c3c <PDM_Filter_setConfig>:
 8008c3c:	4b66      	ldr	r3, [pc, #408]	@ (8008dd8 <PDM_Filter_setConfig+0x19c>)
 8008c3e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d001      	beq.n	8008c48 <PDM_Filter_setConfig+0xc>
 8008c44:	2004      	movs	r0, #4
 8008c46:	4770      	bx	lr
 8008c48:	b530      	push	{r4, r5, lr}
 8008c4a:	880a      	ldrh	r2, [r1, #0]
 8008c4c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008c4e:	ed2d 8b04 	vpush	{d8-d9}
 8008c52:	4604      	mov	r4, r0
 8008c54:	460d      	mov	r5, r1
 8008c56:	1e51      	subs	r1, r2, #1
 8008c58:	f423 7080 	bic.w	r0, r3, #256	@ 0x100
 8008c5c:	2906      	cmp	r1, #6
 8008c5e:	b083      	sub	sp, #12
 8008c60:	6420      	str	r0, [r4, #64]	@ 0x40
 8008c62:	d91a      	bls.n	8008c9a <PDM_Filter_setConfig+0x5e>
 8008c64:	2008      	movs	r0, #8
 8008c66:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 8008c6a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8008c6e:	4299      	cmp	r1, r3
 8008c70:	d07e      	beq.n	8008d70 <PDM_Filter_setConfig+0x134>
 8008c72:	f113 0f0c 	cmn.w	r3, #12
 8008c76:	da2a      	bge.n	8008cce <PDM_Filter_setConfig+0x92>
 8008c78:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 8008c7c:	3040      	adds	r0, #64	@ 0x40
 8008c7e:	80ab      	strh	r3, [r5, #4]
 8008c80:	8622      	strh	r2, [r4, #48]	@ 0x30
 8008c82:	886b      	ldrh	r3, [r5, #2]
 8008c84:	8663      	strh	r3, [r4, #50]	@ 0x32
 8008c86:	b920      	cbnz	r0, 8008c92 <PDM_Filter_setConfig+0x56>
 8008c88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c8e:	6423      	str	r3, [r4, #64]	@ 0x40
 8008c90:	2000      	movs	r0, #0
 8008c92:	b003      	add	sp, #12
 8008c94:	ecbd 8b04 	vpop	{d8-d9}
 8008c98:	bd30      	pop	{r4, r5, pc}
 8008c9a:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 8008c9c:	4291      	cmp	r1, r2
 8008c9e:	d06c      	beq.n	8008d7a <PDM_Filter_setConfig+0x13e>
 8008ca0:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8008ca4:	f023 0301 	bic.w	r3, r3, #1
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	f003 0170 	and.w	r1, r3, #112	@ 0x70
 8008cae:	6423      	str	r3, [r4, #64]	@ 0x40
 8008cb0:	2970      	cmp	r1, #112	@ 0x70
 8008cb2:	f003 030f 	and.w	r3, r3, #15
 8008cb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cba:	d066      	beq.n	8008d8a <PDM_Filter_setConfig+0x14e>
 8008cbc:	2b06      	cmp	r3, #6
 8008cbe:	f200 8089 	bhi.w	8008dd4 <PDM_Filter_setConfig+0x198>
 8008cc2:	e8df f003 	tbb	[pc, r3]
 8008cc6:	4f52      	.short	0x4f52
 8008cc8:	3d43494c 	.word	0x3d43494c
 8008ccc:	46          	.byte	0x46
 8008ccd:	00          	.byte	0x00
 8008cce:	2b33      	cmp	r3, #51	@ 0x33
 8008cd0:	dc32      	bgt.n	8008d38 <PDM_Filter_setConfig+0xfc>
 8008cd2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008cd4:	f002 020f 	and.w	r2, r2, #15
 8008cd8:	3a01      	subs	r2, #1
 8008cda:	2a06      	cmp	r2, #6
 8008cdc:	d872      	bhi.n	8008dc4 <PDM_Filter_setConfig+0x188>
 8008cde:	493f      	ldr	r1, [pc, #252]	@ (8008ddc <PDM_Filter_setConfig+0x1a0>)
 8008ce0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008ce4:	ed92 9a00 	vldr	s18, [r2]
 8008ce8:	ed92 8a07 	vldr	s16, [r2, #28]
 8008cec:	9001      	str	r0, [sp, #4]
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cf6:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8008cfa:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8008cfe:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8008d02:	f005 fcf9 	bl	800e6f8 <powf>
 8008d06:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8008de0 <PDM_Filter_setConfig+0x1a4>
 8008d0a:	eef0 8a40 	vmov.f32	s17, s0
 8008d0e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8008d12:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8008d16:	f005 fcef 	bl	800e6f8 <powf>
 8008d1a:	ee28 8a28 	vmul.f32	s16, s16, s17
 8008d1e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008d22:	f005 fd6d 	bl	800e800 <roundf>
 8008d26:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8008d2a:	88ab      	ldrh	r3, [r5, #4]
 8008d2c:	882a      	ldrh	r2, [r5, #0]
 8008d2e:	9801      	ldr	r0, [sp, #4]
 8008d30:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 8008d34:	8723      	strh	r3, [r4, #56]	@ 0x38
 8008d36:	e7a3      	b.n	8008c80 <PDM_Filter_setConfig+0x44>
 8008d38:	2333      	movs	r3, #51	@ 0x33
 8008d3a:	3040      	adds	r0, #64	@ 0x40
 8008d3c:	80ab      	strh	r3, [r5, #4]
 8008d3e:	e79f      	b.n	8008c80 <PDM_Filter_setConfig+0x44>
 8008d40:	4b28      	ldr	r3, [pc, #160]	@ (8008de4 <PDM_Filter_setConfig+0x1a8>)
 8008d42:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008d44:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8008d48:	2000      	movs	r0, #0
 8008d4a:	e792      	b.n	8008c72 <PDM_Filter_setConfig+0x36>
 8008d4c:	4b26      	ldr	r3, [pc, #152]	@ (8008de8 <PDM_Filter_setConfig+0x1ac>)
 8008d4e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008d50:	e7f8      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008d52:	4b26      	ldr	r3, [pc, #152]	@ (8008dec <PDM_Filter_setConfig+0x1b0>)
 8008d54:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008d56:	e7f5      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008d58:	4b25      	ldr	r3, [pc, #148]	@ (8008df0 <PDM_Filter_setConfig+0x1b4>)
 8008d5a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008d5c:	e7f2      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008d5e:	4b25      	ldr	r3, [pc, #148]	@ (8008df4 <PDM_Filter_setConfig+0x1b8>)
 8008d60:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008d62:	e7ef      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008d64:	4b24      	ldr	r3, [pc, #144]	@ (8008df8 <PDM_Filter_setConfig+0x1bc>)
 8008d66:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008d68:	e7ec      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008d6a:	4b24      	ldr	r3, [pc, #144]	@ (8008dfc <PDM_Filter_setConfig+0x1c0>)
 8008d6c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008d6e:	e7e9      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008d70:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 8008d72:	4291      	cmp	r1, r2
 8008d74:	f47f af7d 	bne.w	8008c72 <PDM_Filter_setConfig+0x36>
 8008d78:	e783      	b.n	8008c82 <PDM_Filter_setConfig+0x46>
 8008d7a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8008d7e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 8008d82:	4299      	cmp	r1, r3
 8008d84:	d023      	beq.n	8008dce <PDM_Filter_setConfig+0x192>
 8008d86:	2000      	movs	r0, #0
 8008d88:	e773      	b.n	8008c72 <PDM_Filter_setConfig+0x36>
 8008d8a:	2b06      	cmp	r3, #6
 8008d8c:	d822      	bhi.n	8008dd4 <PDM_Filter_setConfig+0x198>
 8008d8e:	e8df f003 	tbb	[pc, r3]
 8008d92:	1316      	.short	0x1316
 8008d94:	070a0d10 	.word	0x070a0d10
 8008d98:	04          	.byte	0x04
 8008d99:	00          	.byte	0x00
 8008d9a:	4b19      	ldr	r3, [pc, #100]	@ (8008e00 <PDM_Filter_setConfig+0x1c4>)
 8008d9c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008d9e:	e7d1      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008da0:	4b18      	ldr	r3, [pc, #96]	@ (8008e04 <PDM_Filter_setConfig+0x1c8>)
 8008da2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008da4:	e7ce      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008da6:	4b18      	ldr	r3, [pc, #96]	@ (8008e08 <PDM_Filter_setConfig+0x1cc>)
 8008da8:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008daa:	e7cb      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008dac:	4b17      	ldr	r3, [pc, #92]	@ (8008e0c <PDM_Filter_setConfig+0x1d0>)
 8008dae:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008db0:	e7c8      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008db2:	4b17      	ldr	r3, [pc, #92]	@ (8008e10 <PDM_Filter_setConfig+0x1d4>)
 8008db4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008db6:	e7c5      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008db8:	4b16      	ldr	r3, [pc, #88]	@ (8008e14 <PDM_Filter_setConfig+0x1d8>)
 8008dba:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008dbc:	e7c2      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008dbe:	4b16      	ldr	r3, [pc, #88]	@ (8008e18 <PDM_Filter_setConfig+0x1dc>)
 8008dc0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008dc2:	e7bf      	b.n	8008d44 <PDM_Filter_setConfig+0x108>
 8008dc4:	ed9f 8a15 	vldr	s16, [pc, #84]	@ 8008e1c <PDM_Filter_setConfig+0x1e0>
 8008dc8:	eeb0 9a48 	vmov.f32	s18, s16
 8008dcc:	e78e      	b.n	8008cec <PDM_Filter_setConfig+0xb0>
 8008dce:	886b      	ldrh	r3, [r5, #2]
 8008dd0:	8663      	strh	r3, [r4, #50]	@ 0x32
 8008dd2:	e759      	b.n	8008c88 <PDM_Filter_setConfig+0x4c>
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	e746      	b.n	8008c66 <PDM_Filter_setConfig+0x2a>
 8008dd8:	b5e8b5cd 	.word	0xb5e8b5cd
 8008ddc:	0800f1c0 	.word	0x0800f1c0
 8008de0:	42000000 	.word	0x42000000
 8008de4:	080071a9 	.word	0x080071a9
 8008de8:	08007089 	.word	0x08007089
 8008dec:	08007339 	.word	0x08007339
 8008df0:	08007b7d 	.word	0x08007b7d
 8008df4:	080078dd 	.word	0x080078dd
 8008df8:	080076bd 	.word	0x080076bd
 8008dfc:	080074d1 	.word	0x080074d1
 8008e00:	08008189 	.word	0x08008189
 8008e04:	08008051 	.word	0x08008051
 8008e08:	08007f6d 	.word	0x08007f6d
 8008e0c:	08008805 	.word	0x08008805
 8008e10:	080085f1 	.word	0x080085f1
 8008e14:	08008439 	.word	0x08008439
 8008e18:	080082cd 	.word	0x080082cd
 8008e1c:	00000000 	.word	0x00000000

08008e20 <PDM_Filter>:
 8008e20:	b410      	push	{r4}
 8008e22:	4b0c      	ldr	r3, [pc, #48]	@ (8008e54 <PDM_Filter+0x34>)
 8008e24:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8008e26:	429c      	cmp	r4, r3
 8008e28:	d003      	beq.n	8008e32 <PDM_Filter+0x12>
 8008e2a:	2004      	movs	r0, #4
 8008e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008e34:	05dc      	lsls	r4, r3, #23
 8008e36:	d407      	bmi.n	8008e48 <PDM_Filter+0x28>
 8008e38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e3c:	bf14      	ite	ne
 8008e3e:	2020      	movne	r0, #32
 8008e40:	2030      	moveq	r0, #48	@ 0x30
 8008e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8008e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e4e:	320c      	adds	r2, #12
 8008e50:	4718      	bx	r3
 8008e52:	bf00      	nop
 8008e54:	b5e8b5cd 	.word	0xb5e8b5cd

08008e58 <CRC_Lock>:
 8008e58:	4a17      	ldr	r2, [pc, #92]	@ (8008eb8 <CRC_Lock+0x60>)
 8008e5a:	6813      	ldr	r3, [r2, #0]
 8008e5c:	b410      	push	{r4}
 8008e5e:	f023 0301 	bic.w	r3, r3, #1
 8008e62:	4c16      	ldr	r4, [pc, #88]	@ (8008ebc <CRC_Lock+0x64>)
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	b933      	cbnz	r3, 8008e78 <CRC_Lock+0x20>
 8008e6a:	4b15      	ldr	r3, [pc, #84]	@ (8008ec0 <CRC_Lock+0x68>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e72:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8008e76:	d00f      	beq.n	8008e98 <CRC_Lock+0x40>
 8008e78:	4a12      	ldr	r2, [pc, #72]	@ (8008ec4 <CRC_Lock+0x6c>)
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	6813      	ldr	r3, [r2, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1fc      	bne.n	8008e7e <CRC_Lock+0x26>
 8008e84:	4b10      	ldr	r3, [pc, #64]	@ (8008ec8 <CRC_Lock+0x70>)
 8008e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e8a:	6018      	str	r0, [r3, #0]
 8008e8c:	6818      	ldr	r0, [r3, #0]
 8008e8e:	1a08      	subs	r0, r1, r0
 8008e90:	fab0 f080 	clz	r0, r0
 8008e94:	0940      	lsrs	r0, r0, #5
 8008e96:	4770      	bx	lr
 8008e98:	4a0c      	ldr	r2, [pc, #48]	@ (8008ecc <CRC_Lock+0x74>)
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	6813      	ldr	r3, [r2, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1fc      	bne.n	8008e9e <CRC_Lock+0x46>
 8008ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed0 <CRC_Lock+0x78>)
 8008ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eaa:	6018      	str	r0, [r3, #0]
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	1a40      	subs	r0, r0, r1
 8008eb0:	fab0 f080 	clz	r0, r0
 8008eb4:	0940      	lsrs	r0, r0, #5
 8008eb6:	4770      	bx	lr
 8008eb8:	e0002000 	.word	0xe0002000
 8008ebc:	e0042000 	.word	0xe0042000
 8008ec0:	5c001000 	.word	0x5c001000
 8008ec4:	40023008 	.word	0x40023008
 8008ec8:	40023000 	.word	0x40023000
 8008ecc:	58024c08 	.word	0x58024c08
 8008ed0:	58024c00 	.word	0x58024c00

08008ed4 <arm_rfft_32_fast_init_f32>:
 8008ed4:	b150      	cbz	r0, 8008eec <arm_rfft_32_fast_init_f32+0x18>
 8008ed6:	b510      	push	{r4, lr}
 8008ed8:	2110      	movs	r1, #16
 8008eda:	4604      	mov	r4, r0
 8008edc:	f000 fd58 	bl	8009990 <arm_cfft_init_f32>
 8008ee0:	b918      	cbnz	r0, 8008eea <arm_rfft_32_fast_init_f32+0x16>
 8008ee2:	4b04      	ldr	r3, [pc, #16]	@ (8008ef4 <arm_rfft_32_fast_init_f32+0x20>)
 8008ee4:	6163      	str	r3, [r4, #20]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	8222      	strh	r2, [r4, #16]
 8008eea:	bd10      	pop	{r4, pc}
 8008eec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	08027c70 	.word	0x08027c70

08008ef8 <arm_rfft_64_fast_init_f32>:
 8008ef8:	b150      	cbz	r0, 8008f10 <arm_rfft_64_fast_init_f32+0x18>
 8008efa:	b510      	push	{r4, lr}
 8008efc:	2120      	movs	r1, #32
 8008efe:	4604      	mov	r4, r0
 8008f00:	f000 fd46 	bl	8009990 <arm_cfft_init_f32>
 8008f04:	b918      	cbnz	r0, 8008f0e <arm_rfft_64_fast_init_f32+0x16>
 8008f06:	4b04      	ldr	r3, [pc, #16]	@ (8008f18 <arm_rfft_64_fast_init_f32+0x20>)
 8008f08:	6163      	str	r3, [r4, #20]
 8008f0a:	2240      	movs	r2, #64	@ 0x40
 8008f0c:	8222      	strh	r2, [r4, #16]
 8008f0e:	bd10      	pop	{r4, pc}
 8008f10:	f04f 30ff 	mov.w	r0, #4294967295
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	0802c4f0 	.word	0x0802c4f0

08008f1c <arm_rfft_128_fast_init_f32>:
 8008f1c:	b150      	cbz	r0, 8008f34 <arm_rfft_128_fast_init_f32+0x18>
 8008f1e:	b510      	push	{r4, lr}
 8008f20:	2140      	movs	r1, #64	@ 0x40
 8008f22:	4604      	mov	r4, r0
 8008f24:	f000 fd34 	bl	8009990 <arm_cfft_init_f32>
 8008f28:	b918      	cbnz	r0, 8008f32 <arm_rfft_128_fast_init_f32+0x16>
 8008f2a:	4b04      	ldr	r3, [pc, #16]	@ (8008f3c <arm_rfft_128_fast_init_f32+0x20>)
 8008f2c:	6163      	str	r3, [r4, #20]
 8008f2e:	2280      	movs	r2, #128	@ 0x80
 8008f30:	8222      	strh	r2, [r4, #16]
 8008f32:	bd10      	pop	{r4, pc}
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	08025670 	.word	0x08025670

08008f40 <arm_rfft_256_fast_init_f32>:
 8008f40:	b158      	cbz	r0, 8008f5a <arm_rfft_256_fast_init_f32+0x1a>
 8008f42:	b510      	push	{r4, lr}
 8008f44:	2180      	movs	r1, #128	@ 0x80
 8008f46:	4604      	mov	r4, r0
 8008f48:	f000 fd22 	bl	8009990 <arm_cfft_init_f32>
 8008f4c:	b920      	cbnz	r0, 8008f58 <arm_rfft_256_fast_init_f32+0x18>
 8008f4e:	4b04      	ldr	r3, [pc, #16]	@ (8008f60 <arm_rfft_256_fast_init_f32+0x20>)
 8008f50:	6163      	str	r3, [r4, #20]
 8008f52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f56:	8222      	strh	r2, [r4, #16]
 8008f58:	bd10      	pop	{r4, pc}
 8008f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5e:	4770      	bx	lr
 8008f60:	08027870 	.word	0x08027870

08008f64 <arm_rfft_512_fast_init_f32>:
 8008f64:	b160      	cbz	r0, 8008f80 <arm_rfft_512_fast_init_f32+0x1c>
 8008f66:	b510      	push	{r4, lr}
 8008f68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	f000 fd0f 	bl	8009990 <arm_cfft_init_f32>
 8008f72:	b920      	cbnz	r0, 8008f7e <arm_rfft_512_fast_init_f32+0x1a>
 8008f74:	4b04      	ldr	r3, [pc, #16]	@ (8008f88 <arm_rfft_512_fast_init_f32+0x24>)
 8008f76:	6163      	str	r3, [r4, #20]
 8008f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f7c:	8222      	strh	r2, [r4, #16]
 8008f7e:	bd10      	pop	{r4, pc}
 8008f80:	f04f 30ff 	mov.w	r0, #4294967295
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	0802bcf0 	.word	0x0802bcf0

08008f8c <arm_rfft_1024_fast_init_f32>:
 8008f8c:	b160      	cbz	r0, 8008fa8 <arm_rfft_1024_fast_init_f32+0x1c>
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f94:	4604      	mov	r4, r0
 8008f96:	f000 fcfb 	bl	8009990 <arm_cfft_init_f32>
 8008f9a:	b920      	cbnz	r0, 8008fa6 <arm_rfft_1024_fast_init_f32+0x1a>
 8008f9c:	4b04      	ldr	r3, [pc, #16]	@ (8008fb0 <arm_rfft_1024_fast_init_f32+0x24>)
 8008f9e:	6163      	str	r3, [r4, #20]
 8008fa0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008fa4:	8222      	strh	r2, [r4, #16]
 8008fa6:	bd10      	pop	{r4, pc}
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	08024670 	.word	0x08024670

08008fb4 <arm_rfft_2048_fast_init_f32>:
 8008fb4:	b160      	cbz	r0, 8008fd0 <arm_rfft_2048_fast_init_f32+0x1c>
 8008fb6:	b510      	push	{r4, lr}
 8008fb8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	f000 fce7 	bl	8009990 <arm_cfft_init_f32>
 8008fc2:	b920      	cbnz	r0, 8008fce <arm_rfft_2048_fast_init_f32+0x1a>
 8008fc4:	4b04      	ldr	r3, [pc, #16]	@ (8008fd8 <arm_rfft_2048_fast_init_f32+0x24>)
 8008fc6:	6163      	str	r3, [r4, #20]
 8008fc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fcc:	8222      	strh	r2, [r4, #16]
 8008fce:	bd10      	pop	{r4, pc}
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	08025870 	.word	0x08025870

08008fdc <arm_rfft_4096_fast_init_f32>:
 8008fdc:	b160      	cbz	r0, 8008ff8 <arm_rfft_4096_fast_init_f32+0x1c>
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	f000 fcd3 	bl	8009990 <arm_cfft_init_f32>
 8008fea:	b920      	cbnz	r0, 8008ff6 <arm_rfft_4096_fast_init_f32+0x1a>
 8008fec:	4b04      	ldr	r3, [pc, #16]	@ (8009000 <arm_rfft_4096_fast_init_f32+0x24>)
 8008fee:	6163      	str	r3, [r4, #20]
 8008ff0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008ff4:	8222      	strh	r2, [r4, #16]
 8008ff6:	bd10      	pop	{r4, pc}
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	08027cf0 	.word	0x08027cf0

08009004 <arm_rfft_fast_init_f32>:
 8009004:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009008:	d024      	beq.n	8009054 <arm_rfft_fast_init_f32+0x50>
 800900a:	d807      	bhi.n	800901c <arm_rfft_fast_init_f32+0x18>
 800900c:	2980      	cmp	r1, #128	@ 0x80
 800900e:	d01c      	beq.n	800904a <arm_rfft_fast_init_f32+0x46>
 8009010:	d90c      	bls.n	800902c <arm_rfft_fast_init_f32+0x28>
 8009012:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8009016:	d11a      	bne.n	800904e <arm_rfft_fast_init_f32+0x4a>
 8009018:	4b0f      	ldr	r3, [pc, #60]	@ (8009058 <arm_rfft_fast_init_f32+0x54>)
 800901a:	4718      	bx	r3
 800901c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009020:	d011      	beq.n	8009046 <arm_rfft_fast_init_f32+0x42>
 8009022:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009026:	d107      	bne.n	8009038 <arm_rfft_fast_init_f32+0x34>
 8009028:	4b0c      	ldr	r3, [pc, #48]	@ (800905c <arm_rfft_fast_init_f32+0x58>)
 800902a:	4718      	bx	r3
 800902c:	2920      	cmp	r1, #32
 800902e:	d008      	beq.n	8009042 <arm_rfft_fast_init_f32+0x3e>
 8009030:	2940      	cmp	r1, #64	@ 0x40
 8009032:	d10c      	bne.n	800904e <arm_rfft_fast_init_f32+0x4a>
 8009034:	4b0a      	ldr	r3, [pc, #40]	@ (8009060 <arm_rfft_fast_init_f32+0x5c>)
 8009036:	e7f0      	b.n	800901a <arm_rfft_fast_init_f32+0x16>
 8009038:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800903c:	d107      	bne.n	800904e <arm_rfft_fast_init_f32+0x4a>
 800903e:	4b09      	ldr	r3, [pc, #36]	@ (8009064 <arm_rfft_fast_init_f32+0x60>)
 8009040:	e7eb      	b.n	800901a <arm_rfft_fast_init_f32+0x16>
 8009042:	4b09      	ldr	r3, [pc, #36]	@ (8009068 <arm_rfft_fast_init_f32+0x64>)
 8009044:	e7e9      	b.n	800901a <arm_rfft_fast_init_f32+0x16>
 8009046:	4b09      	ldr	r3, [pc, #36]	@ (800906c <arm_rfft_fast_init_f32+0x68>)
 8009048:	e7e7      	b.n	800901a <arm_rfft_fast_init_f32+0x16>
 800904a:	4b09      	ldr	r3, [pc, #36]	@ (8009070 <arm_rfft_fast_init_f32+0x6c>)
 800904c:	e7e5      	b.n	800901a <arm_rfft_fast_init_f32+0x16>
 800904e:	f04f 30ff 	mov.w	r0, #4294967295
 8009052:	4770      	bx	lr
 8009054:	4b07      	ldr	r3, [pc, #28]	@ (8009074 <arm_rfft_fast_init_f32+0x70>)
 8009056:	e7e0      	b.n	800901a <arm_rfft_fast_init_f32+0x16>
 8009058:	08008f41 	.word	0x08008f41
 800905c:	08008fdd 	.word	0x08008fdd
 8009060:	08008ef9 	.word	0x08008ef9
 8009064:	08008f8d 	.word	0x08008f8d
 8009068:	08008ed5 	.word	0x08008ed5
 800906c:	08008fb5 	.word	0x08008fb5
 8009070:	08008f1d 	.word	0x08008f1d
 8009074:	08008f65 	.word	0x08008f65

08009078 <stage_rfft_f32>:
 8009078:	b410      	push	{r4}
 800907a:	edd1 7a00 	vldr	s15, [r1]
 800907e:	ed91 7a01 	vldr	s14, [r1, #4]
 8009082:	8804      	ldrh	r4, [r0, #0]
 8009084:	6940      	ldr	r0, [r0, #20]
 8009086:	ee37 7a07 	vadd.f32	s14, s14, s14
 800908a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800908e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8009092:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009096:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800909a:	3c01      	subs	r4, #1
 800909c:	ee26 7a84 	vmul.f32	s14, s13, s8
 80090a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80090a4:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80090a8:	ed82 7a00 	vstr	s14, [r2]
 80090ac:	edc2 7a01 	vstr	s15, [r2, #4]
 80090b0:	3010      	adds	r0, #16
 80090b2:	3210      	adds	r2, #16
 80090b4:	3b08      	subs	r3, #8
 80090b6:	3110      	adds	r1, #16
 80090b8:	ed11 5a02 	vldr	s10, [r1, #-8]
 80090bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80090c0:	ed50 6a02 	vldr	s13, [r0, #-8]
 80090c4:	edd3 4a03 	vldr	s9, [r3, #12]
 80090c8:	ed51 7a01 	vldr	s15, [r1, #-4]
 80090cc:	ed10 6a01 	vldr	s12, [r0, #-4]
 80090d0:	ee77 5a45 	vsub.f32	s11, s14, s10
 80090d4:	ee37 7a05 	vadd.f32	s14, s14, s10
 80090d8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80090dc:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80090e0:	ee66 5a25 	vmul.f32	s11, s12, s11
 80090e4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80090e8:	ee37 7a23 	vadd.f32	s14, s14, s7
 80090ec:	ee66 6a85 	vmul.f32	s13, s13, s10
 80090f0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80090f4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80090f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80090fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009100:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009104:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009108:	3c01      	subs	r4, #1
 800910a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800910e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009112:	f1a3 0308 	sub.w	r3, r3, #8
 8009116:	f101 0108 	add.w	r1, r1, #8
 800911a:	f100 0008 	add.w	r0, r0, #8
 800911e:	f102 0208 	add.w	r2, r2, #8
 8009122:	d1c9      	bne.n	80090b8 <stage_rfft_f32+0x40>
 8009124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop

0800912c <merge_rfft_f32>:
 800912c:	b410      	push	{r4}
 800912e:	edd1 7a00 	vldr	s15, [r1]
 8009132:	edd1 6a01 	vldr	s13, [r1, #4]
 8009136:	8804      	ldrh	r4, [r0, #0]
 8009138:	6940      	ldr	r0, [r0, #20]
 800913a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800913e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009142:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8009146:	ee27 7a04 	vmul.f32	s14, s14, s8
 800914a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800914e:	3c01      	subs	r4, #1
 8009150:	ed82 7a00 	vstr	s14, [r2]
 8009154:	edc2 7a01 	vstr	s15, [r2, #4]
 8009158:	b3dc      	cbz	r4, 80091d2 <merge_rfft_f32+0xa6>
 800915a:	00e3      	lsls	r3, r4, #3
 800915c:	3b08      	subs	r3, #8
 800915e:	440b      	add	r3, r1
 8009160:	3010      	adds	r0, #16
 8009162:	3210      	adds	r2, #16
 8009164:	3110      	adds	r1, #16
 8009166:	ed11 5a02 	vldr	s10, [r1, #-8]
 800916a:	ed93 7a02 	vldr	s14, [r3, #8]
 800916e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009172:	edd3 4a03 	vldr	s9, [r3, #12]
 8009176:	ed51 7a01 	vldr	s15, [r1, #-4]
 800917a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800917e:	ee75 5a47 	vsub.f32	s11, s10, s14
 8009182:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009186:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800918a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800918e:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009192:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009196:	ee37 7a63 	vsub.f32	s14, s14, s7
 800919a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800919e:	ee26 6a05 	vmul.f32	s12, s12, s10
 80091a2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80091a6:	ee37 7a46 	vsub.f32	s14, s14, s12
 80091aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80091ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 80091b2:	ee67 7a84 	vmul.f32	s15, s15, s8
 80091b6:	3c01      	subs	r4, #1
 80091b8:	ed02 7a02 	vstr	s14, [r2, #-8]
 80091bc:	ed42 7a01 	vstr	s15, [r2, #-4]
 80091c0:	f1a3 0308 	sub.w	r3, r3, #8
 80091c4:	f101 0108 	add.w	r1, r1, #8
 80091c8:	f100 0008 	add.w	r0, r0, #8
 80091cc:	f102 0208 	add.w	r2, r2, #8
 80091d0:	d1c9      	bne.n	8009166 <merge_rfft_f32+0x3a>
 80091d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <arm_rfft_fast_f32>:
 80091d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091dc:	461c      	mov	r4, r3
 80091de:	4605      	mov	r5, r0
 80091e0:	4616      	mov	r6, r2
 80091e2:	b14b      	cbz	r3, 80091f8 <arm_rfft_fast_f32+0x20>
 80091e4:	f7ff ffa2 	bl	800912c <merge_rfft_f32>
 80091e8:	4622      	mov	r2, r4
 80091ea:	4631      	mov	r1, r6
 80091ec:	4628      	mov	r0, r5
 80091ee:	2301      	movs	r3, #1
 80091f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091f4:	f000 bb34 	b.w	8009860 <arm_cfft_f32>
 80091f8:	460f      	mov	r7, r1
 80091fa:	461a      	mov	r2, r3
 80091fc:	2301      	movs	r3, #1
 80091fe:	f000 fb2f 	bl	8009860 <arm_cfft_f32>
 8009202:	4632      	mov	r2, r6
 8009204:	4639      	mov	r1, r7
 8009206:	4628      	mov	r0, r5
 8009208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800920c:	f7ff bf34 	b.w	8009078 <stage_rfft_f32>

08009210 <arm_cfft_radix8by2_f32>:
 8009210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009214:	ed2d 8b08 	vpush	{d8-d11}
 8009218:	f8b0 c000 	ldrh.w	ip, [r0]
 800921c:	6842      	ldr	r2, [r0, #4]
 800921e:	4607      	mov	r7, r0
 8009220:	4608      	mov	r0, r1
 8009222:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8009226:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800922a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800922e:	b082      	sub	sp, #8
 8009230:	f000 80b0 	beq.w	8009394 <arm_cfft_radix8by2_f32+0x184>
 8009234:	008c      	lsls	r4, r1, #2
 8009236:	3410      	adds	r4, #16
 8009238:	f100 0310 	add.w	r3, r0, #16
 800923c:	1906      	adds	r6, r0, r4
 800923e:	3210      	adds	r2, #16
 8009240:	4444      	add	r4, r8
 8009242:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009246:	f108 0510 	add.w	r5, r8, #16
 800924a:	ed15 2a04 	vldr	s4, [r5, #-16]
 800924e:	ed55 2a03 	vldr	s5, [r5, #-12]
 8009252:	ed54 4a04 	vldr	s9, [r4, #-16]
 8009256:	ed14 4a03 	vldr	s8, [r4, #-12]
 800925a:	ed14 6a02 	vldr	s12, [r4, #-8]
 800925e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009262:	ed53 3a04 	vldr	s7, [r3, #-16]
 8009266:	ed15 0a02 	vldr	s0, [r5, #-8]
 800926a:	ed55 0a01 	vldr	s1, [r5, #-4]
 800926e:	ed56 6a04 	vldr	s13, [r6, #-16]
 8009272:	ed16 3a03 	vldr	s6, [r6, #-12]
 8009276:	ed13 7a03 	vldr	s14, [r3, #-12]
 800927a:	ed13 5a02 	vldr	s10, [r3, #-8]
 800927e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009282:	ed16 1a02 	vldr	s2, [r6, #-8]
 8009286:	ed56 1a01 	vldr	s3, [r6, #-4]
 800928a:	ee73 ba82 	vadd.f32	s23, s7, s4
 800928e:	ee37 ba22 	vadd.f32	s22, s14, s5
 8009292:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8009296:	ee33 9a04 	vadd.f32	s18, s6, s8
 800929a:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800929e:	ee75 aa00 	vadd.f32	s21, s10, s0
 80092a2:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80092a6:	ee71 8a06 	vadd.f32	s17, s2, s12
 80092aa:	ed43 ba04 	vstr	s23, [r3, #-16]
 80092ae:	ed03 ba03 	vstr	s22, [r3, #-12]
 80092b2:	ed43 aa02 	vstr	s21, [r3, #-8]
 80092b6:	ed03 aa01 	vstr	s20, [r3, #-4]
 80092ba:	ed06 8a01 	vstr	s16, [r6, #-4]
 80092be:	ed46 9a04 	vstr	s19, [r6, #-16]
 80092c2:	ed06 9a03 	vstr	s18, [r6, #-12]
 80092c6:	ed46 8a02 	vstr	s17, [r6, #-8]
 80092ca:	ee37 7a62 	vsub.f32	s14, s14, s5
 80092ce:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80092d2:	ee34 4a43 	vsub.f32	s8, s8, s6
 80092d6:	ed52 6a03 	vldr	s13, [r2, #-12]
 80092da:	ed12 3a04 	vldr	s6, [r2, #-16]
 80092de:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80092e2:	ee27 8a26 	vmul.f32	s16, s14, s13
 80092e6:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80092ea:	ee23 2a83 	vmul.f32	s4, s7, s6
 80092ee:	ee64 4a83 	vmul.f32	s9, s9, s6
 80092f2:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80092f6:	ee27 7a03 	vmul.f32	s14, s14, s6
 80092fa:	ee64 6a26 	vmul.f32	s13, s8, s13
 80092fe:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009302:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009306:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800930a:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800930e:	ee32 3a08 	vadd.f32	s6, s4, s16
 8009312:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009316:	ed05 3a04 	vstr	s6, [r5, #-16]
 800931a:	ed04 4a04 	vstr	s8, [r4, #-16]
 800931e:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009322:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009326:	ee76 6a41 	vsub.f32	s13, s12, s2
 800932a:	ee35 5a40 	vsub.f32	s10, s10, s0
 800932e:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8009332:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009336:	ed52 5a02 	vldr	s11, [r2, #-8]
 800933a:	ee67 3a87 	vmul.f32	s7, s15, s14
 800933e:	ee66 4a87 	vmul.f32	s9, s13, s14
 8009342:	ee25 4a25 	vmul.f32	s8, s10, s11
 8009346:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800934a:	ee25 5a07 	vmul.f32	s10, s10, s14
 800934e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009352:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009356:	ee26 6a25 	vmul.f32	s12, s12, s11
 800935a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800935e:	ee74 5a23 	vadd.f32	s11, s8, s7
 8009362:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8009366:	ee37 7a26 	vadd.f32	s14, s14, s13
 800936a:	3310      	adds	r3, #16
 800936c:	4563      	cmp	r3, ip
 800936e:	ed45 5a02 	vstr	s11, [r5, #-8]
 8009372:	f106 0610 	add.w	r6, r6, #16
 8009376:	ed45 7a01 	vstr	s15, [r5, #-4]
 800937a:	f102 0210 	add.w	r2, r2, #16
 800937e:	ed04 6a02 	vstr	s12, [r4, #-8]
 8009382:	ed04 7a01 	vstr	s14, [r4, #-4]
 8009386:	f105 0510 	add.w	r5, r5, #16
 800938a:	f104 0410 	add.w	r4, r4, #16
 800938e:	f47f af5c 	bne.w	800924a <arm_cfft_radix8by2_f32+0x3a>
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	b289      	uxth	r1, r1
 8009396:	2302      	movs	r3, #2
 8009398:	9101      	str	r1, [sp, #4]
 800939a:	f000 fb4b 	bl	8009a34 <arm_radix8_butterfly_f32>
 800939e:	9901      	ldr	r1, [sp, #4]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	4640      	mov	r0, r8
 80093a4:	2302      	movs	r3, #2
 80093a6:	b002      	add	sp, #8
 80093a8:	ecbd 8b08 	vpop	{d8-d11}
 80093ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093b0:	f000 bb40 	b.w	8009a34 <arm_radix8_butterfly_f32>

080093b4 <arm_cfft_radix8by4_f32>:
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	ed2d 8b0a 	vpush	{d8-d12}
 80093bc:	8803      	ldrh	r3, [r0, #0]
 80093be:	6842      	ldr	r2, [r0, #4]
 80093c0:	b08d      	sub	sp, #52	@ 0x34
 80093c2:	085b      	lsrs	r3, r3, #1
 80093c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80093c6:	4608      	mov	r0, r1
 80093c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093cc:	edd1 5a00 	vldr	s11, [r1]
 80093d0:	edd0 7a00 	vldr	s15, [r0]
 80093d4:	edd1 3a01 	vldr	s7, [r1, #4]
 80093d8:	ed90 5a01 	vldr	s10, [r0, #4]
 80093dc:	9108      	str	r1, [sp, #32]
 80093de:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80093e2:	ed96 7a00 	vldr	s14, [r6]
 80093e6:	ed96 4a01 	vldr	s8, [r6, #4]
 80093ea:	9607      	str	r6, [sp, #28]
 80093ec:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80093f0:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 80093f4:	edd8 4a00 	vldr	s9, [r8]
 80093f8:	ed98 3a01 	vldr	s6, [r8, #4]
 80093fc:	ee77 6a06 	vadd.f32	s13, s14, s12
 8009400:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009404:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009408:	4604      	mov	r4, r0
 800940a:	edc0 6a00 	vstr	s13, [r0]
 800940e:	edd6 5a01 	vldr	s11, [r6, #4]
 8009412:	edd8 2a01 	vldr	s5, [r8, #4]
 8009416:	ee75 6a23 	vadd.f32	s13, s10, s7
 800941a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800941e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009422:	ee74 3a27 	vadd.f32	s7, s8, s15
 8009426:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800942a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800942e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8009432:	3408      	adds	r4, #8
 8009434:	ee35 4a47 	vsub.f32	s8, s10, s14
 8009438:	460d      	mov	r5, r1
 800943a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800943e:	4637      	mov	r7, r6
 8009440:	9402      	str	r4, [sp, #8]
 8009442:	3708      	adds	r7, #8
 8009444:	460c      	mov	r4, r1
 8009446:	3508      	adds	r5, #8
 8009448:	0859      	lsrs	r1, r3, #1
 800944a:	9109      	str	r1, [sp, #36]	@ 0x24
 800944c:	9706      	str	r7, [sp, #24]
 800944e:	9505      	str	r5, [sp, #20]
 8009450:	f102 0708 	add.w	r7, r2, #8
 8009454:	ee36 6a64 	vsub.f32	s12, s12, s9
 8009458:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800945c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8009460:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8009464:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009468:	ee34 5a24 	vadd.f32	s10, s8, s9
 800946c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009470:	3902      	subs	r1, #2
 8009472:	4645      	mov	r5, r8
 8009474:	9701      	str	r7, [sp, #4]
 8009476:	f102 0c18 	add.w	ip, r2, #24
 800947a:	f102 0710 	add.w	r7, r2, #16
 800947e:	3508      	adds	r5, #8
 8009480:	0849      	lsrs	r1, r1, #1
 8009482:	edc0 5a01 	vstr	s11, [r0, #4]
 8009486:	9703      	str	r7, [sp, #12]
 8009488:	edc6 3a00 	vstr	s7, [r6]
 800948c:	ed86 5a01 	vstr	s10, [r6, #4]
 8009490:	f8cd c000 	str.w	ip, [sp]
 8009494:	ed84 6a00 	vstr	s12, [r4]
 8009498:	edc4 6a01 	vstr	s13, [r4, #4]
 800949c:	9504      	str	r5, [sp, #16]
 800949e:	edc8 7a00 	vstr	s15, [r8]
 80094a2:	ed88 7a01 	vstr	s14, [r8, #4]
 80094a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80094a8:	f000 8138 	beq.w	800971c <arm_cfft_radix8by4_f32+0x368>
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	3b0c      	subs	r3, #12
 80094b0:	f1a6 0c0c 	sub.w	ip, r6, #12
 80094b4:	f106 0510 	add.w	r5, r6, #16
 80094b8:	4626      	mov	r6, r4
 80094ba:	46bb      	mov	fp, r7
 80094bc:	f102 0a20 	add.w	sl, r2, #32
 80094c0:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 80094c4:	f106 0710 	add.w	r7, r6, #16
 80094c8:	4443      	add	r3, r8
 80094ca:	f100 0e10 	add.w	lr, r0, #16
 80094ce:	3c0c      	subs	r4, #12
 80094d0:	f1a8 060c 	sub.w	r6, r8, #12
 80094d4:	f108 0210 	add.w	r2, r8, #16
 80094d8:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80094dc:	ed57 5a02 	vldr	s11, [r7, #-8]
 80094e0:	ed55 7a02 	vldr	s15, [r5, #-8]
 80094e4:	ed52 1a02 	vldr	s3, [r2, #-8]
 80094e8:	ed57 6a01 	vldr	s13, [r7, #-4]
 80094ec:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80094f0:	ed12 1a01 	vldr	s2, [r2, #-4]
 80094f4:	ed15 8a01 	vldr	s16, [r5, #-4]
 80094f8:	ee35 4a25 	vadd.f32	s8, s10, s11
 80094fc:	ee30 6a26 	vadd.f32	s12, s0, s13
 8009500:	ee37 7a84 	vadd.f32	s14, s15, s8
 8009504:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009508:	ee37 7a21 	vadd.f32	s14, s14, s3
 800950c:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009510:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8009514:	ed15 7a01 	vldr	s14, [r5, #-4]
 8009518:	ed52 6a01 	vldr	s13, [r2, #-4]
 800951c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009520:	ee78 aa25 	vadd.f32	s21, s16, s11
 8009524:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009528:	ee70 3a67 	vsub.f32	s7, s0, s15
 800952c:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8009530:	ed96 7a02 	vldr	s14, [r6, #8]
 8009534:	ed9c 2a02 	vldr	s4, [ip, #8]
 8009538:	ed94 ba02 	vldr	s22, [r4, #8]
 800953c:	edd3 9a02 	vldr	s19, [r3, #8]
 8009540:	edd6 2a01 	vldr	s5, [r6, #4]
 8009544:	ed9c 9a01 	vldr	s18, [ip, #4]
 8009548:	ed93 5a01 	vldr	s10, [r3, #4]
 800954c:	edd4 0a01 	vldr	s1, [r4, #4]
 8009550:	ee72 6a07 	vadd.f32	s13, s4, s14
 8009554:	ee32 2a47 	vsub.f32	s4, s4, s14
 8009558:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800955c:	ee79 4a22 	vadd.f32	s9, s18, s5
 8009560:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8009564:	ee79 2a62 	vsub.f32	s5, s18, s5
 8009568:	ed8c 7a02 	vstr	s14, [ip, #8]
 800956c:	ed94 7a01 	vldr	s14, [r4, #4]
 8009570:	edd3 8a01 	vldr	s17, [r3, #4]
 8009574:	ee34 7a87 	vadd.f32	s14, s9, s14
 8009578:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800957c:	ee37 7a28 	vadd.f32	s14, s14, s17
 8009580:	ee32 9a60 	vsub.f32	s18, s4, s1
 8009584:	ed8c 7a01 	vstr	s14, [ip, #4]
 8009588:	ed1b 7a01 	vldr	s14, [fp, #-4]
 800958c:	ed1b aa02 	vldr	s20, [fp, #-8]
 8009590:	ee73 8a22 	vadd.f32	s17, s6, s5
 8009594:	ee39 9a05 	vadd.f32	s18, s18, s10
 8009598:	ee7a aac1 	vsub.f32	s21, s21, s2
 800959c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80095a0:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80095a4:	ee69 ba07 	vmul.f32	s23, s18, s14
 80095a8:	ee6a aa87 	vmul.f32	s21, s21, s14
 80095ac:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80095b0:	ee63 ca87 	vmul.f32	s25, s7, s14
 80095b4:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80095b8:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80095bc:	ee68 8a87 	vmul.f32	s17, s17, s14
 80095c0:	ee73 3aea 	vsub.f32	s7, s7, s21
 80095c4:	ee78 8a89 	vadd.f32	s17, s17, s18
 80095c8:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80095cc:	ee3b aaca 	vsub.f32	s20, s23, s20
 80095d0:	ee34 4a67 	vsub.f32	s8, s8, s15
 80095d4:	ee76 6acb 	vsub.f32	s13, s13, s22
 80095d8:	ee36 6a48 	vsub.f32	s12, s12, s16
 80095dc:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80095e0:	ed05 7a02 	vstr	s14, [r5, #-8]
 80095e4:	ed45 3a01 	vstr	s7, [r5, #-4]
 80095e8:	edc4 8a01 	vstr	s17, [r4, #4]
 80095ec:	ed84 aa02 	vstr	s20, [r4, #8]
 80095f0:	ed5a 3a04 	vldr	s7, [sl, #-16]
 80095f4:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80095f8:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80095fc:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8009600:	ee34 4a61 	vsub.f32	s8, s8, s3
 8009604:	ee36 6a41 	vsub.f32	s12, s12, s2
 8009608:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800960c:	ee66 9a26 	vmul.f32	s19, s12, s13
 8009610:	ee24 9a23 	vmul.f32	s18, s8, s7
 8009614:	ee26 6a23 	vmul.f32	s12, s12, s7
 8009618:	ee24 4a26 	vmul.f32	s8, s8, s13
 800961c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009620:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8009624:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8009628:	ee36 6a44 	vsub.f32	s12, s12, s8
 800962c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009630:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8009634:	ee79 3a29 	vadd.f32	s7, s18, s19
 8009638:	ee75 6a60 	vsub.f32	s13, s10, s1
 800963c:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8009640:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009644:	ed47 3a02 	vstr	s7, [r7, #-8]
 8009648:	ed07 6a01 	vstr	s12, [r7, #-4]
 800964c:	ed86 7a01 	vstr	s14, [r6, #4]
 8009650:	ed86 4a02 	vstr	s8, [r6, #8]
 8009654:	ee35 6a81 	vadd.f32	s12, s11, s2
 8009658:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800965c:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 8009660:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 8009664:	ee33 3a62 	vsub.f32	s6, s6, s5
 8009668:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800966c:	ee67 2a26 	vmul.f32	s5, s14, s13
 8009670:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8009674:	ee26 5a25 	vmul.f32	s10, s12, s11
 8009678:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800967c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009680:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009684:	ee63 6a26 	vmul.f32	s13, s6, s13
 8009688:	ee23 3a25 	vmul.f32	s6, s6, s11
 800968c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009690:	ee75 5a24 	vadd.f32	s11, s10, s9
 8009694:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8009698:	ee36 7a87 	vadd.f32	s14, s13, s14
 800969c:	3901      	subs	r1, #1
 800969e:	ed42 5a02 	vstr	s11, [r2, #-8]
 80096a2:	ed42 7a01 	vstr	s15, [r2, #-4]
 80096a6:	f10e 0e08 	add.w	lr, lr, #8
 80096aa:	ed83 3a02 	vstr	s6, [r3, #8]
 80096ae:	ed83 7a01 	vstr	s14, [r3, #4]
 80096b2:	f1ac 0c08 	sub.w	ip, ip, #8
 80096b6:	f10b 0b08 	add.w	fp, fp, #8
 80096ba:	f105 0508 	add.w	r5, r5, #8
 80096be:	f1a4 0408 	sub.w	r4, r4, #8
 80096c2:	f10a 0a10 	add.w	sl, sl, #16
 80096c6:	f107 0708 	add.w	r7, r7, #8
 80096ca:	f1a6 0608 	sub.w	r6, r6, #8
 80096ce:	f109 0918 	add.w	r9, r9, #24
 80096d2:	f102 0208 	add.w	r2, r2, #8
 80096d6:	f1a3 0308 	sub.w	r3, r3, #8
 80096da:	f47f aefd 	bne.w	80094d8 <arm_cfft_radix8by4_f32+0x124>
 80096de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80096e0:	9902      	ldr	r1, [sp, #8]
 80096e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80096e6:	9102      	str	r1, [sp, #8]
 80096e8:	9901      	ldr	r1, [sp, #4]
 80096ea:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80096ee:	9101      	str	r1, [sp, #4]
 80096f0:	9906      	ldr	r1, [sp, #24]
 80096f2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80096f6:	9106      	str	r1, [sp, #24]
 80096f8:	9903      	ldr	r1, [sp, #12]
 80096fa:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80096fe:	9103      	str	r1, [sp, #12]
 8009700:	9905      	ldr	r1, [sp, #20]
 8009702:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009706:	9105      	str	r1, [sp, #20]
 8009708:	9904      	ldr	r1, [sp, #16]
 800970a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800970e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009712:	9204      	str	r2, [sp, #16]
 8009714:	9a00      	ldr	r2, [sp, #0]
 8009716:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	9902      	ldr	r1, [sp, #8]
 800971e:	9d05      	ldr	r5, [sp, #20]
 8009720:	ed91 4a00 	vldr	s8, [r1]
 8009724:	edd5 6a00 	vldr	s13, [r5]
 8009728:	9b06      	ldr	r3, [sp, #24]
 800972a:	9c04      	ldr	r4, [sp, #16]
 800972c:	edd3 7a00 	vldr	s15, [r3]
 8009730:	ed94 3a00 	vldr	s6, [r4]
 8009734:	edd5 4a01 	vldr	s9, [r5, #4]
 8009738:	edd1 3a01 	vldr	s7, [r1, #4]
 800973c:	ed94 2a01 	vldr	s4, [r4, #4]
 8009740:	ed93 7a01 	vldr	s14, [r3, #4]
 8009744:	9a01      	ldr	r2, [sp, #4]
 8009746:	ee34 6a26 	vadd.f32	s12, s8, s13
 800974a:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800974e:	ee37 5a86 	vadd.f32	s10, s15, s12
 8009752:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8009756:	ee35 5a03 	vadd.f32	s10, s10, s6
 800975a:	ee74 6a66 	vsub.f32	s13, s8, s13
 800975e:	ed81 5a00 	vstr	s10, [r1]
 8009762:	ed93 5a01 	vldr	s10, [r3, #4]
 8009766:	edd4 4a01 	vldr	s9, [r4, #4]
 800976a:	ee35 5a85 	vadd.f32	s10, s11, s10
 800976e:	ee37 4a26 	vadd.f32	s8, s14, s13
 8009772:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009776:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800977a:	ed81 5a01 	vstr	s10, [r1, #4]
 800977e:	edd2 1a00 	vldr	s3, [r2]
 8009782:	edd2 2a01 	vldr	s5, [r2, #4]
 8009786:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800978a:	ee34 5a83 	vadd.f32	s10, s9, s6
 800978e:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009792:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009796:	ee64 4a21 	vmul.f32	s9, s8, s3
 800979a:	ee24 4a22 	vmul.f32	s8, s8, s5
 800979e:	ee65 2a22 	vmul.f32	s5, s10, s5
 80097a2:	ee25 5a21 	vmul.f32	s10, s10, s3
 80097a6:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80097aa:	ee35 5a44 	vsub.f32	s10, s10, s8
 80097ae:	edc3 2a00 	vstr	s5, [r3]
 80097b2:	ed83 5a01 	vstr	s10, [r3, #4]
 80097b6:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	ee36 6a43 	vsub.f32	s12, s12, s6
 80097c0:	ed93 4a01 	vldr	s8, [r3, #4]
 80097c4:	ed93 5a00 	vldr	s10, [r3]
 80097c8:	9b00      	ldr	r3, [sp, #0]
 80097ca:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80097ce:	ee66 4a05 	vmul.f32	s9, s12, s10
 80097d2:	ee25 5a85 	vmul.f32	s10, s11, s10
 80097d6:	ee26 6a04 	vmul.f32	s12, s12, s8
 80097da:	ee65 5a84 	vmul.f32	s11, s11, s8
 80097de:	ee35 6a46 	vsub.f32	s12, s10, s12
 80097e2:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80097e6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80097ea:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80097ee:	ed85 6a01 	vstr	s12, [r5, #4]
 80097f2:	edc5 5a00 	vstr	s11, [r5]
 80097f6:	edd3 5a01 	vldr	s11, [r3, #4]
 80097fa:	edd3 6a00 	vldr	s13, [r3]
 80097fe:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009802:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009806:	ee27 6a26 	vmul.f32	s12, s14, s13
 800980a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800980e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009812:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009816:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800981a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800981e:	ed84 7a01 	vstr	s14, [r4, #4]
 8009822:	edc4 7a00 	vstr	s15, [r4]
 8009826:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009828:	9100      	str	r1, [sp, #0]
 800982a:	6862      	ldr	r2, [r4, #4]
 800982c:	2304      	movs	r3, #4
 800982e:	f000 f901 	bl	8009a34 <arm_radix8_butterfly_f32>
 8009832:	9807      	ldr	r0, [sp, #28]
 8009834:	9900      	ldr	r1, [sp, #0]
 8009836:	6862      	ldr	r2, [r4, #4]
 8009838:	2304      	movs	r3, #4
 800983a:	f000 f8fb 	bl	8009a34 <arm_radix8_butterfly_f32>
 800983e:	9808      	ldr	r0, [sp, #32]
 8009840:	9900      	ldr	r1, [sp, #0]
 8009842:	6862      	ldr	r2, [r4, #4]
 8009844:	2304      	movs	r3, #4
 8009846:	f000 f8f5 	bl	8009a34 <arm_radix8_butterfly_f32>
 800984a:	9900      	ldr	r1, [sp, #0]
 800984c:	6862      	ldr	r2, [r4, #4]
 800984e:	4640      	mov	r0, r8
 8009850:	2304      	movs	r3, #4
 8009852:	b00d      	add	sp, #52	@ 0x34
 8009854:	ecbd 8b0a 	vpop	{d8-d12}
 8009858:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	f000 b8ea 	b.w	8009a34 <arm_radix8_butterfly_f32>

08009860 <arm_cfft_f32>:
 8009860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009864:	2a01      	cmp	r2, #1
 8009866:	8805      	ldrh	r5, [r0, #0]
 8009868:	4607      	mov	r7, r0
 800986a:	4690      	mov	r8, r2
 800986c:	460c      	mov	r4, r1
 800986e:	4699      	mov	r9, r3
 8009870:	d05c      	beq.n	800992c <arm_cfft_f32+0xcc>
 8009872:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8009876:	d054      	beq.n	8009922 <arm_cfft_f32+0xc2>
 8009878:	d810      	bhi.n	800989c <arm_cfft_f32+0x3c>
 800987a:	2d40      	cmp	r5, #64	@ 0x40
 800987c:	d015      	beq.n	80098aa <arm_cfft_f32+0x4a>
 800987e:	d94c      	bls.n	800991a <arm_cfft_f32+0xba>
 8009880:	2d80      	cmp	r5, #128	@ 0x80
 8009882:	d103      	bne.n	800988c <arm_cfft_f32+0x2c>
 8009884:	4621      	mov	r1, r4
 8009886:	4638      	mov	r0, r7
 8009888:	f7ff fcc2 	bl	8009210 <arm_cfft_radix8by2_f32>
 800988c:	f1b9 0f00 	cmp.w	r9, #0
 8009890:	d114      	bne.n	80098bc <arm_cfft_f32+0x5c>
 8009892:	f1b8 0f01 	cmp.w	r8, #1
 8009896:	d019      	beq.n	80098cc <arm_cfft_f32+0x6c>
 8009898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800989c:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80098a0:	d03f      	beq.n	8009922 <arm_cfft_f32+0xc2>
 80098a2:	d933      	bls.n	800990c <arm_cfft_f32+0xac>
 80098a4:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80098a8:	d1f0      	bne.n	800988c <arm_cfft_f32+0x2c>
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	2301      	movs	r3, #1
 80098ae:	4629      	mov	r1, r5
 80098b0:	4620      	mov	r0, r4
 80098b2:	f000 f8bf 	bl	8009a34 <arm_radix8_butterfly_f32>
 80098b6:	f1b9 0f00 	cmp.w	r9, #0
 80098ba:	d0ea      	beq.n	8009892 <arm_cfft_f32+0x32>
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	89b9      	ldrh	r1, [r7, #12]
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 f845 	bl	8009950 <arm_bitreversal_32>
 80098c6:	f1b8 0f01 	cmp.w	r8, #1
 80098ca:	d1e5      	bne.n	8009898 <arm_cfft_f32+0x38>
 80098cc:	ee07 5a90 	vmov	s15, r5
 80098d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80098dc:	2d00      	cmp	r5, #0
 80098de:	d0db      	beq.n	8009898 <arm_cfft_f32+0x38>
 80098e0:	f104 0108 	add.w	r1, r4, #8
 80098e4:	2300      	movs	r3, #0
 80098e6:	3301      	adds	r3, #1
 80098e8:	429d      	cmp	r5, r3
 80098ea:	f101 0108 	add.w	r1, r1, #8
 80098ee:	ed11 7a04 	vldr	s14, [r1, #-16]
 80098f2:	ed51 7a03 	vldr	s15, [r1, #-12]
 80098f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80098fa:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80098fe:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009902:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009906:	d1ee      	bne.n	80098e6 <arm_cfft_f32+0x86>
 8009908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009910:	d0cb      	beq.n	80098aa <arm_cfft_f32+0x4a>
 8009912:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8009916:	d0b5      	beq.n	8009884 <arm_cfft_f32+0x24>
 8009918:	e7b8      	b.n	800988c <arm_cfft_f32+0x2c>
 800991a:	2d10      	cmp	r5, #16
 800991c:	d0b2      	beq.n	8009884 <arm_cfft_f32+0x24>
 800991e:	2d20      	cmp	r5, #32
 8009920:	d1b4      	bne.n	800988c <arm_cfft_f32+0x2c>
 8009922:	4621      	mov	r1, r4
 8009924:	4638      	mov	r0, r7
 8009926:	f7ff fd45 	bl	80093b4 <arm_cfft_radix8by4_f32>
 800992a:	e7af      	b.n	800988c <arm_cfft_f32+0x2c>
 800992c:	b16d      	cbz	r5, 800994a <arm_cfft_f32+0xea>
 800992e:	310c      	adds	r1, #12
 8009930:	2600      	movs	r6, #0
 8009932:	ed51 7a02 	vldr	s15, [r1, #-8]
 8009936:	3601      	adds	r6, #1
 8009938:	eef1 7a67 	vneg.f32	s15, s15
 800993c:	42b5      	cmp	r5, r6
 800993e:	ed41 7a02 	vstr	s15, [r1, #-8]
 8009942:	f101 0108 	add.w	r1, r1, #8
 8009946:	d1f4      	bne.n	8009932 <arm_cfft_f32+0xd2>
 8009948:	e793      	b.n	8009872 <arm_cfft_f32+0x12>
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0a4      	beq.n	8009898 <arm_cfft_f32+0x38>
 800994e:	e7b5      	b.n	80098bc <arm_cfft_f32+0x5c>

08009950 <arm_bitreversal_32>:
 8009950:	b1e9      	cbz	r1, 800998e <arm_bitreversal_32+0x3e>
 8009952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009954:	2500      	movs	r5, #0
 8009956:	f102 0e02 	add.w	lr, r2, #2
 800995a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800995e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8009962:	08a4      	lsrs	r4, r4, #2
 8009964:	089b      	lsrs	r3, r3, #2
 8009966:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800996a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800996e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8009972:	00a6      	lsls	r6, r4, #2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800997a:	3304      	adds	r3, #4
 800997c:	1d34      	adds	r4, r6, #4
 800997e:	3502      	adds	r5, #2
 8009980:	58c6      	ldr	r6, [r0, r3]
 8009982:	5907      	ldr	r7, [r0, r4]
 8009984:	50c7      	str	r7, [r0, r3]
 8009986:	428d      	cmp	r5, r1
 8009988:	5106      	str	r6, [r0, r4]
 800998a:	d3e6      	bcc.n	800995a <arm_bitreversal_32+0xa>
 800998c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800998e:	4770      	bx	lr

08009990 <arm_cfft_init_f32>:
 8009990:	4603      	mov	r3, r0
 8009992:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8009996:	f04f 0000 	mov.w	r0, #0
 800999a:	b410      	push	{r4}
 800999c:	8019      	strh	r1, [r3, #0]
 800999e:	6058      	str	r0, [r3, #4]
 80099a0:	d033      	beq.n	8009a0a <arm_cfft_init_f32+0x7a>
 80099a2:	d918      	bls.n	80099d6 <arm_cfft_init_f32+0x46>
 80099a4:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80099a8:	d027      	beq.n	80099fa <arm_cfft_init_f32+0x6a>
 80099aa:	d90c      	bls.n	80099c6 <arm_cfft_init_f32+0x36>
 80099ac:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80099b0:	d11e      	bne.n	80099f0 <arm_cfft_init_f32+0x60>
 80099b2:	4a17      	ldr	r2, [pc, #92]	@ (8009a10 <arm_cfft_init_f32+0x80>)
 80099b4:	8994      	ldrh	r4, [r2, #12]
 80099b6:	819c      	strh	r4, [r3, #12]
 80099b8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80099bc:	e9c3 2101 	strd	r2, r1, [r3, #4]
 80099c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80099ca:	d018      	beq.n	80099fe <arm_cfft_init_f32+0x6e>
 80099cc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80099d0:	d10e      	bne.n	80099f0 <arm_cfft_init_f32+0x60>
 80099d2:	4a10      	ldr	r2, [pc, #64]	@ (8009a14 <arm_cfft_init_f32+0x84>)
 80099d4:	e7ee      	b.n	80099b4 <arm_cfft_init_f32+0x24>
 80099d6:	2940      	cmp	r1, #64	@ 0x40
 80099d8:	d013      	beq.n	8009a02 <arm_cfft_init_f32+0x72>
 80099da:	d903      	bls.n	80099e4 <arm_cfft_init_f32+0x54>
 80099dc:	2980      	cmp	r1, #128	@ 0x80
 80099de:	d107      	bne.n	80099f0 <arm_cfft_init_f32+0x60>
 80099e0:	4a0d      	ldr	r2, [pc, #52]	@ (8009a18 <arm_cfft_init_f32+0x88>)
 80099e2:	e7e7      	b.n	80099b4 <arm_cfft_init_f32+0x24>
 80099e4:	2910      	cmp	r1, #16
 80099e6:	d00e      	beq.n	8009a06 <arm_cfft_init_f32+0x76>
 80099e8:	2920      	cmp	r1, #32
 80099ea:	d101      	bne.n	80099f0 <arm_cfft_init_f32+0x60>
 80099ec:	4a0b      	ldr	r2, [pc, #44]	@ (8009a1c <arm_cfft_init_f32+0x8c>)
 80099ee:	e7e1      	b.n	80099b4 <arm_cfft_init_f32+0x24>
 80099f0:	f04f 30ff 	mov.w	r0, #4294967295
 80099f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	4a09      	ldr	r2, [pc, #36]	@ (8009a20 <arm_cfft_init_f32+0x90>)
 80099fc:	e7da      	b.n	80099b4 <arm_cfft_init_f32+0x24>
 80099fe:	4a09      	ldr	r2, [pc, #36]	@ (8009a24 <arm_cfft_init_f32+0x94>)
 8009a00:	e7d8      	b.n	80099b4 <arm_cfft_init_f32+0x24>
 8009a02:	4a09      	ldr	r2, [pc, #36]	@ (8009a28 <arm_cfft_init_f32+0x98>)
 8009a04:	e7d6      	b.n	80099b4 <arm_cfft_init_f32+0x24>
 8009a06:	4a09      	ldr	r2, [pc, #36]	@ (8009a2c <arm_cfft_init_f32+0x9c>)
 8009a08:	e7d4      	b.n	80099b4 <arm_cfft_init_f32+0x24>
 8009a0a:	4a09      	ldr	r2, [pc, #36]	@ (8009a30 <arm_cfft_init_f32+0xa0>)
 8009a0c:	e7d2      	b.n	80099b4 <arm_cfft_init_f32+0x24>
 8009a0e:	bf00      	nop
 8009a10:	0802c650 	.word	0x0802c650
 8009a14:	0802c5f0 	.word	0x0802c5f0
 8009a18:	0802c600 	.word	0x0802c600
 8009a1c:	0802c640 	.word	0x0802c640
 8009a20:	0802c620 	.word	0x0802c620
 8009a24:	0802c660 	.word	0x0802c660
 8009a28:	0802c670 	.word	0x0802c670
 8009a2c:	0802c610 	.word	0x0802c610
 8009a30:	0802c630 	.word	0x0802c630

08009a34 <arm_radix8_butterfly_f32>:
 8009a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a38:	ed2d 8b10 	vpush	{d8-d15}
 8009a3c:	b093      	sub	sp, #76	@ 0x4c
 8009a3e:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 8009a42:	4603      	mov	r3, r0
 8009a44:	3304      	adds	r3, #4
 8009a46:	ed9f bac0 	vldr	s22, [pc, #768]	@ 8009d48 <arm_radix8_butterfly_f32+0x314>
 8009a4a:	9010      	str	r0, [sp, #64]	@ 0x40
 8009a4c:	468b      	mov	fp, r1
 8009a4e:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a50:	4689      	mov	r9, r1
 8009a52:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8009a54:	ea4f 05db 	mov.w	r5, fp, lsr #3
 8009a58:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8009a5c:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 8009a60:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 8009a64:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8009a68:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8009a6c:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8009a70:	9100      	str	r1, [sp, #0]
 8009a72:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8009a76:	f108 0004 	add.w	r0, r8, #4
 8009a7a:	f10e 0104 	add.w	r1, lr, #4
 8009a7e:	462e      	mov	r6, r5
 8009a80:	4420      	add	r0, r4
 8009a82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a86:	4421      	add	r1, r4
 8009a88:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8009a8c:	960d      	str	r6, [sp, #52]	@ 0x34
 8009a8e:	9402      	str	r4, [sp, #8]
 8009a90:	012c      	lsls	r4, r5, #4
 8009a92:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8009a96:	9403      	str	r4, [sp, #12]
 8009a98:	00ec      	lsls	r4, r5, #3
 8009a9a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009a9c:	9404      	str	r4, [sp, #16]
 8009a9e:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8009aa2:	9405      	str	r4, [sp, #20]
 8009aa4:	016c      	lsls	r4, r5, #5
 8009aa6:	9401      	str	r4, [sp, #4]
 8009aa8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8009aaa:	9c00      	ldr	r4, [sp, #0]
 8009aac:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 8009ab0:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8009ab4:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009ab8:	f04f 0c00 	mov.w	ip, #0
 8009abc:	edd6 6a00 	vldr	s13, [r6]
 8009ac0:	edd7 1a00 	vldr	s3, [r7]
 8009ac4:	ed15 aa01 	vldr	s20, [r5, #-4]
 8009ac8:	edd2 5a00 	vldr	s11, [r2]
 8009acc:	ed51 9a01 	vldr	s19, [r1, #-4]
 8009ad0:	ed94 6a00 	vldr	s12, [r4]
 8009ad4:	ed50 7a01 	vldr	s15, [r0, #-4]
 8009ad8:	ed93 3a00 	vldr	s6, [r3]
 8009adc:	ee39 0a86 	vadd.f32	s0, s19, s12
 8009ae0:	ee33 2a21 	vadd.f32	s4, s6, s3
 8009ae4:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009ae8:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8009aec:	ee35 7a02 	vadd.f32	s14, s10, s4
 8009af0:	ee34 4a80 	vadd.f32	s8, s9, s0
 8009af4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009af8:	ee74 6a07 	vadd.f32	s13, s8, s14
 8009afc:	ee34 4a47 	vsub.f32	s8, s8, s14
 8009b00:	ed45 6a01 	vstr	s13, [r5, #-4]
 8009b04:	ed82 4a00 	vstr	s8, [r2]
 8009b08:	edd0 6a00 	vldr	s13, [r0]
 8009b0c:	ed96 9a01 	vldr	s18, [r6, #4]
 8009b10:	edd3 2a01 	vldr	s5, [r3, #4]
 8009b14:	edd7 8a01 	vldr	s17, [r7, #4]
 8009b18:	edd5 0a00 	vldr	s1, [r5]
 8009b1c:	edd2 3a01 	vldr	s7, [r2, #4]
 8009b20:	ed94 8a01 	vldr	s16, [r4, #4]
 8009b24:	ed91 7a00 	vldr	s14, [r1]
 8009b28:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009b2c:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8009b30:	ee72 aae8 	vsub.f32	s21, s5, s17
 8009b34:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8009b38:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8009b3c:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009b40:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8009b44:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8009b48:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8009b4c:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8009b50:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8009b54:	ee77 0a08 	vadd.f32	s1, s14, s16
 8009b58:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8009b5c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009b60:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8009b64:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8009b68:	ee76 6a89 	vadd.f32	s13, s13, s18
 8009b6c:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8009b70:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009b74:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009b78:	ee35 5a42 	vsub.f32	s10, s10, s4
 8009b7c:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8009b80:	ee33 2a20 	vadd.f32	s4, s6, s1
 8009b84:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009b88:	ee33 3a60 	vsub.f32	s6, s6, s1
 8009b8c:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8009b90:	ee77 0a01 	vadd.f32	s1, s14, s2
 8009b94:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8009b98:	ee37 7a41 	vsub.f32	s14, s14, s2
 8009b9c:	ee73 1a84 	vadd.f32	s3, s7, s8
 8009ba0:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8009ba4:	ee76 3a27 	vadd.f32	s7, s12, s15
 8009ba8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009bac:	ee32 8a00 	vadd.f32	s16, s4, s0
 8009bb0:	ee33 1a45 	vsub.f32	s2, s6, s10
 8009bb4:	ee32 2a40 	vsub.f32	s4, s4, s0
 8009bb8:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009bbc:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8009bc0:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8009bc4:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009bc8:	ee34 6a67 	vsub.f32	s12, s8, s15
 8009bcc:	ee75 4a87 	vadd.f32	s9, s11, s14
 8009bd0:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8009bd4:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8009bd8:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009bdc:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8009be0:	44dc      	add	ip, fp
 8009be2:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009be6:	45e1      	cmp	r9, ip
 8009be8:	ed85 8a00 	vstr	s16, [r5]
 8009bec:	ed82 2a01 	vstr	s4, [r2, #4]
 8009bf0:	4455      	add	r5, sl
 8009bf2:	ed01 0a01 	vstr	s0, [r1, #-4]
 8009bf6:	4452      	add	r2, sl
 8009bf8:	edc4 6a00 	vstr	s13, [r4]
 8009bfc:	ed81 1a00 	vstr	s2, [r1]
 8009c00:	ed84 5a01 	vstr	s10, [r4, #4]
 8009c04:	4451      	add	r1, sl
 8009c06:	ed00 3a01 	vstr	s6, [r0, #-4]
 8009c0a:	4454      	add	r4, sl
 8009c0c:	edc7 2a00 	vstr	s5, [r7]
 8009c10:	edc6 4a00 	vstr	s9, [r6]
 8009c14:	ed83 7a00 	vstr	s14, [r3]
 8009c18:	edc0 5a00 	vstr	s11, [r0]
 8009c1c:	edc7 3a01 	vstr	s7, [r7, #4]
 8009c20:	4450      	add	r0, sl
 8009c22:	ed86 6a01 	vstr	s12, [r6, #4]
 8009c26:	4457      	add	r7, sl
 8009c28:	edc3 7a01 	vstr	s15, [r3, #4]
 8009c2c:	4456      	add	r6, sl
 8009c2e:	4453      	add	r3, sl
 8009c30:	f63f af44 	bhi.w	8009abc <arm_radix8_butterfly_f32+0x88>
 8009c34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c36:	2b07      	cmp	r3, #7
 8009c38:	f240 81c3 	bls.w	8009fc2 <arm_radix8_butterfly_f32+0x58e>
 8009c3c:	9805      	ldr	r0, [sp, #20]
 8009c3e:	9a01      	ldr	r2, [sp, #4]
 8009c40:	9b03      	ldr	r3, [sp, #12]
 8009c42:	9d04      	ldr	r5, [sp, #16]
 8009c44:	9902      	ldr	r1, [sp, #8]
 8009c46:	f100 0c08 	add.w	ip, r0, #8
 8009c4a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009c4c:	3208      	adds	r2, #8
 8009c4e:	1882      	adds	r2, r0, r2
 8009c50:	3308      	adds	r3, #8
 8009c52:	920a      	str	r2, [sp, #40]	@ 0x28
 8009c54:	4602      	mov	r2, r0
 8009c56:	18d3      	adds	r3, r2, r3
 8009c58:	3108      	adds	r1, #8
 8009c5a:	3508      	adds	r5, #8
 8009c5c:	1851      	adds	r1, r2, r1
 8009c5e:	9307      	str	r3, [sp, #28]
 8009c60:	4613      	mov	r3, r2
 8009c62:	442a      	add	r2, r5
 8009c64:	9206      	str	r2, [sp, #24]
 8009c66:	461a      	mov	r2, r3
 8009c68:	4462      	add	r2, ip
 8009c6a:	f10e 0e0c 	add.w	lr, lr, #12
 8009c6e:	9205      	str	r2, [sp, #20]
 8009c70:	461a      	mov	r2, r3
 8009c72:	4472      	add	r2, lr
 8009c74:	f108 0808 	add.w	r8, r8, #8
 8009c78:	330c      	adds	r3, #12
 8009c7a:	4440      	add	r0, r8
 8009c7c:	f04f 0e00 	mov.w	lr, #0
 8009c80:	9203      	str	r2, [sp, #12]
 8009c82:	9304      	str	r3, [sp, #16]
 8009c84:	465a      	mov	r2, fp
 8009c86:	464b      	mov	r3, r9
 8009c88:	46f3      	mov	fp, lr
 8009c8a:	46d1      	mov	r9, sl
 8009c8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8009c8e:	9108      	str	r1, [sp, #32]
 8009c90:	f04f 0801 	mov.w	r8, #1
 8009c94:	469a      	mov	sl, r3
 8009c96:	4696      	mov	lr, r2
 8009c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c9a:	449b      	add	fp, r3
 8009c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c9e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ca2:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8009ca6:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 8009caa:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8009cae:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 8009cb2:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8009cb6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009cb8:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 8009cbc:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 8009cc0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009cc2:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 8009cc6:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 8009cca:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 8009cce:	9202      	str	r2, [sp, #8]
 8009cd0:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8009cd4:	9301      	str	r3, [sp, #4]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	edd3 da01 	vldr	s27, [r3, #4]
 8009cdc:	9b01      	ldr	r3, [sp, #4]
 8009cde:	edd0 7a00 	vldr	s15, [r0]
 8009ce2:	ed93 da01 	vldr	s26, [r3, #4]
 8009ce6:	9b02      	ldr	r3, [sp, #8]
 8009ce8:	edcd 7a02 	vstr	s15, [sp, #8]
 8009cec:	ed93 ca01 	vldr	s24, [r3, #4]
 8009cf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cf2:	eddc ca01 	vldr	s25, [ip, #4]
 8009cf6:	edd3 7a00 	vldr	s15, [r3]
 8009cfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cfc:	edcd 7a01 	vstr	s15, [sp, #4]
 8009d00:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8009d04:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8009d08:	9200      	str	r2, [sp, #0]
 8009d0a:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 8009d0e:	edd3 7a00 	vldr	s15, [r3]
 8009d12:	ed92 fa01 	vldr	s30, [r2, #4]
 8009d16:	9a00      	ldr	r2, [sp, #0]
 8009d18:	edd1 ea01 	vldr	s29, [r1, #4]
 8009d1c:	ed92 ea01 	vldr	s28, [r2, #4]
 8009d20:	edd7 ba00 	vldr	s23, [r7]
 8009d24:	edd6 aa00 	vldr	s21, [r6]
 8009d28:	ed95 aa00 	vldr	s20, [r5]
 8009d2c:	edd4 9a00 	vldr	s19, [r4]
 8009d30:	edcd 7a00 	vstr	s15, [sp]
 8009d34:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8009d38:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8009d3c:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8009d40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8009d44:	46c4      	mov	ip, r8
 8009d46:	e001      	b.n	8009d4c <arm_radix8_butterfly_f32+0x318>
 8009d48:	3f3504f3 	.word	0x3f3504f3
 8009d4c:	ed91 6a00 	vldr	s12, [r1]
 8009d50:	ed93 5a00 	vldr	s10, [r3]
 8009d54:	edd0 fa00 	vldr	s31, [r0]
 8009d58:	edd4 7a00 	vldr	s15, [r4]
 8009d5c:	ed95 7a00 	vldr	s14, [r5]
 8009d60:	ed56 3a01 	vldr	s7, [r6, #-4]
 8009d64:	ed17 3a01 	vldr	s6, [r7, #-4]
 8009d68:	ed92 2a00 	vldr	s4, [r2]
 8009d6c:	ed96 0a00 	vldr	s0, [r6]
 8009d70:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009d74:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009d78:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8009d7c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009d80:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009d84:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009d88:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009d8c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009d90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d94:	ed06 6a01 	vstr	s12, [r6, #-4]
 8009d98:	edd4 8a01 	vldr	s17, [r4, #4]
 8009d9c:	ed92 9a01 	vldr	s18, [r2, #4]
 8009da0:	edd7 0a00 	vldr	s1, [r7]
 8009da4:	edd1 2a01 	vldr	s5, [r1, #4]
 8009da8:	ed95 7a01 	vldr	s14, [r5, #4]
 8009dac:	ed93 6a01 	vldr	s12, [r3, #4]
 8009db0:	edd0 5a01 	vldr	s11, [r0, #4]
 8009db4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009db8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8009dbc:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009dc0:	ee78 fac7 	vsub.f32	s31, s17, s14
 8009dc4:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009dc8:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009dcc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009dd0:	ee79 2a22 	vadd.f32	s5, s18, s5
 8009dd4:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009dd8:	ee72 7a67 	vsub.f32	s15, s4, s15
 8009ddc:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009de0:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8009de4:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009de8:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8009dec:	ee32 1a08 	vadd.f32	s2, s4, s16
 8009df0:	ee72 fa87 	vadd.f32	s31, s5, s14
 8009df4:	ee32 2a48 	vsub.f32	s4, s4, s16
 8009df8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8009dfc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009e00:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009e04:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8009e08:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009e0c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8009e10:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8009e14:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009e18:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009e1c:	ee74 0a22 	vadd.f32	s1, s8, s5
 8009e20:	ee36 0a28 	vadd.f32	s0, s12, s17
 8009e24:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009e28:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009e2c:	ee32 4a64 	vsub.f32	s8, s4, s9
 8009e30:	ee73 8a09 	vadd.f32	s17, s6, s18
 8009e34:	ee74 4a82 	vadd.f32	s9, s9, s4
 8009e38:	ee33 9a49 	vsub.f32	s18, s6, s18
 8009e3c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8009e40:	ee35 3a85 	vadd.f32	s6, s11, s10
 8009e44:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8009e48:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8009e4c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009e50:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8009e54:	ee30 7a68 	vsub.f32	s14, s0, s17
 8009e58:	ee35 8a03 	vadd.f32	s16, s10, s6
 8009e5c:	ee38 0a80 	vadd.f32	s0, s17, s0
 8009e60:	ee73 3a82 	vadd.f32	s7, s7, s4
 8009e64:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8009e68:	ed9d 2a00 	vldr	s4, [sp]
 8009e6c:	eddd 1a01 	vldr	s3, [sp, #4]
 8009e70:	ee35 5a43 	vsub.f32	s10, s10, s6
 8009e74:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8009e78:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8009e7c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8009e80:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009e84:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8009e88:	ee76 5a49 	vsub.f32	s11, s12, s18
 8009e8c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8009e90:	ee39 6a06 	vadd.f32	s12, s18, s12
 8009e94:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8009e98:	ee21 4a84 	vmul.f32	s8, s3, s8
 8009e9c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8009ea0:	ee22 7a07 	vmul.f32	s14, s4, s14
 8009ea4:	ee22 2a08 	vmul.f32	s4, s4, s16
 8009ea8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009eac:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8009eb0:	ee31 1a09 	vadd.f32	s2, s2, s18
 8009eb4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8009eb8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8009ebc:	ee74 0a60 	vsub.f32	s1, s8, s1
 8009ec0:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009ec4:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8009ec8:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8009ecc:	ee72 1a21 	vadd.f32	s3, s4, s3
 8009ed0:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8009ed4:	ee38 2a89 	vadd.f32	s4, s17, s18
 8009ed8:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8009edc:	ee38 8a04 	vadd.f32	s16, s16, s8
 8009ee0:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8009ee4:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8009ee8:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8009eec:	eddd 5a02 	vldr	s11, [sp, #8]
 8009ef0:	edc6 fa00 	vstr	s31, [r6]
 8009ef4:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8009ef8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8009efc:	ee30 0a45 	vsub.f32	s0, s0, s10
 8009f00:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8009f04:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8009f08:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8009f0c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8009f10:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8009f14:	ee25 6a86 	vmul.f32	s12, s11, s12
 8009f18:	ee74 4a89 	vadd.f32	s9, s9, s18
 8009f1c:	ee34 3a43 	vsub.f32	s6, s8, s6
 8009f20:	ee78 8a85 	vadd.f32	s17, s17, s10
 8009f24:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009f28:	44f4      	add	ip, lr
 8009f2a:	45e2      	cmp	sl, ip
 8009f2c:	edc3 3a00 	vstr	s7, [r3]
 8009f30:	edc3 6a01 	vstr	s13, [r3, #4]
 8009f34:	444e      	add	r6, r9
 8009f36:	ed07 1a01 	vstr	s2, [r7, #-4]
 8009f3a:	edc7 0a00 	vstr	s1, [r7]
 8009f3e:	444b      	add	r3, r9
 8009f40:	ed80 2a00 	vstr	s4, [r0]
 8009f44:	edc0 2a01 	vstr	s5, [r0, #4]
 8009f48:	444f      	add	r7, r9
 8009f4a:	edc2 1a00 	vstr	s3, [r2]
 8009f4e:	ed82 7a01 	vstr	s14, [r2, #4]
 8009f52:	4448      	add	r0, r9
 8009f54:	ed85 8a00 	vstr	s16, [r5]
 8009f58:	ed85 0a01 	vstr	s0, [r5, #4]
 8009f5c:	444a      	add	r2, r9
 8009f5e:	edc1 4a00 	vstr	s9, [r1]
 8009f62:	444d      	add	r5, r9
 8009f64:	ed81 3a01 	vstr	s6, [r1, #4]
 8009f68:	edc4 8a00 	vstr	s17, [r4]
 8009f6c:	ed84 6a01 	vstr	s12, [r4, #4]
 8009f70:	4449      	add	r1, r9
 8009f72:	444c      	add	r4, r9
 8009f74:	f63f aeea 	bhi.w	8009d4c <arm_radix8_butterfly_f32+0x318>
 8009f78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f80:	3308      	adds	r3, #8
 8009f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f84:	9b08      	ldr	r3, [sp, #32]
 8009f86:	3308      	adds	r3, #8
 8009f88:	9308      	str	r3, [sp, #32]
 8009f8a:	9b07      	ldr	r3, [sp, #28]
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	9307      	str	r3, [sp, #28]
 8009f90:	9b06      	ldr	r3, [sp, #24]
 8009f92:	3308      	adds	r3, #8
 8009f94:	9306      	str	r3, [sp, #24]
 8009f96:	9b05      	ldr	r3, [sp, #20]
 8009f98:	3308      	adds	r3, #8
 8009f9a:	9305      	str	r3, [sp, #20]
 8009f9c:	9b04      	ldr	r3, [sp, #16]
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	9304      	str	r3, [sp, #16]
 8009fa2:	9b03      	ldr	r3, [sp, #12]
 8009fa4:	3308      	adds	r3, #8
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009faa:	f108 0801 	add.w	r8, r8, #1
 8009fae:	4543      	cmp	r3, r8
 8009fb0:	f47f ae72 	bne.w	8009c98 <arm_radix8_butterfly_f32+0x264>
 8009fb4:	469b      	mov	fp, r3
 8009fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fb8:	00db      	lsls	r3, r3, #3
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	46d1      	mov	r9, sl
 8009fbe:	930e      	str	r3, [sp, #56]	@ 0x38
 8009fc0:	e547      	b.n	8009a52 <arm_radix8_butterfly_f32+0x1e>
 8009fc2:	b013      	add	sp, #76	@ 0x4c
 8009fc4:	ecbd 8b10 	vpop	{d8-d15}
 8009fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fcc <__cvt>:
 8009fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	ec57 6b10 	vmov	r6, r7, d0
 8009fd4:	2f00      	cmp	r7, #0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	4619      	mov	r1, r3
 8009fda:	463b      	mov	r3, r7
 8009fdc:	bfbb      	ittet	lt
 8009fde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009fe2:	461f      	movlt	r7, r3
 8009fe4:	2300      	movge	r3, #0
 8009fe6:	232d      	movlt	r3, #45	@ 0x2d
 8009fe8:	700b      	strb	r3, [r1, #0]
 8009fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009ff0:	4691      	mov	r9, r2
 8009ff2:	f023 0820 	bic.w	r8, r3, #32
 8009ff6:	bfbc      	itt	lt
 8009ff8:	4632      	movlt	r2, r6
 8009ffa:	4616      	movlt	r6, r2
 8009ffc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a000:	d005      	beq.n	800a00e <__cvt+0x42>
 800a002:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a006:	d100      	bne.n	800a00a <__cvt+0x3e>
 800a008:	3401      	adds	r4, #1
 800a00a:	2102      	movs	r1, #2
 800a00c:	e000      	b.n	800a010 <__cvt+0x44>
 800a00e:	2103      	movs	r1, #3
 800a010:	ab03      	add	r3, sp, #12
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	ab02      	add	r3, sp, #8
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	ec47 6b10 	vmov	d0, r6, r7
 800a01c:	4653      	mov	r3, sl
 800a01e:	4622      	mov	r2, r4
 800a020:	f001 f876 	bl	800b110 <_dtoa_r>
 800a024:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a028:	4605      	mov	r5, r0
 800a02a:	d119      	bne.n	800a060 <__cvt+0x94>
 800a02c:	f019 0f01 	tst.w	r9, #1
 800a030:	d00e      	beq.n	800a050 <__cvt+0x84>
 800a032:	eb00 0904 	add.w	r9, r0, r4
 800a036:	2200      	movs	r2, #0
 800a038:	2300      	movs	r3, #0
 800a03a:	4630      	mov	r0, r6
 800a03c:	4639      	mov	r1, r7
 800a03e:	f7f6 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 800a042:	b108      	cbz	r0, 800a048 <__cvt+0x7c>
 800a044:	f8cd 900c 	str.w	r9, [sp, #12]
 800a048:	2230      	movs	r2, #48	@ 0x30
 800a04a:	9b03      	ldr	r3, [sp, #12]
 800a04c:	454b      	cmp	r3, r9
 800a04e:	d31e      	bcc.n	800a08e <__cvt+0xc2>
 800a050:	9b03      	ldr	r3, [sp, #12]
 800a052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a054:	1b5b      	subs	r3, r3, r5
 800a056:	4628      	mov	r0, r5
 800a058:	6013      	str	r3, [r2, #0]
 800a05a:	b004      	add	sp, #16
 800a05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a060:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a064:	eb00 0904 	add.w	r9, r0, r4
 800a068:	d1e5      	bne.n	800a036 <__cvt+0x6a>
 800a06a:	7803      	ldrb	r3, [r0, #0]
 800a06c:	2b30      	cmp	r3, #48	@ 0x30
 800a06e:	d10a      	bne.n	800a086 <__cvt+0xba>
 800a070:	2200      	movs	r2, #0
 800a072:	2300      	movs	r3, #0
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	f7f6 fd26 	bl	8000ac8 <__aeabi_dcmpeq>
 800a07c:	b918      	cbnz	r0, 800a086 <__cvt+0xba>
 800a07e:	f1c4 0401 	rsb	r4, r4, #1
 800a082:	f8ca 4000 	str.w	r4, [sl]
 800a086:	f8da 3000 	ldr.w	r3, [sl]
 800a08a:	4499      	add	r9, r3
 800a08c:	e7d3      	b.n	800a036 <__cvt+0x6a>
 800a08e:	1c59      	adds	r1, r3, #1
 800a090:	9103      	str	r1, [sp, #12]
 800a092:	701a      	strb	r2, [r3, #0]
 800a094:	e7d9      	b.n	800a04a <__cvt+0x7e>

0800a096 <__exponent>:
 800a096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a098:	2900      	cmp	r1, #0
 800a09a:	bfba      	itte	lt
 800a09c:	4249      	neglt	r1, r1
 800a09e:	232d      	movlt	r3, #45	@ 0x2d
 800a0a0:	232b      	movge	r3, #43	@ 0x2b
 800a0a2:	2909      	cmp	r1, #9
 800a0a4:	7002      	strb	r2, [r0, #0]
 800a0a6:	7043      	strb	r3, [r0, #1]
 800a0a8:	dd29      	ble.n	800a0fe <__exponent+0x68>
 800a0aa:	f10d 0307 	add.w	r3, sp, #7
 800a0ae:	461d      	mov	r5, r3
 800a0b0:	270a      	movs	r7, #10
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a0b8:	fb07 1416 	mls	r4, r7, r6, r1
 800a0bc:	3430      	adds	r4, #48	@ 0x30
 800a0be:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	2c63      	cmp	r4, #99	@ 0x63
 800a0c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	dcf1      	bgt.n	800a0b2 <__exponent+0x1c>
 800a0ce:	3130      	adds	r1, #48	@ 0x30
 800a0d0:	1e94      	subs	r4, r2, #2
 800a0d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a0d6:	1c41      	adds	r1, r0, #1
 800a0d8:	4623      	mov	r3, r4
 800a0da:	42ab      	cmp	r3, r5
 800a0dc:	d30a      	bcc.n	800a0f4 <__exponent+0x5e>
 800a0de:	f10d 0309 	add.w	r3, sp, #9
 800a0e2:	1a9b      	subs	r3, r3, r2
 800a0e4:	42ac      	cmp	r4, r5
 800a0e6:	bf88      	it	hi
 800a0e8:	2300      	movhi	r3, #0
 800a0ea:	3302      	adds	r3, #2
 800a0ec:	4403      	add	r3, r0
 800a0ee:	1a18      	subs	r0, r3, r0
 800a0f0:	b003      	add	sp, #12
 800a0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a0f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a0fc:	e7ed      	b.n	800a0da <__exponent+0x44>
 800a0fe:	2330      	movs	r3, #48	@ 0x30
 800a100:	3130      	adds	r1, #48	@ 0x30
 800a102:	7083      	strb	r3, [r0, #2]
 800a104:	70c1      	strb	r1, [r0, #3]
 800a106:	1d03      	adds	r3, r0, #4
 800a108:	e7f1      	b.n	800a0ee <__exponent+0x58>
	...

0800a10c <_printf_float>:
 800a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	b08d      	sub	sp, #52	@ 0x34
 800a112:	460c      	mov	r4, r1
 800a114:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a118:	4616      	mov	r6, r2
 800a11a:	461f      	mov	r7, r3
 800a11c:	4605      	mov	r5, r0
 800a11e:	f000 feef 	bl	800af00 <_localeconv_r>
 800a122:	6803      	ldr	r3, [r0, #0]
 800a124:	9304      	str	r3, [sp, #16]
 800a126:	4618      	mov	r0, r3
 800a128:	f7f6 f8a2 	bl	8000270 <strlen>
 800a12c:	2300      	movs	r3, #0
 800a12e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a130:	f8d8 3000 	ldr.w	r3, [r8]
 800a134:	9005      	str	r0, [sp, #20]
 800a136:	3307      	adds	r3, #7
 800a138:	f023 0307 	bic.w	r3, r3, #7
 800a13c:	f103 0208 	add.w	r2, r3, #8
 800a140:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a144:	f8d4 b000 	ldr.w	fp, [r4]
 800a148:	f8c8 2000 	str.w	r2, [r8]
 800a14c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a150:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a154:	9307      	str	r3, [sp, #28]
 800a156:	f8cd 8018 	str.w	r8, [sp, #24]
 800a15a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a15e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a162:	4b9c      	ldr	r3, [pc, #624]	@ (800a3d4 <_printf_float+0x2c8>)
 800a164:	f04f 32ff 	mov.w	r2, #4294967295
 800a168:	f7f6 fce0 	bl	8000b2c <__aeabi_dcmpun>
 800a16c:	bb70      	cbnz	r0, 800a1cc <_printf_float+0xc0>
 800a16e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a172:	4b98      	ldr	r3, [pc, #608]	@ (800a3d4 <_printf_float+0x2c8>)
 800a174:	f04f 32ff 	mov.w	r2, #4294967295
 800a178:	f7f6 fcba 	bl	8000af0 <__aeabi_dcmple>
 800a17c:	bb30      	cbnz	r0, 800a1cc <_printf_float+0xc0>
 800a17e:	2200      	movs	r2, #0
 800a180:	2300      	movs	r3, #0
 800a182:	4640      	mov	r0, r8
 800a184:	4649      	mov	r1, r9
 800a186:	f7f6 fca9 	bl	8000adc <__aeabi_dcmplt>
 800a18a:	b110      	cbz	r0, 800a192 <_printf_float+0x86>
 800a18c:	232d      	movs	r3, #45	@ 0x2d
 800a18e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a192:	4a91      	ldr	r2, [pc, #580]	@ (800a3d8 <_printf_float+0x2cc>)
 800a194:	4b91      	ldr	r3, [pc, #580]	@ (800a3dc <_printf_float+0x2d0>)
 800a196:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a19a:	bf94      	ite	ls
 800a19c:	4690      	movls	r8, r2
 800a19e:	4698      	movhi	r8, r3
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	f02b 0304 	bic.w	r3, fp, #4
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	f04f 0900 	mov.w	r9, #0
 800a1ae:	9700      	str	r7, [sp, #0]
 800a1b0:	4633      	mov	r3, r6
 800a1b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f000 f9d2 	bl	800a560 <_printf_common>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	f040 808d 	bne.w	800a2dc <_printf_float+0x1d0>
 800a1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c6:	b00d      	add	sp, #52	@ 0x34
 800a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1cc:	4642      	mov	r2, r8
 800a1ce:	464b      	mov	r3, r9
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	f7f6 fcaa 	bl	8000b2c <__aeabi_dcmpun>
 800a1d8:	b140      	cbz	r0, 800a1ec <_printf_float+0xe0>
 800a1da:	464b      	mov	r3, r9
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bfbc      	itt	lt
 800a1e0:	232d      	movlt	r3, #45	@ 0x2d
 800a1e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a1e6:	4a7e      	ldr	r2, [pc, #504]	@ (800a3e0 <_printf_float+0x2d4>)
 800a1e8:	4b7e      	ldr	r3, [pc, #504]	@ (800a3e4 <_printf_float+0x2d8>)
 800a1ea:	e7d4      	b.n	800a196 <_printf_float+0x8a>
 800a1ec:	6863      	ldr	r3, [r4, #4]
 800a1ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a1f2:	9206      	str	r2, [sp, #24]
 800a1f4:	1c5a      	adds	r2, r3, #1
 800a1f6:	d13b      	bne.n	800a270 <_printf_float+0x164>
 800a1f8:	2306      	movs	r3, #6
 800a1fa:	6063      	str	r3, [r4, #4]
 800a1fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a200:	2300      	movs	r3, #0
 800a202:	6022      	str	r2, [r4, #0]
 800a204:	9303      	str	r3, [sp, #12]
 800a206:	ab0a      	add	r3, sp, #40	@ 0x28
 800a208:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a20c:	ab09      	add	r3, sp, #36	@ 0x24
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	6861      	ldr	r1, [r4, #4]
 800a212:	ec49 8b10 	vmov	d0, r8, r9
 800a216:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a21a:	4628      	mov	r0, r5
 800a21c:	f7ff fed6 	bl	8009fcc <__cvt>
 800a220:	9b06      	ldr	r3, [sp, #24]
 800a222:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a224:	2b47      	cmp	r3, #71	@ 0x47
 800a226:	4680      	mov	r8, r0
 800a228:	d129      	bne.n	800a27e <_printf_float+0x172>
 800a22a:	1cc8      	adds	r0, r1, #3
 800a22c:	db02      	blt.n	800a234 <_printf_float+0x128>
 800a22e:	6863      	ldr	r3, [r4, #4]
 800a230:	4299      	cmp	r1, r3
 800a232:	dd41      	ble.n	800a2b8 <_printf_float+0x1ac>
 800a234:	f1aa 0a02 	sub.w	sl, sl, #2
 800a238:	fa5f fa8a 	uxtb.w	sl, sl
 800a23c:	3901      	subs	r1, #1
 800a23e:	4652      	mov	r2, sl
 800a240:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a244:	9109      	str	r1, [sp, #36]	@ 0x24
 800a246:	f7ff ff26 	bl	800a096 <__exponent>
 800a24a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a24c:	1813      	adds	r3, r2, r0
 800a24e:	2a01      	cmp	r2, #1
 800a250:	4681      	mov	r9, r0
 800a252:	6123      	str	r3, [r4, #16]
 800a254:	dc02      	bgt.n	800a25c <_printf_float+0x150>
 800a256:	6822      	ldr	r2, [r4, #0]
 800a258:	07d2      	lsls	r2, r2, #31
 800a25a:	d501      	bpl.n	800a260 <_printf_float+0x154>
 800a25c:	3301      	adds	r3, #1
 800a25e:	6123      	str	r3, [r4, #16]
 800a260:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a264:	2b00      	cmp	r3, #0
 800a266:	d0a2      	beq.n	800a1ae <_printf_float+0xa2>
 800a268:	232d      	movs	r3, #45	@ 0x2d
 800a26a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a26e:	e79e      	b.n	800a1ae <_printf_float+0xa2>
 800a270:	9a06      	ldr	r2, [sp, #24]
 800a272:	2a47      	cmp	r2, #71	@ 0x47
 800a274:	d1c2      	bne.n	800a1fc <_printf_float+0xf0>
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1c0      	bne.n	800a1fc <_printf_float+0xf0>
 800a27a:	2301      	movs	r3, #1
 800a27c:	e7bd      	b.n	800a1fa <_printf_float+0xee>
 800a27e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a282:	d9db      	bls.n	800a23c <_printf_float+0x130>
 800a284:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a288:	d118      	bne.n	800a2bc <_printf_float+0x1b0>
 800a28a:	2900      	cmp	r1, #0
 800a28c:	6863      	ldr	r3, [r4, #4]
 800a28e:	dd0b      	ble.n	800a2a8 <_printf_float+0x19c>
 800a290:	6121      	str	r1, [r4, #16]
 800a292:	b913      	cbnz	r3, 800a29a <_printf_float+0x18e>
 800a294:	6822      	ldr	r2, [r4, #0]
 800a296:	07d0      	lsls	r0, r2, #31
 800a298:	d502      	bpl.n	800a2a0 <_printf_float+0x194>
 800a29a:	3301      	adds	r3, #1
 800a29c:	440b      	add	r3, r1
 800a29e:	6123      	str	r3, [r4, #16]
 800a2a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a2a2:	f04f 0900 	mov.w	r9, #0
 800a2a6:	e7db      	b.n	800a260 <_printf_float+0x154>
 800a2a8:	b913      	cbnz	r3, 800a2b0 <_printf_float+0x1a4>
 800a2aa:	6822      	ldr	r2, [r4, #0]
 800a2ac:	07d2      	lsls	r2, r2, #31
 800a2ae:	d501      	bpl.n	800a2b4 <_printf_float+0x1a8>
 800a2b0:	3302      	adds	r3, #2
 800a2b2:	e7f4      	b.n	800a29e <_printf_float+0x192>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e7f2      	b.n	800a29e <_printf_float+0x192>
 800a2b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a2bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2be:	4299      	cmp	r1, r3
 800a2c0:	db05      	blt.n	800a2ce <_printf_float+0x1c2>
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	6121      	str	r1, [r4, #16]
 800a2c6:	07d8      	lsls	r0, r3, #31
 800a2c8:	d5ea      	bpl.n	800a2a0 <_printf_float+0x194>
 800a2ca:	1c4b      	adds	r3, r1, #1
 800a2cc:	e7e7      	b.n	800a29e <_printf_float+0x192>
 800a2ce:	2900      	cmp	r1, #0
 800a2d0:	bfd4      	ite	le
 800a2d2:	f1c1 0202 	rsble	r2, r1, #2
 800a2d6:	2201      	movgt	r2, #1
 800a2d8:	4413      	add	r3, r2
 800a2da:	e7e0      	b.n	800a29e <_printf_float+0x192>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	055a      	lsls	r2, r3, #21
 800a2e0:	d407      	bmi.n	800a2f2 <_printf_float+0x1e6>
 800a2e2:	6923      	ldr	r3, [r4, #16]
 800a2e4:	4642      	mov	r2, r8
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	d12b      	bne.n	800a348 <_printf_float+0x23c>
 800a2f0:	e767      	b.n	800a1c2 <_printf_float+0xb6>
 800a2f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a2f6:	f240 80dd 	bls.w	800a4b4 <_printf_float+0x3a8>
 800a2fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2fe:	2200      	movs	r2, #0
 800a300:	2300      	movs	r3, #0
 800a302:	f7f6 fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a306:	2800      	cmp	r0, #0
 800a308:	d033      	beq.n	800a372 <_printf_float+0x266>
 800a30a:	4a37      	ldr	r2, [pc, #220]	@ (800a3e8 <_printf_float+0x2dc>)
 800a30c:	2301      	movs	r3, #1
 800a30e:	4631      	mov	r1, r6
 800a310:	4628      	mov	r0, r5
 800a312:	47b8      	blx	r7
 800a314:	3001      	adds	r0, #1
 800a316:	f43f af54 	beq.w	800a1c2 <_printf_float+0xb6>
 800a31a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a31e:	4543      	cmp	r3, r8
 800a320:	db02      	blt.n	800a328 <_printf_float+0x21c>
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	07d8      	lsls	r0, r3, #31
 800a326:	d50f      	bpl.n	800a348 <_printf_float+0x23c>
 800a328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a32c:	4631      	mov	r1, r6
 800a32e:	4628      	mov	r0, r5
 800a330:	47b8      	blx	r7
 800a332:	3001      	adds	r0, #1
 800a334:	f43f af45 	beq.w	800a1c2 <_printf_float+0xb6>
 800a338:	f04f 0900 	mov.w	r9, #0
 800a33c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a340:	f104 0a1a 	add.w	sl, r4, #26
 800a344:	45c8      	cmp	r8, r9
 800a346:	dc09      	bgt.n	800a35c <_printf_float+0x250>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	079b      	lsls	r3, r3, #30
 800a34c:	f100 8103 	bmi.w	800a556 <_printf_float+0x44a>
 800a350:	68e0      	ldr	r0, [r4, #12]
 800a352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a354:	4298      	cmp	r0, r3
 800a356:	bfb8      	it	lt
 800a358:	4618      	movlt	r0, r3
 800a35a:	e734      	b.n	800a1c6 <_printf_float+0xba>
 800a35c:	2301      	movs	r3, #1
 800a35e:	4652      	mov	r2, sl
 800a360:	4631      	mov	r1, r6
 800a362:	4628      	mov	r0, r5
 800a364:	47b8      	blx	r7
 800a366:	3001      	adds	r0, #1
 800a368:	f43f af2b 	beq.w	800a1c2 <_printf_float+0xb6>
 800a36c:	f109 0901 	add.w	r9, r9, #1
 800a370:	e7e8      	b.n	800a344 <_printf_float+0x238>
 800a372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a374:	2b00      	cmp	r3, #0
 800a376:	dc39      	bgt.n	800a3ec <_printf_float+0x2e0>
 800a378:	4a1b      	ldr	r2, [pc, #108]	@ (800a3e8 <_printf_float+0x2dc>)
 800a37a:	2301      	movs	r3, #1
 800a37c:	4631      	mov	r1, r6
 800a37e:	4628      	mov	r0, r5
 800a380:	47b8      	blx	r7
 800a382:	3001      	adds	r0, #1
 800a384:	f43f af1d 	beq.w	800a1c2 <_printf_float+0xb6>
 800a388:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a38c:	ea59 0303 	orrs.w	r3, r9, r3
 800a390:	d102      	bne.n	800a398 <_printf_float+0x28c>
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	07d9      	lsls	r1, r3, #31
 800a396:	d5d7      	bpl.n	800a348 <_printf_float+0x23c>
 800a398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a39c:	4631      	mov	r1, r6
 800a39e:	4628      	mov	r0, r5
 800a3a0:	47b8      	blx	r7
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	f43f af0d 	beq.w	800a1c2 <_printf_float+0xb6>
 800a3a8:	f04f 0a00 	mov.w	sl, #0
 800a3ac:	f104 0b1a 	add.w	fp, r4, #26
 800a3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b2:	425b      	negs	r3, r3
 800a3b4:	4553      	cmp	r3, sl
 800a3b6:	dc01      	bgt.n	800a3bc <_printf_float+0x2b0>
 800a3b8:	464b      	mov	r3, r9
 800a3ba:	e793      	b.n	800a2e4 <_printf_float+0x1d8>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	465a      	mov	r2, fp
 800a3c0:	4631      	mov	r1, r6
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	47b8      	blx	r7
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	f43f aefb 	beq.w	800a1c2 <_printf_float+0xb6>
 800a3cc:	f10a 0a01 	add.w	sl, sl, #1
 800a3d0:	e7ee      	b.n	800a3b0 <_printf_float+0x2a4>
 800a3d2:	bf00      	nop
 800a3d4:	7fefffff 	.word	0x7fefffff
 800a3d8:	0802c680 	.word	0x0802c680
 800a3dc:	0802c684 	.word	0x0802c684
 800a3e0:	0802c688 	.word	0x0802c688
 800a3e4:	0802c68c 	.word	0x0802c68c
 800a3e8:	0802c690 	.word	0x0802c690
 800a3ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a3f2:	4553      	cmp	r3, sl
 800a3f4:	bfa8      	it	ge
 800a3f6:	4653      	movge	r3, sl
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	4699      	mov	r9, r3
 800a3fc:	dc36      	bgt.n	800a46c <_printf_float+0x360>
 800a3fe:	f04f 0b00 	mov.w	fp, #0
 800a402:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a406:	f104 021a 	add.w	r2, r4, #26
 800a40a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a40c:	9306      	str	r3, [sp, #24]
 800a40e:	eba3 0309 	sub.w	r3, r3, r9
 800a412:	455b      	cmp	r3, fp
 800a414:	dc31      	bgt.n	800a47a <_printf_float+0x36e>
 800a416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a418:	459a      	cmp	sl, r3
 800a41a:	dc3a      	bgt.n	800a492 <_printf_float+0x386>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	07da      	lsls	r2, r3, #31
 800a420:	d437      	bmi.n	800a492 <_printf_float+0x386>
 800a422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a424:	ebaa 0903 	sub.w	r9, sl, r3
 800a428:	9b06      	ldr	r3, [sp, #24]
 800a42a:	ebaa 0303 	sub.w	r3, sl, r3
 800a42e:	4599      	cmp	r9, r3
 800a430:	bfa8      	it	ge
 800a432:	4699      	movge	r9, r3
 800a434:	f1b9 0f00 	cmp.w	r9, #0
 800a438:	dc33      	bgt.n	800a4a2 <_printf_float+0x396>
 800a43a:	f04f 0800 	mov.w	r8, #0
 800a43e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a442:	f104 0b1a 	add.w	fp, r4, #26
 800a446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a448:	ebaa 0303 	sub.w	r3, sl, r3
 800a44c:	eba3 0309 	sub.w	r3, r3, r9
 800a450:	4543      	cmp	r3, r8
 800a452:	f77f af79 	ble.w	800a348 <_printf_float+0x23c>
 800a456:	2301      	movs	r3, #1
 800a458:	465a      	mov	r2, fp
 800a45a:	4631      	mov	r1, r6
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	f43f aeae 	beq.w	800a1c2 <_printf_float+0xb6>
 800a466:	f108 0801 	add.w	r8, r8, #1
 800a46a:	e7ec      	b.n	800a446 <_printf_float+0x33a>
 800a46c:	4642      	mov	r2, r8
 800a46e:	4631      	mov	r1, r6
 800a470:	4628      	mov	r0, r5
 800a472:	47b8      	blx	r7
 800a474:	3001      	adds	r0, #1
 800a476:	d1c2      	bne.n	800a3fe <_printf_float+0x2f2>
 800a478:	e6a3      	b.n	800a1c2 <_printf_float+0xb6>
 800a47a:	2301      	movs	r3, #1
 800a47c:	4631      	mov	r1, r6
 800a47e:	4628      	mov	r0, r5
 800a480:	9206      	str	r2, [sp, #24]
 800a482:	47b8      	blx	r7
 800a484:	3001      	adds	r0, #1
 800a486:	f43f ae9c 	beq.w	800a1c2 <_printf_float+0xb6>
 800a48a:	9a06      	ldr	r2, [sp, #24]
 800a48c:	f10b 0b01 	add.w	fp, fp, #1
 800a490:	e7bb      	b.n	800a40a <_printf_float+0x2fe>
 800a492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a496:	4631      	mov	r1, r6
 800a498:	4628      	mov	r0, r5
 800a49a:	47b8      	blx	r7
 800a49c:	3001      	adds	r0, #1
 800a49e:	d1c0      	bne.n	800a422 <_printf_float+0x316>
 800a4a0:	e68f      	b.n	800a1c2 <_printf_float+0xb6>
 800a4a2:	9a06      	ldr	r2, [sp, #24]
 800a4a4:	464b      	mov	r3, r9
 800a4a6:	4442      	add	r2, r8
 800a4a8:	4631      	mov	r1, r6
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	47b8      	blx	r7
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	d1c3      	bne.n	800a43a <_printf_float+0x32e>
 800a4b2:	e686      	b.n	800a1c2 <_printf_float+0xb6>
 800a4b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a4b8:	f1ba 0f01 	cmp.w	sl, #1
 800a4bc:	dc01      	bgt.n	800a4c2 <_printf_float+0x3b6>
 800a4be:	07db      	lsls	r3, r3, #31
 800a4c0:	d536      	bpl.n	800a530 <_printf_float+0x424>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4642      	mov	r2, r8
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	47b8      	blx	r7
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	f43f ae78 	beq.w	800a1c2 <_printf_float+0xb6>
 800a4d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	4628      	mov	r0, r5
 800a4da:	47b8      	blx	r7
 800a4dc:	3001      	adds	r0, #1
 800a4de:	f43f ae70 	beq.w	800a1c2 <_printf_float+0xb6>
 800a4e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ee:	f7f6 faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4f2:	b9c0      	cbnz	r0, 800a526 <_printf_float+0x41a>
 800a4f4:	4653      	mov	r3, sl
 800a4f6:	f108 0201 	add.w	r2, r8, #1
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	47b8      	blx	r7
 800a500:	3001      	adds	r0, #1
 800a502:	d10c      	bne.n	800a51e <_printf_float+0x412>
 800a504:	e65d      	b.n	800a1c2 <_printf_float+0xb6>
 800a506:	2301      	movs	r3, #1
 800a508:	465a      	mov	r2, fp
 800a50a:	4631      	mov	r1, r6
 800a50c:	4628      	mov	r0, r5
 800a50e:	47b8      	blx	r7
 800a510:	3001      	adds	r0, #1
 800a512:	f43f ae56 	beq.w	800a1c2 <_printf_float+0xb6>
 800a516:	f108 0801 	add.w	r8, r8, #1
 800a51a:	45d0      	cmp	r8, sl
 800a51c:	dbf3      	blt.n	800a506 <_printf_float+0x3fa>
 800a51e:	464b      	mov	r3, r9
 800a520:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a524:	e6df      	b.n	800a2e6 <_printf_float+0x1da>
 800a526:	f04f 0800 	mov.w	r8, #0
 800a52a:	f104 0b1a 	add.w	fp, r4, #26
 800a52e:	e7f4      	b.n	800a51a <_printf_float+0x40e>
 800a530:	2301      	movs	r3, #1
 800a532:	4642      	mov	r2, r8
 800a534:	e7e1      	b.n	800a4fa <_printf_float+0x3ee>
 800a536:	2301      	movs	r3, #1
 800a538:	464a      	mov	r2, r9
 800a53a:	4631      	mov	r1, r6
 800a53c:	4628      	mov	r0, r5
 800a53e:	47b8      	blx	r7
 800a540:	3001      	adds	r0, #1
 800a542:	f43f ae3e 	beq.w	800a1c2 <_printf_float+0xb6>
 800a546:	f108 0801 	add.w	r8, r8, #1
 800a54a:	68e3      	ldr	r3, [r4, #12]
 800a54c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a54e:	1a5b      	subs	r3, r3, r1
 800a550:	4543      	cmp	r3, r8
 800a552:	dcf0      	bgt.n	800a536 <_printf_float+0x42a>
 800a554:	e6fc      	b.n	800a350 <_printf_float+0x244>
 800a556:	f04f 0800 	mov.w	r8, #0
 800a55a:	f104 0919 	add.w	r9, r4, #25
 800a55e:	e7f4      	b.n	800a54a <_printf_float+0x43e>

0800a560 <_printf_common>:
 800a560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a564:	4616      	mov	r6, r2
 800a566:	4698      	mov	r8, r3
 800a568:	688a      	ldr	r2, [r1, #8]
 800a56a:	690b      	ldr	r3, [r1, #16]
 800a56c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a570:	4293      	cmp	r3, r2
 800a572:	bfb8      	it	lt
 800a574:	4613      	movlt	r3, r2
 800a576:	6033      	str	r3, [r6, #0]
 800a578:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a57c:	4607      	mov	r7, r0
 800a57e:	460c      	mov	r4, r1
 800a580:	b10a      	cbz	r2, 800a586 <_printf_common+0x26>
 800a582:	3301      	adds	r3, #1
 800a584:	6033      	str	r3, [r6, #0]
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	0699      	lsls	r1, r3, #26
 800a58a:	bf42      	ittt	mi
 800a58c:	6833      	ldrmi	r3, [r6, #0]
 800a58e:	3302      	addmi	r3, #2
 800a590:	6033      	strmi	r3, [r6, #0]
 800a592:	6825      	ldr	r5, [r4, #0]
 800a594:	f015 0506 	ands.w	r5, r5, #6
 800a598:	d106      	bne.n	800a5a8 <_printf_common+0x48>
 800a59a:	f104 0a19 	add.w	sl, r4, #25
 800a59e:	68e3      	ldr	r3, [r4, #12]
 800a5a0:	6832      	ldr	r2, [r6, #0]
 800a5a2:	1a9b      	subs	r3, r3, r2
 800a5a4:	42ab      	cmp	r3, r5
 800a5a6:	dc26      	bgt.n	800a5f6 <_printf_common+0x96>
 800a5a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5ac:	6822      	ldr	r2, [r4, #0]
 800a5ae:	3b00      	subs	r3, #0
 800a5b0:	bf18      	it	ne
 800a5b2:	2301      	movne	r3, #1
 800a5b4:	0692      	lsls	r2, r2, #26
 800a5b6:	d42b      	bmi.n	800a610 <_printf_common+0xb0>
 800a5b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5bc:	4641      	mov	r1, r8
 800a5be:	4638      	mov	r0, r7
 800a5c0:	47c8      	blx	r9
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	d01e      	beq.n	800a604 <_printf_common+0xa4>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	6922      	ldr	r2, [r4, #16]
 800a5ca:	f003 0306 	and.w	r3, r3, #6
 800a5ce:	2b04      	cmp	r3, #4
 800a5d0:	bf02      	ittt	eq
 800a5d2:	68e5      	ldreq	r5, [r4, #12]
 800a5d4:	6833      	ldreq	r3, [r6, #0]
 800a5d6:	1aed      	subeq	r5, r5, r3
 800a5d8:	68a3      	ldr	r3, [r4, #8]
 800a5da:	bf0c      	ite	eq
 800a5dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5e0:	2500      	movne	r5, #0
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	bfc4      	itt	gt
 800a5e6:	1a9b      	subgt	r3, r3, r2
 800a5e8:	18ed      	addgt	r5, r5, r3
 800a5ea:	2600      	movs	r6, #0
 800a5ec:	341a      	adds	r4, #26
 800a5ee:	42b5      	cmp	r5, r6
 800a5f0:	d11a      	bne.n	800a628 <_printf_common+0xc8>
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	e008      	b.n	800a608 <_printf_common+0xa8>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4652      	mov	r2, sl
 800a5fa:	4641      	mov	r1, r8
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	47c8      	blx	r9
 800a600:	3001      	adds	r0, #1
 800a602:	d103      	bne.n	800a60c <_printf_common+0xac>
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60c:	3501      	adds	r5, #1
 800a60e:	e7c6      	b.n	800a59e <_printf_common+0x3e>
 800a610:	18e1      	adds	r1, r4, r3
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	2030      	movs	r0, #48	@ 0x30
 800a616:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a61a:	4422      	add	r2, r4
 800a61c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a620:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a624:	3302      	adds	r3, #2
 800a626:	e7c7      	b.n	800a5b8 <_printf_common+0x58>
 800a628:	2301      	movs	r3, #1
 800a62a:	4622      	mov	r2, r4
 800a62c:	4641      	mov	r1, r8
 800a62e:	4638      	mov	r0, r7
 800a630:	47c8      	blx	r9
 800a632:	3001      	adds	r0, #1
 800a634:	d0e6      	beq.n	800a604 <_printf_common+0xa4>
 800a636:	3601      	adds	r6, #1
 800a638:	e7d9      	b.n	800a5ee <_printf_common+0x8e>
	...

0800a63c <_printf_i>:
 800a63c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a640:	7e0f      	ldrb	r7, [r1, #24]
 800a642:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a644:	2f78      	cmp	r7, #120	@ 0x78
 800a646:	4691      	mov	r9, r2
 800a648:	4680      	mov	r8, r0
 800a64a:	460c      	mov	r4, r1
 800a64c:	469a      	mov	sl, r3
 800a64e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a652:	d807      	bhi.n	800a664 <_printf_i+0x28>
 800a654:	2f62      	cmp	r7, #98	@ 0x62
 800a656:	d80a      	bhi.n	800a66e <_printf_i+0x32>
 800a658:	2f00      	cmp	r7, #0
 800a65a:	f000 80d2 	beq.w	800a802 <_printf_i+0x1c6>
 800a65e:	2f58      	cmp	r7, #88	@ 0x58
 800a660:	f000 80b9 	beq.w	800a7d6 <_printf_i+0x19a>
 800a664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a668:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a66c:	e03a      	b.n	800a6e4 <_printf_i+0xa8>
 800a66e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a672:	2b15      	cmp	r3, #21
 800a674:	d8f6      	bhi.n	800a664 <_printf_i+0x28>
 800a676:	a101      	add	r1, pc, #4	@ (adr r1, 800a67c <_printf_i+0x40>)
 800a678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a67c:	0800a6d5 	.word	0x0800a6d5
 800a680:	0800a6e9 	.word	0x0800a6e9
 800a684:	0800a665 	.word	0x0800a665
 800a688:	0800a665 	.word	0x0800a665
 800a68c:	0800a665 	.word	0x0800a665
 800a690:	0800a665 	.word	0x0800a665
 800a694:	0800a6e9 	.word	0x0800a6e9
 800a698:	0800a665 	.word	0x0800a665
 800a69c:	0800a665 	.word	0x0800a665
 800a6a0:	0800a665 	.word	0x0800a665
 800a6a4:	0800a665 	.word	0x0800a665
 800a6a8:	0800a7e9 	.word	0x0800a7e9
 800a6ac:	0800a713 	.word	0x0800a713
 800a6b0:	0800a7a3 	.word	0x0800a7a3
 800a6b4:	0800a665 	.word	0x0800a665
 800a6b8:	0800a665 	.word	0x0800a665
 800a6bc:	0800a80b 	.word	0x0800a80b
 800a6c0:	0800a665 	.word	0x0800a665
 800a6c4:	0800a713 	.word	0x0800a713
 800a6c8:	0800a665 	.word	0x0800a665
 800a6cc:	0800a665 	.word	0x0800a665
 800a6d0:	0800a7ab 	.word	0x0800a7ab
 800a6d4:	6833      	ldr	r3, [r6, #0]
 800a6d6:	1d1a      	adds	r2, r3, #4
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6032      	str	r2, [r6, #0]
 800a6dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e09d      	b.n	800a824 <_printf_i+0x1e8>
 800a6e8:	6833      	ldr	r3, [r6, #0]
 800a6ea:	6820      	ldr	r0, [r4, #0]
 800a6ec:	1d19      	adds	r1, r3, #4
 800a6ee:	6031      	str	r1, [r6, #0]
 800a6f0:	0606      	lsls	r6, r0, #24
 800a6f2:	d501      	bpl.n	800a6f8 <_printf_i+0xbc>
 800a6f4:	681d      	ldr	r5, [r3, #0]
 800a6f6:	e003      	b.n	800a700 <_printf_i+0xc4>
 800a6f8:	0645      	lsls	r5, r0, #25
 800a6fa:	d5fb      	bpl.n	800a6f4 <_printf_i+0xb8>
 800a6fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a700:	2d00      	cmp	r5, #0
 800a702:	da03      	bge.n	800a70c <_printf_i+0xd0>
 800a704:	232d      	movs	r3, #45	@ 0x2d
 800a706:	426d      	negs	r5, r5
 800a708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a70c:	4859      	ldr	r0, [pc, #356]	@ (800a874 <_printf_i+0x238>)
 800a70e:	230a      	movs	r3, #10
 800a710:	e011      	b.n	800a736 <_printf_i+0xfa>
 800a712:	6821      	ldr	r1, [r4, #0]
 800a714:	6833      	ldr	r3, [r6, #0]
 800a716:	0608      	lsls	r0, r1, #24
 800a718:	f853 5b04 	ldr.w	r5, [r3], #4
 800a71c:	d402      	bmi.n	800a724 <_printf_i+0xe8>
 800a71e:	0649      	lsls	r1, r1, #25
 800a720:	bf48      	it	mi
 800a722:	b2ad      	uxthmi	r5, r5
 800a724:	2f6f      	cmp	r7, #111	@ 0x6f
 800a726:	4853      	ldr	r0, [pc, #332]	@ (800a874 <_printf_i+0x238>)
 800a728:	6033      	str	r3, [r6, #0]
 800a72a:	bf14      	ite	ne
 800a72c:	230a      	movne	r3, #10
 800a72e:	2308      	moveq	r3, #8
 800a730:	2100      	movs	r1, #0
 800a732:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a736:	6866      	ldr	r6, [r4, #4]
 800a738:	60a6      	str	r6, [r4, #8]
 800a73a:	2e00      	cmp	r6, #0
 800a73c:	bfa2      	ittt	ge
 800a73e:	6821      	ldrge	r1, [r4, #0]
 800a740:	f021 0104 	bicge.w	r1, r1, #4
 800a744:	6021      	strge	r1, [r4, #0]
 800a746:	b90d      	cbnz	r5, 800a74c <_printf_i+0x110>
 800a748:	2e00      	cmp	r6, #0
 800a74a:	d04b      	beq.n	800a7e4 <_printf_i+0x1a8>
 800a74c:	4616      	mov	r6, r2
 800a74e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a752:	fb03 5711 	mls	r7, r3, r1, r5
 800a756:	5dc7      	ldrb	r7, [r0, r7]
 800a758:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a75c:	462f      	mov	r7, r5
 800a75e:	42bb      	cmp	r3, r7
 800a760:	460d      	mov	r5, r1
 800a762:	d9f4      	bls.n	800a74e <_printf_i+0x112>
 800a764:	2b08      	cmp	r3, #8
 800a766:	d10b      	bne.n	800a780 <_printf_i+0x144>
 800a768:	6823      	ldr	r3, [r4, #0]
 800a76a:	07df      	lsls	r7, r3, #31
 800a76c:	d508      	bpl.n	800a780 <_printf_i+0x144>
 800a76e:	6923      	ldr	r3, [r4, #16]
 800a770:	6861      	ldr	r1, [r4, #4]
 800a772:	4299      	cmp	r1, r3
 800a774:	bfde      	ittt	le
 800a776:	2330      	movle	r3, #48	@ 0x30
 800a778:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a77c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a780:	1b92      	subs	r2, r2, r6
 800a782:	6122      	str	r2, [r4, #16]
 800a784:	f8cd a000 	str.w	sl, [sp]
 800a788:	464b      	mov	r3, r9
 800a78a:	aa03      	add	r2, sp, #12
 800a78c:	4621      	mov	r1, r4
 800a78e:	4640      	mov	r0, r8
 800a790:	f7ff fee6 	bl	800a560 <_printf_common>
 800a794:	3001      	adds	r0, #1
 800a796:	d14a      	bne.n	800a82e <_printf_i+0x1f2>
 800a798:	f04f 30ff 	mov.w	r0, #4294967295
 800a79c:	b004      	add	sp, #16
 800a79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	f043 0320 	orr.w	r3, r3, #32
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	4833      	ldr	r0, [pc, #204]	@ (800a878 <_printf_i+0x23c>)
 800a7ac:	2778      	movs	r7, #120	@ 0x78
 800a7ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	6831      	ldr	r1, [r6, #0]
 800a7b6:	061f      	lsls	r7, r3, #24
 800a7b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7bc:	d402      	bmi.n	800a7c4 <_printf_i+0x188>
 800a7be:	065f      	lsls	r7, r3, #25
 800a7c0:	bf48      	it	mi
 800a7c2:	b2ad      	uxthmi	r5, r5
 800a7c4:	6031      	str	r1, [r6, #0]
 800a7c6:	07d9      	lsls	r1, r3, #31
 800a7c8:	bf44      	itt	mi
 800a7ca:	f043 0320 	orrmi.w	r3, r3, #32
 800a7ce:	6023      	strmi	r3, [r4, #0]
 800a7d0:	b11d      	cbz	r5, 800a7da <_printf_i+0x19e>
 800a7d2:	2310      	movs	r3, #16
 800a7d4:	e7ac      	b.n	800a730 <_printf_i+0xf4>
 800a7d6:	4827      	ldr	r0, [pc, #156]	@ (800a874 <_printf_i+0x238>)
 800a7d8:	e7e9      	b.n	800a7ae <_printf_i+0x172>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	f023 0320 	bic.w	r3, r3, #32
 800a7e0:	6023      	str	r3, [r4, #0]
 800a7e2:	e7f6      	b.n	800a7d2 <_printf_i+0x196>
 800a7e4:	4616      	mov	r6, r2
 800a7e6:	e7bd      	b.n	800a764 <_printf_i+0x128>
 800a7e8:	6833      	ldr	r3, [r6, #0]
 800a7ea:	6825      	ldr	r5, [r4, #0]
 800a7ec:	6961      	ldr	r1, [r4, #20]
 800a7ee:	1d18      	adds	r0, r3, #4
 800a7f0:	6030      	str	r0, [r6, #0]
 800a7f2:	062e      	lsls	r6, r5, #24
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	d501      	bpl.n	800a7fc <_printf_i+0x1c0>
 800a7f8:	6019      	str	r1, [r3, #0]
 800a7fa:	e002      	b.n	800a802 <_printf_i+0x1c6>
 800a7fc:	0668      	lsls	r0, r5, #25
 800a7fe:	d5fb      	bpl.n	800a7f8 <_printf_i+0x1bc>
 800a800:	8019      	strh	r1, [r3, #0]
 800a802:	2300      	movs	r3, #0
 800a804:	6123      	str	r3, [r4, #16]
 800a806:	4616      	mov	r6, r2
 800a808:	e7bc      	b.n	800a784 <_printf_i+0x148>
 800a80a:	6833      	ldr	r3, [r6, #0]
 800a80c:	1d1a      	adds	r2, r3, #4
 800a80e:	6032      	str	r2, [r6, #0]
 800a810:	681e      	ldr	r6, [r3, #0]
 800a812:	6862      	ldr	r2, [r4, #4]
 800a814:	2100      	movs	r1, #0
 800a816:	4630      	mov	r0, r6
 800a818:	f7f5 fcda 	bl	80001d0 <memchr>
 800a81c:	b108      	cbz	r0, 800a822 <_printf_i+0x1e6>
 800a81e:	1b80      	subs	r0, r0, r6
 800a820:	6060      	str	r0, [r4, #4]
 800a822:	6863      	ldr	r3, [r4, #4]
 800a824:	6123      	str	r3, [r4, #16]
 800a826:	2300      	movs	r3, #0
 800a828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a82c:	e7aa      	b.n	800a784 <_printf_i+0x148>
 800a82e:	6923      	ldr	r3, [r4, #16]
 800a830:	4632      	mov	r2, r6
 800a832:	4649      	mov	r1, r9
 800a834:	4640      	mov	r0, r8
 800a836:	47d0      	blx	sl
 800a838:	3001      	adds	r0, #1
 800a83a:	d0ad      	beq.n	800a798 <_printf_i+0x15c>
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	079b      	lsls	r3, r3, #30
 800a840:	d413      	bmi.n	800a86a <_printf_i+0x22e>
 800a842:	68e0      	ldr	r0, [r4, #12]
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	4298      	cmp	r0, r3
 800a848:	bfb8      	it	lt
 800a84a:	4618      	movlt	r0, r3
 800a84c:	e7a6      	b.n	800a79c <_printf_i+0x160>
 800a84e:	2301      	movs	r3, #1
 800a850:	4632      	mov	r2, r6
 800a852:	4649      	mov	r1, r9
 800a854:	4640      	mov	r0, r8
 800a856:	47d0      	blx	sl
 800a858:	3001      	adds	r0, #1
 800a85a:	d09d      	beq.n	800a798 <_printf_i+0x15c>
 800a85c:	3501      	adds	r5, #1
 800a85e:	68e3      	ldr	r3, [r4, #12]
 800a860:	9903      	ldr	r1, [sp, #12]
 800a862:	1a5b      	subs	r3, r3, r1
 800a864:	42ab      	cmp	r3, r5
 800a866:	dcf2      	bgt.n	800a84e <_printf_i+0x212>
 800a868:	e7eb      	b.n	800a842 <_printf_i+0x206>
 800a86a:	2500      	movs	r5, #0
 800a86c:	f104 0619 	add.w	r6, r4, #25
 800a870:	e7f5      	b.n	800a85e <_printf_i+0x222>
 800a872:	bf00      	nop
 800a874:	0802c692 	.word	0x0802c692
 800a878:	0802c6a3 	.word	0x0802c6a3

0800a87c <_scanf_float>:
 800a87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a880:	b087      	sub	sp, #28
 800a882:	4617      	mov	r7, r2
 800a884:	9303      	str	r3, [sp, #12]
 800a886:	688b      	ldr	r3, [r1, #8]
 800a888:	1e5a      	subs	r2, r3, #1
 800a88a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a88e:	bf81      	itttt	hi
 800a890:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a894:	eb03 0b05 	addhi.w	fp, r3, r5
 800a898:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a89c:	608b      	strhi	r3, [r1, #8]
 800a89e:	680b      	ldr	r3, [r1, #0]
 800a8a0:	460a      	mov	r2, r1
 800a8a2:	f04f 0500 	mov.w	r5, #0
 800a8a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a8aa:	f842 3b1c 	str.w	r3, [r2], #28
 800a8ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a8b2:	4680      	mov	r8, r0
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	bf98      	it	ls
 800a8b8:	f04f 0b00 	movls.w	fp, #0
 800a8bc:	9201      	str	r2, [sp, #4]
 800a8be:	4616      	mov	r6, r2
 800a8c0:	46aa      	mov	sl, r5
 800a8c2:	46a9      	mov	r9, r5
 800a8c4:	9502      	str	r5, [sp, #8]
 800a8c6:	68a2      	ldr	r2, [r4, #8]
 800a8c8:	b152      	cbz	r2, 800a8e0 <_scanf_float+0x64>
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	2b4e      	cmp	r3, #78	@ 0x4e
 800a8d0:	d864      	bhi.n	800a99c <_scanf_float+0x120>
 800a8d2:	2b40      	cmp	r3, #64	@ 0x40
 800a8d4:	d83c      	bhi.n	800a950 <_scanf_float+0xd4>
 800a8d6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a8da:	b2c8      	uxtb	r0, r1
 800a8dc:	280e      	cmp	r0, #14
 800a8de:	d93a      	bls.n	800a956 <_scanf_float+0xda>
 800a8e0:	f1b9 0f00 	cmp.w	r9, #0
 800a8e4:	d003      	beq.n	800a8ee <_scanf_float+0x72>
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8f2:	f1ba 0f01 	cmp.w	sl, #1
 800a8f6:	f200 8117 	bhi.w	800ab28 <_scanf_float+0x2ac>
 800a8fa:	9b01      	ldr	r3, [sp, #4]
 800a8fc:	429e      	cmp	r6, r3
 800a8fe:	f200 8108 	bhi.w	800ab12 <_scanf_float+0x296>
 800a902:	2001      	movs	r0, #1
 800a904:	b007      	add	sp, #28
 800a906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a90e:	2a0d      	cmp	r2, #13
 800a910:	d8e6      	bhi.n	800a8e0 <_scanf_float+0x64>
 800a912:	a101      	add	r1, pc, #4	@ (adr r1, 800a918 <_scanf_float+0x9c>)
 800a914:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a918:	0800aa5f 	.word	0x0800aa5f
 800a91c:	0800a8e1 	.word	0x0800a8e1
 800a920:	0800a8e1 	.word	0x0800a8e1
 800a924:	0800a8e1 	.word	0x0800a8e1
 800a928:	0800aabf 	.word	0x0800aabf
 800a92c:	0800aa97 	.word	0x0800aa97
 800a930:	0800a8e1 	.word	0x0800a8e1
 800a934:	0800a8e1 	.word	0x0800a8e1
 800a938:	0800aa6d 	.word	0x0800aa6d
 800a93c:	0800a8e1 	.word	0x0800a8e1
 800a940:	0800a8e1 	.word	0x0800a8e1
 800a944:	0800a8e1 	.word	0x0800a8e1
 800a948:	0800a8e1 	.word	0x0800a8e1
 800a94c:	0800aa25 	.word	0x0800aa25
 800a950:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a954:	e7db      	b.n	800a90e <_scanf_float+0x92>
 800a956:	290e      	cmp	r1, #14
 800a958:	d8c2      	bhi.n	800a8e0 <_scanf_float+0x64>
 800a95a:	a001      	add	r0, pc, #4	@ (adr r0, 800a960 <_scanf_float+0xe4>)
 800a95c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a960:	0800aa15 	.word	0x0800aa15
 800a964:	0800a8e1 	.word	0x0800a8e1
 800a968:	0800aa15 	.word	0x0800aa15
 800a96c:	0800aaab 	.word	0x0800aaab
 800a970:	0800a8e1 	.word	0x0800a8e1
 800a974:	0800a9bd 	.word	0x0800a9bd
 800a978:	0800a9fb 	.word	0x0800a9fb
 800a97c:	0800a9fb 	.word	0x0800a9fb
 800a980:	0800a9fb 	.word	0x0800a9fb
 800a984:	0800a9fb 	.word	0x0800a9fb
 800a988:	0800a9fb 	.word	0x0800a9fb
 800a98c:	0800a9fb 	.word	0x0800a9fb
 800a990:	0800a9fb 	.word	0x0800a9fb
 800a994:	0800a9fb 	.word	0x0800a9fb
 800a998:	0800a9fb 	.word	0x0800a9fb
 800a99c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a99e:	d809      	bhi.n	800a9b4 <_scanf_float+0x138>
 800a9a0:	2b60      	cmp	r3, #96	@ 0x60
 800a9a2:	d8b2      	bhi.n	800a90a <_scanf_float+0x8e>
 800a9a4:	2b54      	cmp	r3, #84	@ 0x54
 800a9a6:	d07b      	beq.n	800aaa0 <_scanf_float+0x224>
 800a9a8:	2b59      	cmp	r3, #89	@ 0x59
 800a9aa:	d199      	bne.n	800a8e0 <_scanf_float+0x64>
 800a9ac:	2d07      	cmp	r5, #7
 800a9ae:	d197      	bne.n	800a8e0 <_scanf_float+0x64>
 800a9b0:	2508      	movs	r5, #8
 800a9b2:	e02c      	b.n	800aa0e <_scanf_float+0x192>
 800a9b4:	2b74      	cmp	r3, #116	@ 0x74
 800a9b6:	d073      	beq.n	800aaa0 <_scanf_float+0x224>
 800a9b8:	2b79      	cmp	r3, #121	@ 0x79
 800a9ba:	e7f6      	b.n	800a9aa <_scanf_float+0x12e>
 800a9bc:	6821      	ldr	r1, [r4, #0]
 800a9be:	05c8      	lsls	r0, r1, #23
 800a9c0:	d51b      	bpl.n	800a9fa <_scanf_float+0x17e>
 800a9c2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a9c6:	6021      	str	r1, [r4, #0]
 800a9c8:	f109 0901 	add.w	r9, r9, #1
 800a9cc:	f1bb 0f00 	cmp.w	fp, #0
 800a9d0:	d003      	beq.n	800a9da <_scanf_float+0x15e>
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9d8:	60a2      	str	r2, [r4, #8]
 800a9da:	68a3      	ldr	r3, [r4, #8]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	60a3      	str	r3, [r4, #8]
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	6123      	str	r3, [r4, #16]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	607b      	str	r3, [r7, #4]
 800a9ee:	f340 8087 	ble.w	800ab00 <_scanf_float+0x284>
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	e765      	b.n	800a8c6 <_scanf_float+0x4a>
 800a9fa:	eb1a 0105 	adds.w	r1, sl, r5
 800a9fe:	f47f af6f 	bne.w	800a8e0 <_scanf_float+0x64>
 800aa02:	6822      	ldr	r2, [r4, #0]
 800aa04:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800aa08:	6022      	str	r2, [r4, #0]
 800aa0a:	460d      	mov	r5, r1
 800aa0c:	468a      	mov	sl, r1
 800aa0e:	f806 3b01 	strb.w	r3, [r6], #1
 800aa12:	e7e2      	b.n	800a9da <_scanf_float+0x15e>
 800aa14:	6822      	ldr	r2, [r4, #0]
 800aa16:	0610      	lsls	r0, r2, #24
 800aa18:	f57f af62 	bpl.w	800a8e0 <_scanf_float+0x64>
 800aa1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aa20:	6022      	str	r2, [r4, #0]
 800aa22:	e7f4      	b.n	800aa0e <_scanf_float+0x192>
 800aa24:	f1ba 0f00 	cmp.w	sl, #0
 800aa28:	d10e      	bne.n	800aa48 <_scanf_float+0x1cc>
 800aa2a:	f1b9 0f00 	cmp.w	r9, #0
 800aa2e:	d10e      	bne.n	800aa4e <_scanf_float+0x1d2>
 800aa30:	6822      	ldr	r2, [r4, #0]
 800aa32:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aa36:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aa3a:	d108      	bne.n	800aa4e <_scanf_float+0x1d2>
 800aa3c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa40:	6022      	str	r2, [r4, #0]
 800aa42:	f04f 0a01 	mov.w	sl, #1
 800aa46:	e7e2      	b.n	800aa0e <_scanf_float+0x192>
 800aa48:	f1ba 0f02 	cmp.w	sl, #2
 800aa4c:	d055      	beq.n	800aafa <_scanf_float+0x27e>
 800aa4e:	2d01      	cmp	r5, #1
 800aa50:	d002      	beq.n	800aa58 <_scanf_float+0x1dc>
 800aa52:	2d04      	cmp	r5, #4
 800aa54:	f47f af44 	bne.w	800a8e0 <_scanf_float+0x64>
 800aa58:	3501      	adds	r5, #1
 800aa5a:	b2ed      	uxtb	r5, r5
 800aa5c:	e7d7      	b.n	800aa0e <_scanf_float+0x192>
 800aa5e:	f1ba 0f01 	cmp.w	sl, #1
 800aa62:	f47f af3d 	bne.w	800a8e0 <_scanf_float+0x64>
 800aa66:	f04f 0a02 	mov.w	sl, #2
 800aa6a:	e7d0      	b.n	800aa0e <_scanf_float+0x192>
 800aa6c:	b97d      	cbnz	r5, 800aa8e <_scanf_float+0x212>
 800aa6e:	f1b9 0f00 	cmp.w	r9, #0
 800aa72:	f47f af38 	bne.w	800a8e6 <_scanf_float+0x6a>
 800aa76:	6822      	ldr	r2, [r4, #0]
 800aa78:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aa7c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aa80:	f040 8108 	bne.w	800ac94 <_scanf_float+0x418>
 800aa84:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa88:	6022      	str	r2, [r4, #0]
 800aa8a:	2501      	movs	r5, #1
 800aa8c:	e7bf      	b.n	800aa0e <_scanf_float+0x192>
 800aa8e:	2d03      	cmp	r5, #3
 800aa90:	d0e2      	beq.n	800aa58 <_scanf_float+0x1dc>
 800aa92:	2d05      	cmp	r5, #5
 800aa94:	e7de      	b.n	800aa54 <_scanf_float+0x1d8>
 800aa96:	2d02      	cmp	r5, #2
 800aa98:	f47f af22 	bne.w	800a8e0 <_scanf_float+0x64>
 800aa9c:	2503      	movs	r5, #3
 800aa9e:	e7b6      	b.n	800aa0e <_scanf_float+0x192>
 800aaa0:	2d06      	cmp	r5, #6
 800aaa2:	f47f af1d 	bne.w	800a8e0 <_scanf_float+0x64>
 800aaa6:	2507      	movs	r5, #7
 800aaa8:	e7b1      	b.n	800aa0e <_scanf_float+0x192>
 800aaaa:	6822      	ldr	r2, [r4, #0]
 800aaac:	0591      	lsls	r1, r2, #22
 800aaae:	f57f af17 	bpl.w	800a8e0 <_scanf_float+0x64>
 800aab2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aab6:	6022      	str	r2, [r4, #0]
 800aab8:	f8cd 9008 	str.w	r9, [sp, #8]
 800aabc:	e7a7      	b.n	800aa0e <_scanf_float+0x192>
 800aabe:	6822      	ldr	r2, [r4, #0]
 800aac0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800aac4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aac8:	d006      	beq.n	800aad8 <_scanf_float+0x25c>
 800aaca:	0550      	lsls	r0, r2, #21
 800aacc:	f57f af08 	bpl.w	800a8e0 <_scanf_float+0x64>
 800aad0:	f1b9 0f00 	cmp.w	r9, #0
 800aad4:	f000 80de 	beq.w	800ac94 <_scanf_float+0x418>
 800aad8:	0591      	lsls	r1, r2, #22
 800aada:	bf58      	it	pl
 800aadc:	9902      	ldrpl	r1, [sp, #8]
 800aade:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aae2:	bf58      	it	pl
 800aae4:	eba9 0101 	subpl.w	r1, r9, r1
 800aae8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aaec:	bf58      	it	pl
 800aaee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aaf2:	6022      	str	r2, [r4, #0]
 800aaf4:	f04f 0900 	mov.w	r9, #0
 800aaf8:	e789      	b.n	800aa0e <_scanf_float+0x192>
 800aafa:	f04f 0a03 	mov.w	sl, #3
 800aafe:	e786      	b.n	800aa0e <_scanf_float+0x192>
 800ab00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ab04:	4639      	mov	r1, r7
 800ab06:	4640      	mov	r0, r8
 800ab08:	4798      	blx	r3
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	f43f aedb 	beq.w	800a8c6 <_scanf_float+0x4a>
 800ab10:	e6e6      	b.n	800a8e0 <_scanf_float+0x64>
 800ab12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab1a:	463a      	mov	r2, r7
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	4798      	blx	r3
 800ab20:	6923      	ldr	r3, [r4, #16]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	6123      	str	r3, [r4, #16]
 800ab26:	e6e8      	b.n	800a8fa <_scanf_float+0x7e>
 800ab28:	1e6b      	subs	r3, r5, #1
 800ab2a:	2b06      	cmp	r3, #6
 800ab2c:	d824      	bhi.n	800ab78 <_scanf_float+0x2fc>
 800ab2e:	2d02      	cmp	r5, #2
 800ab30:	d836      	bhi.n	800aba0 <_scanf_float+0x324>
 800ab32:	9b01      	ldr	r3, [sp, #4]
 800ab34:	429e      	cmp	r6, r3
 800ab36:	f67f aee4 	bls.w	800a902 <_scanf_float+0x86>
 800ab3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab42:	463a      	mov	r2, r7
 800ab44:	4640      	mov	r0, r8
 800ab46:	4798      	blx	r3
 800ab48:	6923      	ldr	r3, [r4, #16]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	6123      	str	r3, [r4, #16]
 800ab4e:	e7f0      	b.n	800ab32 <_scanf_float+0x2b6>
 800ab50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab54:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ab58:	463a      	mov	r2, r7
 800ab5a:	4640      	mov	r0, r8
 800ab5c:	4798      	blx	r3
 800ab5e:	6923      	ldr	r3, [r4, #16]
 800ab60:	3b01      	subs	r3, #1
 800ab62:	6123      	str	r3, [r4, #16]
 800ab64:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab68:	fa5f fa8a 	uxtb.w	sl, sl
 800ab6c:	f1ba 0f02 	cmp.w	sl, #2
 800ab70:	d1ee      	bne.n	800ab50 <_scanf_float+0x2d4>
 800ab72:	3d03      	subs	r5, #3
 800ab74:	b2ed      	uxtb	r5, r5
 800ab76:	1b76      	subs	r6, r6, r5
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	05da      	lsls	r2, r3, #23
 800ab7c:	d530      	bpl.n	800abe0 <_scanf_float+0x364>
 800ab7e:	055b      	lsls	r3, r3, #21
 800ab80:	d511      	bpl.n	800aba6 <_scanf_float+0x32a>
 800ab82:	9b01      	ldr	r3, [sp, #4]
 800ab84:	429e      	cmp	r6, r3
 800ab86:	f67f aebc 	bls.w	800a902 <_scanf_float+0x86>
 800ab8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab92:	463a      	mov	r2, r7
 800ab94:	4640      	mov	r0, r8
 800ab96:	4798      	blx	r3
 800ab98:	6923      	ldr	r3, [r4, #16]
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	6123      	str	r3, [r4, #16]
 800ab9e:	e7f0      	b.n	800ab82 <_scanf_float+0x306>
 800aba0:	46aa      	mov	sl, r5
 800aba2:	46b3      	mov	fp, r6
 800aba4:	e7de      	b.n	800ab64 <_scanf_float+0x2e8>
 800aba6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800abaa:	6923      	ldr	r3, [r4, #16]
 800abac:	2965      	cmp	r1, #101	@ 0x65
 800abae:	f103 33ff 	add.w	r3, r3, #4294967295
 800abb2:	f106 35ff 	add.w	r5, r6, #4294967295
 800abb6:	6123      	str	r3, [r4, #16]
 800abb8:	d00c      	beq.n	800abd4 <_scanf_float+0x358>
 800abba:	2945      	cmp	r1, #69	@ 0x45
 800abbc:	d00a      	beq.n	800abd4 <_scanf_float+0x358>
 800abbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800abc2:	463a      	mov	r2, r7
 800abc4:	4640      	mov	r0, r8
 800abc6:	4798      	blx	r3
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800abce:	3b01      	subs	r3, #1
 800abd0:	1eb5      	subs	r5, r6, #2
 800abd2:	6123      	str	r3, [r4, #16]
 800abd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800abd8:	463a      	mov	r2, r7
 800abda:	4640      	mov	r0, r8
 800abdc:	4798      	blx	r3
 800abde:	462e      	mov	r6, r5
 800abe0:	6822      	ldr	r2, [r4, #0]
 800abe2:	f012 0210 	ands.w	r2, r2, #16
 800abe6:	d001      	beq.n	800abec <_scanf_float+0x370>
 800abe8:	2000      	movs	r0, #0
 800abea:	e68b      	b.n	800a904 <_scanf_float+0x88>
 800abec:	7032      	strb	r2, [r6, #0]
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800abf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abf8:	d11c      	bne.n	800ac34 <_scanf_float+0x3b8>
 800abfa:	9b02      	ldr	r3, [sp, #8]
 800abfc:	454b      	cmp	r3, r9
 800abfe:	eba3 0209 	sub.w	r2, r3, r9
 800ac02:	d123      	bne.n	800ac4c <_scanf_float+0x3d0>
 800ac04:	9901      	ldr	r1, [sp, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	4640      	mov	r0, r8
 800ac0a:	f002 fbf9 	bl	800d400 <_strtod_r>
 800ac0e:	9b03      	ldr	r3, [sp, #12]
 800ac10:	6821      	ldr	r1, [r4, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f011 0f02 	tst.w	r1, #2
 800ac18:	ec57 6b10 	vmov	r6, r7, d0
 800ac1c:	f103 0204 	add.w	r2, r3, #4
 800ac20:	d01f      	beq.n	800ac62 <_scanf_float+0x3e6>
 800ac22:	9903      	ldr	r1, [sp, #12]
 800ac24:	600a      	str	r2, [r1, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	e9c3 6700 	strd	r6, r7, [r3]
 800ac2c:	68e3      	ldr	r3, [r4, #12]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	60e3      	str	r3, [r4, #12]
 800ac32:	e7d9      	b.n	800abe8 <_scanf_float+0x36c>
 800ac34:	9b04      	ldr	r3, [sp, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d0e4      	beq.n	800ac04 <_scanf_float+0x388>
 800ac3a:	9905      	ldr	r1, [sp, #20]
 800ac3c:	230a      	movs	r3, #10
 800ac3e:	3101      	adds	r1, #1
 800ac40:	4640      	mov	r0, r8
 800ac42:	f002 fc5d 	bl	800d500 <_strtol_r>
 800ac46:	9b04      	ldr	r3, [sp, #16]
 800ac48:	9e05      	ldr	r6, [sp, #20]
 800ac4a:	1ac2      	subs	r2, r0, r3
 800ac4c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ac50:	429e      	cmp	r6, r3
 800ac52:	bf28      	it	cs
 800ac54:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ac58:	4910      	ldr	r1, [pc, #64]	@ (800ac9c <_scanf_float+0x420>)
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f000 f8e4 	bl	800ae28 <siprintf>
 800ac60:	e7d0      	b.n	800ac04 <_scanf_float+0x388>
 800ac62:	f011 0f04 	tst.w	r1, #4
 800ac66:	9903      	ldr	r1, [sp, #12]
 800ac68:	600a      	str	r2, [r1, #0]
 800ac6a:	d1dc      	bne.n	800ac26 <_scanf_float+0x3aa>
 800ac6c:	681d      	ldr	r5, [r3, #0]
 800ac6e:	4632      	mov	r2, r6
 800ac70:	463b      	mov	r3, r7
 800ac72:	4630      	mov	r0, r6
 800ac74:	4639      	mov	r1, r7
 800ac76:	f7f5 ff59 	bl	8000b2c <__aeabi_dcmpun>
 800ac7a:	b128      	cbz	r0, 800ac88 <_scanf_float+0x40c>
 800ac7c:	4808      	ldr	r0, [pc, #32]	@ (800aca0 <_scanf_float+0x424>)
 800ac7e:	f000 f9b7 	bl	800aff0 <nanf>
 800ac82:	ed85 0a00 	vstr	s0, [r5]
 800ac86:	e7d1      	b.n	800ac2c <_scanf_float+0x3b0>
 800ac88:	4630      	mov	r0, r6
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	f7f5 ffac 	bl	8000be8 <__aeabi_d2f>
 800ac90:	6028      	str	r0, [r5, #0]
 800ac92:	e7cb      	b.n	800ac2c <_scanf_float+0x3b0>
 800ac94:	f04f 0900 	mov.w	r9, #0
 800ac98:	e629      	b.n	800a8ee <_scanf_float+0x72>
 800ac9a:	bf00      	nop
 800ac9c:	0802c6b4 	.word	0x0802c6b4
 800aca0:	0802ca4d 	.word	0x0802ca4d

0800aca4 <std>:
 800aca4:	2300      	movs	r3, #0
 800aca6:	b510      	push	{r4, lr}
 800aca8:	4604      	mov	r4, r0
 800acaa:	e9c0 3300 	strd	r3, r3, [r0]
 800acae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acb2:	6083      	str	r3, [r0, #8]
 800acb4:	8181      	strh	r1, [r0, #12]
 800acb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800acb8:	81c2      	strh	r2, [r0, #14]
 800acba:	6183      	str	r3, [r0, #24]
 800acbc:	4619      	mov	r1, r3
 800acbe:	2208      	movs	r2, #8
 800acc0:	305c      	adds	r0, #92	@ 0x5c
 800acc2:	f000 f914 	bl	800aeee <memset>
 800acc6:	4b0d      	ldr	r3, [pc, #52]	@ (800acfc <std+0x58>)
 800acc8:	6263      	str	r3, [r4, #36]	@ 0x24
 800acca:	4b0d      	ldr	r3, [pc, #52]	@ (800ad00 <std+0x5c>)
 800accc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acce:	4b0d      	ldr	r3, [pc, #52]	@ (800ad04 <std+0x60>)
 800acd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ad08 <std+0x64>)
 800acd4:	6323      	str	r3, [r4, #48]	@ 0x30
 800acd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ad0c <std+0x68>)
 800acd8:	6224      	str	r4, [r4, #32]
 800acda:	429c      	cmp	r4, r3
 800acdc:	d006      	beq.n	800acec <std+0x48>
 800acde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ace2:	4294      	cmp	r4, r2
 800ace4:	d002      	beq.n	800acec <std+0x48>
 800ace6:	33d0      	adds	r3, #208	@ 0xd0
 800ace8:	429c      	cmp	r4, r3
 800acea:	d105      	bne.n	800acf8 <std+0x54>
 800acec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800acf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf4:	f000 b978 	b.w	800afe8 <__retarget_lock_init_recursive>
 800acf8:	bd10      	pop	{r4, pc}
 800acfa:	bf00      	nop
 800acfc:	0800ae69 	.word	0x0800ae69
 800ad00:	0800ae8b 	.word	0x0800ae8b
 800ad04:	0800aec3 	.word	0x0800aec3
 800ad08:	0800aee7 	.word	0x0800aee7
 800ad0c:	20002dfc 	.word	0x20002dfc

0800ad10 <stdio_exit_handler>:
 800ad10:	4a02      	ldr	r2, [pc, #8]	@ (800ad1c <stdio_exit_handler+0xc>)
 800ad12:	4903      	ldr	r1, [pc, #12]	@ (800ad20 <stdio_exit_handler+0x10>)
 800ad14:	4803      	ldr	r0, [pc, #12]	@ (800ad24 <stdio_exit_handler+0x14>)
 800ad16:	f000 b869 	b.w	800adec <_fwalk_sglue>
 800ad1a:	bf00      	nop
 800ad1c:	20000444 	.word	0x20000444
 800ad20:	0800d8bd 	.word	0x0800d8bd
 800ad24:	20000454 	.word	0x20000454

0800ad28 <cleanup_stdio>:
 800ad28:	6841      	ldr	r1, [r0, #4]
 800ad2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad5c <cleanup_stdio+0x34>)
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	b510      	push	{r4, lr}
 800ad30:	4604      	mov	r4, r0
 800ad32:	d001      	beq.n	800ad38 <cleanup_stdio+0x10>
 800ad34:	f002 fdc2 	bl	800d8bc <_fflush_r>
 800ad38:	68a1      	ldr	r1, [r4, #8]
 800ad3a:	4b09      	ldr	r3, [pc, #36]	@ (800ad60 <cleanup_stdio+0x38>)
 800ad3c:	4299      	cmp	r1, r3
 800ad3e:	d002      	beq.n	800ad46 <cleanup_stdio+0x1e>
 800ad40:	4620      	mov	r0, r4
 800ad42:	f002 fdbb 	bl	800d8bc <_fflush_r>
 800ad46:	68e1      	ldr	r1, [r4, #12]
 800ad48:	4b06      	ldr	r3, [pc, #24]	@ (800ad64 <cleanup_stdio+0x3c>)
 800ad4a:	4299      	cmp	r1, r3
 800ad4c:	d004      	beq.n	800ad58 <cleanup_stdio+0x30>
 800ad4e:	4620      	mov	r0, r4
 800ad50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad54:	f002 bdb2 	b.w	800d8bc <_fflush_r>
 800ad58:	bd10      	pop	{r4, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20002dfc 	.word	0x20002dfc
 800ad60:	20002e64 	.word	0x20002e64
 800ad64:	20002ecc 	.word	0x20002ecc

0800ad68 <global_stdio_init.part.0>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad98 <global_stdio_init.part.0+0x30>)
 800ad6c:	4c0b      	ldr	r4, [pc, #44]	@ (800ad9c <global_stdio_init.part.0+0x34>)
 800ad6e:	4a0c      	ldr	r2, [pc, #48]	@ (800ada0 <global_stdio_init.part.0+0x38>)
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	4620      	mov	r0, r4
 800ad74:	2200      	movs	r2, #0
 800ad76:	2104      	movs	r1, #4
 800ad78:	f7ff ff94 	bl	800aca4 <std>
 800ad7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad80:	2201      	movs	r2, #1
 800ad82:	2109      	movs	r1, #9
 800ad84:	f7ff ff8e 	bl	800aca4 <std>
 800ad88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad92:	2112      	movs	r1, #18
 800ad94:	f7ff bf86 	b.w	800aca4 <std>
 800ad98:	20002f34 	.word	0x20002f34
 800ad9c:	20002dfc 	.word	0x20002dfc
 800ada0:	0800ad11 	.word	0x0800ad11

0800ada4 <__sfp_lock_acquire>:
 800ada4:	4801      	ldr	r0, [pc, #4]	@ (800adac <__sfp_lock_acquire+0x8>)
 800ada6:	f000 b920 	b.w	800afea <__retarget_lock_acquire_recursive>
 800adaa:	bf00      	nop
 800adac:	20002f3d 	.word	0x20002f3d

0800adb0 <__sfp_lock_release>:
 800adb0:	4801      	ldr	r0, [pc, #4]	@ (800adb8 <__sfp_lock_release+0x8>)
 800adb2:	f000 b91b 	b.w	800afec <__retarget_lock_release_recursive>
 800adb6:	bf00      	nop
 800adb8:	20002f3d 	.word	0x20002f3d

0800adbc <__sinit>:
 800adbc:	b510      	push	{r4, lr}
 800adbe:	4604      	mov	r4, r0
 800adc0:	f7ff fff0 	bl	800ada4 <__sfp_lock_acquire>
 800adc4:	6a23      	ldr	r3, [r4, #32]
 800adc6:	b11b      	cbz	r3, 800add0 <__sinit+0x14>
 800adc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adcc:	f7ff bff0 	b.w	800adb0 <__sfp_lock_release>
 800add0:	4b04      	ldr	r3, [pc, #16]	@ (800ade4 <__sinit+0x28>)
 800add2:	6223      	str	r3, [r4, #32]
 800add4:	4b04      	ldr	r3, [pc, #16]	@ (800ade8 <__sinit+0x2c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1f5      	bne.n	800adc8 <__sinit+0xc>
 800addc:	f7ff ffc4 	bl	800ad68 <global_stdio_init.part.0>
 800ade0:	e7f2      	b.n	800adc8 <__sinit+0xc>
 800ade2:	bf00      	nop
 800ade4:	0800ad29 	.word	0x0800ad29
 800ade8:	20002f34 	.word	0x20002f34

0800adec <_fwalk_sglue>:
 800adec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf0:	4607      	mov	r7, r0
 800adf2:	4688      	mov	r8, r1
 800adf4:	4614      	mov	r4, r2
 800adf6:	2600      	movs	r6, #0
 800adf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adfc:	f1b9 0901 	subs.w	r9, r9, #1
 800ae00:	d505      	bpl.n	800ae0e <_fwalk_sglue+0x22>
 800ae02:	6824      	ldr	r4, [r4, #0]
 800ae04:	2c00      	cmp	r4, #0
 800ae06:	d1f7      	bne.n	800adf8 <_fwalk_sglue+0xc>
 800ae08:	4630      	mov	r0, r6
 800ae0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d907      	bls.n	800ae24 <_fwalk_sglue+0x38>
 800ae14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	d003      	beq.n	800ae24 <_fwalk_sglue+0x38>
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	4638      	mov	r0, r7
 800ae20:	47c0      	blx	r8
 800ae22:	4306      	orrs	r6, r0
 800ae24:	3568      	adds	r5, #104	@ 0x68
 800ae26:	e7e9      	b.n	800adfc <_fwalk_sglue+0x10>

0800ae28 <siprintf>:
 800ae28:	b40e      	push	{r1, r2, r3}
 800ae2a:	b500      	push	{lr}
 800ae2c:	b09c      	sub	sp, #112	@ 0x70
 800ae2e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ae30:	9002      	str	r0, [sp, #8]
 800ae32:	9006      	str	r0, [sp, #24]
 800ae34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ae38:	4809      	ldr	r0, [pc, #36]	@ (800ae60 <siprintf+0x38>)
 800ae3a:	9107      	str	r1, [sp, #28]
 800ae3c:	9104      	str	r1, [sp, #16]
 800ae3e:	4909      	ldr	r1, [pc, #36]	@ (800ae64 <siprintf+0x3c>)
 800ae40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae44:	9105      	str	r1, [sp, #20]
 800ae46:	6800      	ldr	r0, [r0, #0]
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	a902      	add	r1, sp, #8
 800ae4c:	f002 fbb6 	bl	800d5bc <_svfiprintf_r>
 800ae50:	9b02      	ldr	r3, [sp, #8]
 800ae52:	2200      	movs	r2, #0
 800ae54:	701a      	strb	r2, [r3, #0]
 800ae56:	b01c      	add	sp, #112	@ 0x70
 800ae58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae5c:	b003      	add	sp, #12
 800ae5e:	4770      	bx	lr
 800ae60:	20000450 	.word	0x20000450
 800ae64:	ffff0208 	.word	0xffff0208

0800ae68 <__sread>:
 800ae68:	b510      	push	{r4, lr}
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae70:	f000 f86c 	bl	800af4c <_read_r>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	bfab      	itete	ge
 800ae78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae7c:	181b      	addge	r3, r3, r0
 800ae7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae82:	bfac      	ite	ge
 800ae84:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae86:	81a3      	strhlt	r3, [r4, #12]
 800ae88:	bd10      	pop	{r4, pc}

0800ae8a <__swrite>:
 800ae8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8e:	461f      	mov	r7, r3
 800ae90:	898b      	ldrh	r3, [r1, #12]
 800ae92:	05db      	lsls	r3, r3, #23
 800ae94:	4605      	mov	r5, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	4616      	mov	r6, r2
 800ae9a:	d505      	bpl.n	800aea8 <__swrite+0x1e>
 800ae9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea0:	2302      	movs	r3, #2
 800aea2:	2200      	movs	r2, #0
 800aea4:	f000 f840 	bl	800af28 <_lseek_r>
 800aea8:	89a3      	ldrh	r3, [r4, #12]
 800aeaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	4632      	mov	r2, r6
 800aeb6:	463b      	mov	r3, r7
 800aeb8:	4628      	mov	r0, r5
 800aeba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aebe:	f000 b857 	b.w	800af70 <_write_r>

0800aec2 <__sseek>:
 800aec2:	b510      	push	{r4, lr}
 800aec4:	460c      	mov	r4, r1
 800aec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeca:	f000 f82d 	bl	800af28 <_lseek_r>
 800aece:	1c43      	adds	r3, r0, #1
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	bf15      	itete	ne
 800aed4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aed6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aeda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aede:	81a3      	strheq	r3, [r4, #12]
 800aee0:	bf18      	it	ne
 800aee2:	81a3      	strhne	r3, [r4, #12]
 800aee4:	bd10      	pop	{r4, pc}

0800aee6 <__sclose>:
 800aee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeea:	f000 b80d 	b.w	800af08 <_close_r>

0800aeee <memset>:
 800aeee:	4402      	add	r2, r0
 800aef0:	4603      	mov	r3, r0
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d100      	bne.n	800aef8 <memset+0xa>
 800aef6:	4770      	bx	lr
 800aef8:	f803 1b01 	strb.w	r1, [r3], #1
 800aefc:	e7f9      	b.n	800aef2 <memset+0x4>
	...

0800af00 <_localeconv_r>:
 800af00:	4800      	ldr	r0, [pc, #0]	@ (800af04 <_localeconv_r+0x4>)
 800af02:	4770      	bx	lr
 800af04:	20000590 	.word	0x20000590

0800af08 <_close_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	4d06      	ldr	r5, [pc, #24]	@ (800af24 <_close_r+0x1c>)
 800af0c:	2300      	movs	r3, #0
 800af0e:	4604      	mov	r4, r0
 800af10:	4608      	mov	r0, r1
 800af12:	602b      	str	r3, [r5, #0]
 800af14:	f7f7 fd94 	bl	8002a40 <_close>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_close_r+0x1a>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_close_r+0x1a>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	20002f38 	.word	0x20002f38

0800af28 <_lseek_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4d07      	ldr	r5, [pc, #28]	@ (800af48 <_lseek_r+0x20>)
 800af2c:	4604      	mov	r4, r0
 800af2e:	4608      	mov	r0, r1
 800af30:	4611      	mov	r1, r2
 800af32:	2200      	movs	r2, #0
 800af34:	602a      	str	r2, [r5, #0]
 800af36:	461a      	mov	r2, r3
 800af38:	f7f7 fda9 	bl	8002a8e <_lseek>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	d102      	bne.n	800af46 <_lseek_r+0x1e>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	b103      	cbz	r3, 800af46 <_lseek_r+0x1e>
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	20002f38 	.word	0x20002f38

0800af4c <_read_r>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	4d07      	ldr	r5, [pc, #28]	@ (800af6c <_read_r+0x20>)
 800af50:	4604      	mov	r4, r0
 800af52:	4608      	mov	r0, r1
 800af54:	4611      	mov	r1, r2
 800af56:	2200      	movs	r2, #0
 800af58:	602a      	str	r2, [r5, #0]
 800af5a:	461a      	mov	r2, r3
 800af5c:	f7f7 fd37 	bl	80029ce <_read>
 800af60:	1c43      	adds	r3, r0, #1
 800af62:	d102      	bne.n	800af6a <_read_r+0x1e>
 800af64:	682b      	ldr	r3, [r5, #0]
 800af66:	b103      	cbz	r3, 800af6a <_read_r+0x1e>
 800af68:	6023      	str	r3, [r4, #0]
 800af6a:	bd38      	pop	{r3, r4, r5, pc}
 800af6c:	20002f38 	.word	0x20002f38

0800af70 <_write_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	4d07      	ldr	r5, [pc, #28]	@ (800af90 <_write_r+0x20>)
 800af74:	4604      	mov	r4, r0
 800af76:	4608      	mov	r0, r1
 800af78:	4611      	mov	r1, r2
 800af7a:	2200      	movs	r2, #0
 800af7c:	602a      	str	r2, [r5, #0]
 800af7e:	461a      	mov	r2, r3
 800af80:	f7f7 fd42 	bl	8002a08 <_write>
 800af84:	1c43      	adds	r3, r0, #1
 800af86:	d102      	bne.n	800af8e <_write_r+0x1e>
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	b103      	cbz	r3, 800af8e <_write_r+0x1e>
 800af8c:	6023      	str	r3, [r4, #0]
 800af8e:	bd38      	pop	{r3, r4, r5, pc}
 800af90:	20002f38 	.word	0x20002f38

0800af94 <__errno>:
 800af94:	4b01      	ldr	r3, [pc, #4]	@ (800af9c <__errno+0x8>)
 800af96:	6818      	ldr	r0, [r3, #0]
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	20000450 	.word	0x20000450

0800afa0 <__libc_init_array>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	4d0d      	ldr	r5, [pc, #52]	@ (800afd8 <__libc_init_array+0x38>)
 800afa4:	4c0d      	ldr	r4, [pc, #52]	@ (800afdc <__libc_init_array+0x3c>)
 800afa6:	1b64      	subs	r4, r4, r5
 800afa8:	10a4      	asrs	r4, r4, #2
 800afaa:	2600      	movs	r6, #0
 800afac:	42a6      	cmp	r6, r4
 800afae:	d109      	bne.n	800afc4 <__libc_init_array+0x24>
 800afb0:	4d0b      	ldr	r5, [pc, #44]	@ (800afe0 <__libc_init_array+0x40>)
 800afb2:	4c0c      	ldr	r4, [pc, #48]	@ (800afe4 <__libc_init_array+0x44>)
 800afb4:	f004 f8f6 	bl	800f1a4 <_init>
 800afb8:	1b64      	subs	r4, r4, r5
 800afba:	10a4      	asrs	r4, r4, #2
 800afbc:	2600      	movs	r6, #0
 800afbe:	42a6      	cmp	r6, r4
 800afc0:	d105      	bne.n	800afce <__libc_init_array+0x2e>
 800afc2:	bd70      	pop	{r4, r5, r6, pc}
 800afc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800afc8:	4798      	blx	r3
 800afca:	3601      	adds	r6, #1
 800afcc:	e7ee      	b.n	800afac <__libc_init_array+0xc>
 800afce:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd2:	4798      	blx	r3
 800afd4:	3601      	adds	r6, #1
 800afd6:	e7f2      	b.n	800afbe <__libc_init_array+0x1e>
 800afd8:	0802cad0 	.word	0x0802cad0
 800afdc:	0802cad0 	.word	0x0802cad0
 800afe0:	0802cad0 	.word	0x0802cad0
 800afe4:	0802cad4 	.word	0x0802cad4

0800afe8 <__retarget_lock_init_recursive>:
 800afe8:	4770      	bx	lr

0800afea <__retarget_lock_acquire_recursive>:
 800afea:	4770      	bx	lr

0800afec <__retarget_lock_release_recursive>:
 800afec:	4770      	bx	lr
	...

0800aff0 <nanf>:
 800aff0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aff8 <nanf+0x8>
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	7fc00000 	.word	0x7fc00000

0800affc <quorem>:
 800affc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b000:	6903      	ldr	r3, [r0, #16]
 800b002:	690c      	ldr	r4, [r1, #16]
 800b004:	42a3      	cmp	r3, r4
 800b006:	4607      	mov	r7, r0
 800b008:	db7e      	blt.n	800b108 <quorem+0x10c>
 800b00a:	3c01      	subs	r4, #1
 800b00c:	f101 0814 	add.w	r8, r1, #20
 800b010:	00a3      	lsls	r3, r4, #2
 800b012:	f100 0514 	add.w	r5, r0, #20
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b01c:	9301      	str	r3, [sp, #4]
 800b01e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b022:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b026:	3301      	adds	r3, #1
 800b028:	429a      	cmp	r2, r3
 800b02a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b02e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b032:	d32e      	bcc.n	800b092 <quorem+0x96>
 800b034:	f04f 0a00 	mov.w	sl, #0
 800b038:	46c4      	mov	ip, r8
 800b03a:	46ae      	mov	lr, r5
 800b03c:	46d3      	mov	fp, sl
 800b03e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b042:	b298      	uxth	r0, r3
 800b044:	fb06 a000 	mla	r0, r6, r0, sl
 800b048:	0c02      	lsrs	r2, r0, #16
 800b04a:	0c1b      	lsrs	r3, r3, #16
 800b04c:	fb06 2303 	mla	r3, r6, r3, r2
 800b050:	f8de 2000 	ldr.w	r2, [lr]
 800b054:	b280      	uxth	r0, r0
 800b056:	b292      	uxth	r2, r2
 800b058:	1a12      	subs	r2, r2, r0
 800b05a:	445a      	add	r2, fp
 800b05c:	f8de 0000 	ldr.w	r0, [lr]
 800b060:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b064:	b29b      	uxth	r3, r3
 800b066:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b06a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b06e:	b292      	uxth	r2, r2
 800b070:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b074:	45e1      	cmp	r9, ip
 800b076:	f84e 2b04 	str.w	r2, [lr], #4
 800b07a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b07e:	d2de      	bcs.n	800b03e <quorem+0x42>
 800b080:	9b00      	ldr	r3, [sp, #0]
 800b082:	58eb      	ldr	r3, [r5, r3]
 800b084:	b92b      	cbnz	r3, 800b092 <quorem+0x96>
 800b086:	9b01      	ldr	r3, [sp, #4]
 800b088:	3b04      	subs	r3, #4
 800b08a:	429d      	cmp	r5, r3
 800b08c:	461a      	mov	r2, r3
 800b08e:	d32f      	bcc.n	800b0f0 <quorem+0xf4>
 800b090:	613c      	str	r4, [r7, #16]
 800b092:	4638      	mov	r0, r7
 800b094:	f001 f9c4 	bl	800c420 <__mcmp>
 800b098:	2800      	cmp	r0, #0
 800b09a:	db25      	blt.n	800b0e8 <quorem+0xec>
 800b09c:	4629      	mov	r1, r5
 800b09e:	2000      	movs	r0, #0
 800b0a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0a4:	f8d1 c000 	ldr.w	ip, [r1]
 800b0a8:	fa1f fe82 	uxth.w	lr, r2
 800b0ac:	fa1f f38c 	uxth.w	r3, ip
 800b0b0:	eba3 030e 	sub.w	r3, r3, lr
 800b0b4:	4403      	add	r3, r0
 800b0b6:	0c12      	lsrs	r2, r2, #16
 800b0b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b0bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0c6:	45c1      	cmp	r9, r8
 800b0c8:	f841 3b04 	str.w	r3, [r1], #4
 800b0cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b0d0:	d2e6      	bcs.n	800b0a0 <quorem+0xa4>
 800b0d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0da:	b922      	cbnz	r2, 800b0e6 <quorem+0xea>
 800b0dc:	3b04      	subs	r3, #4
 800b0de:	429d      	cmp	r5, r3
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	d30b      	bcc.n	800b0fc <quorem+0x100>
 800b0e4:	613c      	str	r4, [r7, #16]
 800b0e6:	3601      	adds	r6, #1
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	b003      	add	sp, #12
 800b0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f0:	6812      	ldr	r2, [r2, #0]
 800b0f2:	3b04      	subs	r3, #4
 800b0f4:	2a00      	cmp	r2, #0
 800b0f6:	d1cb      	bne.n	800b090 <quorem+0x94>
 800b0f8:	3c01      	subs	r4, #1
 800b0fa:	e7c6      	b.n	800b08a <quorem+0x8e>
 800b0fc:	6812      	ldr	r2, [r2, #0]
 800b0fe:	3b04      	subs	r3, #4
 800b100:	2a00      	cmp	r2, #0
 800b102:	d1ef      	bne.n	800b0e4 <quorem+0xe8>
 800b104:	3c01      	subs	r4, #1
 800b106:	e7ea      	b.n	800b0de <quorem+0xe2>
 800b108:	2000      	movs	r0, #0
 800b10a:	e7ee      	b.n	800b0ea <quorem+0xee>
 800b10c:	0000      	movs	r0, r0
	...

0800b110 <_dtoa_r>:
 800b110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b114:	69c7      	ldr	r7, [r0, #28]
 800b116:	b099      	sub	sp, #100	@ 0x64
 800b118:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b11c:	ec55 4b10 	vmov	r4, r5, d0
 800b120:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b122:	9109      	str	r1, [sp, #36]	@ 0x24
 800b124:	4683      	mov	fp, r0
 800b126:	920e      	str	r2, [sp, #56]	@ 0x38
 800b128:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b12a:	b97f      	cbnz	r7, 800b14c <_dtoa_r+0x3c>
 800b12c:	2010      	movs	r0, #16
 800b12e:	f000 fdfd 	bl	800bd2c <malloc>
 800b132:	4602      	mov	r2, r0
 800b134:	f8cb 001c 	str.w	r0, [fp, #28]
 800b138:	b920      	cbnz	r0, 800b144 <_dtoa_r+0x34>
 800b13a:	4ba7      	ldr	r3, [pc, #668]	@ (800b3d8 <_dtoa_r+0x2c8>)
 800b13c:	21ef      	movs	r1, #239	@ 0xef
 800b13e:	48a7      	ldr	r0, [pc, #668]	@ (800b3dc <_dtoa_r+0x2cc>)
 800b140:	f002 fc36 	bl	800d9b0 <__assert_func>
 800b144:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b148:	6007      	str	r7, [r0, #0]
 800b14a:	60c7      	str	r7, [r0, #12]
 800b14c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b150:	6819      	ldr	r1, [r3, #0]
 800b152:	b159      	cbz	r1, 800b16c <_dtoa_r+0x5c>
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	604a      	str	r2, [r1, #4]
 800b158:	2301      	movs	r3, #1
 800b15a:	4093      	lsls	r3, r2
 800b15c:	608b      	str	r3, [r1, #8]
 800b15e:	4658      	mov	r0, fp
 800b160:	f000 feda 	bl	800bf18 <_Bfree>
 800b164:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b168:	2200      	movs	r2, #0
 800b16a:	601a      	str	r2, [r3, #0]
 800b16c:	1e2b      	subs	r3, r5, #0
 800b16e:	bfb9      	ittee	lt
 800b170:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b174:	9303      	strlt	r3, [sp, #12]
 800b176:	2300      	movge	r3, #0
 800b178:	6033      	strge	r3, [r6, #0]
 800b17a:	9f03      	ldr	r7, [sp, #12]
 800b17c:	4b98      	ldr	r3, [pc, #608]	@ (800b3e0 <_dtoa_r+0x2d0>)
 800b17e:	bfbc      	itt	lt
 800b180:	2201      	movlt	r2, #1
 800b182:	6032      	strlt	r2, [r6, #0]
 800b184:	43bb      	bics	r3, r7
 800b186:	d112      	bne.n	800b1ae <_dtoa_r+0x9e>
 800b188:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b18a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b18e:	6013      	str	r3, [r2, #0]
 800b190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b194:	4323      	orrs	r3, r4
 800b196:	f000 854d 	beq.w	800bc34 <_dtoa_r+0xb24>
 800b19a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b19c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b3f4 <_dtoa_r+0x2e4>
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f000 854f 	beq.w	800bc44 <_dtoa_r+0xb34>
 800b1a6:	f10a 0303 	add.w	r3, sl, #3
 800b1aa:	f000 bd49 	b.w	800bc40 <_dtoa_r+0xb30>
 800b1ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	ec51 0b17 	vmov	r0, r1, d7
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b1be:	f7f5 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1c2:	4680      	mov	r8, r0
 800b1c4:	b158      	cbz	r0, 800b1de <_dtoa_r+0xce>
 800b1c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1ce:	b113      	cbz	r3, 800b1d6 <_dtoa_r+0xc6>
 800b1d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b1d2:	4b84      	ldr	r3, [pc, #528]	@ (800b3e4 <_dtoa_r+0x2d4>)
 800b1d4:	6013      	str	r3, [r2, #0]
 800b1d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b3f8 <_dtoa_r+0x2e8>
 800b1da:	f000 bd33 	b.w	800bc44 <_dtoa_r+0xb34>
 800b1de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b1e2:	aa16      	add	r2, sp, #88	@ 0x58
 800b1e4:	a917      	add	r1, sp, #92	@ 0x5c
 800b1e6:	4658      	mov	r0, fp
 800b1e8:	f001 fa3a 	bl	800c660 <__d2b>
 800b1ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b1f0:	4681      	mov	r9, r0
 800b1f2:	2e00      	cmp	r6, #0
 800b1f4:	d077      	beq.n	800b2e6 <_dtoa_r+0x1d6>
 800b1f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b1fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b204:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b208:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b20c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b210:	4619      	mov	r1, r3
 800b212:	2200      	movs	r2, #0
 800b214:	4b74      	ldr	r3, [pc, #464]	@ (800b3e8 <_dtoa_r+0x2d8>)
 800b216:	f7f5 f837 	bl	8000288 <__aeabi_dsub>
 800b21a:	a369      	add	r3, pc, #420	@ (adr r3, 800b3c0 <_dtoa_r+0x2b0>)
 800b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b220:	f7f5 f9ea 	bl	80005f8 <__aeabi_dmul>
 800b224:	a368      	add	r3, pc, #416	@ (adr r3, 800b3c8 <_dtoa_r+0x2b8>)
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f7f5 f82f 	bl	800028c <__adddf3>
 800b22e:	4604      	mov	r4, r0
 800b230:	4630      	mov	r0, r6
 800b232:	460d      	mov	r5, r1
 800b234:	f7f5 f976 	bl	8000524 <__aeabi_i2d>
 800b238:	a365      	add	r3, pc, #404	@ (adr r3, 800b3d0 <_dtoa_r+0x2c0>)
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	f7f5 f9db 	bl	80005f8 <__aeabi_dmul>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	4620      	mov	r0, r4
 800b248:	4629      	mov	r1, r5
 800b24a:	f7f5 f81f 	bl	800028c <__adddf3>
 800b24e:	4604      	mov	r4, r0
 800b250:	460d      	mov	r5, r1
 800b252:	f7f5 fc81 	bl	8000b58 <__aeabi_d2iz>
 800b256:	2200      	movs	r2, #0
 800b258:	4607      	mov	r7, r0
 800b25a:	2300      	movs	r3, #0
 800b25c:	4620      	mov	r0, r4
 800b25e:	4629      	mov	r1, r5
 800b260:	f7f5 fc3c 	bl	8000adc <__aeabi_dcmplt>
 800b264:	b140      	cbz	r0, 800b278 <_dtoa_r+0x168>
 800b266:	4638      	mov	r0, r7
 800b268:	f7f5 f95c 	bl	8000524 <__aeabi_i2d>
 800b26c:	4622      	mov	r2, r4
 800b26e:	462b      	mov	r3, r5
 800b270:	f7f5 fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b274:	b900      	cbnz	r0, 800b278 <_dtoa_r+0x168>
 800b276:	3f01      	subs	r7, #1
 800b278:	2f16      	cmp	r7, #22
 800b27a:	d851      	bhi.n	800b320 <_dtoa_r+0x210>
 800b27c:	4b5b      	ldr	r3, [pc, #364]	@ (800b3ec <_dtoa_r+0x2dc>)
 800b27e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b28a:	f7f5 fc27 	bl	8000adc <__aeabi_dcmplt>
 800b28e:	2800      	cmp	r0, #0
 800b290:	d048      	beq.n	800b324 <_dtoa_r+0x214>
 800b292:	3f01      	subs	r7, #1
 800b294:	2300      	movs	r3, #0
 800b296:	9312      	str	r3, [sp, #72]	@ 0x48
 800b298:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b29a:	1b9b      	subs	r3, r3, r6
 800b29c:	1e5a      	subs	r2, r3, #1
 800b29e:	bf44      	itt	mi
 800b2a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b2a4:	2300      	movmi	r3, #0
 800b2a6:	9208      	str	r2, [sp, #32]
 800b2a8:	bf54      	ite	pl
 800b2aa:	f04f 0800 	movpl.w	r8, #0
 800b2ae:	9308      	strmi	r3, [sp, #32]
 800b2b0:	2f00      	cmp	r7, #0
 800b2b2:	db39      	blt.n	800b328 <_dtoa_r+0x218>
 800b2b4:	9b08      	ldr	r3, [sp, #32]
 800b2b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b2b8:	443b      	add	r3, r7
 800b2ba:	9308      	str	r3, [sp, #32]
 800b2bc:	2300      	movs	r3, #0
 800b2be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2c2:	2b09      	cmp	r3, #9
 800b2c4:	d864      	bhi.n	800b390 <_dtoa_r+0x280>
 800b2c6:	2b05      	cmp	r3, #5
 800b2c8:	bfc4      	itt	gt
 800b2ca:	3b04      	subgt	r3, #4
 800b2cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2d0:	f1a3 0302 	sub.w	r3, r3, #2
 800b2d4:	bfcc      	ite	gt
 800b2d6:	2400      	movgt	r4, #0
 800b2d8:	2401      	movle	r4, #1
 800b2da:	2b03      	cmp	r3, #3
 800b2dc:	d863      	bhi.n	800b3a6 <_dtoa_r+0x296>
 800b2de:	e8df f003 	tbb	[pc, r3]
 800b2e2:	372a      	.short	0x372a
 800b2e4:	5535      	.short	0x5535
 800b2e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b2ea:	441e      	add	r6, r3
 800b2ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b2f0:	2b20      	cmp	r3, #32
 800b2f2:	bfc1      	itttt	gt
 800b2f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b2f8:	409f      	lslgt	r7, r3
 800b2fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b2fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b302:	bfd6      	itet	le
 800b304:	f1c3 0320 	rsble	r3, r3, #32
 800b308:	ea47 0003 	orrgt.w	r0, r7, r3
 800b30c:	fa04 f003 	lslle.w	r0, r4, r3
 800b310:	f7f5 f8f8 	bl	8000504 <__aeabi_ui2d>
 800b314:	2201      	movs	r2, #1
 800b316:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b31a:	3e01      	subs	r6, #1
 800b31c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b31e:	e777      	b.n	800b210 <_dtoa_r+0x100>
 800b320:	2301      	movs	r3, #1
 800b322:	e7b8      	b.n	800b296 <_dtoa_r+0x186>
 800b324:	9012      	str	r0, [sp, #72]	@ 0x48
 800b326:	e7b7      	b.n	800b298 <_dtoa_r+0x188>
 800b328:	427b      	negs	r3, r7
 800b32a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b32c:	2300      	movs	r3, #0
 800b32e:	eba8 0807 	sub.w	r8, r8, r7
 800b332:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b334:	e7c4      	b.n	800b2c0 <_dtoa_r+0x1b0>
 800b336:	2300      	movs	r3, #0
 800b338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b33a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dc35      	bgt.n	800b3ac <_dtoa_r+0x29c>
 800b340:	2301      	movs	r3, #1
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	9307      	str	r3, [sp, #28]
 800b346:	461a      	mov	r2, r3
 800b348:	920e      	str	r2, [sp, #56]	@ 0x38
 800b34a:	e00b      	b.n	800b364 <_dtoa_r+0x254>
 800b34c:	2301      	movs	r3, #1
 800b34e:	e7f3      	b.n	800b338 <_dtoa_r+0x228>
 800b350:	2300      	movs	r3, #0
 800b352:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b356:	18fb      	adds	r3, r7, r3
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	3301      	adds	r3, #1
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	9307      	str	r3, [sp, #28]
 800b360:	bfb8      	it	lt
 800b362:	2301      	movlt	r3, #1
 800b364:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b368:	2100      	movs	r1, #0
 800b36a:	2204      	movs	r2, #4
 800b36c:	f102 0514 	add.w	r5, r2, #20
 800b370:	429d      	cmp	r5, r3
 800b372:	d91f      	bls.n	800b3b4 <_dtoa_r+0x2a4>
 800b374:	6041      	str	r1, [r0, #4]
 800b376:	4658      	mov	r0, fp
 800b378:	f000 fd8e 	bl	800be98 <_Balloc>
 800b37c:	4682      	mov	sl, r0
 800b37e:	2800      	cmp	r0, #0
 800b380:	d13c      	bne.n	800b3fc <_dtoa_r+0x2ec>
 800b382:	4b1b      	ldr	r3, [pc, #108]	@ (800b3f0 <_dtoa_r+0x2e0>)
 800b384:	4602      	mov	r2, r0
 800b386:	f240 11af 	movw	r1, #431	@ 0x1af
 800b38a:	e6d8      	b.n	800b13e <_dtoa_r+0x2e>
 800b38c:	2301      	movs	r3, #1
 800b38e:	e7e0      	b.n	800b352 <_dtoa_r+0x242>
 800b390:	2401      	movs	r4, #1
 800b392:	2300      	movs	r3, #0
 800b394:	9309      	str	r3, [sp, #36]	@ 0x24
 800b396:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b398:	f04f 33ff 	mov.w	r3, #4294967295
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	9307      	str	r3, [sp, #28]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2312      	movs	r3, #18
 800b3a4:	e7d0      	b.n	800b348 <_dtoa_r+0x238>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3aa:	e7f5      	b.n	800b398 <_dtoa_r+0x288>
 800b3ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	9307      	str	r3, [sp, #28]
 800b3b2:	e7d7      	b.n	800b364 <_dtoa_r+0x254>
 800b3b4:	3101      	adds	r1, #1
 800b3b6:	0052      	lsls	r2, r2, #1
 800b3b8:	e7d8      	b.n	800b36c <_dtoa_r+0x25c>
 800b3ba:	bf00      	nop
 800b3bc:	f3af 8000 	nop.w
 800b3c0:	636f4361 	.word	0x636f4361
 800b3c4:	3fd287a7 	.word	0x3fd287a7
 800b3c8:	8b60c8b3 	.word	0x8b60c8b3
 800b3cc:	3fc68a28 	.word	0x3fc68a28
 800b3d0:	509f79fb 	.word	0x509f79fb
 800b3d4:	3fd34413 	.word	0x3fd34413
 800b3d8:	0802c6c6 	.word	0x0802c6c6
 800b3dc:	0802c6dd 	.word	0x0802c6dd
 800b3e0:	7ff00000 	.word	0x7ff00000
 800b3e4:	0802c691 	.word	0x0802c691
 800b3e8:	3ff80000 	.word	0x3ff80000
 800b3ec:	0802c7d8 	.word	0x0802c7d8
 800b3f0:	0802c735 	.word	0x0802c735
 800b3f4:	0802c6c2 	.word	0x0802c6c2
 800b3f8:	0802c690 	.word	0x0802c690
 800b3fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b400:	6018      	str	r0, [r3, #0]
 800b402:	9b07      	ldr	r3, [sp, #28]
 800b404:	2b0e      	cmp	r3, #14
 800b406:	f200 80a4 	bhi.w	800b552 <_dtoa_r+0x442>
 800b40a:	2c00      	cmp	r4, #0
 800b40c:	f000 80a1 	beq.w	800b552 <_dtoa_r+0x442>
 800b410:	2f00      	cmp	r7, #0
 800b412:	dd33      	ble.n	800b47c <_dtoa_r+0x36c>
 800b414:	4bad      	ldr	r3, [pc, #692]	@ (800b6cc <_dtoa_r+0x5bc>)
 800b416:	f007 020f 	and.w	r2, r7, #15
 800b41a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b41e:	ed93 7b00 	vldr	d7, [r3]
 800b422:	05f8      	lsls	r0, r7, #23
 800b424:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b428:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b42c:	d516      	bpl.n	800b45c <_dtoa_r+0x34c>
 800b42e:	4ba8      	ldr	r3, [pc, #672]	@ (800b6d0 <_dtoa_r+0x5c0>)
 800b430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b438:	f7f5 fa08 	bl	800084c <__aeabi_ddiv>
 800b43c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b440:	f004 040f 	and.w	r4, r4, #15
 800b444:	2603      	movs	r6, #3
 800b446:	4da2      	ldr	r5, [pc, #648]	@ (800b6d0 <_dtoa_r+0x5c0>)
 800b448:	b954      	cbnz	r4, 800b460 <_dtoa_r+0x350>
 800b44a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b44e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b452:	f7f5 f9fb 	bl	800084c <__aeabi_ddiv>
 800b456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b45a:	e028      	b.n	800b4ae <_dtoa_r+0x39e>
 800b45c:	2602      	movs	r6, #2
 800b45e:	e7f2      	b.n	800b446 <_dtoa_r+0x336>
 800b460:	07e1      	lsls	r1, r4, #31
 800b462:	d508      	bpl.n	800b476 <_dtoa_r+0x366>
 800b464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b468:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b46c:	f7f5 f8c4 	bl	80005f8 <__aeabi_dmul>
 800b470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b474:	3601      	adds	r6, #1
 800b476:	1064      	asrs	r4, r4, #1
 800b478:	3508      	adds	r5, #8
 800b47a:	e7e5      	b.n	800b448 <_dtoa_r+0x338>
 800b47c:	f000 80d2 	beq.w	800b624 <_dtoa_r+0x514>
 800b480:	427c      	negs	r4, r7
 800b482:	4b92      	ldr	r3, [pc, #584]	@ (800b6cc <_dtoa_r+0x5bc>)
 800b484:	4d92      	ldr	r5, [pc, #584]	@ (800b6d0 <_dtoa_r+0x5c0>)
 800b486:	f004 020f 	and.w	r2, r4, #15
 800b48a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b496:	f7f5 f8af 	bl	80005f8 <__aeabi_dmul>
 800b49a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b49e:	1124      	asrs	r4, r4, #4
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	2602      	movs	r6, #2
 800b4a4:	2c00      	cmp	r4, #0
 800b4a6:	f040 80b2 	bne.w	800b60e <_dtoa_r+0x4fe>
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1d3      	bne.n	800b456 <_dtoa_r+0x346>
 800b4ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 80b7 	beq.w	800b628 <_dtoa_r+0x518>
 800b4ba:	4b86      	ldr	r3, [pc, #536]	@ (800b6d4 <_dtoa_r+0x5c4>)
 800b4bc:	2200      	movs	r2, #0
 800b4be:	4620      	mov	r0, r4
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	f7f5 fb0b 	bl	8000adc <__aeabi_dcmplt>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	f000 80ae 	beq.w	800b628 <_dtoa_r+0x518>
 800b4cc:	9b07      	ldr	r3, [sp, #28]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 80aa 	beq.w	800b628 <_dtoa_r+0x518>
 800b4d4:	9b00      	ldr	r3, [sp, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	dd37      	ble.n	800b54a <_dtoa_r+0x43a>
 800b4da:	1e7b      	subs	r3, r7, #1
 800b4dc:	9304      	str	r3, [sp, #16]
 800b4de:	4620      	mov	r0, r4
 800b4e0:	4b7d      	ldr	r3, [pc, #500]	@ (800b6d8 <_dtoa_r+0x5c8>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	f7f5 f887 	bl	80005f8 <__aeabi_dmul>
 800b4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4ee:	9c00      	ldr	r4, [sp, #0]
 800b4f0:	3601      	adds	r6, #1
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f7f5 f816 	bl	8000524 <__aeabi_i2d>
 800b4f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4fc:	f7f5 f87c 	bl	80005f8 <__aeabi_dmul>
 800b500:	4b76      	ldr	r3, [pc, #472]	@ (800b6dc <_dtoa_r+0x5cc>)
 800b502:	2200      	movs	r2, #0
 800b504:	f7f4 fec2 	bl	800028c <__adddf3>
 800b508:	4605      	mov	r5, r0
 800b50a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b50e:	2c00      	cmp	r4, #0
 800b510:	f040 808d 	bne.w	800b62e <_dtoa_r+0x51e>
 800b514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b518:	4b71      	ldr	r3, [pc, #452]	@ (800b6e0 <_dtoa_r+0x5d0>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	f7f4 feb4 	bl	8000288 <__aeabi_dsub>
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b528:	462a      	mov	r2, r5
 800b52a:	4633      	mov	r3, r6
 800b52c:	f7f5 faf4 	bl	8000b18 <__aeabi_dcmpgt>
 800b530:	2800      	cmp	r0, #0
 800b532:	f040 828b 	bne.w	800ba4c <_dtoa_r+0x93c>
 800b536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b53a:	462a      	mov	r2, r5
 800b53c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b540:	f7f5 facc 	bl	8000adc <__aeabi_dcmplt>
 800b544:	2800      	cmp	r0, #0
 800b546:	f040 8128 	bne.w	800b79a <_dtoa_r+0x68a>
 800b54a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b54e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b552:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b554:	2b00      	cmp	r3, #0
 800b556:	f2c0 815a 	blt.w	800b80e <_dtoa_r+0x6fe>
 800b55a:	2f0e      	cmp	r7, #14
 800b55c:	f300 8157 	bgt.w	800b80e <_dtoa_r+0x6fe>
 800b560:	4b5a      	ldr	r3, [pc, #360]	@ (800b6cc <_dtoa_r+0x5bc>)
 800b562:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b566:	ed93 7b00 	vldr	d7, [r3]
 800b56a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	ed8d 7b00 	vstr	d7, [sp]
 800b572:	da03      	bge.n	800b57c <_dtoa_r+0x46c>
 800b574:	9b07      	ldr	r3, [sp, #28]
 800b576:	2b00      	cmp	r3, #0
 800b578:	f340 8101 	ble.w	800b77e <_dtoa_r+0x66e>
 800b57c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b580:	4656      	mov	r6, sl
 800b582:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b586:	4620      	mov	r0, r4
 800b588:	4629      	mov	r1, r5
 800b58a:	f7f5 f95f 	bl	800084c <__aeabi_ddiv>
 800b58e:	f7f5 fae3 	bl	8000b58 <__aeabi_d2iz>
 800b592:	4680      	mov	r8, r0
 800b594:	f7f4 ffc6 	bl	8000524 <__aeabi_i2d>
 800b598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b59c:	f7f5 f82c 	bl	80005f8 <__aeabi_dmul>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b5ac:	f7f4 fe6c 	bl	8000288 <__aeabi_dsub>
 800b5b0:	f806 4b01 	strb.w	r4, [r6], #1
 800b5b4:	9d07      	ldr	r5, [sp, #28]
 800b5b6:	eba6 040a 	sub.w	r4, r6, sl
 800b5ba:	42a5      	cmp	r5, r4
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	f040 8117 	bne.w	800b7f2 <_dtoa_r+0x6e2>
 800b5c4:	f7f4 fe62 	bl	800028c <__adddf3>
 800b5c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	460d      	mov	r5, r1
 800b5d0:	f7f5 faa2 	bl	8000b18 <__aeabi_dcmpgt>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	f040 80f9 	bne.w	800b7cc <_dtoa_r+0x6bc>
 800b5da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5de:	4620      	mov	r0, r4
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	f7f5 fa71 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5e6:	b118      	cbz	r0, 800b5f0 <_dtoa_r+0x4e0>
 800b5e8:	f018 0f01 	tst.w	r8, #1
 800b5ec:	f040 80ee 	bne.w	800b7cc <_dtoa_r+0x6bc>
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	4658      	mov	r0, fp
 800b5f4:	f000 fc90 	bl	800bf18 <_Bfree>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	7033      	strb	r3, [r6, #0]
 800b5fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b5fe:	3701      	adds	r7, #1
 800b600:	601f      	str	r7, [r3, #0]
 800b602:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 831d 	beq.w	800bc44 <_dtoa_r+0xb34>
 800b60a:	601e      	str	r6, [r3, #0]
 800b60c:	e31a      	b.n	800bc44 <_dtoa_r+0xb34>
 800b60e:	07e2      	lsls	r2, r4, #31
 800b610:	d505      	bpl.n	800b61e <_dtoa_r+0x50e>
 800b612:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b616:	f7f4 ffef 	bl	80005f8 <__aeabi_dmul>
 800b61a:	3601      	adds	r6, #1
 800b61c:	2301      	movs	r3, #1
 800b61e:	1064      	asrs	r4, r4, #1
 800b620:	3508      	adds	r5, #8
 800b622:	e73f      	b.n	800b4a4 <_dtoa_r+0x394>
 800b624:	2602      	movs	r6, #2
 800b626:	e742      	b.n	800b4ae <_dtoa_r+0x39e>
 800b628:	9c07      	ldr	r4, [sp, #28]
 800b62a:	9704      	str	r7, [sp, #16]
 800b62c:	e761      	b.n	800b4f2 <_dtoa_r+0x3e2>
 800b62e:	4b27      	ldr	r3, [pc, #156]	@ (800b6cc <_dtoa_r+0x5bc>)
 800b630:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b636:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b63a:	4454      	add	r4, sl
 800b63c:	2900      	cmp	r1, #0
 800b63e:	d053      	beq.n	800b6e8 <_dtoa_r+0x5d8>
 800b640:	4928      	ldr	r1, [pc, #160]	@ (800b6e4 <_dtoa_r+0x5d4>)
 800b642:	2000      	movs	r0, #0
 800b644:	f7f5 f902 	bl	800084c <__aeabi_ddiv>
 800b648:	4633      	mov	r3, r6
 800b64a:	462a      	mov	r2, r5
 800b64c:	f7f4 fe1c 	bl	8000288 <__aeabi_dsub>
 800b650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b654:	4656      	mov	r6, sl
 800b656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b65a:	f7f5 fa7d 	bl	8000b58 <__aeabi_d2iz>
 800b65e:	4605      	mov	r5, r0
 800b660:	f7f4 ff60 	bl	8000524 <__aeabi_i2d>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b66c:	f7f4 fe0c 	bl	8000288 <__aeabi_dsub>
 800b670:	3530      	adds	r5, #48	@ 0x30
 800b672:	4602      	mov	r2, r0
 800b674:	460b      	mov	r3, r1
 800b676:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b67a:	f806 5b01 	strb.w	r5, [r6], #1
 800b67e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b682:	f7f5 fa2b 	bl	8000adc <__aeabi_dcmplt>
 800b686:	2800      	cmp	r0, #0
 800b688:	d171      	bne.n	800b76e <_dtoa_r+0x65e>
 800b68a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b68e:	4911      	ldr	r1, [pc, #68]	@ (800b6d4 <_dtoa_r+0x5c4>)
 800b690:	2000      	movs	r0, #0
 800b692:	f7f4 fdf9 	bl	8000288 <__aeabi_dsub>
 800b696:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b69a:	f7f5 fa1f 	bl	8000adc <__aeabi_dcmplt>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f040 8095 	bne.w	800b7ce <_dtoa_r+0x6be>
 800b6a4:	42a6      	cmp	r6, r4
 800b6a6:	f43f af50 	beq.w	800b54a <_dtoa_r+0x43a>
 800b6aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b6d8 <_dtoa_r+0x5c8>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f7f4 ffa1 	bl	80005f8 <__aeabi_dmul>
 800b6b6:	4b08      	ldr	r3, [pc, #32]	@ (800b6d8 <_dtoa_r+0x5c8>)
 800b6b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6bc:	2200      	movs	r2, #0
 800b6be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6c2:	f7f4 ff99 	bl	80005f8 <__aeabi_dmul>
 800b6c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6ca:	e7c4      	b.n	800b656 <_dtoa_r+0x546>
 800b6cc:	0802c7d8 	.word	0x0802c7d8
 800b6d0:	0802c7b0 	.word	0x0802c7b0
 800b6d4:	3ff00000 	.word	0x3ff00000
 800b6d8:	40240000 	.word	0x40240000
 800b6dc:	401c0000 	.word	0x401c0000
 800b6e0:	40140000 	.word	0x40140000
 800b6e4:	3fe00000 	.word	0x3fe00000
 800b6e8:	4631      	mov	r1, r6
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	f7f4 ff84 	bl	80005f8 <__aeabi_dmul>
 800b6f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b6f6:	4656      	mov	r6, sl
 800b6f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6fc:	f7f5 fa2c 	bl	8000b58 <__aeabi_d2iz>
 800b700:	4605      	mov	r5, r0
 800b702:	f7f4 ff0f 	bl	8000524 <__aeabi_i2d>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b70e:	f7f4 fdbb 	bl	8000288 <__aeabi_dsub>
 800b712:	3530      	adds	r5, #48	@ 0x30
 800b714:	f806 5b01 	strb.w	r5, [r6], #1
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	42a6      	cmp	r6, r4
 800b71e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b722:	f04f 0200 	mov.w	r2, #0
 800b726:	d124      	bne.n	800b772 <_dtoa_r+0x662>
 800b728:	4bac      	ldr	r3, [pc, #688]	@ (800b9dc <_dtoa_r+0x8cc>)
 800b72a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b72e:	f7f4 fdad 	bl	800028c <__adddf3>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b73a:	f7f5 f9ed 	bl	8000b18 <__aeabi_dcmpgt>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d145      	bne.n	800b7ce <_dtoa_r+0x6be>
 800b742:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b746:	49a5      	ldr	r1, [pc, #660]	@ (800b9dc <_dtoa_r+0x8cc>)
 800b748:	2000      	movs	r0, #0
 800b74a:	f7f4 fd9d 	bl	8000288 <__aeabi_dsub>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b756:	f7f5 f9c1 	bl	8000adc <__aeabi_dcmplt>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	f43f aef5 	beq.w	800b54a <_dtoa_r+0x43a>
 800b760:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b762:	1e73      	subs	r3, r6, #1
 800b764:	9315      	str	r3, [sp, #84]	@ 0x54
 800b766:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b76a:	2b30      	cmp	r3, #48	@ 0x30
 800b76c:	d0f8      	beq.n	800b760 <_dtoa_r+0x650>
 800b76e:	9f04      	ldr	r7, [sp, #16]
 800b770:	e73e      	b.n	800b5f0 <_dtoa_r+0x4e0>
 800b772:	4b9b      	ldr	r3, [pc, #620]	@ (800b9e0 <_dtoa_r+0x8d0>)
 800b774:	f7f4 ff40 	bl	80005f8 <__aeabi_dmul>
 800b778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b77c:	e7bc      	b.n	800b6f8 <_dtoa_r+0x5e8>
 800b77e:	d10c      	bne.n	800b79a <_dtoa_r+0x68a>
 800b780:	4b98      	ldr	r3, [pc, #608]	@ (800b9e4 <_dtoa_r+0x8d4>)
 800b782:	2200      	movs	r2, #0
 800b784:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b788:	f7f4 ff36 	bl	80005f8 <__aeabi_dmul>
 800b78c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b790:	f7f5 f9b8 	bl	8000b04 <__aeabi_dcmpge>
 800b794:	2800      	cmp	r0, #0
 800b796:	f000 8157 	beq.w	800ba48 <_dtoa_r+0x938>
 800b79a:	2400      	movs	r4, #0
 800b79c:	4625      	mov	r5, r4
 800b79e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7a0:	43db      	mvns	r3, r3
 800b7a2:	9304      	str	r3, [sp, #16]
 800b7a4:	4656      	mov	r6, sl
 800b7a6:	2700      	movs	r7, #0
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	4658      	mov	r0, fp
 800b7ac:	f000 fbb4 	bl	800bf18 <_Bfree>
 800b7b0:	2d00      	cmp	r5, #0
 800b7b2:	d0dc      	beq.n	800b76e <_dtoa_r+0x65e>
 800b7b4:	b12f      	cbz	r7, 800b7c2 <_dtoa_r+0x6b2>
 800b7b6:	42af      	cmp	r7, r5
 800b7b8:	d003      	beq.n	800b7c2 <_dtoa_r+0x6b2>
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	4658      	mov	r0, fp
 800b7be:	f000 fbab 	bl	800bf18 <_Bfree>
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	4658      	mov	r0, fp
 800b7c6:	f000 fba7 	bl	800bf18 <_Bfree>
 800b7ca:	e7d0      	b.n	800b76e <_dtoa_r+0x65e>
 800b7cc:	9704      	str	r7, [sp, #16]
 800b7ce:	4633      	mov	r3, r6
 800b7d0:	461e      	mov	r6, r3
 800b7d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7d6:	2a39      	cmp	r2, #57	@ 0x39
 800b7d8:	d107      	bne.n	800b7ea <_dtoa_r+0x6da>
 800b7da:	459a      	cmp	sl, r3
 800b7dc:	d1f8      	bne.n	800b7d0 <_dtoa_r+0x6c0>
 800b7de:	9a04      	ldr	r2, [sp, #16]
 800b7e0:	3201      	adds	r2, #1
 800b7e2:	9204      	str	r2, [sp, #16]
 800b7e4:	2230      	movs	r2, #48	@ 0x30
 800b7e6:	f88a 2000 	strb.w	r2, [sl]
 800b7ea:	781a      	ldrb	r2, [r3, #0]
 800b7ec:	3201      	adds	r2, #1
 800b7ee:	701a      	strb	r2, [r3, #0]
 800b7f0:	e7bd      	b.n	800b76e <_dtoa_r+0x65e>
 800b7f2:	4b7b      	ldr	r3, [pc, #492]	@ (800b9e0 <_dtoa_r+0x8d0>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f7f4 feff 	bl	80005f8 <__aeabi_dmul>
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	4604      	mov	r4, r0
 800b800:	460d      	mov	r5, r1
 800b802:	f7f5 f961 	bl	8000ac8 <__aeabi_dcmpeq>
 800b806:	2800      	cmp	r0, #0
 800b808:	f43f aebb 	beq.w	800b582 <_dtoa_r+0x472>
 800b80c:	e6f0      	b.n	800b5f0 <_dtoa_r+0x4e0>
 800b80e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b810:	2a00      	cmp	r2, #0
 800b812:	f000 80db 	beq.w	800b9cc <_dtoa_r+0x8bc>
 800b816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b818:	2a01      	cmp	r2, #1
 800b81a:	f300 80bf 	bgt.w	800b99c <_dtoa_r+0x88c>
 800b81e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b820:	2a00      	cmp	r2, #0
 800b822:	f000 80b7 	beq.w	800b994 <_dtoa_r+0x884>
 800b826:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b82a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b82c:	4646      	mov	r6, r8
 800b82e:	9a08      	ldr	r2, [sp, #32]
 800b830:	2101      	movs	r1, #1
 800b832:	441a      	add	r2, r3
 800b834:	4658      	mov	r0, fp
 800b836:	4498      	add	r8, r3
 800b838:	9208      	str	r2, [sp, #32]
 800b83a:	f000 fc6b 	bl	800c114 <__i2b>
 800b83e:	4605      	mov	r5, r0
 800b840:	b15e      	cbz	r6, 800b85a <_dtoa_r+0x74a>
 800b842:	9b08      	ldr	r3, [sp, #32]
 800b844:	2b00      	cmp	r3, #0
 800b846:	dd08      	ble.n	800b85a <_dtoa_r+0x74a>
 800b848:	42b3      	cmp	r3, r6
 800b84a:	9a08      	ldr	r2, [sp, #32]
 800b84c:	bfa8      	it	ge
 800b84e:	4633      	movge	r3, r6
 800b850:	eba8 0803 	sub.w	r8, r8, r3
 800b854:	1af6      	subs	r6, r6, r3
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	9308      	str	r3, [sp, #32]
 800b85a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b85c:	b1f3      	cbz	r3, 800b89c <_dtoa_r+0x78c>
 800b85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b860:	2b00      	cmp	r3, #0
 800b862:	f000 80b7 	beq.w	800b9d4 <_dtoa_r+0x8c4>
 800b866:	b18c      	cbz	r4, 800b88c <_dtoa_r+0x77c>
 800b868:	4629      	mov	r1, r5
 800b86a:	4622      	mov	r2, r4
 800b86c:	4658      	mov	r0, fp
 800b86e:	f000 fd11 	bl	800c294 <__pow5mult>
 800b872:	464a      	mov	r2, r9
 800b874:	4601      	mov	r1, r0
 800b876:	4605      	mov	r5, r0
 800b878:	4658      	mov	r0, fp
 800b87a:	f000 fc61 	bl	800c140 <__multiply>
 800b87e:	4649      	mov	r1, r9
 800b880:	9004      	str	r0, [sp, #16]
 800b882:	4658      	mov	r0, fp
 800b884:	f000 fb48 	bl	800bf18 <_Bfree>
 800b888:	9b04      	ldr	r3, [sp, #16]
 800b88a:	4699      	mov	r9, r3
 800b88c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b88e:	1b1a      	subs	r2, r3, r4
 800b890:	d004      	beq.n	800b89c <_dtoa_r+0x78c>
 800b892:	4649      	mov	r1, r9
 800b894:	4658      	mov	r0, fp
 800b896:	f000 fcfd 	bl	800c294 <__pow5mult>
 800b89a:	4681      	mov	r9, r0
 800b89c:	2101      	movs	r1, #1
 800b89e:	4658      	mov	r0, fp
 800b8a0:	f000 fc38 	bl	800c114 <__i2b>
 800b8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 81cf 	beq.w	800bc4c <_dtoa_r+0xb3c>
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	4601      	mov	r1, r0
 800b8b2:	4658      	mov	r0, fp
 800b8b4:	f000 fcee 	bl	800c294 <__pow5mult>
 800b8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	4604      	mov	r4, r0
 800b8be:	f300 8095 	bgt.w	800b9ec <_dtoa_r+0x8dc>
 800b8c2:	9b02      	ldr	r3, [sp, #8]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f040 8087 	bne.w	800b9d8 <_dtoa_r+0x8c8>
 800b8ca:	9b03      	ldr	r3, [sp, #12]
 800b8cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f040 8089 	bne.w	800b9e8 <_dtoa_r+0x8d8>
 800b8d6:	9b03      	ldr	r3, [sp, #12]
 800b8d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b8dc:	0d1b      	lsrs	r3, r3, #20
 800b8de:	051b      	lsls	r3, r3, #20
 800b8e0:	b12b      	cbz	r3, 800b8ee <_dtoa_r+0x7de>
 800b8e2:	9b08      	ldr	r3, [sp, #32]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	9308      	str	r3, [sp, #32]
 800b8e8:	f108 0801 	add.w	r8, r8, #1
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 81b0 	beq.w	800bc58 <_dtoa_r+0xb48>
 800b8f8:	6923      	ldr	r3, [r4, #16]
 800b8fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8fe:	6918      	ldr	r0, [r3, #16]
 800b900:	f000 fbbc 	bl	800c07c <__hi0bits>
 800b904:	f1c0 0020 	rsb	r0, r0, #32
 800b908:	9b08      	ldr	r3, [sp, #32]
 800b90a:	4418      	add	r0, r3
 800b90c:	f010 001f 	ands.w	r0, r0, #31
 800b910:	d077      	beq.n	800ba02 <_dtoa_r+0x8f2>
 800b912:	f1c0 0320 	rsb	r3, r0, #32
 800b916:	2b04      	cmp	r3, #4
 800b918:	dd6b      	ble.n	800b9f2 <_dtoa_r+0x8e2>
 800b91a:	9b08      	ldr	r3, [sp, #32]
 800b91c:	f1c0 001c 	rsb	r0, r0, #28
 800b920:	4403      	add	r3, r0
 800b922:	4480      	add	r8, r0
 800b924:	4406      	add	r6, r0
 800b926:	9308      	str	r3, [sp, #32]
 800b928:	f1b8 0f00 	cmp.w	r8, #0
 800b92c:	dd05      	ble.n	800b93a <_dtoa_r+0x82a>
 800b92e:	4649      	mov	r1, r9
 800b930:	4642      	mov	r2, r8
 800b932:	4658      	mov	r0, fp
 800b934:	f000 fd08 	bl	800c348 <__lshift>
 800b938:	4681      	mov	r9, r0
 800b93a:	9b08      	ldr	r3, [sp, #32]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	dd05      	ble.n	800b94c <_dtoa_r+0x83c>
 800b940:	4621      	mov	r1, r4
 800b942:	461a      	mov	r2, r3
 800b944:	4658      	mov	r0, fp
 800b946:	f000 fcff 	bl	800c348 <__lshift>
 800b94a:	4604      	mov	r4, r0
 800b94c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d059      	beq.n	800ba06 <_dtoa_r+0x8f6>
 800b952:	4621      	mov	r1, r4
 800b954:	4648      	mov	r0, r9
 800b956:	f000 fd63 	bl	800c420 <__mcmp>
 800b95a:	2800      	cmp	r0, #0
 800b95c:	da53      	bge.n	800ba06 <_dtoa_r+0x8f6>
 800b95e:	1e7b      	subs	r3, r7, #1
 800b960:	9304      	str	r3, [sp, #16]
 800b962:	4649      	mov	r1, r9
 800b964:	2300      	movs	r3, #0
 800b966:	220a      	movs	r2, #10
 800b968:	4658      	mov	r0, fp
 800b96a:	f000 faf7 	bl	800bf5c <__multadd>
 800b96e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b970:	4681      	mov	r9, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 8172 	beq.w	800bc5c <_dtoa_r+0xb4c>
 800b978:	2300      	movs	r3, #0
 800b97a:	4629      	mov	r1, r5
 800b97c:	220a      	movs	r2, #10
 800b97e:	4658      	mov	r0, fp
 800b980:	f000 faec 	bl	800bf5c <__multadd>
 800b984:	9b00      	ldr	r3, [sp, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	4605      	mov	r5, r0
 800b98a:	dc67      	bgt.n	800ba5c <_dtoa_r+0x94c>
 800b98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b98e:	2b02      	cmp	r3, #2
 800b990:	dc41      	bgt.n	800ba16 <_dtoa_r+0x906>
 800b992:	e063      	b.n	800ba5c <_dtoa_r+0x94c>
 800b994:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b996:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b99a:	e746      	b.n	800b82a <_dtoa_r+0x71a>
 800b99c:	9b07      	ldr	r3, [sp, #28]
 800b99e:	1e5c      	subs	r4, r3, #1
 800b9a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9a2:	42a3      	cmp	r3, r4
 800b9a4:	bfbf      	itttt	lt
 800b9a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b9a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b9aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b9ac:	1ae3      	sublt	r3, r4, r3
 800b9ae:	bfb4      	ite	lt
 800b9b0:	18d2      	addlt	r2, r2, r3
 800b9b2:	1b1c      	subge	r4, r3, r4
 800b9b4:	9b07      	ldr	r3, [sp, #28]
 800b9b6:	bfbc      	itt	lt
 800b9b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b9ba:	2400      	movlt	r4, #0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bfb5      	itete	lt
 800b9c0:	eba8 0603 	sublt.w	r6, r8, r3
 800b9c4:	9b07      	ldrge	r3, [sp, #28]
 800b9c6:	2300      	movlt	r3, #0
 800b9c8:	4646      	movge	r6, r8
 800b9ca:	e730      	b.n	800b82e <_dtoa_r+0x71e>
 800b9cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b9ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b9d0:	4646      	mov	r6, r8
 800b9d2:	e735      	b.n	800b840 <_dtoa_r+0x730>
 800b9d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b9d6:	e75c      	b.n	800b892 <_dtoa_r+0x782>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e788      	b.n	800b8ee <_dtoa_r+0x7de>
 800b9dc:	3fe00000 	.word	0x3fe00000
 800b9e0:	40240000 	.word	0x40240000
 800b9e4:	40140000 	.word	0x40140000
 800b9e8:	9b02      	ldr	r3, [sp, #8]
 800b9ea:	e780      	b.n	800b8ee <_dtoa_r+0x7de>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9f0:	e782      	b.n	800b8f8 <_dtoa_r+0x7e8>
 800b9f2:	d099      	beq.n	800b928 <_dtoa_r+0x818>
 800b9f4:	9a08      	ldr	r2, [sp, #32]
 800b9f6:	331c      	adds	r3, #28
 800b9f8:	441a      	add	r2, r3
 800b9fa:	4498      	add	r8, r3
 800b9fc:	441e      	add	r6, r3
 800b9fe:	9208      	str	r2, [sp, #32]
 800ba00:	e792      	b.n	800b928 <_dtoa_r+0x818>
 800ba02:	4603      	mov	r3, r0
 800ba04:	e7f6      	b.n	800b9f4 <_dtoa_r+0x8e4>
 800ba06:	9b07      	ldr	r3, [sp, #28]
 800ba08:	9704      	str	r7, [sp, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	dc20      	bgt.n	800ba50 <_dtoa_r+0x940>
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba12:	2b02      	cmp	r3, #2
 800ba14:	dd1e      	ble.n	800ba54 <_dtoa_r+0x944>
 800ba16:	9b00      	ldr	r3, [sp, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f47f aec0 	bne.w	800b79e <_dtoa_r+0x68e>
 800ba1e:	4621      	mov	r1, r4
 800ba20:	2205      	movs	r2, #5
 800ba22:	4658      	mov	r0, fp
 800ba24:	f000 fa9a 	bl	800bf5c <__multadd>
 800ba28:	4601      	mov	r1, r0
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	4648      	mov	r0, r9
 800ba2e:	f000 fcf7 	bl	800c420 <__mcmp>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	f77f aeb3 	ble.w	800b79e <_dtoa_r+0x68e>
 800ba38:	4656      	mov	r6, sl
 800ba3a:	2331      	movs	r3, #49	@ 0x31
 800ba3c:	f806 3b01 	strb.w	r3, [r6], #1
 800ba40:	9b04      	ldr	r3, [sp, #16]
 800ba42:	3301      	adds	r3, #1
 800ba44:	9304      	str	r3, [sp, #16]
 800ba46:	e6ae      	b.n	800b7a6 <_dtoa_r+0x696>
 800ba48:	9c07      	ldr	r4, [sp, #28]
 800ba4a:	9704      	str	r7, [sp, #16]
 800ba4c:	4625      	mov	r5, r4
 800ba4e:	e7f3      	b.n	800ba38 <_dtoa_r+0x928>
 800ba50:	9b07      	ldr	r3, [sp, #28]
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 8104 	beq.w	800bc64 <_dtoa_r+0xb54>
 800ba5c:	2e00      	cmp	r6, #0
 800ba5e:	dd05      	ble.n	800ba6c <_dtoa_r+0x95c>
 800ba60:	4629      	mov	r1, r5
 800ba62:	4632      	mov	r2, r6
 800ba64:	4658      	mov	r0, fp
 800ba66:	f000 fc6f 	bl	800c348 <__lshift>
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d05a      	beq.n	800bb28 <_dtoa_r+0xa18>
 800ba72:	6869      	ldr	r1, [r5, #4]
 800ba74:	4658      	mov	r0, fp
 800ba76:	f000 fa0f 	bl	800be98 <_Balloc>
 800ba7a:	4606      	mov	r6, r0
 800ba7c:	b928      	cbnz	r0, 800ba8a <_dtoa_r+0x97a>
 800ba7e:	4b84      	ldr	r3, [pc, #528]	@ (800bc90 <_dtoa_r+0xb80>)
 800ba80:	4602      	mov	r2, r0
 800ba82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ba86:	f7ff bb5a 	b.w	800b13e <_dtoa_r+0x2e>
 800ba8a:	692a      	ldr	r2, [r5, #16]
 800ba8c:	3202      	adds	r2, #2
 800ba8e:	0092      	lsls	r2, r2, #2
 800ba90:	f105 010c 	add.w	r1, r5, #12
 800ba94:	300c      	adds	r0, #12
 800ba96:	f001 ff75 	bl	800d984 <memcpy>
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	4631      	mov	r1, r6
 800ba9e:	4658      	mov	r0, fp
 800baa0:	f000 fc52 	bl	800c348 <__lshift>
 800baa4:	f10a 0301 	add.w	r3, sl, #1
 800baa8:	9307      	str	r3, [sp, #28]
 800baaa:	9b00      	ldr	r3, [sp, #0]
 800baac:	4453      	add	r3, sl
 800baae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bab0:	9b02      	ldr	r3, [sp, #8]
 800bab2:	f003 0301 	and.w	r3, r3, #1
 800bab6:	462f      	mov	r7, r5
 800bab8:	930a      	str	r3, [sp, #40]	@ 0x28
 800baba:	4605      	mov	r5, r0
 800babc:	9b07      	ldr	r3, [sp, #28]
 800babe:	4621      	mov	r1, r4
 800bac0:	3b01      	subs	r3, #1
 800bac2:	4648      	mov	r0, r9
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	f7ff fa99 	bl	800affc <quorem>
 800baca:	4639      	mov	r1, r7
 800bacc:	9002      	str	r0, [sp, #8]
 800bace:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bad2:	4648      	mov	r0, r9
 800bad4:	f000 fca4 	bl	800c420 <__mcmp>
 800bad8:	462a      	mov	r2, r5
 800bada:	9008      	str	r0, [sp, #32]
 800badc:	4621      	mov	r1, r4
 800bade:	4658      	mov	r0, fp
 800bae0:	f000 fcba 	bl	800c458 <__mdiff>
 800bae4:	68c2      	ldr	r2, [r0, #12]
 800bae6:	4606      	mov	r6, r0
 800bae8:	bb02      	cbnz	r2, 800bb2c <_dtoa_r+0xa1c>
 800baea:	4601      	mov	r1, r0
 800baec:	4648      	mov	r0, r9
 800baee:	f000 fc97 	bl	800c420 <__mcmp>
 800baf2:	4602      	mov	r2, r0
 800baf4:	4631      	mov	r1, r6
 800baf6:	4658      	mov	r0, fp
 800baf8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bafa:	f000 fa0d 	bl	800bf18 <_Bfree>
 800bafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb02:	9e07      	ldr	r6, [sp, #28]
 800bb04:	ea43 0102 	orr.w	r1, r3, r2
 800bb08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb0a:	4319      	orrs	r1, r3
 800bb0c:	d110      	bne.n	800bb30 <_dtoa_r+0xa20>
 800bb0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb12:	d029      	beq.n	800bb68 <_dtoa_r+0xa58>
 800bb14:	9b08      	ldr	r3, [sp, #32]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	dd02      	ble.n	800bb20 <_dtoa_r+0xa10>
 800bb1a:	9b02      	ldr	r3, [sp, #8]
 800bb1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bb20:	9b00      	ldr	r3, [sp, #0]
 800bb22:	f883 8000 	strb.w	r8, [r3]
 800bb26:	e63f      	b.n	800b7a8 <_dtoa_r+0x698>
 800bb28:	4628      	mov	r0, r5
 800bb2a:	e7bb      	b.n	800baa4 <_dtoa_r+0x994>
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	e7e1      	b.n	800baf4 <_dtoa_r+0x9e4>
 800bb30:	9b08      	ldr	r3, [sp, #32]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	db04      	blt.n	800bb40 <_dtoa_r+0xa30>
 800bb36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb38:	430b      	orrs	r3, r1
 800bb3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb3c:	430b      	orrs	r3, r1
 800bb3e:	d120      	bne.n	800bb82 <_dtoa_r+0xa72>
 800bb40:	2a00      	cmp	r2, #0
 800bb42:	dded      	ble.n	800bb20 <_dtoa_r+0xa10>
 800bb44:	4649      	mov	r1, r9
 800bb46:	2201      	movs	r2, #1
 800bb48:	4658      	mov	r0, fp
 800bb4a:	f000 fbfd 	bl	800c348 <__lshift>
 800bb4e:	4621      	mov	r1, r4
 800bb50:	4681      	mov	r9, r0
 800bb52:	f000 fc65 	bl	800c420 <__mcmp>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	dc03      	bgt.n	800bb62 <_dtoa_r+0xa52>
 800bb5a:	d1e1      	bne.n	800bb20 <_dtoa_r+0xa10>
 800bb5c:	f018 0f01 	tst.w	r8, #1
 800bb60:	d0de      	beq.n	800bb20 <_dtoa_r+0xa10>
 800bb62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb66:	d1d8      	bne.n	800bb1a <_dtoa_r+0xa0a>
 800bb68:	9a00      	ldr	r2, [sp, #0]
 800bb6a:	2339      	movs	r3, #57	@ 0x39
 800bb6c:	7013      	strb	r3, [r2, #0]
 800bb6e:	4633      	mov	r3, r6
 800bb70:	461e      	mov	r6, r3
 800bb72:	3b01      	subs	r3, #1
 800bb74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb78:	2a39      	cmp	r2, #57	@ 0x39
 800bb7a:	d052      	beq.n	800bc22 <_dtoa_r+0xb12>
 800bb7c:	3201      	adds	r2, #1
 800bb7e:	701a      	strb	r2, [r3, #0]
 800bb80:	e612      	b.n	800b7a8 <_dtoa_r+0x698>
 800bb82:	2a00      	cmp	r2, #0
 800bb84:	dd07      	ble.n	800bb96 <_dtoa_r+0xa86>
 800bb86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb8a:	d0ed      	beq.n	800bb68 <_dtoa_r+0xa58>
 800bb8c:	9a00      	ldr	r2, [sp, #0]
 800bb8e:	f108 0301 	add.w	r3, r8, #1
 800bb92:	7013      	strb	r3, [r2, #0]
 800bb94:	e608      	b.n	800b7a8 <_dtoa_r+0x698>
 800bb96:	9b07      	ldr	r3, [sp, #28]
 800bb98:	9a07      	ldr	r2, [sp, #28]
 800bb9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bb9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d028      	beq.n	800bbf6 <_dtoa_r+0xae6>
 800bba4:	4649      	mov	r1, r9
 800bba6:	2300      	movs	r3, #0
 800bba8:	220a      	movs	r2, #10
 800bbaa:	4658      	mov	r0, fp
 800bbac:	f000 f9d6 	bl	800bf5c <__multadd>
 800bbb0:	42af      	cmp	r7, r5
 800bbb2:	4681      	mov	r9, r0
 800bbb4:	f04f 0300 	mov.w	r3, #0
 800bbb8:	f04f 020a 	mov.w	r2, #10
 800bbbc:	4639      	mov	r1, r7
 800bbbe:	4658      	mov	r0, fp
 800bbc0:	d107      	bne.n	800bbd2 <_dtoa_r+0xac2>
 800bbc2:	f000 f9cb 	bl	800bf5c <__multadd>
 800bbc6:	4607      	mov	r7, r0
 800bbc8:	4605      	mov	r5, r0
 800bbca:	9b07      	ldr	r3, [sp, #28]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	9307      	str	r3, [sp, #28]
 800bbd0:	e774      	b.n	800babc <_dtoa_r+0x9ac>
 800bbd2:	f000 f9c3 	bl	800bf5c <__multadd>
 800bbd6:	4629      	mov	r1, r5
 800bbd8:	4607      	mov	r7, r0
 800bbda:	2300      	movs	r3, #0
 800bbdc:	220a      	movs	r2, #10
 800bbde:	4658      	mov	r0, fp
 800bbe0:	f000 f9bc 	bl	800bf5c <__multadd>
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	e7f0      	b.n	800bbca <_dtoa_r+0xaba>
 800bbe8:	9b00      	ldr	r3, [sp, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	bfcc      	ite	gt
 800bbee:	461e      	movgt	r6, r3
 800bbf0:	2601      	movle	r6, #1
 800bbf2:	4456      	add	r6, sl
 800bbf4:	2700      	movs	r7, #0
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	4658      	mov	r0, fp
 800bbfc:	f000 fba4 	bl	800c348 <__lshift>
 800bc00:	4621      	mov	r1, r4
 800bc02:	4681      	mov	r9, r0
 800bc04:	f000 fc0c 	bl	800c420 <__mcmp>
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	dcb0      	bgt.n	800bb6e <_dtoa_r+0xa5e>
 800bc0c:	d102      	bne.n	800bc14 <_dtoa_r+0xb04>
 800bc0e:	f018 0f01 	tst.w	r8, #1
 800bc12:	d1ac      	bne.n	800bb6e <_dtoa_r+0xa5e>
 800bc14:	4633      	mov	r3, r6
 800bc16:	461e      	mov	r6, r3
 800bc18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc1c:	2a30      	cmp	r2, #48	@ 0x30
 800bc1e:	d0fa      	beq.n	800bc16 <_dtoa_r+0xb06>
 800bc20:	e5c2      	b.n	800b7a8 <_dtoa_r+0x698>
 800bc22:	459a      	cmp	sl, r3
 800bc24:	d1a4      	bne.n	800bb70 <_dtoa_r+0xa60>
 800bc26:	9b04      	ldr	r3, [sp, #16]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	9304      	str	r3, [sp, #16]
 800bc2c:	2331      	movs	r3, #49	@ 0x31
 800bc2e:	f88a 3000 	strb.w	r3, [sl]
 800bc32:	e5b9      	b.n	800b7a8 <_dtoa_r+0x698>
 800bc34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bc94 <_dtoa_r+0xb84>
 800bc3a:	b11b      	cbz	r3, 800bc44 <_dtoa_r+0xb34>
 800bc3c:	f10a 0308 	add.w	r3, sl, #8
 800bc40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	4650      	mov	r0, sl
 800bc46:	b019      	add	sp, #100	@ 0x64
 800bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	f77f ae37 	ble.w	800b8c2 <_dtoa_r+0x7b2>
 800bc54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc56:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc58:	2001      	movs	r0, #1
 800bc5a:	e655      	b.n	800b908 <_dtoa_r+0x7f8>
 800bc5c:	9b00      	ldr	r3, [sp, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f77f aed6 	ble.w	800ba10 <_dtoa_r+0x900>
 800bc64:	4656      	mov	r6, sl
 800bc66:	4621      	mov	r1, r4
 800bc68:	4648      	mov	r0, r9
 800bc6a:	f7ff f9c7 	bl	800affc <quorem>
 800bc6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc72:	f806 8b01 	strb.w	r8, [r6], #1
 800bc76:	9b00      	ldr	r3, [sp, #0]
 800bc78:	eba6 020a 	sub.w	r2, r6, sl
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	ddb3      	ble.n	800bbe8 <_dtoa_r+0xad8>
 800bc80:	4649      	mov	r1, r9
 800bc82:	2300      	movs	r3, #0
 800bc84:	220a      	movs	r2, #10
 800bc86:	4658      	mov	r0, fp
 800bc88:	f000 f968 	bl	800bf5c <__multadd>
 800bc8c:	4681      	mov	r9, r0
 800bc8e:	e7ea      	b.n	800bc66 <_dtoa_r+0xb56>
 800bc90:	0802c735 	.word	0x0802c735
 800bc94:	0802c6b9 	.word	0x0802c6b9

0800bc98 <_free_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	4605      	mov	r5, r0
 800bc9c:	2900      	cmp	r1, #0
 800bc9e:	d041      	beq.n	800bd24 <_free_r+0x8c>
 800bca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca4:	1f0c      	subs	r4, r1, #4
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	bfb8      	it	lt
 800bcaa:	18e4      	addlt	r4, r4, r3
 800bcac:	f000 f8e8 	bl	800be80 <__malloc_lock>
 800bcb0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd28 <_free_r+0x90>)
 800bcb2:	6813      	ldr	r3, [r2, #0]
 800bcb4:	b933      	cbnz	r3, 800bcc4 <_free_r+0x2c>
 800bcb6:	6063      	str	r3, [r4, #4]
 800bcb8:	6014      	str	r4, [r2, #0]
 800bcba:	4628      	mov	r0, r5
 800bcbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcc0:	f000 b8e4 	b.w	800be8c <__malloc_unlock>
 800bcc4:	42a3      	cmp	r3, r4
 800bcc6:	d908      	bls.n	800bcda <_free_r+0x42>
 800bcc8:	6820      	ldr	r0, [r4, #0]
 800bcca:	1821      	adds	r1, r4, r0
 800bccc:	428b      	cmp	r3, r1
 800bcce:	bf01      	itttt	eq
 800bcd0:	6819      	ldreq	r1, [r3, #0]
 800bcd2:	685b      	ldreq	r3, [r3, #4]
 800bcd4:	1809      	addeq	r1, r1, r0
 800bcd6:	6021      	streq	r1, [r4, #0]
 800bcd8:	e7ed      	b.n	800bcb6 <_free_r+0x1e>
 800bcda:	461a      	mov	r2, r3
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	b10b      	cbz	r3, 800bce4 <_free_r+0x4c>
 800bce0:	42a3      	cmp	r3, r4
 800bce2:	d9fa      	bls.n	800bcda <_free_r+0x42>
 800bce4:	6811      	ldr	r1, [r2, #0]
 800bce6:	1850      	adds	r0, r2, r1
 800bce8:	42a0      	cmp	r0, r4
 800bcea:	d10b      	bne.n	800bd04 <_free_r+0x6c>
 800bcec:	6820      	ldr	r0, [r4, #0]
 800bcee:	4401      	add	r1, r0
 800bcf0:	1850      	adds	r0, r2, r1
 800bcf2:	4283      	cmp	r3, r0
 800bcf4:	6011      	str	r1, [r2, #0]
 800bcf6:	d1e0      	bne.n	800bcba <_free_r+0x22>
 800bcf8:	6818      	ldr	r0, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	6053      	str	r3, [r2, #4]
 800bcfe:	4408      	add	r0, r1
 800bd00:	6010      	str	r0, [r2, #0]
 800bd02:	e7da      	b.n	800bcba <_free_r+0x22>
 800bd04:	d902      	bls.n	800bd0c <_free_r+0x74>
 800bd06:	230c      	movs	r3, #12
 800bd08:	602b      	str	r3, [r5, #0]
 800bd0a:	e7d6      	b.n	800bcba <_free_r+0x22>
 800bd0c:	6820      	ldr	r0, [r4, #0]
 800bd0e:	1821      	adds	r1, r4, r0
 800bd10:	428b      	cmp	r3, r1
 800bd12:	bf04      	itt	eq
 800bd14:	6819      	ldreq	r1, [r3, #0]
 800bd16:	685b      	ldreq	r3, [r3, #4]
 800bd18:	6063      	str	r3, [r4, #4]
 800bd1a:	bf04      	itt	eq
 800bd1c:	1809      	addeq	r1, r1, r0
 800bd1e:	6021      	streq	r1, [r4, #0]
 800bd20:	6054      	str	r4, [r2, #4]
 800bd22:	e7ca      	b.n	800bcba <_free_r+0x22>
 800bd24:	bd38      	pop	{r3, r4, r5, pc}
 800bd26:	bf00      	nop
 800bd28:	20002f44 	.word	0x20002f44

0800bd2c <malloc>:
 800bd2c:	4b02      	ldr	r3, [pc, #8]	@ (800bd38 <malloc+0xc>)
 800bd2e:	4601      	mov	r1, r0
 800bd30:	6818      	ldr	r0, [r3, #0]
 800bd32:	f000 b825 	b.w	800bd80 <_malloc_r>
 800bd36:	bf00      	nop
 800bd38:	20000450 	.word	0x20000450

0800bd3c <sbrk_aligned>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	4e0f      	ldr	r6, [pc, #60]	@ (800bd7c <sbrk_aligned+0x40>)
 800bd40:	460c      	mov	r4, r1
 800bd42:	6831      	ldr	r1, [r6, #0]
 800bd44:	4605      	mov	r5, r0
 800bd46:	b911      	cbnz	r1, 800bd4e <sbrk_aligned+0x12>
 800bd48:	f001 fe0c 	bl	800d964 <_sbrk_r>
 800bd4c:	6030      	str	r0, [r6, #0]
 800bd4e:	4621      	mov	r1, r4
 800bd50:	4628      	mov	r0, r5
 800bd52:	f001 fe07 	bl	800d964 <_sbrk_r>
 800bd56:	1c43      	adds	r3, r0, #1
 800bd58:	d103      	bne.n	800bd62 <sbrk_aligned+0x26>
 800bd5a:	f04f 34ff 	mov.w	r4, #4294967295
 800bd5e:	4620      	mov	r0, r4
 800bd60:	bd70      	pop	{r4, r5, r6, pc}
 800bd62:	1cc4      	adds	r4, r0, #3
 800bd64:	f024 0403 	bic.w	r4, r4, #3
 800bd68:	42a0      	cmp	r0, r4
 800bd6a:	d0f8      	beq.n	800bd5e <sbrk_aligned+0x22>
 800bd6c:	1a21      	subs	r1, r4, r0
 800bd6e:	4628      	mov	r0, r5
 800bd70:	f001 fdf8 	bl	800d964 <_sbrk_r>
 800bd74:	3001      	adds	r0, #1
 800bd76:	d1f2      	bne.n	800bd5e <sbrk_aligned+0x22>
 800bd78:	e7ef      	b.n	800bd5a <sbrk_aligned+0x1e>
 800bd7a:	bf00      	nop
 800bd7c:	20002f40 	.word	0x20002f40

0800bd80 <_malloc_r>:
 800bd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd84:	1ccd      	adds	r5, r1, #3
 800bd86:	f025 0503 	bic.w	r5, r5, #3
 800bd8a:	3508      	adds	r5, #8
 800bd8c:	2d0c      	cmp	r5, #12
 800bd8e:	bf38      	it	cc
 800bd90:	250c      	movcc	r5, #12
 800bd92:	2d00      	cmp	r5, #0
 800bd94:	4606      	mov	r6, r0
 800bd96:	db01      	blt.n	800bd9c <_malloc_r+0x1c>
 800bd98:	42a9      	cmp	r1, r5
 800bd9a:	d904      	bls.n	800bda6 <_malloc_r+0x26>
 800bd9c:	230c      	movs	r3, #12
 800bd9e:	6033      	str	r3, [r6, #0]
 800bda0:	2000      	movs	r0, #0
 800bda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bda6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be7c <_malloc_r+0xfc>
 800bdaa:	f000 f869 	bl	800be80 <__malloc_lock>
 800bdae:	f8d8 3000 	ldr.w	r3, [r8]
 800bdb2:	461c      	mov	r4, r3
 800bdb4:	bb44      	cbnz	r4, 800be08 <_malloc_r+0x88>
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f7ff ffbf 	bl	800bd3c <sbrk_aligned>
 800bdbe:	1c43      	adds	r3, r0, #1
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	d158      	bne.n	800be76 <_malloc_r+0xf6>
 800bdc4:	f8d8 4000 	ldr.w	r4, [r8]
 800bdc8:	4627      	mov	r7, r4
 800bdca:	2f00      	cmp	r7, #0
 800bdcc:	d143      	bne.n	800be56 <_malloc_r+0xd6>
 800bdce:	2c00      	cmp	r4, #0
 800bdd0:	d04b      	beq.n	800be6a <_malloc_r+0xea>
 800bdd2:	6823      	ldr	r3, [r4, #0]
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	eb04 0903 	add.w	r9, r4, r3
 800bddc:	f001 fdc2 	bl	800d964 <_sbrk_r>
 800bde0:	4581      	cmp	r9, r0
 800bde2:	d142      	bne.n	800be6a <_malloc_r+0xea>
 800bde4:	6821      	ldr	r1, [r4, #0]
 800bde6:	1a6d      	subs	r5, r5, r1
 800bde8:	4629      	mov	r1, r5
 800bdea:	4630      	mov	r0, r6
 800bdec:	f7ff ffa6 	bl	800bd3c <sbrk_aligned>
 800bdf0:	3001      	adds	r0, #1
 800bdf2:	d03a      	beq.n	800be6a <_malloc_r+0xea>
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	442b      	add	r3, r5
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	f8d8 3000 	ldr.w	r3, [r8]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	bb62      	cbnz	r2, 800be5c <_malloc_r+0xdc>
 800be02:	f8c8 7000 	str.w	r7, [r8]
 800be06:	e00f      	b.n	800be28 <_malloc_r+0xa8>
 800be08:	6822      	ldr	r2, [r4, #0]
 800be0a:	1b52      	subs	r2, r2, r5
 800be0c:	d420      	bmi.n	800be50 <_malloc_r+0xd0>
 800be0e:	2a0b      	cmp	r2, #11
 800be10:	d917      	bls.n	800be42 <_malloc_r+0xc2>
 800be12:	1961      	adds	r1, r4, r5
 800be14:	42a3      	cmp	r3, r4
 800be16:	6025      	str	r5, [r4, #0]
 800be18:	bf18      	it	ne
 800be1a:	6059      	strne	r1, [r3, #4]
 800be1c:	6863      	ldr	r3, [r4, #4]
 800be1e:	bf08      	it	eq
 800be20:	f8c8 1000 	streq.w	r1, [r8]
 800be24:	5162      	str	r2, [r4, r5]
 800be26:	604b      	str	r3, [r1, #4]
 800be28:	4630      	mov	r0, r6
 800be2a:	f000 f82f 	bl	800be8c <__malloc_unlock>
 800be2e:	f104 000b 	add.w	r0, r4, #11
 800be32:	1d23      	adds	r3, r4, #4
 800be34:	f020 0007 	bic.w	r0, r0, #7
 800be38:	1ac2      	subs	r2, r0, r3
 800be3a:	bf1c      	itt	ne
 800be3c:	1a1b      	subne	r3, r3, r0
 800be3e:	50a3      	strne	r3, [r4, r2]
 800be40:	e7af      	b.n	800bda2 <_malloc_r+0x22>
 800be42:	6862      	ldr	r2, [r4, #4]
 800be44:	42a3      	cmp	r3, r4
 800be46:	bf0c      	ite	eq
 800be48:	f8c8 2000 	streq.w	r2, [r8]
 800be4c:	605a      	strne	r2, [r3, #4]
 800be4e:	e7eb      	b.n	800be28 <_malloc_r+0xa8>
 800be50:	4623      	mov	r3, r4
 800be52:	6864      	ldr	r4, [r4, #4]
 800be54:	e7ae      	b.n	800bdb4 <_malloc_r+0x34>
 800be56:	463c      	mov	r4, r7
 800be58:	687f      	ldr	r7, [r7, #4]
 800be5a:	e7b6      	b.n	800bdca <_malloc_r+0x4a>
 800be5c:	461a      	mov	r2, r3
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	42a3      	cmp	r3, r4
 800be62:	d1fb      	bne.n	800be5c <_malloc_r+0xdc>
 800be64:	2300      	movs	r3, #0
 800be66:	6053      	str	r3, [r2, #4]
 800be68:	e7de      	b.n	800be28 <_malloc_r+0xa8>
 800be6a:	230c      	movs	r3, #12
 800be6c:	6033      	str	r3, [r6, #0]
 800be6e:	4630      	mov	r0, r6
 800be70:	f000 f80c 	bl	800be8c <__malloc_unlock>
 800be74:	e794      	b.n	800bda0 <_malloc_r+0x20>
 800be76:	6005      	str	r5, [r0, #0]
 800be78:	e7d6      	b.n	800be28 <_malloc_r+0xa8>
 800be7a:	bf00      	nop
 800be7c:	20002f44 	.word	0x20002f44

0800be80 <__malloc_lock>:
 800be80:	4801      	ldr	r0, [pc, #4]	@ (800be88 <__malloc_lock+0x8>)
 800be82:	f7ff b8b2 	b.w	800afea <__retarget_lock_acquire_recursive>
 800be86:	bf00      	nop
 800be88:	20002f3c 	.word	0x20002f3c

0800be8c <__malloc_unlock>:
 800be8c:	4801      	ldr	r0, [pc, #4]	@ (800be94 <__malloc_unlock+0x8>)
 800be8e:	f7ff b8ad 	b.w	800afec <__retarget_lock_release_recursive>
 800be92:	bf00      	nop
 800be94:	20002f3c 	.word	0x20002f3c

0800be98 <_Balloc>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	69c6      	ldr	r6, [r0, #28]
 800be9c:	4604      	mov	r4, r0
 800be9e:	460d      	mov	r5, r1
 800bea0:	b976      	cbnz	r6, 800bec0 <_Balloc+0x28>
 800bea2:	2010      	movs	r0, #16
 800bea4:	f7ff ff42 	bl	800bd2c <malloc>
 800bea8:	4602      	mov	r2, r0
 800beaa:	61e0      	str	r0, [r4, #28]
 800beac:	b920      	cbnz	r0, 800beb8 <_Balloc+0x20>
 800beae:	4b18      	ldr	r3, [pc, #96]	@ (800bf10 <_Balloc+0x78>)
 800beb0:	4818      	ldr	r0, [pc, #96]	@ (800bf14 <_Balloc+0x7c>)
 800beb2:	216b      	movs	r1, #107	@ 0x6b
 800beb4:	f001 fd7c 	bl	800d9b0 <__assert_func>
 800beb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bebc:	6006      	str	r6, [r0, #0]
 800bebe:	60c6      	str	r6, [r0, #12]
 800bec0:	69e6      	ldr	r6, [r4, #28]
 800bec2:	68f3      	ldr	r3, [r6, #12]
 800bec4:	b183      	cbz	r3, 800bee8 <_Balloc+0x50>
 800bec6:	69e3      	ldr	r3, [r4, #28]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bece:	b9b8      	cbnz	r0, 800bf00 <_Balloc+0x68>
 800bed0:	2101      	movs	r1, #1
 800bed2:	fa01 f605 	lsl.w	r6, r1, r5
 800bed6:	1d72      	adds	r2, r6, #5
 800bed8:	0092      	lsls	r2, r2, #2
 800beda:	4620      	mov	r0, r4
 800bedc:	f001 fd86 	bl	800d9ec <_calloc_r>
 800bee0:	b160      	cbz	r0, 800befc <_Balloc+0x64>
 800bee2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bee6:	e00e      	b.n	800bf06 <_Balloc+0x6e>
 800bee8:	2221      	movs	r2, #33	@ 0x21
 800beea:	2104      	movs	r1, #4
 800beec:	4620      	mov	r0, r4
 800beee:	f001 fd7d 	bl	800d9ec <_calloc_r>
 800bef2:	69e3      	ldr	r3, [r4, #28]
 800bef4:	60f0      	str	r0, [r6, #12]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1e4      	bne.n	800bec6 <_Balloc+0x2e>
 800befc:	2000      	movs	r0, #0
 800befe:	bd70      	pop	{r4, r5, r6, pc}
 800bf00:	6802      	ldr	r2, [r0, #0]
 800bf02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf06:	2300      	movs	r3, #0
 800bf08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf0c:	e7f7      	b.n	800befe <_Balloc+0x66>
 800bf0e:	bf00      	nop
 800bf10:	0802c6c6 	.word	0x0802c6c6
 800bf14:	0802c746 	.word	0x0802c746

0800bf18 <_Bfree>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	69c6      	ldr	r6, [r0, #28]
 800bf1c:	4605      	mov	r5, r0
 800bf1e:	460c      	mov	r4, r1
 800bf20:	b976      	cbnz	r6, 800bf40 <_Bfree+0x28>
 800bf22:	2010      	movs	r0, #16
 800bf24:	f7ff ff02 	bl	800bd2c <malloc>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	61e8      	str	r0, [r5, #28]
 800bf2c:	b920      	cbnz	r0, 800bf38 <_Bfree+0x20>
 800bf2e:	4b09      	ldr	r3, [pc, #36]	@ (800bf54 <_Bfree+0x3c>)
 800bf30:	4809      	ldr	r0, [pc, #36]	@ (800bf58 <_Bfree+0x40>)
 800bf32:	218f      	movs	r1, #143	@ 0x8f
 800bf34:	f001 fd3c 	bl	800d9b0 <__assert_func>
 800bf38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf3c:	6006      	str	r6, [r0, #0]
 800bf3e:	60c6      	str	r6, [r0, #12]
 800bf40:	b13c      	cbz	r4, 800bf52 <_Bfree+0x3a>
 800bf42:	69eb      	ldr	r3, [r5, #28]
 800bf44:	6862      	ldr	r2, [r4, #4]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf4c:	6021      	str	r1, [r4, #0]
 800bf4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf52:	bd70      	pop	{r4, r5, r6, pc}
 800bf54:	0802c6c6 	.word	0x0802c6c6
 800bf58:	0802c746 	.word	0x0802c746

0800bf5c <__multadd>:
 800bf5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf60:	690d      	ldr	r5, [r1, #16]
 800bf62:	4607      	mov	r7, r0
 800bf64:	460c      	mov	r4, r1
 800bf66:	461e      	mov	r6, r3
 800bf68:	f101 0c14 	add.w	ip, r1, #20
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	f8dc 3000 	ldr.w	r3, [ip]
 800bf72:	b299      	uxth	r1, r3
 800bf74:	fb02 6101 	mla	r1, r2, r1, r6
 800bf78:	0c1e      	lsrs	r6, r3, #16
 800bf7a:	0c0b      	lsrs	r3, r1, #16
 800bf7c:	fb02 3306 	mla	r3, r2, r6, r3
 800bf80:	b289      	uxth	r1, r1
 800bf82:	3001      	adds	r0, #1
 800bf84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf88:	4285      	cmp	r5, r0
 800bf8a:	f84c 1b04 	str.w	r1, [ip], #4
 800bf8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf92:	dcec      	bgt.n	800bf6e <__multadd+0x12>
 800bf94:	b30e      	cbz	r6, 800bfda <__multadd+0x7e>
 800bf96:	68a3      	ldr	r3, [r4, #8]
 800bf98:	42ab      	cmp	r3, r5
 800bf9a:	dc19      	bgt.n	800bfd0 <__multadd+0x74>
 800bf9c:	6861      	ldr	r1, [r4, #4]
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	3101      	adds	r1, #1
 800bfa2:	f7ff ff79 	bl	800be98 <_Balloc>
 800bfa6:	4680      	mov	r8, r0
 800bfa8:	b928      	cbnz	r0, 800bfb6 <__multadd+0x5a>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	4b0c      	ldr	r3, [pc, #48]	@ (800bfe0 <__multadd+0x84>)
 800bfae:	480d      	ldr	r0, [pc, #52]	@ (800bfe4 <__multadd+0x88>)
 800bfb0:	21ba      	movs	r1, #186	@ 0xba
 800bfb2:	f001 fcfd 	bl	800d9b0 <__assert_func>
 800bfb6:	6922      	ldr	r2, [r4, #16]
 800bfb8:	3202      	adds	r2, #2
 800bfba:	f104 010c 	add.w	r1, r4, #12
 800bfbe:	0092      	lsls	r2, r2, #2
 800bfc0:	300c      	adds	r0, #12
 800bfc2:	f001 fcdf 	bl	800d984 <memcpy>
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	4638      	mov	r0, r7
 800bfca:	f7ff ffa5 	bl	800bf18 <_Bfree>
 800bfce:	4644      	mov	r4, r8
 800bfd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfd4:	3501      	adds	r5, #1
 800bfd6:	615e      	str	r6, [r3, #20]
 800bfd8:	6125      	str	r5, [r4, #16]
 800bfda:	4620      	mov	r0, r4
 800bfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe0:	0802c735 	.word	0x0802c735
 800bfe4:	0802c746 	.word	0x0802c746

0800bfe8 <__s2b>:
 800bfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfec:	460c      	mov	r4, r1
 800bfee:	4615      	mov	r5, r2
 800bff0:	461f      	mov	r7, r3
 800bff2:	2209      	movs	r2, #9
 800bff4:	3308      	adds	r3, #8
 800bff6:	4606      	mov	r6, r0
 800bff8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bffc:	2100      	movs	r1, #0
 800bffe:	2201      	movs	r2, #1
 800c000:	429a      	cmp	r2, r3
 800c002:	db09      	blt.n	800c018 <__s2b+0x30>
 800c004:	4630      	mov	r0, r6
 800c006:	f7ff ff47 	bl	800be98 <_Balloc>
 800c00a:	b940      	cbnz	r0, 800c01e <__s2b+0x36>
 800c00c:	4602      	mov	r2, r0
 800c00e:	4b19      	ldr	r3, [pc, #100]	@ (800c074 <__s2b+0x8c>)
 800c010:	4819      	ldr	r0, [pc, #100]	@ (800c078 <__s2b+0x90>)
 800c012:	21d3      	movs	r1, #211	@ 0xd3
 800c014:	f001 fccc 	bl	800d9b0 <__assert_func>
 800c018:	0052      	lsls	r2, r2, #1
 800c01a:	3101      	adds	r1, #1
 800c01c:	e7f0      	b.n	800c000 <__s2b+0x18>
 800c01e:	9b08      	ldr	r3, [sp, #32]
 800c020:	6143      	str	r3, [r0, #20]
 800c022:	2d09      	cmp	r5, #9
 800c024:	f04f 0301 	mov.w	r3, #1
 800c028:	6103      	str	r3, [r0, #16]
 800c02a:	dd16      	ble.n	800c05a <__s2b+0x72>
 800c02c:	f104 0909 	add.w	r9, r4, #9
 800c030:	46c8      	mov	r8, r9
 800c032:	442c      	add	r4, r5
 800c034:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c038:	4601      	mov	r1, r0
 800c03a:	3b30      	subs	r3, #48	@ 0x30
 800c03c:	220a      	movs	r2, #10
 800c03e:	4630      	mov	r0, r6
 800c040:	f7ff ff8c 	bl	800bf5c <__multadd>
 800c044:	45a0      	cmp	r8, r4
 800c046:	d1f5      	bne.n	800c034 <__s2b+0x4c>
 800c048:	f1a5 0408 	sub.w	r4, r5, #8
 800c04c:	444c      	add	r4, r9
 800c04e:	1b2d      	subs	r5, r5, r4
 800c050:	1963      	adds	r3, r4, r5
 800c052:	42bb      	cmp	r3, r7
 800c054:	db04      	blt.n	800c060 <__s2b+0x78>
 800c056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c05a:	340a      	adds	r4, #10
 800c05c:	2509      	movs	r5, #9
 800c05e:	e7f6      	b.n	800c04e <__s2b+0x66>
 800c060:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c064:	4601      	mov	r1, r0
 800c066:	3b30      	subs	r3, #48	@ 0x30
 800c068:	220a      	movs	r2, #10
 800c06a:	4630      	mov	r0, r6
 800c06c:	f7ff ff76 	bl	800bf5c <__multadd>
 800c070:	e7ee      	b.n	800c050 <__s2b+0x68>
 800c072:	bf00      	nop
 800c074:	0802c735 	.word	0x0802c735
 800c078:	0802c746 	.word	0x0802c746

0800c07c <__hi0bits>:
 800c07c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c080:	4603      	mov	r3, r0
 800c082:	bf36      	itet	cc
 800c084:	0403      	lslcc	r3, r0, #16
 800c086:	2000      	movcs	r0, #0
 800c088:	2010      	movcc	r0, #16
 800c08a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c08e:	bf3c      	itt	cc
 800c090:	021b      	lslcc	r3, r3, #8
 800c092:	3008      	addcc	r0, #8
 800c094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c098:	bf3c      	itt	cc
 800c09a:	011b      	lslcc	r3, r3, #4
 800c09c:	3004      	addcc	r0, #4
 800c09e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0a2:	bf3c      	itt	cc
 800c0a4:	009b      	lslcc	r3, r3, #2
 800c0a6:	3002      	addcc	r0, #2
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	db05      	blt.n	800c0b8 <__hi0bits+0x3c>
 800c0ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c0b0:	f100 0001 	add.w	r0, r0, #1
 800c0b4:	bf08      	it	eq
 800c0b6:	2020      	moveq	r0, #32
 800c0b8:	4770      	bx	lr

0800c0ba <__lo0bits>:
 800c0ba:	6803      	ldr	r3, [r0, #0]
 800c0bc:	4602      	mov	r2, r0
 800c0be:	f013 0007 	ands.w	r0, r3, #7
 800c0c2:	d00b      	beq.n	800c0dc <__lo0bits+0x22>
 800c0c4:	07d9      	lsls	r1, r3, #31
 800c0c6:	d421      	bmi.n	800c10c <__lo0bits+0x52>
 800c0c8:	0798      	lsls	r0, r3, #30
 800c0ca:	bf49      	itett	mi
 800c0cc:	085b      	lsrmi	r3, r3, #1
 800c0ce:	089b      	lsrpl	r3, r3, #2
 800c0d0:	2001      	movmi	r0, #1
 800c0d2:	6013      	strmi	r3, [r2, #0]
 800c0d4:	bf5c      	itt	pl
 800c0d6:	6013      	strpl	r3, [r2, #0]
 800c0d8:	2002      	movpl	r0, #2
 800c0da:	4770      	bx	lr
 800c0dc:	b299      	uxth	r1, r3
 800c0de:	b909      	cbnz	r1, 800c0e4 <__lo0bits+0x2a>
 800c0e0:	0c1b      	lsrs	r3, r3, #16
 800c0e2:	2010      	movs	r0, #16
 800c0e4:	b2d9      	uxtb	r1, r3
 800c0e6:	b909      	cbnz	r1, 800c0ec <__lo0bits+0x32>
 800c0e8:	3008      	adds	r0, #8
 800c0ea:	0a1b      	lsrs	r3, r3, #8
 800c0ec:	0719      	lsls	r1, r3, #28
 800c0ee:	bf04      	itt	eq
 800c0f0:	091b      	lsreq	r3, r3, #4
 800c0f2:	3004      	addeq	r0, #4
 800c0f4:	0799      	lsls	r1, r3, #30
 800c0f6:	bf04      	itt	eq
 800c0f8:	089b      	lsreq	r3, r3, #2
 800c0fa:	3002      	addeq	r0, #2
 800c0fc:	07d9      	lsls	r1, r3, #31
 800c0fe:	d403      	bmi.n	800c108 <__lo0bits+0x4e>
 800c100:	085b      	lsrs	r3, r3, #1
 800c102:	f100 0001 	add.w	r0, r0, #1
 800c106:	d003      	beq.n	800c110 <__lo0bits+0x56>
 800c108:	6013      	str	r3, [r2, #0]
 800c10a:	4770      	bx	lr
 800c10c:	2000      	movs	r0, #0
 800c10e:	4770      	bx	lr
 800c110:	2020      	movs	r0, #32
 800c112:	4770      	bx	lr

0800c114 <__i2b>:
 800c114:	b510      	push	{r4, lr}
 800c116:	460c      	mov	r4, r1
 800c118:	2101      	movs	r1, #1
 800c11a:	f7ff febd 	bl	800be98 <_Balloc>
 800c11e:	4602      	mov	r2, r0
 800c120:	b928      	cbnz	r0, 800c12e <__i2b+0x1a>
 800c122:	4b05      	ldr	r3, [pc, #20]	@ (800c138 <__i2b+0x24>)
 800c124:	4805      	ldr	r0, [pc, #20]	@ (800c13c <__i2b+0x28>)
 800c126:	f240 1145 	movw	r1, #325	@ 0x145
 800c12a:	f001 fc41 	bl	800d9b0 <__assert_func>
 800c12e:	2301      	movs	r3, #1
 800c130:	6144      	str	r4, [r0, #20]
 800c132:	6103      	str	r3, [r0, #16]
 800c134:	bd10      	pop	{r4, pc}
 800c136:	bf00      	nop
 800c138:	0802c735 	.word	0x0802c735
 800c13c:	0802c746 	.word	0x0802c746

0800c140 <__multiply>:
 800c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	4614      	mov	r4, r2
 800c146:	690a      	ldr	r2, [r1, #16]
 800c148:	6923      	ldr	r3, [r4, #16]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	bfa8      	it	ge
 800c14e:	4623      	movge	r3, r4
 800c150:	460f      	mov	r7, r1
 800c152:	bfa4      	itt	ge
 800c154:	460c      	movge	r4, r1
 800c156:	461f      	movge	r7, r3
 800c158:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c15c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c160:	68a3      	ldr	r3, [r4, #8]
 800c162:	6861      	ldr	r1, [r4, #4]
 800c164:	eb0a 0609 	add.w	r6, sl, r9
 800c168:	42b3      	cmp	r3, r6
 800c16a:	b085      	sub	sp, #20
 800c16c:	bfb8      	it	lt
 800c16e:	3101      	addlt	r1, #1
 800c170:	f7ff fe92 	bl	800be98 <_Balloc>
 800c174:	b930      	cbnz	r0, 800c184 <__multiply+0x44>
 800c176:	4602      	mov	r2, r0
 800c178:	4b44      	ldr	r3, [pc, #272]	@ (800c28c <__multiply+0x14c>)
 800c17a:	4845      	ldr	r0, [pc, #276]	@ (800c290 <__multiply+0x150>)
 800c17c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c180:	f001 fc16 	bl	800d9b0 <__assert_func>
 800c184:	f100 0514 	add.w	r5, r0, #20
 800c188:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c18c:	462b      	mov	r3, r5
 800c18e:	2200      	movs	r2, #0
 800c190:	4543      	cmp	r3, r8
 800c192:	d321      	bcc.n	800c1d8 <__multiply+0x98>
 800c194:	f107 0114 	add.w	r1, r7, #20
 800c198:	f104 0214 	add.w	r2, r4, #20
 800c19c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c1a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c1a4:	9302      	str	r3, [sp, #8]
 800c1a6:	1b13      	subs	r3, r2, r4
 800c1a8:	3b15      	subs	r3, #21
 800c1aa:	f023 0303 	bic.w	r3, r3, #3
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	f104 0715 	add.w	r7, r4, #21
 800c1b4:	42ba      	cmp	r2, r7
 800c1b6:	bf38      	it	cc
 800c1b8:	2304      	movcc	r3, #4
 800c1ba:	9301      	str	r3, [sp, #4]
 800c1bc:	9b02      	ldr	r3, [sp, #8]
 800c1be:	9103      	str	r1, [sp, #12]
 800c1c0:	428b      	cmp	r3, r1
 800c1c2:	d80c      	bhi.n	800c1de <__multiply+0x9e>
 800c1c4:	2e00      	cmp	r6, #0
 800c1c6:	dd03      	ble.n	800c1d0 <__multiply+0x90>
 800c1c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d05b      	beq.n	800c288 <__multiply+0x148>
 800c1d0:	6106      	str	r6, [r0, #16]
 800c1d2:	b005      	add	sp, #20
 800c1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d8:	f843 2b04 	str.w	r2, [r3], #4
 800c1dc:	e7d8      	b.n	800c190 <__multiply+0x50>
 800c1de:	f8b1 a000 	ldrh.w	sl, [r1]
 800c1e2:	f1ba 0f00 	cmp.w	sl, #0
 800c1e6:	d024      	beq.n	800c232 <__multiply+0xf2>
 800c1e8:	f104 0e14 	add.w	lr, r4, #20
 800c1ec:	46a9      	mov	r9, r5
 800c1ee:	f04f 0c00 	mov.w	ip, #0
 800c1f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1f6:	f8d9 3000 	ldr.w	r3, [r9]
 800c1fa:	fa1f fb87 	uxth.w	fp, r7
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	fb0a 330b 	mla	r3, sl, fp, r3
 800c204:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c208:	f8d9 7000 	ldr.w	r7, [r9]
 800c20c:	4463      	add	r3, ip
 800c20e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c212:	fb0a c70b 	mla	r7, sl, fp, ip
 800c216:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c220:	4572      	cmp	r2, lr
 800c222:	f849 3b04 	str.w	r3, [r9], #4
 800c226:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c22a:	d8e2      	bhi.n	800c1f2 <__multiply+0xb2>
 800c22c:	9b01      	ldr	r3, [sp, #4]
 800c22e:	f845 c003 	str.w	ip, [r5, r3]
 800c232:	9b03      	ldr	r3, [sp, #12]
 800c234:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c238:	3104      	adds	r1, #4
 800c23a:	f1b9 0f00 	cmp.w	r9, #0
 800c23e:	d021      	beq.n	800c284 <__multiply+0x144>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	f104 0c14 	add.w	ip, r4, #20
 800c246:	46ae      	mov	lr, r5
 800c248:	f04f 0a00 	mov.w	sl, #0
 800c24c:	f8bc b000 	ldrh.w	fp, [ip]
 800c250:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c254:	fb09 770b 	mla	r7, r9, fp, r7
 800c258:	4457      	add	r7, sl
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c260:	f84e 3b04 	str.w	r3, [lr], #4
 800c264:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c268:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c26c:	f8be 3000 	ldrh.w	r3, [lr]
 800c270:	fb09 330a 	mla	r3, r9, sl, r3
 800c274:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c278:	4562      	cmp	r2, ip
 800c27a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c27e:	d8e5      	bhi.n	800c24c <__multiply+0x10c>
 800c280:	9f01      	ldr	r7, [sp, #4]
 800c282:	51eb      	str	r3, [r5, r7]
 800c284:	3504      	adds	r5, #4
 800c286:	e799      	b.n	800c1bc <__multiply+0x7c>
 800c288:	3e01      	subs	r6, #1
 800c28a:	e79b      	b.n	800c1c4 <__multiply+0x84>
 800c28c:	0802c735 	.word	0x0802c735
 800c290:	0802c746 	.word	0x0802c746

0800c294 <__pow5mult>:
 800c294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c298:	4615      	mov	r5, r2
 800c29a:	f012 0203 	ands.w	r2, r2, #3
 800c29e:	4607      	mov	r7, r0
 800c2a0:	460e      	mov	r6, r1
 800c2a2:	d007      	beq.n	800c2b4 <__pow5mult+0x20>
 800c2a4:	4c25      	ldr	r4, [pc, #148]	@ (800c33c <__pow5mult+0xa8>)
 800c2a6:	3a01      	subs	r2, #1
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2ae:	f7ff fe55 	bl	800bf5c <__multadd>
 800c2b2:	4606      	mov	r6, r0
 800c2b4:	10ad      	asrs	r5, r5, #2
 800c2b6:	d03d      	beq.n	800c334 <__pow5mult+0xa0>
 800c2b8:	69fc      	ldr	r4, [r7, #28]
 800c2ba:	b97c      	cbnz	r4, 800c2dc <__pow5mult+0x48>
 800c2bc:	2010      	movs	r0, #16
 800c2be:	f7ff fd35 	bl	800bd2c <malloc>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	61f8      	str	r0, [r7, #28]
 800c2c6:	b928      	cbnz	r0, 800c2d4 <__pow5mult+0x40>
 800c2c8:	4b1d      	ldr	r3, [pc, #116]	@ (800c340 <__pow5mult+0xac>)
 800c2ca:	481e      	ldr	r0, [pc, #120]	@ (800c344 <__pow5mult+0xb0>)
 800c2cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c2d0:	f001 fb6e 	bl	800d9b0 <__assert_func>
 800c2d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2d8:	6004      	str	r4, [r0, #0]
 800c2da:	60c4      	str	r4, [r0, #12]
 800c2dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c2e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2e4:	b94c      	cbnz	r4, 800c2fa <__pow5mult+0x66>
 800c2e6:	f240 2171 	movw	r1, #625	@ 0x271
 800c2ea:	4638      	mov	r0, r7
 800c2ec:	f7ff ff12 	bl	800c114 <__i2b>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	6003      	str	r3, [r0, #0]
 800c2fa:	f04f 0900 	mov.w	r9, #0
 800c2fe:	07eb      	lsls	r3, r5, #31
 800c300:	d50a      	bpl.n	800c318 <__pow5mult+0x84>
 800c302:	4631      	mov	r1, r6
 800c304:	4622      	mov	r2, r4
 800c306:	4638      	mov	r0, r7
 800c308:	f7ff ff1a 	bl	800c140 <__multiply>
 800c30c:	4631      	mov	r1, r6
 800c30e:	4680      	mov	r8, r0
 800c310:	4638      	mov	r0, r7
 800c312:	f7ff fe01 	bl	800bf18 <_Bfree>
 800c316:	4646      	mov	r6, r8
 800c318:	106d      	asrs	r5, r5, #1
 800c31a:	d00b      	beq.n	800c334 <__pow5mult+0xa0>
 800c31c:	6820      	ldr	r0, [r4, #0]
 800c31e:	b938      	cbnz	r0, 800c330 <__pow5mult+0x9c>
 800c320:	4622      	mov	r2, r4
 800c322:	4621      	mov	r1, r4
 800c324:	4638      	mov	r0, r7
 800c326:	f7ff ff0b 	bl	800c140 <__multiply>
 800c32a:	6020      	str	r0, [r4, #0]
 800c32c:	f8c0 9000 	str.w	r9, [r0]
 800c330:	4604      	mov	r4, r0
 800c332:	e7e4      	b.n	800c2fe <__pow5mult+0x6a>
 800c334:	4630      	mov	r0, r6
 800c336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c33a:	bf00      	nop
 800c33c:	0802c7a0 	.word	0x0802c7a0
 800c340:	0802c6c6 	.word	0x0802c6c6
 800c344:	0802c746 	.word	0x0802c746

0800c348 <__lshift>:
 800c348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c34c:	460c      	mov	r4, r1
 800c34e:	6849      	ldr	r1, [r1, #4]
 800c350:	6923      	ldr	r3, [r4, #16]
 800c352:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c356:	68a3      	ldr	r3, [r4, #8]
 800c358:	4607      	mov	r7, r0
 800c35a:	4691      	mov	r9, r2
 800c35c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c360:	f108 0601 	add.w	r6, r8, #1
 800c364:	42b3      	cmp	r3, r6
 800c366:	db0b      	blt.n	800c380 <__lshift+0x38>
 800c368:	4638      	mov	r0, r7
 800c36a:	f7ff fd95 	bl	800be98 <_Balloc>
 800c36e:	4605      	mov	r5, r0
 800c370:	b948      	cbnz	r0, 800c386 <__lshift+0x3e>
 800c372:	4602      	mov	r2, r0
 800c374:	4b28      	ldr	r3, [pc, #160]	@ (800c418 <__lshift+0xd0>)
 800c376:	4829      	ldr	r0, [pc, #164]	@ (800c41c <__lshift+0xd4>)
 800c378:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c37c:	f001 fb18 	bl	800d9b0 <__assert_func>
 800c380:	3101      	adds	r1, #1
 800c382:	005b      	lsls	r3, r3, #1
 800c384:	e7ee      	b.n	800c364 <__lshift+0x1c>
 800c386:	2300      	movs	r3, #0
 800c388:	f100 0114 	add.w	r1, r0, #20
 800c38c:	f100 0210 	add.w	r2, r0, #16
 800c390:	4618      	mov	r0, r3
 800c392:	4553      	cmp	r3, sl
 800c394:	db33      	blt.n	800c3fe <__lshift+0xb6>
 800c396:	6920      	ldr	r0, [r4, #16]
 800c398:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c39c:	f104 0314 	add.w	r3, r4, #20
 800c3a0:	f019 091f 	ands.w	r9, r9, #31
 800c3a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3ac:	d02b      	beq.n	800c406 <__lshift+0xbe>
 800c3ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c3b2:	468a      	mov	sl, r1
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	6818      	ldr	r0, [r3, #0]
 800c3b8:	fa00 f009 	lsl.w	r0, r0, r9
 800c3bc:	4310      	orrs	r0, r2
 800c3be:	f84a 0b04 	str.w	r0, [sl], #4
 800c3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3c6:	459c      	cmp	ip, r3
 800c3c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3cc:	d8f3      	bhi.n	800c3b6 <__lshift+0x6e>
 800c3ce:	ebac 0304 	sub.w	r3, ip, r4
 800c3d2:	3b15      	subs	r3, #21
 800c3d4:	f023 0303 	bic.w	r3, r3, #3
 800c3d8:	3304      	adds	r3, #4
 800c3da:	f104 0015 	add.w	r0, r4, #21
 800c3de:	4584      	cmp	ip, r0
 800c3e0:	bf38      	it	cc
 800c3e2:	2304      	movcc	r3, #4
 800c3e4:	50ca      	str	r2, [r1, r3]
 800c3e6:	b10a      	cbz	r2, 800c3ec <__lshift+0xa4>
 800c3e8:	f108 0602 	add.w	r6, r8, #2
 800c3ec:	3e01      	subs	r6, #1
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	612e      	str	r6, [r5, #16]
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	f7ff fd90 	bl	800bf18 <_Bfree>
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c402:	3301      	adds	r3, #1
 800c404:	e7c5      	b.n	800c392 <__lshift+0x4a>
 800c406:	3904      	subs	r1, #4
 800c408:	f853 2b04 	ldr.w	r2, [r3], #4
 800c40c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c410:	459c      	cmp	ip, r3
 800c412:	d8f9      	bhi.n	800c408 <__lshift+0xc0>
 800c414:	e7ea      	b.n	800c3ec <__lshift+0xa4>
 800c416:	bf00      	nop
 800c418:	0802c735 	.word	0x0802c735
 800c41c:	0802c746 	.word	0x0802c746

0800c420 <__mcmp>:
 800c420:	690a      	ldr	r2, [r1, #16]
 800c422:	4603      	mov	r3, r0
 800c424:	6900      	ldr	r0, [r0, #16]
 800c426:	1a80      	subs	r0, r0, r2
 800c428:	b530      	push	{r4, r5, lr}
 800c42a:	d10e      	bne.n	800c44a <__mcmp+0x2a>
 800c42c:	3314      	adds	r3, #20
 800c42e:	3114      	adds	r1, #20
 800c430:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c434:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c438:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c43c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c440:	4295      	cmp	r5, r2
 800c442:	d003      	beq.n	800c44c <__mcmp+0x2c>
 800c444:	d205      	bcs.n	800c452 <__mcmp+0x32>
 800c446:	f04f 30ff 	mov.w	r0, #4294967295
 800c44a:	bd30      	pop	{r4, r5, pc}
 800c44c:	42a3      	cmp	r3, r4
 800c44e:	d3f3      	bcc.n	800c438 <__mcmp+0x18>
 800c450:	e7fb      	b.n	800c44a <__mcmp+0x2a>
 800c452:	2001      	movs	r0, #1
 800c454:	e7f9      	b.n	800c44a <__mcmp+0x2a>
	...

0800c458 <__mdiff>:
 800c458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	4689      	mov	r9, r1
 800c45e:	4606      	mov	r6, r0
 800c460:	4611      	mov	r1, r2
 800c462:	4648      	mov	r0, r9
 800c464:	4614      	mov	r4, r2
 800c466:	f7ff ffdb 	bl	800c420 <__mcmp>
 800c46a:	1e05      	subs	r5, r0, #0
 800c46c:	d112      	bne.n	800c494 <__mdiff+0x3c>
 800c46e:	4629      	mov	r1, r5
 800c470:	4630      	mov	r0, r6
 800c472:	f7ff fd11 	bl	800be98 <_Balloc>
 800c476:	4602      	mov	r2, r0
 800c478:	b928      	cbnz	r0, 800c486 <__mdiff+0x2e>
 800c47a:	4b3f      	ldr	r3, [pc, #252]	@ (800c578 <__mdiff+0x120>)
 800c47c:	f240 2137 	movw	r1, #567	@ 0x237
 800c480:	483e      	ldr	r0, [pc, #248]	@ (800c57c <__mdiff+0x124>)
 800c482:	f001 fa95 	bl	800d9b0 <__assert_func>
 800c486:	2301      	movs	r3, #1
 800c488:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c48c:	4610      	mov	r0, r2
 800c48e:	b003      	add	sp, #12
 800c490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c494:	bfbc      	itt	lt
 800c496:	464b      	movlt	r3, r9
 800c498:	46a1      	movlt	r9, r4
 800c49a:	4630      	mov	r0, r6
 800c49c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4a0:	bfba      	itte	lt
 800c4a2:	461c      	movlt	r4, r3
 800c4a4:	2501      	movlt	r5, #1
 800c4a6:	2500      	movge	r5, #0
 800c4a8:	f7ff fcf6 	bl	800be98 <_Balloc>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	b918      	cbnz	r0, 800c4b8 <__mdiff+0x60>
 800c4b0:	4b31      	ldr	r3, [pc, #196]	@ (800c578 <__mdiff+0x120>)
 800c4b2:	f240 2145 	movw	r1, #581	@ 0x245
 800c4b6:	e7e3      	b.n	800c480 <__mdiff+0x28>
 800c4b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4bc:	6926      	ldr	r6, [r4, #16]
 800c4be:	60c5      	str	r5, [r0, #12]
 800c4c0:	f109 0310 	add.w	r3, r9, #16
 800c4c4:	f109 0514 	add.w	r5, r9, #20
 800c4c8:	f104 0e14 	add.w	lr, r4, #20
 800c4cc:	f100 0b14 	add.w	fp, r0, #20
 800c4d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c4d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c4d8:	9301      	str	r3, [sp, #4]
 800c4da:	46d9      	mov	r9, fp
 800c4dc:	f04f 0c00 	mov.w	ip, #0
 800c4e0:	9b01      	ldr	r3, [sp, #4]
 800c4e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c4e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c4ea:	9301      	str	r3, [sp, #4]
 800c4ec:	fa1f f38a 	uxth.w	r3, sl
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	b283      	uxth	r3, r0
 800c4f4:	1acb      	subs	r3, r1, r3
 800c4f6:	0c00      	lsrs	r0, r0, #16
 800c4f8:	4463      	add	r3, ip
 800c4fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c4fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c502:	b29b      	uxth	r3, r3
 800c504:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c508:	4576      	cmp	r6, lr
 800c50a:	f849 3b04 	str.w	r3, [r9], #4
 800c50e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c512:	d8e5      	bhi.n	800c4e0 <__mdiff+0x88>
 800c514:	1b33      	subs	r3, r6, r4
 800c516:	3b15      	subs	r3, #21
 800c518:	f023 0303 	bic.w	r3, r3, #3
 800c51c:	3415      	adds	r4, #21
 800c51e:	3304      	adds	r3, #4
 800c520:	42a6      	cmp	r6, r4
 800c522:	bf38      	it	cc
 800c524:	2304      	movcc	r3, #4
 800c526:	441d      	add	r5, r3
 800c528:	445b      	add	r3, fp
 800c52a:	461e      	mov	r6, r3
 800c52c:	462c      	mov	r4, r5
 800c52e:	4544      	cmp	r4, r8
 800c530:	d30e      	bcc.n	800c550 <__mdiff+0xf8>
 800c532:	f108 0103 	add.w	r1, r8, #3
 800c536:	1b49      	subs	r1, r1, r5
 800c538:	f021 0103 	bic.w	r1, r1, #3
 800c53c:	3d03      	subs	r5, #3
 800c53e:	45a8      	cmp	r8, r5
 800c540:	bf38      	it	cc
 800c542:	2100      	movcc	r1, #0
 800c544:	440b      	add	r3, r1
 800c546:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c54a:	b191      	cbz	r1, 800c572 <__mdiff+0x11a>
 800c54c:	6117      	str	r7, [r2, #16]
 800c54e:	e79d      	b.n	800c48c <__mdiff+0x34>
 800c550:	f854 1b04 	ldr.w	r1, [r4], #4
 800c554:	46e6      	mov	lr, ip
 800c556:	0c08      	lsrs	r0, r1, #16
 800c558:	fa1c fc81 	uxtah	ip, ip, r1
 800c55c:	4471      	add	r1, lr
 800c55e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c562:	b289      	uxth	r1, r1
 800c564:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c568:	f846 1b04 	str.w	r1, [r6], #4
 800c56c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c570:	e7dd      	b.n	800c52e <__mdiff+0xd6>
 800c572:	3f01      	subs	r7, #1
 800c574:	e7e7      	b.n	800c546 <__mdiff+0xee>
 800c576:	bf00      	nop
 800c578:	0802c735 	.word	0x0802c735
 800c57c:	0802c746 	.word	0x0802c746

0800c580 <__ulp>:
 800c580:	b082      	sub	sp, #8
 800c582:	ed8d 0b00 	vstr	d0, [sp]
 800c586:	9a01      	ldr	r2, [sp, #4]
 800c588:	4b0f      	ldr	r3, [pc, #60]	@ (800c5c8 <__ulp+0x48>)
 800c58a:	4013      	ands	r3, r2
 800c58c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c590:	2b00      	cmp	r3, #0
 800c592:	dc08      	bgt.n	800c5a6 <__ulp+0x26>
 800c594:	425b      	negs	r3, r3
 800c596:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c59a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c59e:	da04      	bge.n	800c5aa <__ulp+0x2a>
 800c5a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c5a4:	4113      	asrs	r3, r2
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	e008      	b.n	800c5bc <__ulp+0x3c>
 800c5aa:	f1a2 0314 	sub.w	r3, r2, #20
 800c5ae:	2b1e      	cmp	r3, #30
 800c5b0:	bfda      	itte	le
 800c5b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c5b6:	40da      	lsrle	r2, r3
 800c5b8:	2201      	movgt	r2, #1
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	4619      	mov	r1, r3
 800c5be:	4610      	mov	r0, r2
 800c5c0:	ec41 0b10 	vmov	d0, r0, r1
 800c5c4:	b002      	add	sp, #8
 800c5c6:	4770      	bx	lr
 800c5c8:	7ff00000 	.word	0x7ff00000

0800c5cc <__b2d>:
 800c5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d0:	6906      	ldr	r6, [r0, #16]
 800c5d2:	f100 0814 	add.w	r8, r0, #20
 800c5d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c5da:	1f37      	subs	r7, r6, #4
 800c5dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	f7ff fd4b 	bl	800c07c <__hi0bits>
 800c5e6:	f1c0 0320 	rsb	r3, r0, #32
 800c5ea:	280a      	cmp	r0, #10
 800c5ec:	600b      	str	r3, [r1, #0]
 800c5ee:	491b      	ldr	r1, [pc, #108]	@ (800c65c <__b2d+0x90>)
 800c5f0:	dc15      	bgt.n	800c61e <__b2d+0x52>
 800c5f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c5f6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c5fa:	45b8      	cmp	r8, r7
 800c5fc:	ea43 0501 	orr.w	r5, r3, r1
 800c600:	bf34      	ite	cc
 800c602:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c606:	2300      	movcs	r3, #0
 800c608:	3015      	adds	r0, #21
 800c60a:	fa02 f000 	lsl.w	r0, r2, r0
 800c60e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c612:	4303      	orrs	r3, r0
 800c614:	461c      	mov	r4, r3
 800c616:	ec45 4b10 	vmov	d0, r4, r5
 800c61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c61e:	45b8      	cmp	r8, r7
 800c620:	bf3a      	itte	cc
 800c622:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c626:	f1a6 0708 	subcc.w	r7, r6, #8
 800c62a:	2300      	movcs	r3, #0
 800c62c:	380b      	subs	r0, #11
 800c62e:	d012      	beq.n	800c656 <__b2d+0x8a>
 800c630:	f1c0 0120 	rsb	r1, r0, #32
 800c634:	fa23 f401 	lsr.w	r4, r3, r1
 800c638:	4082      	lsls	r2, r0
 800c63a:	4322      	orrs	r2, r4
 800c63c:	4547      	cmp	r7, r8
 800c63e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c642:	bf8c      	ite	hi
 800c644:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c648:	2200      	movls	r2, #0
 800c64a:	4083      	lsls	r3, r0
 800c64c:	40ca      	lsrs	r2, r1
 800c64e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c652:	4313      	orrs	r3, r2
 800c654:	e7de      	b.n	800c614 <__b2d+0x48>
 800c656:	ea42 0501 	orr.w	r5, r2, r1
 800c65a:	e7db      	b.n	800c614 <__b2d+0x48>
 800c65c:	3ff00000 	.word	0x3ff00000

0800c660 <__d2b>:
 800c660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c664:	460f      	mov	r7, r1
 800c666:	2101      	movs	r1, #1
 800c668:	ec59 8b10 	vmov	r8, r9, d0
 800c66c:	4616      	mov	r6, r2
 800c66e:	f7ff fc13 	bl	800be98 <_Balloc>
 800c672:	4604      	mov	r4, r0
 800c674:	b930      	cbnz	r0, 800c684 <__d2b+0x24>
 800c676:	4602      	mov	r2, r0
 800c678:	4b23      	ldr	r3, [pc, #140]	@ (800c708 <__d2b+0xa8>)
 800c67a:	4824      	ldr	r0, [pc, #144]	@ (800c70c <__d2b+0xac>)
 800c67c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c680:	f001 f996 	bl	800d9b0 <__assert_func>
 800c684:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c68c:	b10d      	cbz	r5, 800c692 <__d2b+0x32>
 800c68e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c692:	9301      	str	r3, [sp, #4]
 800c694:	f1b8 0300 	subs.w	r3, r8, #0
 800c698:	d023      	beq.n	800c6e2 <__d2b+0x82>
 800c69a:	4668      	mov	r0, sp
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	f7ff fd0c 	bl	800c0ba <__lo0bits>
 800c6a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6a6:	b1d0      	cbz	r0, 800c6de <__d2b+0x7e>
 800c6a8:	f1c0 0320 	rsb	r3, r0, #32
 800c6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b0:	430b      	orrs	r3, r1
 800c6b2:	40c2      	lsrs	r2, r0
 800c6b4:	6163      	str	r3, [r4, #20]
 800c6b6:	9201      	str	r2, [sp, #4]
 800c6b8:	9b01      	ldr	r3, [sp, #4]
 800c6ba:	61a3      	str	r3, [r4, #24]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	bf0c      	ite	eq
 800c6c0:	2201      	moveq	r2, #1
 800c6c2:	2202      	movne	r2, #2
 800c6c4:	6122      	str	r2, [r4, #16]
 800c6c6:	b1a5      	cbz	r5, 800c6f2 <__d2b+0x92>
 800c6c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6cc:	4405      	add	r5, r0
 800c6ce:	603d      	str	r5, [r7, #0]
 800c6d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c6d4:	6030      	str	r0, [r6, #0]
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	b003      	add	sp, #12
 800c6da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6de:	6161      	str	r1, [r4, #20]
 800c6e0:	e7ea      	b.n	800c6b8 <__d2b+0x58>
 800c6e2:	a801      	add	r0, sp, #4
 800c6e4:	f7ff fce9 	bl	800c0ba <__lo0bits>
 800c6e8:	9b01      	ldr	r3, [sp, #4]
 800c6ea:	6163      	str	r3, [r4, #20]
 800c6ec:	3020      	adds	r0, #32
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	e7e8      	b.n	800c6c4 <__d2b+0x64>
 800c6f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c6fa:	6038      	str	r0, [r7, #0]
 800c6fc:	6918      	ldr	r0, [r3, #16]
 800c6fe:	f7ff fcbd 	bl	800c07c <__hi0bits>
 800c702:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c706:	e7e5      	b.n	800c6d4 <__d2b+0x74>
 800c708:	0802c735 	.word	0x0802c735
 800c70c:	0802c746 	.word	0x0802c746

0800c710 <__ratio>:
 800c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c714:	b085      	sub	sp, #20
 800c716:	e9cd 1000 	strd	r1, r0, [sp]
 800c71a:	a902      	add	r1, sp, #8
 800c71c:	f7ff ff56 	bl	800c5cc <__b2d>
 800c720:	9800      	ldr	r0, [sp, #0]
 800c722:	a903      	add	r1, sp, #12
 800c724:	ec55 4b10 	vmov	r4, r5, d0
 800c728:	f7ff ff50 	bl	800c5cc <__b2d>
 800c72c:	9b01      	ldr	r3, [sp, #4]
 800c72e:	6919      	ldr	r1, [r3, #16]
 800c730:	9b00      	ldr	r3, [sp, #0]
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	1ac9      	subs	r1, r1, r3
 800c736:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c73a:	1a9b      	subs	r3, r3, r2
 800c73c:	ec5b ab10 	vmov	sl, fp, d0
 800c740:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c744:	2b00      	cmp	r3, #0
 800c746:	bfce      	itee	gt
 800c748:	462a      	movgt	r2, r5
 800c74a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c74e:	465a      	movle	r2, fp
 800c750:	462f      	mov	r7, r5
 800c752:	46d9      	mov	r9, fp
 800c754:	bfcc      	ite	gt
 800c756:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c75a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c75e:	464b      	mov	r3, r9
 800c760:	4652      	mov	r2, sl
 800c762:	4620      	mov	r0, r4
 800c764:	4639      	mov	r1, r7
 800c766:	f7f4 f871 	bl	800084c <__aeabi_ddiv>
 800c76a:	ec41 0b10 	vmov	d0, r0, r1
 800c76e:	b005      	add	sp, #20
 800c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c774 <__copybits>:
 800c774:	3901      	subs	r1, #1
 800c776:	b570      	push	{r4, r5, r6, lr}
 800c778:	1149      	asrs	r1, r1, #5
 800c77a:	6914      	ldr	r4, [r2, #16]
 800c77c:	3101      	adds	r1, #1
 800c77e:	f102 0314 	add.w	r3, r2, #20
 800c782:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c786:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c78a:	1f05      	subs	r5, r0, #4
 800c78c:	42a3      	cmp	r3, r4
 800c78e:	d30c      	bcc.n	800c7aa <__copybits+0x36>
 800c790:	1aa3      	subs	r3, r4, r2
 800c792:	3b11      	subs	r3, #17
 800c794:	f023 0303 	bic.w	r3, r3, #3
 800c798:	3211      	adds	r2, #17
 800c79a:	42a2      	cmp	r2, r4
 800c79c:	bf88      	it	hi
 800c79e:	2300      	movhi	r3, #0
 800c7a0:	4418      	add	r0, r3
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	4288      	cmp	r0, r1
 800c7a6:	d305      	bcc.n	800c7b4 <__copybits+0x40>
 800c7a8:	bd70      	pop	{r4, r5, r6, pc}
 800c7aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800c7ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800c7b2:	e7eb      	b.n	800c78c <__copybits+0x18>
 800c7b4:	f840 3b04 	str.w	r3, [r0], #4
 800c7b8:	e7f4      	b.n	800c7a4 <__copybits+0x30>

0800c7ba <__any_on>:
 800c7ba:	f100 0214 	add.w	r2, r0, #20
 800c7be:	6900      	ldr	r0, [r0, #16]
 800c7c0:	114b      	asrs	r3, r1, #5
 800c7c2:	4298      	cmp	r0, r3
 800c7c4:	b510      	push	{r4, lr}
 800c7c6:	db11      	blt.n	800c7ec <__any_on+0x32>
 800c7c8:	dd0a      	ble.n	800c7e0 <__any_on+0x26>
 800c7ca:	f011 011f 	ands.w	r1, r1, #31
 800c7ce:	d007      	beq.n	800c7e0 <__any_on+0x26>
 800c7d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c7d4:	fa24 f001 	lsr.w	r0, r4, r1
 800c7d8:	fa00 f101 	lsl.w	r1, r0, r1
 800c7dc:	428c      	cmp	r4, r1
 800c7de:	d10b      	bne.n	800c7f8 <__any_on+0x3e>
 800c7e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d803      	bhi.n	800c7f0 <__any_on+0x36>
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	bd10      	pop	{r4, pc}
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	e7f7      	b.n	800c7e0 <__any_on+0x26>
 800c7f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7f4:	2900      	cmp	r1, #0
 800c7f6:	d0f5      	beq.n	800c7e4 <__any_on+0x2a>
 800c7f8:	2001      	movs	r0, #1
 800c7fa:	e7f6      	b.n	800c7ea <__any_on+0x30>

0800c7fc <sulp>:
 800c7fc:	b570      	push	{r4, r5, r6, lr}
 800c7fe:	4604      	mov	r4, r0
 800c800:	460d      	mov	r5, r1
 800c802:	ec45 4b10 	vmov	d0, r4, r5
 800c806:	4616      	mov	r6, r2
 800c808:	f7ff feba 	bl	800c580 <__ulp>
 800c80c:	ec51 0b10 	vmov	r0, r1, d0
 800c810:	b17e      	cbz	r6, 800c832 <sulp+0x36>
 800c812:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c816:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	dd09      	ble.n	800c832 <sulp+0x36>
 800c81e:	051b      	lsls	r3, r3, #20
 800c820:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c824:	2400      	movs	r4, #0
 800c826:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c82a:	4622      	mov	r2, r4
 800c82c:	462b      	mov	r3, r5
 800c82e:	f7f3 fee3 	bl	80005f8 <__aeabi_dmul>
 800c832:	ec41 0b10 	vmov	d0, r0, r1
 800c836:	bd70      	pop	{r4, r5, r6, pc}

0800c838 <_strtod_l>:
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	b09f      	sub	sp, #124	@ 0x7c
 800c83e:	460c      	mov	r4, r1
 800c840:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c842:	2200      	movs	r2, #0
 800c844:	921a      	str	r2, [sp, #104]	@ 0x68
 800c846:	9005      	str	r0, [sp, #20]
 800c848:	f04f 0a00 	mov.w	sl, #0
 800c84c:	f04f 0b00 	mov.w	fp, #0
 800c850:	460a      	mov	r2, r1
 800c852:	9219      	str	r2, [sp, #100]	@ 0x64
 800c854:	7811      	ldrb	r1, [r2, #0]
 800c856:	292b      	cmp	r1, #43	@ 0x2b
 800c858:	d04a      	beq.n	800c8f0 <_strtod_l+0xb8>
 800c85a:	d838      	bhi.n	800c8ce <_strtod_l+0x96>
 800c85c:	290d      	cmp	r1, #13
 800c85e:	d832      	bhi.n	800c8c6 <_strtod_l+0x8e>
 800c860:	2908      	cmp	r1, #8
 800c862:	d832      	bhi.n	800c8ca <_strtod_l+0x92>
 800c864:	2900      	cmp	r1, #0
 800c866:	d03b      	beq.n	800c8e0 <_strtod_l+0xa8>
 800c868:	2200      	movs	r2, #0
 800c86a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c86c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c86e:	782a      	ldrb	r2, [r5, #0]
 800c870:	2a30      	cmp	r2, #48	@ 0x30
 800c872:	f040 80b3 	bne.w	800c9dc <_strtod_l+0x1a4>
 800c876:	786a      	ldrb	r2, [r5, #1]
 800c878:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c87c:	2a58      	cmp	r2, #88	@ 0x58
 800c87e:	d16e      	bne.n	800c95e <_strtod_l+0x126>
 800c880:	9302      	str	r3, [sp, #8]
 800c882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c884:	9301      	str	r3, [sp, #4]
 800c886:	ab1a      	add	r3, sp, #104	@ 0x68
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	4a8e      	ldr	r2, [pc, #568]	@ (800cac4 <_strtod_l+0x28c>)
 800c88c:	9805      	ldr	r0, [sp, #20]
 800c88e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c890:	a919      	add	r1, sp, #100	@ 0x64
 800c892:	f001 f927 	bl	800dae4 <__gethex>
 800c896:	f010 060f 	ands.w	r6, r0, #15
 800c89a:	4604      	mov	r4, r0
 800c89c:	d005      	beq.n	800c8aa <_strtod_l+0x72>
 800c89e:	2e06      	cmp	r6, #6
 800c8a0:	d128      	bne.n	800c8f4 <_strtod_l+0xbc>
 800c8a2:	3501      	adds	r5, #1
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800c8a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f040 858e 	bne.w	800d3ce <_strtod_l+0xb96>
 800c8b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8b4:	b1cb      	cbz	r3, 800c8ea <_strtod_l+0xb2>
 800c8b6:	4652      	mov	r2, sl
 800c8b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c8bc:	ec43 2b10 	vmov	d0, r2, r3
 800c8c0:	b01f      	add	sp, #124	@ 0x7c
 800c8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c6:	2920      	cmp	r1, #32
 800c8c8:	d1ce      	bne.n	800c868 <_strtod_l+0x30>
 800c8ca:	3201      	adds	r2, #1
 800c8cc:	e7c1      	b.n	800c852 <_strtod_l+0x1a>
 800c8ce:	292d      	cmp	r1, #45	@ 0x2d
 800c8d0:	d1ca      	bne.n	800c868 <_strtod_l+0x30>
 800c8d2:	2101      	movs	r1, #1
 800c8d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c8d6:	1c51      	adds	r1, r2, #1
 800c8d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c8da:	7852      	ldrb	r2, [r2, #1]
 800c8dc:	2a00      	cmp	r2, #0
 800c8de:	d1c5      	bne.n	800c86c <_strtod_l+0x34>
 800c8e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c8e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f040 8570 	bne.w	800d3ca <_strtod_l+0xb92>
 800c8ea:	4652      	mov	r2, sl
 800c8ec:	465b      	mov	r3, fp
 800c8ee:	e7e5      	b.n	800c8bc <_strtod_l+0x84>
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	e7ef      	b.n	800c8d4 <_strtod_l+0x9c>
 800c8f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c8f6:	b13a      	cbz	r2, 800c908 <_strtod_l+0xd0>
 800c8f8:	2135      	movs	r1, #53	@ 0x35
 800c8fa:	a81c      	add	r0, sp, #112	@ 0x70
 800c8fc:	f7ff ff3a 	bl	800c774 <__copybits>
 800c900:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c902:	9805      	ldr	r0, [sp, #20]
 800c904:	f7ff fb08 	bl	800bf18 <_Bfree>
 800c908:	3e01      	subs	r6, #1
 800c90a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c90c:	2e04      	cmp	r6, #4
 800c90e:	d806      	bhi.n	800c91e <_strtod_l+0xe6>
 800c910:	e8df f006 	tbb	[pc, r6]
 800c914:	201d0314 	.word	0x201d0314
 800c918:	14          	.byte	0x14
 800c919:	00          	.byte	0x00
 800c91a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c91e:	05e1      	lsls	r1, r4, #23
 800c920:	bf48      	it	mi
 800c922:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c926:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c92a:	0d1b      	lsrs	r3, r3, #20
 800c92c:	051b      	lsls	r3, r3, #20
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d1bb      	bne.n	800c8aa <_strtod_l+0x72>
 800c932:	f7fe fb2f 	bl	800af94 <__errno>
 800c936:	2322      	movs	r3, #34	@ 0x22
 800c938:	6003      	str	r3, [r0, #0]
 800c93a:	e7b6      	b.n	800c8aa <_strtod_l+0x72>
 800c93c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c940:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c944:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c948:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c94c:	e7e7      	b.n	800c91e <_strtod_l+0xe6>
 800c94e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cacc <_strtod_l+0x294>
 800c952:	e7e4      	b.n	800c91e <_strtod_l+0xe6>
 800c954:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c958:	f04f 3aff 	mov.w	sl, #4294967295
 800c95c:	e7df      	b.n	800c91e <_strtod_l+0xe6>
 800c95e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c960:	1c5a      	adds	r2, r3, #1
 800c962:	9219      	str	r2, [sp, #100]	@ 0x64
 800c964:	785b      	ldrb	r3, [r3, #1]
 800c966:	2b30      	cmp	r3, #48	@ 0x30
 800c968:	d0f9      	beq.n	800c95e <_strtod_l+0x126>
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d09d      	beq.n	800c8aa <_strtod_l+0x72>
 800c96e:	2301      	movs	r3, #1
 800c970:	9309      	str	r3, [sp, #36]	@ 0x24
 800c972:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c974:	930c      	str	r3, [sp, #48]	@ 0x30
 800c976:	2300      	movs	r3, #0
 800c978:	9308      	str	r3, [sp, #32]
 800c97a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c97c:	461f      	mov	r7, r3
 800c97e:	220a      	movs	r2, #10
 800c980:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c982:	7805      	ldrb	r5, [r0, #0]
 800c984:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c988:	b2d9      	uxtb	r1, r3
 800c98a:	2909      	cmp	r1, #9
 800c98c:	d928      	bls.n	800c9e0 <_strtod_l+0x1a8>
 800c98e:	494e      	ldr	r1, [pc, #312]	@ (800cac8 <_strtod_l+0x290>)
 800c990:	2201      	movs	r2, #1
 800c992:	f000 ffd5 	bl	800d940 <strncmp>
 800c996:	2800      	cmp	r0, #0
 800c998:	d032      	beq.n	800ca00 <_strtod_l+0x1c8>
 800c99a:	2000      	movs	r0, #0
 800c99c:	462a      	mov	r2, r5
 800c99e:	4681      	mov	r9, r0
 800c9a0:	463d      	mov	r5, r7
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2a65      	cmp	r2, #101	@ 0x65
 800c9a6:	d001      	beq.n	800c9ac <_strtod_l+0x174>
 800c9a8:	2a45      	cmp	r2, #69	@ 0x45
 800c9aa:	d114      	bne.n	800c9d6 <_strtod_l+0x19e>
 800c9ac:	b91d      	cbnz	r5, 800c9b6 <_strtod_l+0x17e>
 800c9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9b0:	4302      	orrs	r2, r0
 800c9b2:	d095      	beq.n	800c8e0 <_strtod_l+0xa8>
 800c9b4:	2500      	movs	r5, #0
 800c9b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c9b8:	1c62      	adds	r2, r4, #1
 800c9ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9bc:	7862      	ldrb	r2, [r4, #1]
 800c9be:	2a2b      	cmp	r2, #43	@ 0x2b
 800c9c0:	d077      	beq.n	800cab2 <_strtod_l+0x27a>
 800c9c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800c9c4:	d07b      	beq.n	800cabe <_strtod_l+0x286>
 800c9c6:	f04f 0c00 	mov.w	ip, #0
 800c9ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c9ce:	2909      	cmp	r1, #9
 800c9d0:	f240 8082 	bls.w	800cad8 <_strtod_l+0x2a0>
 800c9d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800c9d6:	f04f 0800 	mov.w	r8, #0
 800c9da:	e0a2      	b.n	800cb22 <_strtod_l+0x2ea>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	e7c7      	b.n	800c970 <_strtod_l+0x138>
 800c9e0:	2f08      	cmp	r7, #8
 800c9e2:	bfd5      	itete	le
 800c9e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c9e6:	9908      	ldrgt	r1, [sp, #32]
 800c9e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c9ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c9f0:	f100 0001 	add.w	r0, r0, #1
 800c9f4:	bfd4      	ite	le
 800c9f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c9f8:	9308      	strgt	r3, [sp, #32]
 800c9fa:	3701      	adds	r7, #1
 800c9fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800c9fe:	e7bf      	b.n	800c980 <_strtod_l+0x148>
 800ca00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca06:	785a      	ldrb	r2, [r3, #1]
 800ca08:	b37f      	cbz	r7, 800ca6a <_strtod_l+0x232>
 800ca0a:	4681      	mov	r9, r0
 800ca0c:	463d      	mov	r5, r7
 800ca0e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ca12:	2b09      	cmp	r3, #9
 800ca14:	d912      	bls.n	800ca3c <_strtod_l+0x204>
 800ca16:	2301      	movs	r3, #1
 800ca18:	e7c4      	b.n	800c9a4 <_strtod_l+0x16c>
 800ca1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca1c:	1c5a      	adds	r2, r3, #1
 800ca1e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca20:	785a      	ldrb	r2, [r3, #1]
 800ca22:	3001      	adds	r0, #1
 800ca24:	2a30      	cmp	r2, #48	@ 0x30
 800ca26:	d0f8      	beq.n	800ca1a <_strtod_l+0x1e2>
 800ca28:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ca2c:	2b08      	cmp	r3, #8
 800ca2e:	f200 84d3 	bhi.w	800d3d8 <_strtod_l+0xba0>
 800ca32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca34:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca36:	4681      	mov	r9, r0
 800ca38:	2000      	movs	r0, #0
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	3a30      	subs	r2, #48	@ 0x30
 800ca3e:	f100 0301 	add.w	r3, r0, #1
 800ca42:	d02a      	beq.n	800ca9a <_strtod_l+0x262>
 800ca44:	4499      	add	r9, r3
 800ca46:	eb00 0c05 	add.w	ip, r0, r5
 800ca4a:	462b      	mov	r3, r5
 800ca4c:	210a      	movs	r1, #10
 800ca4e:	4563      	cmp	r3, ip
 800ca50:	d10d      	bne.n	800ca6e <_strtod_l+0x236>
 800ca52:	1c69      	adds	r1, r5, #1
 800ca54:	4401      	add	r1, r0
 800ca56:	4428      	add	r0, r5
 800ca58:	2808      	cmp	r0, #8
 800ca5a:	dc16      	bgt.n	800ca8a <_strtod_l+0x252>
 800ca5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ca5e:	230a      	movs	r3, #10
 800ca60:	fb03 2300 	mla	r3, r3, r0, r2
 800ca64:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca66:	2300      	movs	r3, #0
 800ca68:	e018      	b.n	800ca9c <_strtod_l+0x264>
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	e7da      	b.n	800ca24 <_strtod_l+0x1ec>
 800ca6e:	2b08      	cmp	r3, #8
 800ca70:	f103 0301 	add.w	r3, r3, #1
 800ca74:	dc03      	bgt.n	800ca7e <_strtod_l+0x246>
 800ca76:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ca78:	434e      	muls	r6, r1
 800ca7a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ca7c:	e7e7      	b.n	800ca4e <_strtod_l+0x216>
 800ca7e:	2b10      	cmp	r3, #16
 800ca80:	bfde      	ittt	le
 800ca82:	9e08      	ldrle	r6, [sp, #32]
 800ca84:	434e      	mulle	r6, r1
 800ca86:	9608      	strle	r6, [sp, #32]
 800ca88:	e7e1      	b.n	800ca4e <_strtod_l+0x216>
 800ca8a:	280f      	cmp	r0, #15
 800ca8c:	dceb      	bgt.n	800ca66 <_strtod_l+0x22e>
 800ca8e:	9808      	ldr	r0, [sp, #32]
 800ca90:	230a      	movs	r3, #10
 800ca92:	fb03 2300 	mla	r3, r3, r0, r2
 800ca96:	9308      	str	r3, [sp, #32]
 800ca98:	e7e5      	b.n	800ca66 <_strtod_l+0x22e>
 800ca9a:	4629      	mov	r1, r5
 800ca9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca9e:	1c50      	adds	r0, r2, #1
 800caa0:	9019      	str	r0, [sp, #100]	@ 0x64
 800caa2:	7852      	ldrb	r2, [r2, #1]
 800caa4:	4618      	mov	r0, r3
 800caa6:	460d      	mov	r5, r1
 800caa8:	e7b1      	b.n	800ca0e <_strtod_l+0x1d6>
 800caaa:	f04f 0900 	mov.w	r9, #0
 800caae:	2301      	movs	r3, #1
 800cab0:	e77d      	b.n	800c9ae <_strtod_l+0x176>
 800cab2:	f04f 0c00 	mov.w	ip, #0
 800cab6:	1ca2      	adds	r2, r4, #2
 800cab8:	9219      	str	r2, [sp, #100]	@ 0x64
 800caba:	78a2      	ldrb	r2, [r4, #2]
 800cabc:	e785      	b.n	800c9ca <_strtod_l+0x192>
 800cabe:	f04f 0c01 	mov.w	ip, #1
 800cac2:	e7f8      	b.n	800cab6 <_strtod_l+0x27e>
 800cac4:	0802c8b8 	.word	0x0802c8b8
 800cac8:	0802c8a0 	.word	0x0802c8a0
 800cacc:	7ff00000 	.word	0x7ff00000
 800cad0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cad2:	1c51      	adds	r1, r2, #1
 800cad4:	9119      	str	r1, [sp, #100]	@ 0x64
 800cad6:	7852      	ldrb	r2, [r2, #1]
 800cad8:	2a30      	cmp	r2, #48	@ 0x30
 800cada:	d0f9      	beq.n	800cad0 <_strtod_l+0x298>
 800cadc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cae0:	2908      	cmp	r1, #8
 800cae2:	f63f af78 	bhi.w	800c9d6 <_strtod_l+0x19e>
 800cae6:	3a30      	subs	r2, #48	@ 0x30
 800cae8:	920e      	str	r2, [sp, #56]	@ 0x38
 800caea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800caec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800caee:	f04f 080a 	mov.w	r8, #10
 800caf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800caf4:	1c56      	adds	r6, r2, #1
 800caf6:	9619      	str	r6, [sp, #100]	@ 0x64
 800caf8:	7852      	ldrb	r2, [r2, #1]
 800cafa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cafe:	f1be 0f09 	cmp.w	lr, #9
 800cb02:	d939      	bls.n	800cb78 <_strtod_l+0x340>
 800cb04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cb06:	1a76      	subs	r6, r6, r1
 800cb08:	2e08      	cmp	r6, #8
 800cb0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cb0e:	dc03      	bgt.n	800cb18 <_strtod_l+0x2e0>
 800cb10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb12:	4588      	cmp	r8, r1
 800cb14:	bfa8      	it	ge
 800cb16:	4688      	movge	r8, r1
 800cb18:	f1bc 0f00 	cmp.w	ip, #0
 800cb1c:	d001      	beq.n	800cb22 <_strtod_l+0x2ea>
 800cb1e:	f1c8 0800 	rsb	r8, r8, #0
 800cb22:	2d00      	cmp	r5, #0
 800cb24:	d14e      	bne.n	800cbc4 <_strtod_l+0x38c>
 800cb26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb28:	4308      	orrs	r0, r1
 800cb2a:	f47f aebe 	bne.w	800c8aa <_strtod_l+0x72>
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f47f aed6 	bne.w	800c8e0 <_strtod_l+0xa8>
 800cb34:	2a69      	cmp	r2, #105	@ 0x69
 800cb36:	d028      	beq.n	800cb8a <_strtod_l+0x352>
 800cb38:	dc25      	bgt.n	800cb86 <_strtod_l+0x34e>
 800cb3a:	2a49      	cmp	r2, #73	@ 0x49
 800cb3c:	d025      	beq.n	800cb8a <_strtod_l+0x352>
 800cb3e:	2a4e      	cmp	r2, #78	@ 0x4e
 800cb40:	f47f aece 	bne.w	800c8e0 <_strtod_l+0xa8>
 800cb44:	499b      	ldr	r1, [pc, #620]	@ (800cdb4 <_strtod_l+0x57c>)
 800cb46:	a819      	add	r0, sp, #100	@ 0x64
 800cb48:	f001 f9ee 	bl	800df28 <__match>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	f43f aec7 	beq.w	800c8e0 <_strtod_l+0xa8>
 800cb52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b28      	cmp	r3, #40	@ 0x28
 800cb58:	d12e      	bne.n	800cbb8 <_strtod_l+0x380>
 800cb5a:	4997      	ldr	r1, [pc, #604]	@ (800cdb8 <_strtod_l+0x580>)
 800cb5c:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb5e:	a819      	add	r0, sp, #100	@ 0x64
 800cb60:	f001 f9f6 	bl	800df50 <__hexnan>
 800cb64:	2805      	cmp	r0, #5
 800cb66:	d127      	bne.n	800cbb8 <_strtod_l+0x380>
 800cb68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cb6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cb72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cb76:	e698      	b.n	800c8aa <_strtod_l+0x72>
 800cb78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb7a:	fb08 2101 	mla	r1, r8, r1, r2
 800cb7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cb82:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb84:	e7b5      	b.n	800caf2 <_strtod_l+0x2ba>
 800cb86:	2a6e      	cmp	r2, #110	@ 0x6e
 800cb88:	e7da      	b.n	800cb40 <_strtod_l+0x308>
 800cb8a:	498c      	ldr	r1, [pc, #560]	@ (800cdbc <_strtod_l+0x584>)
 800cb8c:	a819      	add	r0, sp, #100	@ 0x64
 800cb8e:	f001 f9cb 	bl	800df28 <__match>
 800cb92:	2800      	cmp	r0, #0
 800cb94:	f43f aea4 	beq.w	800c8e0 <_strtod_l+0xa8>
 800cb98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb9a:	4989      	ldr	r1, [pc, #548]	@ (800cdc0 <_strtod_l+0x588>)
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	a819      	add	r0, sp, #100	@ 0x64
 800cba0:	9319      	str	r3, [sp, #100]	@ 0x64
 800cba2:	f001 f9c1 	bl	800df28 <__match>
 800cba6:	b910      	cbnz	r0, 800cbae <_strtod_l+0x376>
 800cba8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbaa:	3301      	adds	r3, #1
 800cbac:	9319      	str	r3, [sp, #100]	@ 0x64
 800cbae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cdd0 <_strtod_l+0x598>
 800cbb2:	f04f 0a00 	mov.w	sl, #0
 800cbb6:	e678      	b.n	800c8aa <_strtod_l+0x72>
 800cbb8:	4882      	ldr	r0, [pc, #520]	@ (800cdc4 <_strtod_l+0x58c>)
 800cbba:	f000 fef1 	bl	800d9a0 <nan>
 800cbbe:	ec5b ab10 	vmov	sl, fp, d0
 800cbc2:	e672      	b.n	800c8aa <_strtod_l+0x72>
 800cbc4:	eba8 0309 	sub.w	r3, r8, r9
 800cbc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cbca:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbcc:	2f00      	cmp	r7, #0
 800cbce:	bf08      	it	eq
 800cbd0:	462f      	moveq	r7, r5
 800cbd2:	2d10      	cmp	r5, #16
 800cbd4:	462c      	mov	r4, r5
 800cbd6:	bfa8      	it	ge
 800cbd8:	2410      	movge	r4, #16
 800cbda:	f7f3 fc93 	bl	8000504 <__aeabi_ui2d>
 800cbde:	2d09      	cmp	r5, #9
 800cbe0:	4682      	mov	sl, r0
 800cbe2:	468b      	mov	fp, r1
 800cbe4:	dc13      	bgt.n	800cc0e <_strtod_l+0x3d6>
 800cbe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	f43f ae5e 	beq.w	800c8aa <_strtod_l+0x72>
 800cbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbf0:	dd78      	ble.n	800cce4 <_strtod_l+0x4ac>
 800cbf2:	2b16      	cmp	r3, #22
 800cbf4:	dc5f      	bgt.n	800ccb6 <_strtod_l+0x47e>
 800cbf6:	4974      	ldr	r1, [pc, #464]	@ (800cdc8 <_strtod_l+0x590>)
 800cbf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc00:	4652      	mov	r2, sl
 800cc02:	465b      	mov	r3, fp
 800cc04:	f7f3 fcf8 	bl	80005f8 <__aeabi_dmul>
 800cc08:	4682      	mov	sl, r0
 800cc0a:	468b      	mov	fp, r1
 800cc0c:	e64d      	b.n	800c8aa <_strtod_l+0x72>
 800cc0e:	4b6e      	ldr	r3, [pc, #440]	@ (800cdc8 <_strtod_l+0x590>)
 800cc10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cc18:	f7f3 fcee 	bl	80005f8 <__aeabi_dmul>
 800cc1c:	4682      	mov	sl, r0
 800cc1e:	9808      	ldr	r0, [sp, #32]
 800cc20:	468b      	mov	fp, r1
 800cc22:	f7f3 fc6f 	bl	8000504 <__aeabi_ui2d>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4650      	mov	r0, sl
 800cc2c:	4659      	mov	r1, fp
 800cc2e:	f7f3 fb2d 	bl	800028c <__adddf3>
 800cc32:	2d0f      	cmp	r5, #15
 800cc34:	4682      	mov	sl, r0
 800cc36:	468b      	mov	fp, r1
 800cc38:	ddd5      	ble.n	800cbe6 <_strtod_l+0x3ae>
 800cc3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc3c:	1b2c      	subs	r4, r5, r4
 800cc3e:	441c      	add	r4, r3
 800cc40:	2c00      	cmp	r4, #0
 800cc42:	f340 8096 	ble.w	800cd72 <_strtod_l+0x53a>
 800cc46:	f014 030f 	ands.w	r3, r4, #15
 800cc4a:	d00a      	beq.n	800cc62 <_strtod_l+0x42a>
 800cc4c:	495e      	ldr	r1, [pc, #376]	@ (800cdc8 <_strtod_l+0x590>)
 800cc4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc52:	4652      	mov	r2, sl
 800cc54:	465b      	mov	r3, fp
 800cc56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc5a:	f7f3 fccd 	bl	80005f8 <__aeabi_dmul>
 800cc5e:	4682      	mov	sl, r0
 800cc60:	468b      	mov	fp, r1
 800cc62:	f034 040f 	bics.w	r4, r4, #15
 800cc66:	d073      	beq.n	800cd50 <_strtod_l+0x518>
 800cc68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cc6c:	dd48      	ble.n	800cd00 <_strtod_l+0x4c8>
 800cc6e:	2400      	movs	r4, #0
 800cc70:	46a0      	mov	r8, r4
 800cc72:	940a      	str	r4, [sp, #40]	@ 0x28
 800cc74:	46a1      	mov	r9, r4
 800cc76:	9a05      	ldr	r2, [sp, #20]
 800cc78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cdd0 <_strtod_l+0x598>
 800cc7c:	2322      	movs	r3, #34	@ 0x22
 800cc7e:	6013      	str	r3, [r2, #0]
 800cc80:	f04f 0a00 	mov.w	sl, #0
 800cc84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f43f ae0f 	beq.w	800c8aa <_strtod_l+0x72>
 800cc8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc8e:	9805      	ldr	r0, [sp, #20]
 800cc90:	f7ff f942 	bl	800bf18 <_Bfree>
 800cc94:	9805      	ldr	r0, [sp, #20]
 800cc96:	4649      	mov	r1, r9
 800cc98:	f7ff f93e 	bl	800bf18 <_Bfree>
 800cc9c:	9805      	ldr	r0, [sp, #20]
 800cc9e:	4641      	mov	r1, r8
 800cca0:	f7ff f93a 	bl	800bf18 <_Bfree>
 800cca4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cca6:	9805      	ldr	r0, [sp, #20]
 800cca8:	f7ff f936 	bl	800bf18 <_Bfree>
 800ccac:	9805      	ldr	r0, [sp, #20]
 800ccae:	4621      	mov	r1, r4
 800ccb0:	f7ff f932 	bl	800bf18 <_Bfree>
 800ccb4:	e5f9      	b.n	800c8aa <_strtod_l+0x72>
 800ccb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	dbbc      	blt.n	800cc3a <_strtod_l+0x402>
 800ccc0:	4c41      	ldr	r4, [pc, #260]	@ (800cdc8 <_strtod_l+0x590>)
 800ccc2:	f1c5 050f 	rsb	r5, r5, #15
 800ccc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ccca:	4652      	mov	r2, sl
 800cccc:	465b      	mov	r3, fp
 800ccce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccd2:	f7f3 fc91 	bl	80005f8 <__aeabi_dmul>
 800ccd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccd8:	1b5d      	subs	r5, r3, r5
 800ccda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ccde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cce2:	e78f      	b.n	800cc04 <_strtod_l+0x3cc>
 800cce4:	3316      	adds	r3, #22
 800cce6:	dba8      	blt.n	800cc3a <_strtod_l+0x402>
 800cce8:	4b37      	ldr	r3, [pc, #220]	@ (800cdc8 <_strtod_l+0x590>)
 800ccea:	eba9 0808 	sub.w	r8, r9, r8
 800ccee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ccf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ccf6:	4650      	mov	r0, sl
 800ccf8:	4659      	mov	r1, fp
 800ccfa:	f7f3 fda7 	bl	800084c <__aeabi_ddiv>
 800ccfe:	e783      	b.n	800cc08 <_strtod_l+0x3d0>
 800cd00:	4b32      	ldr	r3, [pc, #200]	@ (800cdcc <_strtod_l+0x594>)
 800cd02:	9308      	str	r3, [sp, #32]
 800cd04:	2300      	movs	r3, #0
 800cd06:	1124      	asrs	r4, r4, #4
 800cd08:	4650      	mov	r0, sl
 800cd0a:	4659      	mov	r1, fp
 800cd0c:	461e      	mov	r6, r3
 800cd0e:	2c01      	cmp	r4, #1
 800cd10:	dc21      	bgt.n	800cd56 <_strtod_l+0x51e>
 800cd12:	b10b      	cbz	r3, 800cd18 <_strtod_l+0x4e0>
 800cd14:	4682      	mov	sl, r0
 800cd16:	468b      	mov	fp, r1
 800cd18:	492c      	ldr	r1, [pc, #176]	@ (800cdcc <_strtod_l+0x594>)
 800cd1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cd1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cd22:	4652      	mov	r2, sl
 800cd24:	465b      	mov	r3, fp
 800cd26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd2a:	f7f3 fc65 	bl	80005f8 <__aeabi_dmul>
 800cd2e:	4b28      	ldr	r3, [pc, #160]	@ (800cdd0 <_strtod_l+0x598>)
 800cd30:	460a      	mov	r2, r1
 800cd32:	400b      	ands	r3, r1
 800cd34:	4927      	ldr	r1, [pc, #156]	@ (800cdd4 <_strtod_l+0x59c>)
 800cd36:	428b      	cmp	r3, r1
 800cd38:	4682      	mov	sl, r0
 800cd3a:	d898      	bhi.n	800cc6e <_strtod_l+0x436>
 800cd3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cd40:	428b      	cmp	r3, r1
 800cd42:	bf86      	itte	hi
 800cd44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cdd8 <_strtod_l+0x5a0>
 800cd48:	f04f 3aff 	movhi.w	sl, #4294967295
 800cd4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cd50:	2300      	movs	r3, #0
 800cd52:	9308      	str	r3, [sp, #32]
 800cd54:	e07a      	b.n	800ce4c <_strtod_l+0x614>
 800cd56:	07e2      	lsls	r2, r4, #31
 800cd58:	d505      	bpl.n	800cd66 <_strtod_l+0x52e>
 800cd5a:	9b08      	ldr	r3, [sp, #32]
 800cd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd60:	f7f3 fc4a 	bl	80005f8 <__aeabi_dmul>
 800cd64:	2301      	movs	r3, #1
 800cd66:	9a08      	ldr	r2, [sp, #32]
 800cd68:	3208      	adds	r2, #8
 800cd6a:	3601      	adds	r6, #1
 800cd6c:	1064      	asrs	r4, r4, #1
 800cd6e:	9208      	str	r2, [sp, #32]
 800cd70:	e7cd      	b.n	800cd0e <_strtod_l+0x4d6>
 800cd72:	d0ed      	beq.n	800cd50 <_strtod_l+0x518>
 800cd74:	4264      	negs	r4, r4
 800cd76:	f014 020f 	ands.w	r2, r4, #15
 800cd7a:	d00a      	beq.n	800cd92 <_strtod_l+0x55a>
 800cd7c:	4b12      	ldr	r3, [pc, #72]	@ (800cdc8 <_strtod_l+0x590>)
 800cd7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd82:	4650      	mov	r0, sl
 800cd84:	4659      	mov	r1, fp
 800cd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8a:	f7f3 fd5f 	bl	800084c <__aeabi_ddiv>
 800cd8e:	4682      	mov	sl, r0
 800cd90:	468b      	mov	fp, r1
 800cd92:	1124      	asrs	r4, r4, #4
 800cd94:	d0dc      	beq.n	800cd50 <_strtod_l+0x518>
 800cd96:	2c1f      	cmp	r4, #31
 800cd98:	dd20      	ble.n	800cddc <_strtod_l+0x5a4>
 800cd9a:	2400      	movs	r4, #0
 800cd9c:	46a0      	mov	r8, r4
 800cd9e:	940a      	str	r4, [sp, #40]	@ 0x28
 800cda0:	46a1      	mov	r9, r4
 800cda2:	9a05      	ldr	r2, [sp, #20]
 800cda4:	2322      	movs	r3, #34	@ 0x22
 800cda6:	f04f 0a00 	mov.w	sl, #0
 800cdaa:	f04f 0b00 	mov.w	fp, #0
 800cdae:	6013      	str	r3, [r2, #0]
 800cdb0:	e768      	b.n	800cc84 <_strtod_l+0x44c>
 800cdb2:	bf00      	nop
 800cdb4:	0802c68d 	.word	0x0802c68d
 800cdb8:	0802c8a4 	.word	0x0802c8a4
 800cdbc:	0802c685 	.word	0x0802c685
 800cdc0:	0802c6bc 	.word	0x0802c6bc
 800cdc4:	0802ca4d 	.word	0x0802ca4d
 800cdc8:	0802c7d8 	.word	0x0802c7d8
 800cdcc:	0802c7b0 	.word	0x0802c7b0
 800cdd0:	7ff00000 	.word	0x7ff00000
 800cdd4:	7ca00000 	.word	0x7ca00000
 800cdd8:	7fefffff 	.word	0x7fefffff
 800cddc:	f014 0310 	ands.w	r3, r4, #16
 800cde0:	bf18      	it	ne
 800cde2:	236a      	movne	r3, #106	@ 0x6a
 800cde4:	4ea9      	ldr	r6, [pc, #676]	@ (800d08c <_strtod_l+0x854>)
 800cde6:	9308      	str	r3, [sp, #32]
 800cde8:	4650      	mov	r0, sl
 800cdea:	4659      	mov	r1, fp
 800cdec:	2300      	movs	r3, #0
 800cdee:	07e2      	lsls	r2, r4, #31
 800cdf0:	d504      	bpl.n	800cdfc <_strtod_l+0x5c4>
 800cdf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cdf6:	f7f3 fbff 	bl	80005f8 <__aeabi_dmul>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	1064      	asrs	r4, r4, #1
 800cdfe:	f106 0608 	add.w	r6, r6, #8
 800ce02:	d1f4      	bne.n	800cdee <_strtod_l+0x5b6>
 800ce04:	b10b      	cbz	r3, 800ce0a <_strtod_l+0x5d2>
 800ce06:	4682      	mov	sl, r0
 800ce08:	468b      	mov	fp, r1
 800ce0a:	9b08      	ldr	r3, [sp, #32]
 800ce0c:	b1b3      	cbz	r3, 800ce3c <_strtod_l+0x604>
 800ce0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ce12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	4659      	mov	r1, fp
 800ce1a:	dd0f      	ble.n	800ce3c <_strtod_l+0x604>
 800ce1c:	2b1f      	cmp	r3, #31
 800ce1e:	dd55      	ble.n	800cecc <_strtod_l+0x694>
 800ce20:	2b34      	cmp	r3, #52	@ 0x34
 800ce22:	bfde      	ittt	le
 800ce24:	f04f 33ff 	movle.w	r3, #4294967295
 800ce28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ce2c:	4093      	lslle	r3, r2
 800ce2e:	f04f 0a00 	mov.w	sl, #0
 800ce32:	bfcc      	ite	gt
 800ce34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ce38:	ea03 0b01 	andle.w	fp, r3, r1
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2300      	movs	r3, #0
 800ce40:	4650      	mov	r0, sl
 800ce42:	4659      	mov	r1, fp
 800ce44:	f7f3 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d1a6      	bne.n	800cd9a <_strtod_l+0x562>
 800ce4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ce52:	9805      	ldr	r0, [sp, #20]
 800ce54:	462b      	mov	r3, r5
 800ce56:	463a      	mov	r2, r7
 800ce58:	f7ff f8c6 	bl	800bfe8 <__s2b>
 800ce5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	f43f af05 	beq.w	800cc6e <_strtod_l+0x436>
 800ce64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce66:	2a00      	cmp	r2, #0
 800ce68:	eba9 0308 	sub.w	r3, r9, r8
 800ce6c:	bfa8      	it	ge
 800ce6e:	2300      	movge	r3, #0
 800ce70:	9312      	str	r3, [sp, #72]	@ 0x48
 800ce72:	2400      	movs	r4, #0
 800ce74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ce78:	9316      	str	r3, [sp, #88]	@ 0x58
 800ce7a:	46a0      	mov	r8, r4
 800ce7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce7e:	9805      	ldr	r0, [sp, #20]
 800ce80:	6859      	ldr	r1, [r3, #4]
 800ce82:	f7ff f809 	bl	800be98 <_Balloc>
 800ce86:	4681      	mov	r9, r0
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	f43f aef4 	beq.w	800cc76 <_strtod_l+0x43e>
 800ce8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce90:	691a      	ldr	r2, [r3, #16]
 800ce92:	3202      	adds	r2, #2
 800ce94:	f103 010c 	add.w	r1, r3, #12
 800ce98:	0092      	lsls	r2, r2, #2
 800ce9a:	300c      	adds	r0, #12
 800ce9c:	f000 fd72 	bl	800d984 <memcpy>
 800cea0:	ec4b ab10 	vmov	d0, sl, fp
 800cea4:	9805      	ldr	r0, [sp, #20]
 800cea6:	aa1c      	add	r2, sp, #112	@ 0x70
 800cea8:	a91b      	add	r1, sp, #108	@ 0x6c
 800ceaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ceae:	f7ff fbd7 	bl	800c660 <__d2b>
 800ceb2:	901a      	str	r0, [sp, #104]	@ 0x68
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	f43f aede 	beq.w	800cc76 <_strtod_l+0x43e>
 800ceba:	9805      	ldr	r0, [sp, #20]
 800cebc:	2101      	movs	r1, #1
 800cebe:	f7ff f929 	bl	800c114 <__i2b>
 800cec2:	4680      	mov	r8, r0
 800cec4:	b948      	cbnz	r0, 800ceda <_strtod_l+0x6a2>
 800cec6:	f04f 0800 	mov.w	r8, #0
 800ceca:	e6d4      	b.n	800cc76 <_strtod_l+0x43e>
 800cecc:	f04f 32ff 	mov.w	r2, #4294967295
 800ced0:	fa02 f303 	lsl.w	r3, r2, r3
 800ced4:	ea03 0a0a 	and.w	sl, r3, sl
 800ced8:	e7b0      	b.n	800ce3c <_strtod_l+0x604>
 800ceda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cedc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cede:	2d00      	cmp	r5, #0
 800cee0:	bfab      	itete	ge
 800cee2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cee4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cee6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cee8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ceea:	bfac      	ite	ge
 800ceec:	18ef      	addge	r7, r5, r3
 800ceee:	1b5e      	sublt	r6, r3, r5
 800cef0:	9b08      	ldr	r3, [sp, #32]
 800cef2:	1aed      	subs	r5, r5, r3
 800cef4:	4415      	add	r5, r2
 800cef6:	4b66      	ldr	r3, [pc, #408]	@ (800d090 <_strtod_l+0x858>)
 800cef8:	3d01      	subs	r5, #1
 800cefa:	429d      	cmp	r5, r3
 800cefc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cf00:	da50      	bge.n	800cfa4 <_strtod_l+0x76c>
 800cf02:	1b5b      	subs	r3, r3, r5
 800cf04:	2b1f      	cmp	r3, #31
 800cf06:	eba2 0203 	sub.w	r2, r2, r3
 800cf0a:	f04f 0101 	mov.w	r1, #1
 800cf0e:	dc3d      	bgt.n	800cf8c <_strtod_l+0x754>
 800cf10:	fa01 f303 	lsl.w	r3, r1, r3
 800cf14:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf16:	2300      	movs	r3, #0
 800cf18:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf1a:	18bd      	adds	r5, r7, r2
 800cf1c:	9b08      	ldr	r3, [sp, #32]
 800cf1e:	42af      	cmp	r7, r5
 800cf20:	4416      	add	r6, r2
 800cf22:	441e      	add	r6, r3
 800cf24:	463b      	mov	r3, r7
 800cf26:	bfa8      	it	ge
 800cf28:	462b      	movge	r3, r5
 800cf2a:	42b3      	cmp	r3, r6
 800cf2c:	bfa8      	it	ge
 800cf2e:	4633      	movge	r3, r6
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	bfc2      	ittt	gt
 800cf34:	1aed      	subgt	r5, r5, r3
 800cf36:	1af6      	subgt	r6, r6, r3
 800cf38:	1aff      	subgt	r7, r7, r3
 800cf3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	dd16      	ble.n	800cf6e <_strtod_l+0x736>
 800cf40:	4641      	mov	r1, r8
 800cf42:	9805      	ldr	r0, [sp, #20]
 800cf44:	461a      	mov	r2, r3
 800cf46:	f7ff f9a5 	bl	800c294 <__pow5mult>
 800cf4a:	4680      	mov	r8, r0
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d0ba      	beq.n	800cec6 <_strtod_l+0x68e>
 800cf50:	4601      	mov	r1, r0
 800cf52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf54:	9805      	ldr	r0, [sp, #20]
 800cf56:	f7ff f8f3 	bl	800c140 <__multiply>
 800cf5a:	900e      	str	r0, [sp, #56]	@ 0x38
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	f43f ae8a 	beq.w	800cc76 <_strtod_l+0x43e>
 800cf62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf64:	9805      	ldr	r0, [sp, #20]
 800cf66:	f7fe ffd7 	bl	800bf18 <_Bfree>
 800cf6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf6e:	2d00      	cmp	r5, #0
 800cf70:	dc1d      	bgt.n	800cfae <_strtod_l+0x776>
 800cf72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	dd23      	ble.n	800cfc0 <_strtod_l+0x788>
 800cf78:	4649      	mov	r1, r9
 800cf7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cf7c:	9805      	ldr	r0, [sp, #20]
 800cf7e:	f7ff f989 	bl	800c294 <__pow5mult>
 800cf82:	4681      	mov	r9, r0
 800cf84:	b9e0      	cbnz	r0, 800cfc0 <_strtod_l+0x788>
 800cf86:	f04f 0900 	mov.w	r9, #0
 800cf8a:	e674      	b.n	800cc76 <_strtod_l+0x43e>
 800cf8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cf90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cf94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cf98:	35e2      	adds	r5, #226	@ 0xe2
 800cf9a:	fa01 f305 	lsl.w	r3, r1, r5
 800cf9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfa0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cfa2:	e7ba      	b.n	800cf1a <_strtod_l+0x6e2>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cfac:	e7b5      	b.n	800cf1a <_strtod_l+0x6e2>
 800cfae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfb0:	9805      	ldr	r0, [sp, #20]
 800cfb2:	462a      	mov	r2, r5
 800cfb4:	f7ff f9c8 	bl	800c348 <__lshift>
 800cfb8:	901a      	str	r0, [sp, #104]	@ 0x68
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d1d9      	bne.n	800cf72 <_strtod_l+0x73a>
 800cfbe:	e65a      	b.n	800cc76 <_strtod_l+0x43e>
 800cfc0:	2e00      	cmp	r6, #0
 800cfc2:	dd07      	ble.n	800cfd4 <_strtod_l+0x79c>
 800cfc4:	4649      	mov	r1, r9
 800cfc6:	9805      	ldr	r0, [sp, #20]
 800cfc8:	4632      	mov	r2, r6
 800cfca:	f7ff f9bd 	bl	800c348 <__lshift>
 800cfce:	4681      	mov	r9, r0
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d0d8      	beq.n	800cf86 <_strtod_l+0x74e>
 800cfd4:	2f00      	cmp	r7, #0
 800cfd6:	dd08      	ble.n	800cfea <_strtod_l+0x7b2>
 800cfd8:	4641      	mov	r1, r8
 800cfda:	9805      	ldr	r0, [sp, #20]
 800cfdc:	463a      	mov	r2, r7
 800cfde:	f7ff f9b3 	bl	800c348 <__lshift>
 800cfe2:	4680      	mov	r8, r0
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	f43f ae46 	beq.w	800cc76 <_strtod_l+0x43e>
 800cfea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfec:	9805      	ldr	r0, [sp, #20]
 800cfee:	464a      	mov	r2, r9
 800cff0:	f7ff fa32 	bl	800c458 <__mdiff>
 800cff4:	4604      	mov	r4, r0
 800cff6:	2800      	cmp	r0, #0
 800cff8:	f43f ae3d 	beq.w	800cc76 <_strtod_l+0x43e>
 800cffc:	68c3      	ldr	r3, [r0, #12]
 800cffe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d000:	2300      	movs	r3, #0
 800d002:	60c3      	str	r3, [r0, #12]
 800d004:	4641      	mov	r1, r8
 800d006:	f7ff fa0b 	bl	800c420 <__mcmp>
 800d00a:	2800      	cmp	r0, #0
 800d00c:	da46      	bge.n	800d09c <_strtod_l+0x864>
 800d00e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d010:	ea53 030a 	orrs.w	r3, r3, sl
 800d014:	d16c      	bne.n	800d0f0 <_strtod_l+0x8b8>
 800d016:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d168      	bne.n	800d0f0 <_strtod_l+0x8b8>
 800d01e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d022:	0d1b      	lsrs	r3, r3, #20
 800d024:	051b      	lsls	r3, r3, #20
 800d026:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d02a:	d961      	bls.n	800d0f0 <_strtod_l+0x8b8>
 800d02c:	6963      	ldr	r3, [r4, #20]
 800d02e:	b913      	cbnz	r3, 800d036 <_strtod_l+0x7fe>
 800d030:	6923      	ldr	r3, [r4, #16]
 800d032:	2b01      	cmp	r3, #1
 800d034:	dd5c      	ble.n	800d0f0 <_strtod_l+0x8b8>
 800d036:	4621      	mov	r1, r4
 800d038:	2201      	movs	r2, #1
 800d03a:	9805      	ldr	r0, [sp, #20]
 800d03c:	f7ff f984 	bl	800c348 <__lshift>
 800d040:	4641      	mov	r1, r8
 800d042:	4604      	mov	r4, r0
 800d044:	f7ff f9ec 	bl	800c420 <__mcmp>
 800d048:	2800      	cmp	r0, #0
 800d04a:	dd51      	ble.n	800d0f0 <_strtod_l+0x8b8>
 800d04c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d050:	9a08      	ldr	r2, [sp, #32]
 800d052:	0d1b      	lsrs	r3, r3, #20
 800d054:	051b      	lsls	r3, r3, #20
 800d056:	2a00      	cmp	r2, #0
 800d058:	d06b      	beq.n	800d132 <_strtod_l+0x8fa>
 800d05a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d05e:	d868      	bhi.n	800d132 <_strtod_l+0x8fa>
 800d060:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d064:	f67f ae9d 	bls.w	800cda2 <_strtod_l+0x56a>
 800d068:	4b0a      	ldr	r3, [pc, #40]	@ (800d094 <_strtod_l+0x85c>)
 800d06a:	4650      	mov	r0, sl
 800d06c:	4659      	mov	r1, fp
 800d06e:	2200      	movs	r2, #0
 800d070:	f7f3 fac2 	bl	80005f8 <__aeabi_dmul>
 800d074:	4b08      	ldr	r3, [pc, #32]	@ (800d098 <_strtod_l+0x860>)
 800d076:	400b      	ands	r3, r1
 800d078:	4682      	mov	sl, r0
 800d07a:	468b      	mov	fp, r1
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f47f ae05 	bne.w	800cc8c <_strtod_l+0x454>
 800d082:	9a05      	ldr	r2, [sp, #20]
 800d084:	2322      	movs	r3, #34	@ 0x22
 800d086:	6013      	str	r3, [r2, #0]
 800d088:	e600      	b.n	800cc8c <_strtod_l+0x454>
 800d08a:	bf00      	nop
 800d08c:	0802c8d0 	.word	0x0802c8d0
 800d090:	fffffc02 	.word	0xfffffc02
 800d094:	39500000 	.word	0x39500000
 800d098:	7ff00000 	.word	0x7ff00000
 800d09c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d0a0:	d165      	bne.n	800d16e <_strtod_l+0x936>
 800d0a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d0a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0a8:	b35a      	cbz	r2, 800d102 <_strtod_l+0x8ca>
 800d0aa:	4a9f      	ldr	r2, [pc, #636]	@ (800d328 <_strtod_l+0xaf0>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d12b      	bne.n	800d108 <_strtod_l+0x8d0>
 800d0b0:	9b08      	ldr	r3, [sp, #32]
 800d0b2:	4651      	mov	r1, sl
 800d0b4:	b303      	cbz	r3, 800d0f8 <_strtod_l+0x8c0>
 800d0b6:	4b9d      	ldr	r3, [pc, #628]	@ (800d32c <_strtod_l+0xaf4>)
 800d0b8:	465a      	mov	r2, fp
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0c4:	d81b      	bhi.n	800d0fe <_strtod_l+0x8c6>
 800d0c6:	0d1b      	lsrs	r3, r3, #20
 800d0c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d0:	4299      	cmp	r1, r3
 800d0d2:	d119      	bne.n	800d108 <_strtod_l+0x8d0>
 800d0d4:	4b96      	ldr	r3, [pc, #600]	@ (800d330 <_strtod_l+0xaf8>)
 800d0d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d102      	bne.n	800d0e2 <_strtod_l+0x8aa>
 800d0dc:	3101      	adds	r1, #1
 800d0de:	f43f adca 	beq.w	800cc76 <_strtod_l+0x43e>
 800d0e2:	4b92      	ldr	r3, [pc, #584]	@ (800d32c <_strtod_l+0xaf4>)
 800d0e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0e6:	401a      	ands	r2, r3
 800d0e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d0ec:	f04f 0a00 	mov.w	sl, #0
 800d0f0:	9b08      	ldr	r3, [sp, #32]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1b8      	bne.n	800d068 <_strtod_l+0x830>
 800d0f6:	e5c9      	b.n	800cc8c <_strtod_l+0x454>
 800d0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0fc:	e7e8      	b.n	800d0d0 <_strtod_l+0x898>
 800d0fe:	4613      	mov	r3, r2
 800d100:	e7e6      	b.n	800d0d0 <_strtod_l+0x898>
 800d102:	ea53 030a 	orrs.w	r3, r3, sl
 800d106:	d0a1      	beq.n	800d04c <_strtod_l+0x814>
 800d108:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d10a:	b1db      	cbz	r3, 800d144 <_strtod_l+0x90c>
 800d10c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d10e:	4213      	tst	r3, r2
 800d110:	d0ee      	beq.n	800d0f0 <_strtod_l+0x8b8>
 800d112:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d114:	9a08      	ldr	r2, [sp, #32]
 800d116:	4650      	mov	r0, sl
 800d118:	4659      	mov	r1, fp
 800d11a:	b1bb      	cbz	r3, 800d14c <_strtod_l+0x914>
 800d11c:	f7ff fb6e 	bl	800c7fc <sulp>
 800d120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d124:	ec53 2b10 	vmov	r2, r3, d0
 800d128:	f7f3 f8b0 	bl	800028c <__adddf3>
 800d12c:	4682      	mov	sl, r0
 800d12e:	468b      	mov	fp, r1
 800d130:	e7de      	b.n	800d0f0 <_strtod_l+0x8b8>
 800d132:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d136:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d13a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d13e:	f04f 3aff 	mov.w	sl, #4294967295
 800d142:	e7d5      	b.n	800d0f0 <_strtod_l+0x8b8>
 800d144:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d146:	ea13 0f0a 	tst.w	r3, sl
 800d14a:	e7e1      	b.n	800d110 <_strtod_l+0x8d8>
 800d14c:	f7ff fb56 	bl	800c7fc <sulp>
 800d150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d154:	ec53 2b10 	vmov	r2, r3, d0
 800d158:	f7f3 f896 	bl	8000288 <__aeabi_dsub>
 800d15c:	2200      	movs	r2, #0
 800d15e:	2300      	movs	r3, #0
 800d160:	4682      	mov	sl, r0
 800d162:	468b      	mov	fp, r1
 800d164:	f7f3 fcb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d168:	2800      	cmp	r0, #0
 800d16a:	d0c1      	beq.n	800d0f0 <_strtod_l+0x8b8>
 800d16c:	e619      	b.n	800cda2 <_strtod_l+0x56a>
 800d16e:	4641      	mov	r1, r8
 800d170:	4620      	mov	r0, r4
 800d172:	f7ff facd 	bl	800c710 <__ratio>
 800d176:	ec57 6b10 	vmov	r6, r7, d0
 800d17a:	2200      	movs	r2, #0
 800d17c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d180:	4630      	mov	r0, r6
 800d182:	4639      	mov	r1, r7
 800d184:	f7f3 fcb4 	bl	8000af0 <__aeabi_dcmple>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d06f      	beq.n	800d26c <_strtod_l+0xa34>
 800d18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d17a      	bne.n	800d288 <_strtod_l+0xa50>
 800d192:	f1ba 0f00 	cmp.w	sl, #0
 800d196:	d158      	bne.n	800d24a <_strtod_l+0xa12>
 800d198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d19a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d15a      	bne.n	800d258 <_strtod_l+0xa20>
 800d1a2:	4b64      	ldr	r3, [pc, #400]	@ (800d334 <_strtod_l+0xafc>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	4639      	mov	r1, r7
 800d1aa:	f7f3 fc97 	bl	8000adc <__aeabi_dcmplt>
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d159      	bne.n	800d266 <_strtod_l+0xa2e>
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	4639      	mov	r1, r7
 800d1b6:	4b60      	ldr	r3, [pc, #384]	@ (800d338 <_strtod_l+0xb00>)
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f7f3 fa1d 	bl	80005f8 <__aeabi_dmul>
 800d1be:	4606      	mov	r6, r0
 800d1c0:	460f      	mov	r7, r1
 800d1c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d1c6:	9606      	str	r6, [sp, #24]
 800d1c8:	9307      	str	r3, [sp, #28]
 800d1ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1ce:	4d57      	ldr	r5, [pc, #348]	@ (800d32c <_strtod_l+0xaf4>)
 800d1d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d1d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1d6:	401d      	ands	r5, r3
 800d1d8:	4b58      	ldr	r3, [pc, #352]	@ (800d33c <_strtod_l+0xb04>)
 800d1da:	429d      	cmp	r5, r3
 800d1dc:	f040 80b2 	bne.w	800d344 <_strtod_l+0xb0c>
 800d1e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d1e6:	ec4b ab10 	vmov	d0, sl, fp
 800d1ea:	f7ff f9c9 	bl	800c580 <__ulp>
 800d1ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1f2:	ec51 0b10 	vmov	r0, r1, d0
 800d1f6:	f7f3 f9ff 	bl	80005f8 <__aeabi_dmul>
 800d1fa:	4652      	mov	r2, sl
 800d1fc:	465b      	mov	r3, fp
 800d1fe:	f7f3 f845 	bl	800028c <__adddf3>
 800d202:	460b      	mov	r3, r1
 800d204:	4949      	ldr	r1, [pc, #292]	@ (800d32c <_strtod_l+0xaf4>)
 800d206:	4a4e      	ldr	r2, [pc, #312]	@ (800d340 <_strtod_l+0xb08>)
 800d208:	4019      	ands	r1, r3
 800d20a:	4291      	cmp	r1, r2
 800d20c:	4682      	mov	sl, r0
 800d20e:	d942      	bls.n	800d296 <_strtod_l+0xa5e>
 800d210:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d212:	4b47      	ldr	r3, [pc, #284]	@ (800d330 <_strtod_l+0xaf8>)
 800d214:	429a      	cmp	r2, r3
 800d216:	d103      	bne.n	800d220 <_strtod_l+0x9e8>
 800d218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d21a:	3301      	adds	r3, #1
 800d21c:	f43f ad2b 	beq.w	800cc76 <_strtod_l+0x43e>
 800d220:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d330 <_strtod_l+0xaf8>
 800d224:	f04f 3aff 	mov.w	sl, #4294967295
 800d228:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d22a:	9805      	ldr	r0, [sp, #20]
 800d22c:	f7fe fe74 	bl	800bf18 <_Bfree>
 800d230:	9805      	ldr	r0, [sp, #20]
 800d232:	4649      	mov	r1, r9
 800d234:	f7fe fe70 	bl	800bf18 <_Bfree>
 800d238:	9805      	ldr	r0, [sp, #20]
 800d23a:	4641      	mov	r1, r8
 800d23c:	f7fe fe6c 	bl	800bf18 <_Bfree>
 800d240:	9805      	ldr	r0, [sp, #20]
 800d242:	4621      	mov	r1, r4
 800d244:	f7fe fe68 	bl	800bf18 <_Bfree>
 800d248:	e618      	b.n	800ce7c <_strtod_l+0x644>
 800d24a:	f1ba 0f01 	cmp.w	sl, #1
 800d24e:	d103      	bne.n	800d258 <_strtod_l+0xa20>
 800d250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d252:	2b00      	cmp	r3, #0
 800d254:	f43f ada5 	beq.w	800cda2 <_strtod_l+0x56a>
 800d258:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d308 <_strtod_l+0xad0>
 800d25c:	4f35      	ldr	r7, [pc, #212]	@ (800d334 <_strtod_l+0xafc>)
 800d25e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d262:	2600      	movs	r6, #0
 800d264:	e7b1      	b.n	800d1ca <_strtod_l+0x992>
 800d266:	4f34      	ldr	r7, [pc, #208]	@ (800d338 <_strtod_l+0xb00>)
 800d268:	2600      	movs	r6, #0
 800d26a:	e7aa      	b.n	800d1c2 <_strtod_l+0x98a>
 800d26c:	4b32      	ldr	r3, [pc, #200]	@ (800d338 <_strtod_l+0xb00>)
 800d26e:	4630      	mov	r0, r6
 800d270:	4639      	mov	r1, r7
 800d272:	2200      	movs	r2, #0
 800d274:	f7f3 f9c0 	bl	80005f8 <__aeabi_dmul>
 800d278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d27a:	4606      	mov	r6, r0
 800d27c:	460f      	mov	r7, r1
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d09f      	beq.n	800d1c2 <_strtod_l+0x98a>
 800d282:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d286:	e7a0      	b.n	800d1ca <_strtod_l+0x992>
 800d288:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d310 <_strtod_l+0xad8>
 800d28c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d290:	ec57 6b17 	vmov	r6, r7, d7
 800d294:	e799      	b.n	800d1ca <_strtod_l+0x992>
 800d296:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d29a:	9b08      	ldr	r3, [sp, #32]
 800d29c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1c1      	bne.n	800d228 <_strtod_l+0x9f0>
 800d2a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2a8:	0d1b      	lsrs	r3, r3, #20
 800d2aa:	051b      	lsls	r3, r3, #20
 800d2ac:	429d      	cmp	r5, r3
 800d2ae:	d1bb      	bne.n	800d228 <_strtod_l+0x9f0>
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	4639      	mov	r1, r7
 800d2b4:	f7f3 fd00 	bl	8000cb8 <__aeabi_d2lz>
 800d2b8:	f7f3 f970 	bl	800059c <__aeabi_l2d>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	4639      	mov	r1, r7
 800d2c4:	f7f2 ffe0 	bl	8000288 <__aeabi_dsub>
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d2d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d2d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2d6:	ea46 060a 	orr.w	r6, r6, sl
 800d2da:	431e      	orrs	r6, r3
 800d2dc:	d06f      	beq.n	800d3be <_strtod_l+0xb86>
 800d2de:	a30e      	add	r3, pc, #56	@ (adr r3, 800d318 <_strtod_l+0xae0>)
 800d2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e4:	f7f3 fbfa 	bl	8000adc <__aeabi_dcmplt>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	f47f accf 	bne.w	800cc8c <_strtod_l+0x454>
 800d2ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800d320 <_strtod_l+0xae8>)
 800d2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2f8:	f7f3 fc0e 	bl	8000b18 <__aeabi_dcmpgt>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d093      	beq.n	800d228 <_strtod_l+0x9f0>
 800d300:	e4c4      	b.n	800cc8c <_strtod_l+0x454>
 800d302:	bf00      	nop
 800d304:	f3af 8000 	nop.w
 800d308:	00000000 	.word	0x00000000
 800d30c:	bff00000 	.word	0xbff00000
 800d310:	00000000 	.word	0x00000000
 800d314:	3ff00000 	.word	0x3ff00000
 800d318:	94a03595 	.word	0x94a03595
 800d31c:	3fdfffff 	.word	0x3fdfffff
 800d320:	35afe535 	.word	0x35afe535
 800d324:	3fe00000 	.word	0x3fe00000
 800d328:	000fffff 	.word	0x000fffff
 800d32c:	7ff00000 	.word	0x7ff00000
 800d330:	7fefffff 	.word	0x7fefffff
 800d334:	3ff00000 	.word	0x3ff00000
 800d338:	3fe00000 	.word	0x3fe00000
 800d33c:	7fe00000 	.word	0x7fe00000
 800d340:	7c9fffff 	.word	0x7c9fffff
 800d344:	9b08      	ldr	r3, [sp, #32]
 800d346:	b323      	cbz	r3, 800d392 <_strtod_l+0xb5a>
 800d348:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d34c:	d821      	bhi.n	800d392 <_strtod_l+0xb5a>
 800d34e:	a328      	add	r3, pc, #160	@ (adr r3, 800d3f0 <_strtod_l+0xbb8>)
 800d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d354:	4630      	mov	r0, r6
 800d356:	4639      	mov	r1, r7
 800d358:	f7f3 fbca 	bl	8000af0 <__aeabi_dcmple>
 800d35c:	b1a0      	cbz	r0, 800d388 <_strtod_l+0xb50>
 800d35e:	4639      	mov	r1, r7
 800d360:	4630      	mov	r0, r6
 800d362:	f7f3 fc21 	bl	8000ba8 <__aeabi_d2uiz>
 800d366:	2801      	cmp	r0, #1
 800d368:	bf38      	it	cc
 800d36a:	2001      	movcc	r0, #1
 800d36c:	f7f3 f8ca 	bl	8000504 <__aeabi_ui2d>
 800d370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d372:	4606      	mov	r6, r0
 800d374:	460f      	mov	r7, r1
 800d376:	b9fb      	cbnz	r3, 800d3b8 <_strtod_l+0xb80>
 800d378:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d37c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d37e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d380:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d384:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d388:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d38a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d38e:	1b5b      	subs	r3, r3, r5
 800d390:	9311      	str	r3, [sp, #68]	@ 0x44
 800d392:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d396:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d39a:	f7ff f8f1 	bl	800c580 <__ulp>
 800d39e:	4650      	mov	r0, sl
 800d3a0:	ec53 2b10 	vmov	r2, r3, d0
 800d3a4:	4659      	mov	r1, fp
 800d3a6:	f7f3 f927 	bl	80005f8 <__aeabi_dmul>
 800d3aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d3ae:	f7f2 ff6d 	bl	800028c <__adddf3>
 800d3b2:	4682      	mov	sl, r0
 800d3b4:	468b      	mov	fp, r1
 800d3b6:	e770      	b.n	800d29a <_strtod_l+0xa62>
 800d3b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d3bc:	e7e0      	b.n	800d380 <_strtod_l+0xb48>
 800d3be:	a30e      	add	r3, pc, #56	@ (adr r3, 800d3f8 <_strtod_l+0xbc0>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	f7f3 fb8a 	bl	8000adc <__aeabi_dcmplt>
 800d3c8:	e798      	b.n	800d2fc <_strtod_l+0xac4>
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d3d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3d2:	6013      	str	r3, [r2, #0]
 800d3d4:	f7ff ba6d 	b.w	800c8b2 <_strtod_l+0x7a>
 800d3d8:	2a65      	cmp	r2, #101	@ 0x65
 800d3da:	f43f ab66 	beq.w	800caaa <_strtod_l+0x272>
 800d3de:	2a45      	cmp	r2, #69	@ 0x45
 800d3e0:	f43f ab63 	beq.w	800caaa <_strtod_l+0x272>
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	f7ff bb9e 	b.w	800cb26 <_strtod_l+0x2ee>
 800d3ea:	bf00      	nop
 800d3ec:	f3af 8000 	nop.w
 800d3f0:	ffc00000 	.word	0xffc00000
 800d3f4:	41dfffff 	.word	0x41dfffff
 800d3f8:	94a03595 	.word	0x94a03595
 800d3fc:	3fcfffff 	.word	0x3fcfffff

0800d400 <_strtod_r>:
 800d400:	4b01      	ldr	r3, [pc, #4]	@ (800d408 <_strtod_r+0x8>)
 800d402:	f7ff ba19 	b.w	800c838 <_strtod_l>
 800d406:	bf00      	nop
 800d408:	200004a0 	.word	0x200004a0

0800d40c <_strtol_l.constprop.0>:
 800d40c:	2b24      	cmp	r3, #36	@ 0x24
 800d40e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d412:	4686      	mov	lr, r0
 800d414:	4690      	mov	r8, r2
 800d416:	d801      	bhi.n	800d41c <_strtol_l.constprop.0+0x10>
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d106      	bne.n	800d42a <_strtol_l.constprop.0+0x1e>
 800d41c:	f7fd fdba 	bl	800af94 <__errno>
 800d420:	2316      	movs	r3, #22
 800d422:	6003      	str	r3, [r0, #0]
 800d424:	2000      	movs	r0, #0
 800d426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d42a:	4834      	ldr	r0, [pc, #208]	@ (800d4fc <_strtol_l.constprop.0+0xf0>)
 800d42c:	460d      	mov	r5, r1
 800d42e:	462a      	mov	r2, r5
 800d430:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d434:	5d06      	ldrb	r6, [r0, r4]
 800d436:	f016 0608 	ands.w	r6, r6, #8
 800d43a:	d1f8      	bne.n	800d42e <_strtol_l.constprop.0+0x22>
 800d43c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d43e:	d12d      	bne.n	800d49c <_strtol_l.constprop.0+0x90>
 800d440:	782c      	ldrb	r4, [r5, #0]
 800d442:	2601      	movs	r6, #1
 800d444:	1c95      	adds	r5, r2, #2
 800d446:	f033 0210 	bics.w	r2, r3, #16
 800d44a:	d109      	bne.n	800d460 <_strtol_l.constprop.0+0x54>
 800d44c:	2c30      	cmp	r4, #48	@ 0x30
 800d44e:	d12a      	bne.n	800d4a6 <_strtol_l.constprop.0+0x9a>
 800d450:	782a      	ldrb	r2, [r5, #0]
 800d452:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d456:	2a58      	cmp	r2, #88	@ 0x58
 800d458:	d125      	bne.n	800d4a6 <_strtol_l.constprop.0+0x9a>
 800d45a:	786c      	ldrb	r4, [r5, #1]
 800d45c:	2310      	movs	r3, #16
 800d45e:	3502      	adds	r5, #2
 800d460:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d464:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d468:	2200      	movs	r2, #0
 800d46a:	fbbc f9f3 	udiv	r9, ip, r3
 800d46e:	4610      	mov	r0, r2
 800d470:	fb03 ca19 	mls	sl, r3, r9, ip
 800d474:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d478:	2f09      	cmp	r7, #9
 800d47a:	d81b      	bhi.n	800d4b4 <_strtol_l.constprop.0+0xa8>
 800d47c:	463c      	mov	r4, r7
 800d47e:	42a3      	cmp	r3, r4
 800d480:	dd27      	ble.n	800d4d2 <_strtol_l.constprop.0+0xc6>
 800d482:	1c57      	adds	r7, r2, #1
 800d484:	d007      	beq.n	800d496 <_strtol_l.constprop.0+0x8a>
 800d486:	4581      	cmp	r9, r0
 800d488:	d320      	bcc.n	800d4cc <_strtol_l.constprop.0+0xc0>
 800d48a:	d101      	bne.n	800d490 <_strtol_l.constprop.0+0x84>
 800d48c:	45a2      	cmp	sl, r4
 800d48e:	db1d      	blt.n	800d4cc <_strtol_l.constprop.0+0xc0>
 800d490:	fb00 4003 	mla	r0, r0, r3, r4
 800d494:	2201      	movs	r2, #1
 800d496:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d49a:	e7eb      	b.n	800d474 <_strtol_l.constprop.0+0x68>
 800d49c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d49e:	bf04      	itt	eq
 800d4a0:	782c      	ldrbeq	r4, [r5, #0]
 800d4a2:	1c95      	addeq	r5, r2, #2
 800d4a4:	e7cf      	b.n	800d446 <_strtol_l.constprop.0+0x3a>
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1da      	bne.n	800d460 <_strtol_l.constprop.0+0x54>
 800d4aa:	2c30      	cmp	r4, #48	@ 0x30
 800d4ac:	bf0c      	ite	eq
 800d4ae:	2308      	moveq	r3, #8
 800d4b0:	230a      	movne	r3, #10
 800d4b2:	e7d5      	b.n	800d460 <_strtol_l.constprop.0+0x54>
 800d4b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d4b8:	2f19      	cmp	r7, #25
 800d4ba:	d801      	bhi.n	800d4c0 <_strtol_l.constprop.0+0xb4>
 800d4bc:	3c37      	subs	r4, #55	@ 0x37
 800d4be:	e7de      	b.n	800d47e <_strtol_l.constprop.0+0x72>
 800d4c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d4c4:	2f19      	cmp	r7, #25
 800d4c6:	d804      	bhi.n	800d4d2 <_strtol_l.constprop.0+0xc6>
 800d4c8:	3c57      	subs	r4, #87	@ 0x57
 800d4ca:	e7d8      	b.n	800d47e <_strtol_l.constprop.0+0x72>
 800d4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d0:	e7e1      	b.n	800d496 <_strtol_l.constprop.0+0x8a>
 800d4d2:	1c53      	adds	r3, r2, #1
 800d4d4:	d108      	bne.n	800d4e8 <_strtol_l.constprop.0+0xdc>
 800d4d6:	2322      	movs	r3, #34	@ 0x22
 800d4d8:	f8ce 3000 	str.w	r3, [lr]
 800d4dc:	4660      	mov	r0, ip
 800d4de:	f1b8 0f00 	cmp.w	r8, #0
 800d4e2:	d0a0      	beq.n	800d426 <_strtol_l.constprop.0+0x1a>
 800d4e4:	1e69      	subs	r1, r5, #1
 800d4e6:	e006      	b.n	800d4f6 <_strtol_l.constprop.0+0xea>
 800d4e8:	b106      	cbz	r6, 800d4ec <_strtol_l.constprop.0+0xe0>
 800d4ea:	4240      	negs	r0, r0
 800d4ec:	f1b8 0f00 	cmp.w	r8, #0
 800d4f0:	d099      	beq.n	800d426 <_strtol_l.constprop.0+0x1a>
 800d4f2:	2a00      	cmp	r2, #0
 800d4f4:	d1f6      	bne.n	800d4e4 <_strtol_l.constprop.0+0xd8>
 800d4f6:	f8c8 1000 	str.w	r1, [r8]
 800d4fa:	e794      	b.n	800d426 <_strtol_l.constprop.0+0x1a>
 800d4fc:	0802c8f9 	.word	0x0802c8f9

0800d500 <_strtol_r>:
 800d500:	f7ff bf84 	b.w	800d40c <_strtol_l.constprop.0>

0800d504 <__ssputs_r>:
 800d504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d508:	688e      	ldr	r6, [r1, #8]
 800d50a:	461f      	mov	r7, r3
 800d50c:	42be      	cmp	r6, r7
 800d50e:	680b      	ldr	r3, [r1, #0]
 800d510:	4682      	mov	sl, r0
 800d512:	460c      	mov	r4, r1
 800d514:	4690      	mov	r8, r2
 800d516:	d82d      	bhi.n	800d574 <__ssputs_r+0x70>
 800d518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d51c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d520:	d026      	beq.n	800d570 <__ssputs_r+0x6c>
 800d522:	6965      	ldr	r5, [r4, #20]
 800d524:	6909      	ldr	r1, [r1, #16]
 800d526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d52a:	eba3 0901 	sub.w	r9, r3, r1
 800d52e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d532:	1c7b      	adds	r3, r7, #1
 800d534:	444b      	add	r3, r9
 800d536:	106d      	asrs	r5, r5, #1
 800d538:	429d      	cmp	r5, r3
 800d53a:	bf38      	it	cc
 800d53c:	461d      	movcc	r5, r3
 800d53e:	0553      	lsls	r3, r2, #21
 800d540:	d527      	bpl.n	800d592 <__ssputs_r+0x8e>
 800d542:	4629      	mov	r1, r5
 800d544:	f7fe fc1c 	bl	800bd80 <_malloc_r>
 800d548:	4606      	mov	r6, r0
 800d54a:	b360      	cbz	r0, 800d5a6 <__ssputs_r+0xa2>
 800d54c:	6921      	ldr	r1, [r4, #16]
 800d54e:	464a      	mov	r2, r9
 800d550:	f000 fa18 	bl	800d984 <memcpy>
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d55e:	81a3      	strh	r3, [r4, #12]
 800d560:	6126      	str	r6, [r4, #16]
 800d562:	6165      	str	r5, [r4, #20]
 800d564:	444e      	add	r6, r9
 800d566:	eba5 0509 	sub.w	r5, r5, r9
 800d56a:	6026      	str	r6, [r4, #0]
 800d56c:	60a5      	str	r5, [r4, #8]
 800d56e:	463e      	mov	r6, r7
 800d570:	42be      	cmp	r6, r7
 800d572:	d900      	bls.n	800d576 <__ssputs_r+0x72>
 800d574:	463e      	mov	r6, r7
 800d576:	6820      	ldr	r0, [r4, #0]
 800d578:	4632      	mov	r2, r6
 800d57a:	4641      	mov	r1, r8
 800d57c:	f000 f9c6 	bl	800d90c <memmove>
 800d580:	68a3      	ldr	r3, [r4, #8]
 800d582:	1b9b      	subs	r3, r3, r6
 800d584:	60a3      	str	r3, [r4, #8]
 800d586:	6823      	ldr	r3, [r4, #0]
 800d588:	4433      	add	r3, r6
 800d58a:	6023      	str	r3, [r4, #0]
 800d58c:	2000      	movs	r0, #0
 800d58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d592:	462a      	mov	r2, r5
 800d594:	f000 fd89 	bl	800e0aa <_realloc_r>
 800d598:	4606      	mov	r6, r0
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d1e0      	bne.n	800d560 <__ssputs_r+0x5c>
 800d59e:	6921      	ldr	r1, [r4, #16]
 800d5a0:	4650      	mov	r0, sl
 800d5a2:	f7fe fb79 	bl	800bc98 <_free_r>
 800d5a6:	230c      	movs	r3, #12
 800d5a8:	f8ca 3000 	str.w	r3, [sl]
 800d5ac:	89a3      	ldrh	r3, [r4, #12]
 800d5ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5b2:	81a3      	strh	r3, [r4, #12]
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	e7e9      	b.n	800d58e <__ssputs_r+0x8a>
	...

0800d5bc <_svfiprintf_r>:
 800d5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c0:	4698      	mov	r8, r3
 800d5c2:	898b      	ldrh	r3, [r1, #12]
 800d5c4:	061b      	lsls	r3, r3, #24
 800d5c6:	b09d      	sub	sp, #116	@ 0x74
 800d5c8:	4607      	mov	r7, r0
 800d5ca:	460d      	mov	r5, r1
 800d5cc:	4614      	mov	r4, r2
 800d5ce:	d510      	bpl.n	800d5f2 <_svfiprintf_r+0x36>
 800d5d0:	690b      	ldr	r3, [r1, #16]
 800d5d2:	b973      	cbnz	r3, 800d5f2 <_svfiprintf_r+0x36>
 800d5d4:	2140      	movs	r1, #64	@ 0x40
 800d5d6:	f7fe fbd3 	bl	800bd80 <_malloc_r>
 800d5da:	6028      	str	r0, [r5, #0]
 800d5dc:	6128      	str	r0, [r5, #16]
 800d5de:	b930      	cbnz	r0, 800d5ee <_svfiprintf_r+0x32>
 800d5e0:	230c      	movs	r3, #12
 800d5e2:	603b      	str	r3, [r7, #0]
 800d5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e8:	b01d      	add	sp, #116	@ 0x74
 800d5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ee:	2340      	movs	r3, #64	@ 0x40
 800d5f0:	616b      	str	r3, [r5, #20]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5f6:	2320      	movs	r3, #32
 800d5f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d600:	2330      	movs	r3, #48	@ 0x30
 800d602:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d7a0 <_svfiprintf_r+0x1e4>
 800d606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d60a:	f04f 0901 	mov.w	r9, #1
 800d60e:	4623      	mov	r3, r4
 800d610:	469a      	mov	sl, r3
 800d612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d616:	b10a      	cbz	r2, 800d61c <_svfiprintf_r+0x60>
 800d618:	2a25      	cmp	r2, #37	@ 0x25
 800d61a:	d1f9      	bne.n	800d610 <_svfiprintf_r+0x54>
 800d61c:	ebba 0b04 	subs.w	fp, sl, r4
 800d620:	d00b      	beq.n	800d63a <_svfiprintf_r+0x7e>
 800d622:	465b      	mov	r3, fp
 800d624:	4622      	mov	r2, r4
 800d626:	4629      	mov	r1, r5
 800d628:	4638      	mov	r0, r7
 800d62a:	f7ff ff6b 	bl	800d504 <__ssputs_r>
 800d62e:	3001      	adds	r0, #1
 800d630:	f000 80a7 	beq.w	800d782 <_svfiprintf_r+0x1c6>
 800d634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d636:	445a      	add	r2, fp
 800d638:	9209      	str	r2, [sp, #36]	@ 0x24
 800d63a:	f89a 3000 	ldrb.w	r3, [sl]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f000 809f 	beq.w	800d782 <_svfiprintf_r+0x1c6>
 800d644:	2300      	movs	r3, #0
 800d646:	f04f 32ff 	mov.w	r2, #4294967295
 800d64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d64e:	f10a 0a01 	add.w	sl, sl, #1
 800d652:	9304      	str	r3, [sp, #16]
 800d654:	9307      	str	r3, [sp, #28]
 800d656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d65a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d65c:	4654      	mov	r4, sl
 800d65e:	2205      	movs	r2, #5
 800d660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d664:	484e      	ldr	r0, [pc, #312]	@ (800d7a0 <_svfiprintf_r+0x1e4>)
 800d666:	f7f2 fdb3 	bl	80001d0 <memchr>
 800d66a:	9a04      	ldr	r2, [sp, #16]
 800d66c:	b9d8      	cbnz	r0, 800d6a6 <_svfiprintf_r+0xea>
 800d66e:	06d0      	lsls	r0, r2, #27
 800d670:	bf44      	itt	mi
 800d672:	2320      	movmi	r3, #32
 800d674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d678:	0711      	lsls	r1, r2, #28
 800d67a:	bf44      	itt	mi
 800d67c:	232b      	movmi	r3, #43	@ 0x2b
 800d67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d682:	f89a 3000 	ldrb.w	r3, [sl]
 800d686:	2b2a      	cmp	r3, #42	@ 0x2a
 800d688:	d015      	beq.n	800d6b6 <_svfiprintf_r+0xfa>
 800d68a:	9a07      	ldr	r2, [sp, #28]
 800d68c:	4654      	mov	r4, sl
 800d68e:	2000      	movs	r0, #0
 800d690:	f04f 0c0a 	mov.w	ip, #10
 800d694:	4621      	mov	r1, r4
 800d696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d69a:	3b30      	subs	r3, #48	@ 0x30
 800d69c:	2b09      	cmp	r3, #9
 800d69e:	d94b      	bls.n	800d738 <_svfiprintf_r+0x17c>
 800d6a0:	b1b0      	cbz	r0, 800d6d0 <_svfiprintf_r+0x114>
 800d6a2:	9207      	str	r2, [sp, #28]
 800d6a4:	e014      	b.n	800d6d0 <_svfiprintf_r+0x114>
 800d6a6:	eba0 0308 	sub.w	r3, r0, r8
 800d6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	9304      	str	r3, [sp, #16]
 800d6b2:	46a2      	mov	sl, r4
 800d6b4:	e7d2      	b.n	800d65c <_svfiprintf_r+0xa0>
 800d6b6:	9b03      	ldr	r3, [sp, #12]
 800d6b8:	1d19      	adds	r1, r3, #4
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	9103      	str	r1, [sp, #12]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	bfbb      	ittet	lt
 800d6c2:	425b      	neglt	r3, r3
 800d6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800d6c8:	9307      	strge	r3, [sp, #28]
 800d6ca:	9307      	strlt	r3, [sp, #28]
 800d6cc:	bfb8      	it	lt
 800d6ce:	9204      	strlt	r2, [sp, #16]
 800d6d0:	7823      	ldrb	r3, [r4, #0]
 800d6d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6d4:	d10a      	bne.n	800d6ec <_svfiprintf_r+0x130>
 800d6d6:	7863      	ldrb	r3, [r4, #1]
 800d6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6da:	d132      	bne.n	800d742 <_svfiprintf_r+0x186>
 800d6dc:	9b03      	ldr	r3, [sp, #12]
 800d6de:	1d1a      	adds	r2, r3, #4
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	9203      	str	r2, [sp, #12]
 800d6e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6e8:	3402      	adds	r4, #2
 800d6ea:	9305      	str	r3, [sp, #20]
 800d6ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d7b0 <_svfiprintf_r+0x1f4>
 800d6f0:	7821      	ldrb	r1, [r4, #0]
 800d6f2:	2203      	movs	r2, #3
 800d6f4:	4650      	mov	r0, sl
 800d6f6:	f7f2 fd6b 	bl	80001d0 <memchr>
 800d6fa:	b138      	cbz	r0, 800d70c <_svfiprintf_r+0x150>
 800d6fc:	9b04      	ldr	r3, [sp, #16]
 800d6fe:	eba0 000a 	sub.w	r0, r0, sl
 800d702:	2240      	movs	r2, #64	@ 0x40
 800d704:	4082      	lsls	r2, r0
 800d706:	4313      	orrs	r3, r2
 800d708:	3401      	adds	r4, #1
 800d70a:	9304      	str	r3, [sp, #16]
 800d70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d710:	4824      	ldr	r0, [pc, #144]	@ (800d7a4 <_svfiprintf_r+0x1e8>)
 800d712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d716:	2206      	movs	r2, #6
 800d718:	f7f2 fd5a 	bl	80001d0 <memchr>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	d036      	beq.n	800d78e <_svfiprintf_r+0x1d2>
 800d720:	4b21      	ldr	r3, [pc, #132]	@ (800d7a8 <_svfiprintf_r+0x1ec>)
 800d722:	bb1b      	cbnz	r3, 800d76c <_svfiprintf_r+0x1b0>
 800d724:	9b03      	ldr	r3, [sp, #12]
 800d726:	3307      	adds	r3, #7
 800d728:	f023 0307 	bic.w	r3, r3, #7
 800d72c:	3308      	adds	r3, #8
 800d72e:	9303      	str	r3, [sp, #12]
 800d730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d732:	4433      	add	r3, r6
 800d734:	9309      	str	r3, [sp, #36]	@ 0x24
 800d736:	e76a      	b.n	800d60e <_svfiprintf_r+0x52>
 800d738:	fb0c 3202 	mla	r2, ip, r2, r3
 800d73c:	460c      	mov	r4, r1
 800d73e:	2001      	movs	r0, #1
 800d740:	e7a8      	b.n	800d694 <_svfiprintf_r+0xd8>
 800d742:	2300      	movs	r3, #0
 800d744:	3401      	adds	r4, #1
 800d746:	9305      	str	r3, [sp, #20]
 800d748:	4619      	mov	r1, r3
 800d74a:	f04f 0c0a 	mov.w	ip, #10
 800d74e:	4620      	mov	r0, r4
 800d750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d754:	3a30      	subs	r2, #48	@ 0x30
 800d756:	2a09      	cmp	r2, #9
 800d758:	d903      	bls.n	800d762 <_svfiprintf_r+0x1a6>
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d0c6      	beq.n	800d6ec <_svfiprintf_r+0x130>
 800d75e:	9105      	str	r1, [sp, #20]
 800d760:	e7c4      	b.n	800d6ec <_svfiprintf_r+0x130>
 800d762:	fb0c 2101 	mla	r1, ip, r1, r2
 800d766:	4604      	mov	r4, r0
 800d768:	2301      	movs	r3, #1
 800d76a:	e7f0      	b.n	800d74e <_svfiprintf_r+0x192>
 800d76c:	ab03      	add	r3, sp, #12
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	462a      	mov	r2, r5
 800d772:	4b0e      	ldr	r3, [pc, #56]	@ (800d7ac <_svfiprintf_r+0x1f0>)
 800d774:	a904      	add	r1, sp, #16
 800d776:	4638      	mov	r0, r7
 800d778:	f7fc fcc8 	bl	800a10c <_printf_float>
 800d77c:	1c42      	adds	r2, r0, #1
 800d77e:	4606      	mov	r6, r0
 800d780:	d1d6      	bne.n	800d730 <_svfiprintf_r+0x174>
 800d782:	89ab      	ldrh	r3, [r5, #12]
 800d784:	065b      	lsls	r3, r3, #25
 800d786:	f53f af2d 	bmi.w	800d5e4 <_svfiprintf_r+0x28>
 800d78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d78c:	e72c      	b.n	800d5e8 <_svfiprintf_r+0x2c>
 800d78e:	ab03      	add	r3, sp, #12
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	462a      	mov	r2, r5
 800d794:	4b05      	ldr	r3, [pc, #20]	@ (800d7ac <_svfiprintf_r+0x1f0>)
 800d796:	a904      	add	r1, sp, #16
 800d798:	4638      	mov	r0, r7
 800d79a:	f7fc ff4f 	bl	800a63c <_printf_i>
 800d79e:	e7ed      	b.n	800d77c <_svfiprintf_r+0x1c0>
 800d7a0:	0802c9f9 	.word	0x0802c9f9
 800d7a4:	0802ca03 	.word	0x0802ca03
 800d7a8:	0800a10d 	.word	0x0800a10d
 800d7ac:	0800d505 	.word	0x0800d505
 800d7b0:	0802c9ff 	.word	0x0802c9ff

0800d7b4 <__sflush_r>:
 800d7b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7bc:	0716      	lsls	r6, r2, #28
 800d7be:	4605      	mov	r5, r0
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	d454      	bmi.n	800d86e <__sflush_r+0xba>
 800d7c4:	684b      	ldr	r3, [r1, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dc02      	bgt.n	800d7d0 <__sflush_r+0x1c>
 800d7ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	dd48      	ble.n	800d862 <__sflush_r+0xae>
 800d7d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7d2:	2e00      	cmp	r6, #0
 800d7d4:	d045      	beq.n	800d862 <__sflush_r+0xae>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7dc:	682f      	ldr	r7, [r5, #0]
 800d7de:	6a21      	ldr	r1, [r4, #32]
 800d7e0:	602b      	str	r3, [r5, #0]
 800d7e2:	d030      	beq.n	800d846 <__sflush_r+0x92>
 800d7e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	0759      	lsls	r1, r3, #29
 800d7ea:	d505      	bpl.n	800d7f8 <__sflush_r+0x44>
 800d7ec:	6863      	ldr	r3, [r4, #4]
 800d7ee:	1ad2      	subs	r2, r2, r3
 800d7f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7f2:	b10b      	cbz	r3, 800d7f8 <__sflush_r+0x44>
 800d7f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7f6:	1ad2      	subs	r2, r2, r3
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7fc:	6a21      	ldr	r1, [r4, #32]
 800d7fe:	4628      	mov	r0, r5
 800d800:	47b0      	blx	r6
 800d802:	1c43      	adds	r3, r0, #1
 800d804:	89a3      	ldrh	r3, [r4, #12]
 800d806:	d106      	bne.n	800d816 <__sflush_r+0x62>
 800d808:	6829      	ldr	r1, [r5, #0]
 800d80a:	291d      	cmp	r1, #29
 800d80c:	d82b      	bhi.n	800d866 <__sflush_r+0xb2>
 800d80e:	4a2a      	ldr	r2, [pc, #168]	@ (800d8b8 <__sflush_r+0x104>)
 800d810:	410a      	asrs	r2, r1
 800d812:	07d6      	lsls	r6, r2, #31
 800d814:	d427      	bmi.n	800d866 <__sflush_r+0xb2>
 800d816:	2200      	movs	r2, #0
 800d818:	6062      	str	r2, [r4, #4]
 800d81a:	04d9      	lsls	r1, r3, #19
 800d81c:	6922      	ldr	r2, [r4, #16]
 800d81e:	6022      	str	r2, [r4, #0]
 800d820:	d504      	bpl.n	800d82c <__sflush_r+0x78>
 800d822:	1c42      	adds	r2, r0, #1
 800d824:	d101      	bne.n	800d82a <__sflush_r+0x76>
 800d826:	682b      	ldr	r3, [r5, #0]
 800d828:	b903      	cbnz	r3, 800d82c <__sflush_r+0x78>
 800d82a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d82c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d82e:	602f      	str	r7, [r5, #0]
 800d830:	b1b9      	cbz	r1, 800d862 <__sflush_r+0xae>
 800d832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d836:	4299      	cmp	r1, r3
 800d838:	d002      	beq.n	800d840 <__sflush_r+0x8c>
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7fe fa2c 	bl	800bc98 <_free_r>
 800d840:	2300      	movs	r3, #0
 800d842:	6363      	str	r3, [r4, #52]	@ 0x34
 800d844:	e00d      	b.n	800d862 <__sflush_r+0xae>
 800d846:	2301      	movs	r3, #1
 800d848:	4628      	mov	r0, r5
 800d84a:	47b0      	blx	r6
 800d84c:	4602      	mov	r2, r0
 800d84e:	1c50      	adds	r0, r2, #1
 800d850:	d1c9      	bne.n	800d7e6 <__sflush_r+0x32>
 800d852:	682b      	ldr	r3, [r5, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d0c6      	beq.n	800d7e6 <__sflush_r+0x32>
 800d858:	2b1d      	cmp	r3, #29
 800d85a:	d001      	beq.n	800d860 <__sflush_r+0xac>
 800d85c:	2b16      	cmp	r3, #22
 800d85e:	d11e      	bne.n	800d89e <__sflush_r+0xea>
 800d860:	602f      	str	r7, [r5, #0]
 800d862:	2000      	movs	r0, #0
 800d864:	e022      	b.n	800d8ac <__sflush_r+0xf8>
 800d866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d86a:	b21b      	sxth	r3, r3
 800d86c:	e01b      	b.n	800d8a6 <__sflush_r+0xf2>
 800d86e:	690f      	ldr	r7, [r1, #16]
 800d870:	2f00      	cmp	r7, #0
 800d872:	d0f6      	beq.n	800d862 <__sflush_r+0xae>
 800d874:	0793      	lsls	r3, r2, #30
 800d876:	680e      	ldr	r6, [r1, #0]
 800d878:	bf08      	it	eq
 800d87a:	694b      	ldreq	r3, [r1, #20]
 800d87c:	600f      	str	r7, [r1, #0]
 800d87e:	bf18      	it	ne
 800d880:	2300      	movne	r3, #0
 800d882:	eba6 0807 	sub.w	r8, r6, r7
 800d886:	608b      	str	r3, [r1, #8]
 800d888:	f1b8 0f00 	cmp.w	r8, #0
 800d88c:	dde9      	ble.n	800d862 <__sflush_r+0xae>
 800d88e:	6a21      	ldr	r1, [r4, #32]
 800d890:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d892:	4643      	mov	r3, r8
 800d894:	463a      	mov	r2, r7
 800d896:	4628      	mov	r0, r5
 800d898:	47b0      	blx	r6
 800d89a:	2800      	cmp	r0, #0
 800d89c:	dc08      	bgt.n	800d8b0 <__sflush_r+0xfc>
 800d89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8a6:	81a3      	strh	r3, [r4, #12]
 800d8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b0:	4407      	add	r7, r0
 800d8b2:	eba8 0800 	sub.w	r8, r8, r0
 800d8b6:	e7e7      	b.n	800d888 <__sflush_r+0xd4>
 800d8b8:	dfbffffe 	.word	0xdfbffffe

0800d8bc <_fflush_r>:
 800d8bc:	b538      	push	{r3, r4, r5, lr}
 800d8be:	690b      	ldr	r3, [r1, #16]
 800d8c0:	4605      	mov	r5, r0
 800d8c2:	460c      	mov	r4, r1
 800d8c4:	b913      	cbnz	r3, 800d8cc <_fflush_r+0x10>
 800d8c6:	2500      	movs	r5, #0
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	bd38      	pop	{r3, r4, r5, pc}
 800d8cc:	b118      	cbz	r0, 800d8d6 <_fflush_r+0x1a>
 800d8ce:	6a03      	ldr	r3, [r0, #32]
 800d8d0:	b90b      	cbnz	r3, 800d8d6 <_fflush_r+0x1a>
 800d8d2:	f7fd fa73 	bl	800adbc <__sinit>
 800d8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d0f3      	beq.n	800d8c6 <_fflush_r+0xa>
 800d8de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8e0:	07d0      	lsls	r0, r2, #31
 800d8e2:	d404      	bmi.n	800d8ee <_fflush_r+0x32>
 800d8e4:	0599      	lsls	r1, r3, #22
 800d8e6:	d402      	bmi.n	800d8ee <_fflush_r+0x32>
 800d8e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8ea:	f7fd fb7e 	bl	800afea <__retarget_lock_acquire_recursive>
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	4621      	mov	r1, r4
 800d8f2:	f7ff ff5f 	bl	800d7b4 <__sflush_r>
 800d8f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8f8:	07da      	lsls	r2, r3, #31
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	d4e4      	bmi.n	800d8c8 <_fflush_r+0xc>
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	059b      	lsls	r3, r3, #22
 800d902:	d4e1      	bmi.n	800d8c8 <_fflush_r+0xc>
 800d904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d906:	f7fd fb71 	bl	800afec <__retarget_lock_release_recursive>
 800d90a:	e7dd      	b.n	800d8c8 <_fflush_r+0xc>

0800d90c <memmove>:
 800d90c:	4288      	cmp	r0, r1
 800d90e:	b510      	push	{r4, lr}
 800d910:	eb01 0402 	add.w	r4, r1, r2
 800d914:	d902      	bls.n	800d91c <memmove+0x10>
 800d916:	4284      	cmp	r4, r0
 800d918:	4623      	mov	r3, r4
 800d91a:	d807      	bhi.n	800d92c <memmove+0x20>
 800d91c:	1e43      	subs	r3, r0, #1
 800d91e:	42a1      	cmp	r1, r4
 800d920:	d008      	beq.n	800d934 <memmove+0x28>
 800d922:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d92a:	e7f8      	b.n	800d91e <memmove+0x12>
 800d92c:	4402      	add	r2, r0
 800d92e:	4601      	mov	r1, r0
 800d930:	428a      	cmp	r2, r1
 800d932:	d100      	bne.n	800d936 <memmove+0x2a>
 800d934:	bd10      	pop	{r4, pc}
 800d936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d93a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d93e:	e7f7      	b.n	800d930 <memmove+0x24>

0800d940 <strncmp>:
 800d940:	b510      	push	{r4, lr}
 800d942:	b16a      	cbz	r2, 800d960 <strncmp+0x20>
 800d944:	3901      	subs	r1, #1
 800d946:	1884      	adds	r4, r0, r2
 800d948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d94c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d950:	429a      	cmp	r2, r3
 800d952:	d103      	bne.n	800d95c <strncmp+0x1c>
 800d954:	42a0      	cmp	r0, r4
 800d956:	d001      	beq.n	800d95c <strncmp+0x1c>
 800d958:	2a00      	cmp	r2, #0
 800d95a:	d1f5      	bne.n	800d948 <strncmp+0x8>
 800d95c:	1ad0      	subs	r0, r2, r3
 800d95e:	bd10      	pop	{r4, pc}
 800d960:	4610      	mov	r0, r2
 800d962:	e7fc      	b.n	800d95e <strncmp+0x1e>

0800d964 <_sbrk_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4d06      	ldr	r5, [pc, #24]	@ (800d980 <_sbrk_r+0x1c>)
 800d968:	2300      	movs	r3, #0
 800d96a:	4604      	mov	r4, r0
 800d96c:	4608      	mov	r0, r1
 800d96e:	602b      	str	r3, [r5, #0]
 800d970:	f7f5 f89a 	bl	8002aa8 <_sbrk>
 800d974:	1c43      	adds	r3, r0, #1
 800d976:	d102      	bne.n	800d97e <_sbrk_r+0x1a>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	b103      	cbz	r3, 800d97e <_sbrk_r+0x1a>
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	20002f38 	.word	0x20002f38

0800d984 <memcpy>:
 800d984:	440a      	add	r2, r1
 800d986:	4291      	cmp	r1, r2
 800d988:	f100 33ff 	add.w	r3, r0, #4294967295
 800d98c:	d100      	bne.n	800d990 <memcpy+0xc>
 800d98e:	4770      	bx	lr
 800d990:	b510      	push	{r4, lr}
 800d992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d99a:	4291      	cmp	r1, r2
 800d99c:	d1f9      	bne.n	800d992 <memcpy+0xe>
 800d99e:	bd10      	pop	{r4, pc}

0800d9a0 <nan>:
 800d9a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d9a8 <nan+0x8>
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	00000000 	.word	0x00000000
 800d9ac:	7ff80000 	.word	0x7ff80000

0800d9b0 <__assert_func>:
 800d9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9b2:	4614      	mov	r4, r2
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	4b09      	ldr	r3, [pc, #36]	@ (800d9dc <__assert_func+0x2c>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4605      	mov	r5, r0
 800d9bc:	68d8      	ldr	r0, [r3, #12]
 800d9be:	b954      	cbnz	r4, 800d9d6 <__assert_func+0x26>
 800d9c0:	4b07      	ldr	r3, [pc, #28]	@ (800d9e0 <__assert_func+0x30>)
 800d9c2:	461c      	mov	r4, r3
 800d9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9c8:	9100      	str	r1, [sp, #0]
 800d9ca:	462b      	mov	r3, r5
 800d9cc:	4905      	ldr	r1, [pc, #20]	@ (800d9e4 <__assert_func+0x34>)
 800d9ce:	f000 fba7 	bl	800e120 <fiprintf>
 800d9d2:	f000 fbb7 	bl	800e144 <abort>
 800d9d6:	4b04      	ldr	r3, [pc, #16]	@ (800d9e8 <__assert_func+0x38>)
 800d9d8:	e7f4      	b.n	800d9c4 <__assert_func+0x14>
 800d9da:	bf00      	nop
 800d9dc:	20000450 	.word	0x20000450
 800d9e0:	0802ca4d 	.word	0x0802ca4d
 800d9e4:	0802ca1f 	.word	0x0802ca1f
 800d9e8:	0802ca12 	.word	0x0802ca12

0800d9ec <_calloc_r>:
 800d9ec:	b570      	push	{r4, r5, r6, lr}
 800d9ee:	fba1 5402 	umull	r5, r4, r1, r2
 800d9f2:	b93c      	cbnz	r4, 800da04 <_calloc_r+0x18>
 800d9f4:	4629      	mov	r1, r5
 800d9f6:	f7fe f9c3 	bl	800bd80 <_malloc_r>
 800d9fa:	4606      	mov	r6, r0
 800d9fc:	b928      	cbnz	r0, 800da0a <_calloc_r+0x1e>
 800d9fe:	2600      	movs	r6, #0
 800da00:	4630      	mov	r0, r6
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	220c      	movs	r2, #12
 800da06:	6002      	str	r2, [r0, #0]
 800da08:	e7f9      	b.n	800d9fe <_calloc_r+0x12>
 800da0a:	462a      	mov	r2, r5
 800da0c:	4621      	mov	r1, r4
 800da0e:	f7fd fa6e 	bl	800aeee <memset>
 800da12:	e7f5      	b.n	800da00 <_calloc_r+0x14>

0800da14 <rshift>:
 800da14:	6903      	ldr	r3, [r0, #16]
 800da16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800da1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800da22:	f100 0414 	add.w	r4, r0, #20
 800da26:	dd45      	ble.n	800dab4 <rshift+0xa0>
 800da28:	f011 011f 	ands.w	r1, r1, #31
 800da2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800da34:	d10c      	bne.n	800da50 <rshift+0x3c>
 800da36:	f100 0710 	add.w	r7, r0, #16
 800da3a:	4629      	mov	r1, r5
 800da3c:	42b1      	cmp	r1, r6
 800da3e:	d334      	bcc.n	800daaa <rshift+0x96>
 800da40:	1a9b      	subs	r3, r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	1eea      	subs	r2, r5, #3
 800da46:	4296      	cmp	r6, r2
 800da48:	bf38      	it	cc
 800da4a:	2300      	movcc	r3, #0
 800da4c:	4423      	add	r3, r4
 800da4e:	e015      	b.n	800da7c <rshift+0x68>
 800da50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da54:	f1c1 0820 	rsb	r8, r1, #32
 800da58:	40cf      	lsrs	r7, r1
 800da5a:	f105 0e04 	add.w	lr, r5, #4
 800da5e:	46a1      	mov	r9, r4
 800da60:	4576      	cmp	r6, lr
 800da62:	46f4      	mov	ip, lr
 800da64:	d815      	bhi.n	800da92 <rshift+0x7e>
 800da66:	1a9a      	subs	r2, r3, r2
 800da68:	0092      	lsls	r2, r2, #2
 800da6a:	3a04      	subs	r2, #4
 800da6c:	3501      	adds	r5, #1
 800da6e:	42ae      	cmp	r6, r5
 800da70:	bf38      	it	cc
 800da72:	2200      	movcc	r2, #0
 800da74:	18a3      	adds	r3, r4, r2
 800da76:	50a7      	str	r7, [r4, r2]
 800da78:	b107      	cbz	r7, 800da7c <rshift+0x68>
 800da7a:	3304      	adds	r3, #4
 800da7c:	1b1a      	subs	r2, r3, r4
 800da7e:	42a3      	cmp	r3, r4
 800da80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da84:	bf08      	it	eq
 800da86:	2300      	moveq	r3, #0
 800da88:	6102      	str	r2, [r0, #16]
 800da8a:	bf08      	it	eq
 800da8c:	6143      	streq	r3, [r0, #20]
 800da8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da92:	f8dc c000 	ldr.w	ip, [ip]
 800da96:	fa0c fc08 	lsl.w	ip, ip, r8
 800da9a:	ea4c 0707 	orr.w	r7, ip, r7
 800da9e:	f849 7b04 	str.w	r7, [r9], #4
 800daa2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800daa6:	40cf      	lsrs	r7, r1
 800daa8:	e7da      	b.n	800da60 <rshift+0x4c>
 800daaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800daae:	f847 cf04 	str.w	ip, [r7, #4]!
 800dab2:	e7c3      	b.n	800da3c <rshift+0x28>
 800dab4:	4623      	mov	r3, r4
 800dab6:	e7e1      	b.n	800da7c <rshift+0x68>

0800dab8 <__hexdig_fun>:
 800dab8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dabc:	2b09      	cmp	r3, #9
 800dabe:	d802      	bhi.n	800dac6 <__hexdig_fun+0xe>
 800dac0:	3820      	subs	r0, #32
 800dac2:	b2c0      	uxtb	r0, r0
 800dac4:	4770      	bx	lr
 800dac6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800daca:	2b05      	cmp	r3, #5
 800dacc:	d801      	bhi.n	800dad2 <__hexdig_fun+0x1a>
 800dace:	3847      	subs	r0, #71	@ 0x47
 800dad0:	e7f7      	b.n	800dac2 <__hexdig_fun+0xa>
 800dad2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dad6:	2b05      	cmp	r3, #5
 800dad8:	d801      	bhi.n	800dade <__hexdig_fun+0x26>
 800dada:	3827      	subs	r0, #39	@ 0x27
 800dadc:	e7f1      	b.n	800dac2 <__hexdig_fun+0xa>
 800dade:	2000      	movs	r0, #0
 800dae0:	4770      	bx	lr
	...

0800dae4 <__gethex>:
 800dae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae8:	b085      	sub	sp, #20
 800daea:	468a      	mov	sl, r1
 800daec:	9302      	str	r3, [sp, #8]
 800daee:	680b      	ldr	r3, [r1, #0]
 800daf0:	9001      	str	r0, [sp, #4]
 800daf2:	4690      	mov	r8, r2
 800daf4:	1c9c      	adds	r4, r3, #2
 800daf6:	46a1      	mov	r9, r4
 800daf8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dafc:	2830      	cmp	r0, #48	@ 0x30
 800dafe:	d0fa      	beq.n	800daf6 <__gethex+0x12>
 800db00:	eba9 0303 	sub.w	r3, r9, r3
 800db04:	f1a3 0b02 	sub.w	fp, r3, #2
 800db08:	f7ff ffd6 	bl	800dab8 <__hexdig_fun>
 800db0c:	4605      	mov	r5, r0
 800db0e:	2800      	cmp	r0, #0
 800db10:	d168      	bne.n	800dbe4 <__gethex+0x100>
 800db12:	49a0      	ldr	r1, [pc, #640]	@ (800dd94 <__gethex+0x2b0>)
 800db14:	2201      	movs	r2, #1
 800db16:	4648      	mov	r0, r9
 800db18:	f7ff ff12 	bl	800d940 <strncmp>
 800db1c:	4607      	mov	r7, r0
 800db1e:	2800      	cmp	r0, #0
 800db20:	d167      	bne.n	800dbf2 <__gethex+0x10e>
 800db22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800db26:	4626      	mov	r6, r4
 800db28:	f7ff ffc6 	bl	800dab8 <__hexdig_fun>
 800db2c:	2800      	cmp	r0, #0
 800db2e:	d062      	beq.n	800dbf6 <__gethex+0x112>
 800db30:	4623      	mov	r3, r4
 800db32:	7818      	ldrb	r0, [r3, #0]
 800db34:	2830      	cmp	r0, #48	@ 0x30
 800db36:	4699      	mov	r9, r3
 800db38:	f103 0301 	add.w	r3, r3, #1
 800db3c:	d0f9      	beq.n	800db32 <__gethex+0x4e>
 800db3e:	f7ff ffbb 	bl	800dab8 <__hexdig_fun>
 800db42:	fab0 f580 	clz	r5, r0
 800db46:	096d      	lsrs	r5, r5, #5
 800db48:	f04f 0b01 	mov.w	fp, #1
 800db4c:	464a      	mov	r2, r9
 800db4e:	4616      	mov	r6, r2
 800db50:	3201      	adds	r2, #1
 800db52:	7830      	ldrb	r0, [r6, #0]
 800db54:	f7ff ffb0 	bl	800dab8 <__hexdig_fun>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d1f8      	bne.n	800db4e <__gethex+0x6a>
 800db5c:	498d      	ldr	r1, [pc, #564]	@ (800dd94 <__gethex+0x2b0>)
 800db5e:	2201      	movs	r2, #1
 800db60:	4630      	mov	r0, r6
 800db62:	f7ff feed 	bl	800d940 <strncmp>
 800db66:	2800      	cmp	r0, #0
 800db68:	d13f      	bne.n	800dbea <__gethex+0x106>
 800db6a:	b944      	cbnz	r4, 800db7e <__gethex+0x9a>
 800db6c:	1c74      	adds	r4, r6, #1
 800db6e:	4622      	mov	r2, r4
 800db70:	4616      	mov	r6, r2
 800db72:	3201      	adds	r2, #1
 800db74:	7830      	ldrb	r0, [r6, #0]
 800db76:	f7ff ff9f 	bl	800dab8 <__hexdig_fun>
 800db7a:	2800      	cmp	r0, #0
 800db7c:	d1f8      	bne.n	800db70 <__gethex+0x8c>
 800db7e:	1ba4      	subs	r4, r4, r6
 800db80:	00a7      	lsls	r7, r4, #2
 800db82:	7833      	ldrb	r3, [r6, #0]
 800db84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800db88:	2b50      	cmp	r3, #80	@ 0x50
 800db8a:	d13e      	bne.n	800dc0a <__gethex+0x126>
 800db8c:	7873      	ldrb	r3, [r6, #1]
 800db8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800db90:	d033      	beq.n	800dbfa <__gethex+0x116>
 800db92:	2b2d      	cmp	r3, #45	@ 0x2d
 800db94:	d034      	beq.n	800dc00 <__gethex+0x11c>
 800db96:	1c71      	adds	r1, r6, #1
 800db98:	2400      	movs	r4, #0
 800db9a:	7808      	ldrb	r0, [r1, #0]
 800db9c:	f7ff ff8c 	bl	800dab8 <__hexdig_fun>
 800dba0:	1e43      	subs	r3, r0, #1
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	2b18      	cmp	r3, #24
 800dba6:	d830      	bhi.n	800dc0a <__gethex+0x126>
 800dba8:	f1a0 0210 	sub.w	r2, r0, #16
 800dbac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dbb0:	f7ff ff82 	bl	800dab8 <__hexdig_fun>
 800dbb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800dbb8:	fa5f fc8c 	uxtb.w	ip, ip
 800dbbc:	f1bc 0f18 	cmp.w	ip, #24
 800dbc0:	f04f 030a 	mov.w	r3, #10
 800dbc4:	d91e      	bls.n	800dc04 <__gethex+0x120>
 800dbc6:	b104      	cbz	r4, 800dbca <__gethex+0xe6>
 800dbc8:	4252      	negs	r2, r2
 800dbca:	4417      	add	r7, r2
 800dbcc:	f8ca 1000 	str.w	r1, [sl]
 800dbd0:	b1ed      	cbz	r5, 800dc0e <__gethex+0x12a>
 800dbd2:	f1bb 0f00 	cmp.w	fp, #0
 800dbd6:	bf0c      	ite	eq
 800dbd8:	2506      	moveq	r5, #6
 800dbda:	2500      	movne	r5, #0
 800dbdc:	4628      	mov	r0, r5
 800dbde:	b005      	add	sp, #20
 800dbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe4:	2500      	movs	r5, #0
 800dbe6:	462c      	mov	r4, r5
 800dbe8:	e7b0      	b.n	800db4c <__gethex+0x68>
 800dbea:	2c00      	cmp	r4, #0
 800dbec:	d1c7      	bne.n	800db7e <__gethex+0x9a>
 800dbee:	4627      	mov	r7, r4
 800dbf0:	e7c7      	b.n	800db82 <__gethex+0x9e>
 800dbf2:	464e      	mov	r6, r9
 800dbf4:	462f      	mov	r7, r5
 800dbf6:	2501      	movs	r5, #1
 800dbf8:	e7c3      	b.n	800db82 <__gethex+0x9e>
 800dbfa:	2400      	movs	r4, #0
 800dbfc:	1cb1      	adds	r1, r6, #2
 800dbfe:	e7cc      	b.n	800db9a <__gethex+0xb6>
 800dc00:	2401      	movs	r4, #1
 800dc02:	e7fb      	b.n	800dbfc <__gethex+0x118>
 800dc04:	fb03 0002 	mla	r0, r3, r2, r0
 800dc08:	e7ce      	b.n	800dba8 <__gethex+0xc4>
 800dc0a:	4631      	mov	r1, r6
 800dc0c:	e7de      	b.n	800dbcc <__gethex+0xe8>
 800dc0e:	eba6 0309 	sub.w	r3, r6, r9
 800dc12:	3b01      	subs	r3, #1
 800dc14:	4629      	mov	r1, r5
 800dc16:	2b07      	cmp	r3, #7
 800dc18:	dc0a      	bgt.n	800dc30 <__gethex+0x14c>
 800dc1a:	9801      	ldr	r0, [sp, #4]
 800dc1c:	f7fe f93c 	bl	800be98 <_Balloc>
 800dc20:	4604      	mov	r4, r0
 800dc22:	b940      	cbnz	r0, 800dc36 <__gethex+0x152>
 800dc24:	4b5c      	ldr	r3, [pc, #368]	@ (800dd98 <__gethex+0x2b4>)
 800dc26:	4602      	mov	r2, r0
 800dc28:	21e4      	movs	r1, #228	@ 0xe4
 800dc2a:	485c      	ldr	r0, [pc, #368]	@ (800dd9c <__gethex+0x2b8>)
 800dc2c:	f7ff fec0 	bl	800d9b0 <__assert_func>
 800dc30:	3101      	adds	r1, #1
 800dc32:	105b      	asrs	r3, r3, #1
 800dc34:	e7ef      	b.n	800dc16 <__gethex+0x132>
 800dc36:	f100 0a14 	add.w	sl, r0, #20
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	4655      	mov	r5, sl
 800dc3e:	469b      	mov	fp, r3
 800dc40:	45b1      	cmp	r9, r6
 800dc42:	d337      	bcc.n	800dcb4 <__gethex+0x1d0>
 800dc44:	f845 bb04 	str.w	fp, [r5], #4
 800dc48:	eba5 050a 	sub.w	r5, r5, sl
 800dc4c:	10ad      	asrs	r5, r5, #2
 800dc4e:	6125      	str	r5, [r4, #16]
 800dc50:	4658      	mov	r0, fp
 800dc52:	f7fe fa13 	bl	800c07c <__hi0bits>
 800dc56:	016d      	lsls	r5, r5, #5
 800dc58:	f8d8 6000 	ldr.w	r6, [r8]
 800dc5c:	1a2d      	subs	r5, r5, r0
 800dc5e:	42b5      	cmp	r5, r6
 800dc60:	dd54      	ble.n	800dd0c <__gethex+0x228>
 800dc62:	1bad      	subs	r5, r5, r6
 800dc64:	4629      	mov	r1, r5
 800dc66:	4620      	mov	r0, r4
 800dc68:	f7fe fda7 	bl	800c7ba <__any_on>
 800dc6c:	4681      	mov	r9, r0
 800dc6e:	b178      	cbz	r0, 800dc90 <__gethex+0x1ac>
 800dc70:	1e6b      	subs	r3, r5, #1
 800dc72:	1159      	asrs	r1, r3, #5
 800dc74:	f003 021f 	and.w	r2, r3, #31
 800dc78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dc7c:	f04f 0901 	mov.w	r9, #1
 800dc80:	fa09 f202 	lsl.w	r2, r9, r2
 800dc84:	420a      	tst	r2, r1
 800dc86:	d003      	beq.n	800dc90 <__gethex+0x1ac>
 800dc88:	454b      	cmp	r3, r9
 800dc8a:	dc36      	bgt.n	800dcfa <__gethex+0x216>
 800dc8c:	f04f 0902 	mov.w	r9, #2
 800dc90:	4629      	mov	r1, r5
 800dc92:	4620      	mov	r0, r4
 800dc94:	f7ff febe 	bl	800da14 <rshift>
 800dc98:	442f      	add	r7, r5
 800dc9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc9e:	42bb      	cmp	r3, r7
 800dca0:	da42      	bge.n	800dd28 <__gethex+0x244>
 800dca2:	9801      	ldr	r0, [sp, #4]
 800dca4:	4621      	mov	r1, r4
 800dca6:	f7fe f937 	bl	800bf18 <_Bfree>
 800dcaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dcac:	2300      	movs	r3, #0
 800dcae:	6013      	str	r3, [r2, #0]
 800dcb0:	25a3      	movs	r5, #163	@ 0xa3
 800dcb2:	e793      	b.n	800dbdc <__gethex+0xf8>
 800dcb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dcb8:	2a2e      	cmp	r2, #46	@ 0x2e
 800dcba:	d012      	beq.n	800dce2 <__gethex+0x1fe>
 800dcbc:	2b20      	cmp	r3, #32
 800dcbe:	d104      	bne.n	800dcca <__gethex+0x1e6>
 800dcc0:	f845 bb04 	str.w	fp, [r5], #4
 800dcc4:	f04f 0b00 	mov.w	fp, #0
 800dcc8:	465b      	mov	r3, fp
 800dcca:	7830      	ldrb	r0, [r6, #0]
 800dccc:	9303      	str	r3, [sp, #12]
 800dcce:	f7ff fef3 	bl	800dab8 <__hexdig_fun>
 800dcd2:	9b03      	ldr	r3, [sp, #12]
 800dcd4:	f000 000f 	and.w	r0, r0, #15
 800dcd8:	4098      	lsls	r0, r3
 800dcda:	ea4b 0b00 	orr.w	fp, fp, r0
 800dcde:	3304      	adds	r3, #4
 800dce0:	e7ae      	b.n	800dc40 <__gethex+0x15c>
 800dce2:	45b1      	cmp	r9, r6
 800dce4:	d8ea      	bhi.n	800dcbc <__gethex+0x1d8>
 800dce6:	492b      	ldr	r1, [pc, #172]	@ (800dd94 <__gethex+0x2b0>)
 800dce8:	9303      	str	r3, [sp, #12]
 800dcea:	2201      	movs	r2, #1
 800dcec:	4630      	mov	r0, r6
 800dcee:	f7ff fe27 	bl	800d940 <strncmp>
 800dcf2:	9b03      	ldr	r3, [sp, #12]
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d1e1      	bne.n	800dcbc <__gethex+0x1d8>
 800dcf8:	e7a2      	b.n	800dc40 <__gethex+0x15c>
 800dcfa:	1ea9      	subs	r1, r5, #2
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f7fe fd5c 	bl	800c7ba <__any_on>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d0c2      	beq.n	800dc8c <__gethex+0x1a8>
 800dd06:	f04f 0903 	mov.w	r9, #3
 800dd0a:	e7c1      	b.n	800dc90 <__gethex+0x1ac>
 800dd0c:	da09      	bge.n	800dd22 <__gethex+0x23e>
 800dd0e:	1b75      	subs	r5, r6, r5
 800dd10:	4621      	mov	r1, r4
 800dd12:	9801      	ldr	r0, [sp, #4]
 800dd14:	462a      	mov	r2, r5
 800dd16:	f7fe fb17 	bl	800c348 <__lshift>
 800dd1a:	1b7f      	subs	r7, r7, r5
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	f100 0a14 	add.w	sl, r0, #20
 800dd22:	f04f 0900 	mov.w	r9, #0
 800dd26:	e7b8      	b.n	800dc9a <__gethex+0x1b6>
 800dd28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dd2c:	42bd      	cmp	r5, r7
 800dd2e:	dd6f      	ble.n	800de10 <__gethex+0x32c>
 800dd30:	1bed      	subs	r5, r5, r7
 800dd32:	42ae      	cmp	r6, r5
 800dd34:	dc34      	bgt.n	800dda0 <__gethex+0x2bc>
 800dd36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd3a:	2b02      	cmp	r3, #2
 800dd3c:	d022      	beq.n	800dd84 <__gethex+0x2a0>
 800dd3e:	2b03      	cmp	r3, #3
 800dd40:	d024      	beq.n	800dd8c <__gethex+0x2a8>
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d115      	bne.n	800dd72 <__gethex+0x28e>
 800dd46:	42ae      	cmp	r6, r5
 800dd48:	d113      	bne.n	800dd72 <__gethex+0x28e>
 800dd4a:	2e01      	cmp	r6, #1
 800dd4c:	d10b      	bne.n	800dd66 <__gethex+0x282>
 800dd4e:	9a02      	ldr	r2, [sp, #8]
 800dd50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd54:	6013      	str	r3, [r2, #0]
 800dd56:	2301      	movs	r3, #1
 800dd58:	6123      	str	r3, [r4, #16]
 800dd5a:	f8ca 3000 	str.w	r3, [sl]
 800dd5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd60:	2562      	movs	r5, #98	@ 0x62
 800dd62:	601c      	str	r4, [r3, #0]
 800dd64:	e73a      	b.n	800dbdc <__gethex+0xf8>
 800dd66:	1e71      	subs	r1, r6, #1
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f7fe fd26 	bl	800c7ba <__any_on>
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d1ed      	bne.n	800dd4e <__gethex+0x26a>
 800dd72:	9801      	ldr	r0, [sp, #4]
 800dd74:	4621      	mov	r1, r4
 800dd76:	f7fe f8cf 	bl	800bf18 <_Bfree>
 800dd7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	6013      	str	r3, [r2, #0]
 800dd80:	2550      	movs	r5, #80	@ 0x50
 800dd82:	e72b      	b.n	800dbdc <__gethex+0xf8>
 800dd84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d1f3      	bne.n	800dd72 <__gethex+0x28e>
 800dd8a:	e7e0      	b.n	800dd4e <__gethex+0x26a>
 800dd8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1dd      	bne.n	800dd4e <__gethex+0x26a>
 800dd92:	e7ee      	b.n	800dd72 <__gethex+0x28e>
 800dd94:	0802c8a0 	.word	0x0802c8a0
 800dd98:	0802c735 	.word	0x0802c735
 800dd9c:	0802ca4e 	.word	0x0802ca4e
 800dda0:	1e6f      	subs	r7, r5, #1
 800dda2:	f1b9 0f00 	cmp.w	r9, #0
 800dda6:	d130      	bne.n	800de0a <__gethex+0x326>
 800dda8:	b127      	cbz	r7, 800ddb4 <__gethex+0x2d0>
 800ddaa:	4639      	mov	r1, r7
 800ddac:	4620      	mov	r0, r4
 800ddae:	f7fe fd04 	bl	800c7ba <__any_on>
 800ddb2:	4681      	mov	r9, r0
 800ddb4:	117a      	asrs	r2, r7, #5
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ddbc:	f007 071f 	and.w	r7, r7, #31
 800ddc0:	40bb      	lsls	r3, r7
 800ddc2:	4213      	tst	r3, r2
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	bf18      	it	ne
 800ddca:	f049 0902 	orrne.w	r9, r9, #2
 800ddce:	f7ff fe21 	bl	800da14 <rshift>
 800ddd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ddd6:	1b76      	subs	r6, r6, r5
 800ddd8:	2502      	movs	r5, #2
 800ddda:	f1b9 0f00 	cmp.w	r9, #0
 800ddde:	d047      	beq.n	800de70 <__gethex+0x38c>
 800dde0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dde4:	2b02      	cmp	r3, #2
 800dde6:	d015      	beq.n	800de14 <__gethex+0x330>
 800dde8:	2b03      	cmp	r3, #3
 800ddea:	d017      	beq.n	800de1c <__gethex+0x338>
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d109      	bne.n	800de04 <__gethex+0x320>
 800ddf0:	f019 0f02 	tst.w	r9, #2
 800ddf4:	d006      	beq.n	800de04 <__gethex+0x320>
 800ddf6:	f8da 3000 	ldr.w	r3, [sl]
 800ddfa:	ea49 0903 	orr.w	r9, r9, r3
 800ddfe:	f019 0f01 	tst.w	r9, #1
 800de02:	d10e      	bne.n	800de22 <__gethex+0x33e>
 800de04:	f045 0510 	orr.w	r5, r5, #16
 800de08:	e032      	b.n	800de70 <__gethex+0x38c>
 800de0a:	f04f 0901 	mov.w	r9, #1
 800de0e:	e7d1      	b.n	800ddb4 <__gethex+0x2d0>
 800de10:	2501      	movs	r5, #1
 800de12:	e7e2      	b.n	800ddda <__gethex+0x2f6>
 800de14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de16:	f1c3 0301 	rsb	r3, r3, #1
 800de1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d0f0      	beq.n	800de04 <__gethex+0x320>
 800de22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800de26:	f104 0314 	add.w	r3, r4, #20
 800de2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800de2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800de32:	f04f 0c00 	mov.w	ip, #0
 800de36:	4618      	mov	r0, r3
 800de38:	f853 2b04 	ldr.w	r2, [r3], #4
 800de3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800de40:	d01b      	beq.n	800de7a <__gethex+0x396>
 800de42:	3201      	adds	r2, #1
 800de44:	6002      	str	r2, [r0, #0]
 800de46:	2d02      	cmp	r5, #2
 800de48:	f104 0314 	add.w	r3, r4, #20
 800de4c:	d13c      	bne.n	800dec8 <__gethex+0x3e4>
 800de4e:	f8d8 2000 	ldr.w	r2, [r8]
 800de52:	3a01      	subs	r2, #1
 800de54:	42b2      	cmp	r2, r6
 800de56:	d109      	bne.n	800de6c <__gethex+0x388>
 800de58:	1171      	asrs	r1, r6, #5
 800de5a:	2201      	movs	r2, #1
 800de5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de60:	f006 061f 	and.w	r6, r6, #31
 800de64:	fa02 f606 	lsl.w	r6, r2, r6
 800de68:	421e      	tst	r6, r3
 800de6a:	d13a      	bne.n	800dee2 <__gethex+0x3fe>
 800de6c:	f045 0520 	orr.w	r5, r5, #32
 800de70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de72:	601c      	str	r4, [r3, #0]
 800de74:	9b02      	ldr	r3, [sp, #8]
 800de76:	601f      	str	r7, [r3, #0]
 800de78:	e6b0      	b.n	800dbdc <__gethex+0xf8>
 800de7a:	4299      	cmp	r1, r3
 800de7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800de80:	d8d9      	bhi.n	800de36 <__gethex+0x352>
 800de82:	68a3      	ldr	r3, [r4, #8]
 800de84:	459b      	cmp	fp, r3
 800de86:	db17      	blt.n	800deb8 <__gethex+0x3d4>
 800de88:	6861      	ldr	r1, [r4, #4]
 800de8a:	9801      	ldr	r0, [sp, #4]
 800de8c:	3101      	adds	r1, #1
 800de8e:	f7fe f803 	bl	800be98 <_Balloc>
 800de92:	4681      	mov	r9, r0
 800de94:	b918      	cbnz	r0, 800de9e <__gethex+0x3ba>
 800de96:	4b1a      	ldr	r3, [pc, #104]	@ (800df00 <__gethex+0x41c>)
 800de98:	4602      	mov	r2, r0
 800de9a:	2184      	movs	r1, #132	@ 0x84
 800de9c:	e6c5      	b.n	800dc2a <__gethex+0x146>
 800de9e:	6922      	ldr	r2, [r4, #16]
 800dea0:	3202      	adds	r2, #2
 800dea2:	f104 010c 	add.w	r1, r4, #12
 800dea6:	0092      	lsls	r2, r2, #2
 800dea8:	300c      	adds	r0, #12
 800deaa:	f7ff fd6b 	bl	800d984 <memcpy>
 800deae:	4621      	mov	r1, r4
 800deb0:	9801      	ldr	r0, [sp, #4]
 800deb2:	f7fe f831 	bl	800bf18 <_Bfree>
 800deb6:	464c      	mov	r4, r9
 800deb8:	6923      	ldr	r3, [r4, #16]
 800deba:	1c5a      	adds	r2, r3, #1
 800debc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dec0:	6122      	str	r2, [r4, #16]
 800dec2:	2201      	movs	r2, #1
 800dec4:	615a      	str	r2, [r3, #20]
 800dec6:	e7be      	b.n	800de46 <__gethex+0x362>
 800dec8:	6922      	ldr	r2, [r4, #16]
 800deca:	455a      	cmp	r2, fp
 800decc:	dd0b      	ble.n	800dee6 <__gethex+0x402>
 800dece:	2101      	movs	r1, #1
 800ded0:	4620      	mov	r0, r4
 800ded2:	f7ff fd9f 	bl	800da14 <rshift>
 800ded6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800deda:	3701      	adds	r7, #1
 800dedc:	42bb      	cmp	r3, r7
 800dede:	f6ff aee0 	blt.w	800dca2 <__gethex+0x1be>
 800dee2:	2501      	movs	r5, #1
 800dee4:	e7c2      	b.n	800de6c <__gethex+0x388>
 800dee6:	f016 061f 	ands.w	r6, r6, #31
 800deea:	d0fa      	beq.n	800dee2 <__gethex+0x3fe>
 800deec:	4453      	add	r3, sl
 800deee:	f1c6 0620 	rsb	r6, r6, #32
 800def2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800def6:	f7fe f8c1 	bl	800c07c <__hi0bits>
 800defa:	42b0      	cmp	r0, r6
 800defc:	dbe7      	blt.n	800dece <__gethex+0x3ea>
 800defe:	e7f0      	b.n	800dee2 <__gethex+0x3fe>
 800df00:	0802c735 	.word	0x0802c735

0800df04 <L_shift>:
 800df04:	f1c2 0208 	rsb	r2, r2, #8
 800df08:	0092      	lsls	r2, r2, #2
 800df0a:	b570      	push	{r4, r5, r6, lr}
 800df0c:	f1c2 0620 	rsb	r6, r2, #32
 800df10:	6843      	ldr	r3, [r0, #4]
 800df12:	6804      	ldr	r4, [r0, #0]
 800df14:	fa03 f506 	lsl.w	r5, r3, r6
 800df18:	432c      	orrs	r4, r5
 800df1a:	40d3      	lsrs	r3, r2
 800df1c:	6004      	str	r4, [r0, #0]
 800df1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800df22:	4288      	cmp	r0, r1
 800df24:	d3f4      	bcc.n	800df10 <L_shift+0xc>
 800df26:	bd70      	pop	{r4, r5, r6, pc}

0800df28 <__match>:
 800df28:	b530      	push	{r4, r5, lr}
 800df2a:	6803      	ldr	r3, [r0, #0]
 800df2c:	3301      	adds	r3, #1
 800df2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df32:	b914      	cbnz	r4, 800df3a <__match+0x12>
 800df34:	6003      	str	r3, [r0, #0]
 800df36:	2001      	movs	r0, #1
 800df38:	bd30      	pop	{r4, r5, pc}
 800df3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800df42:	2d19      	cmp	r5, #25
 800df44:	bf98      	it	ls
 800df46:	3220      	addls	r2, #32
 800df48:	42a2      	cmp	r2, r4
 800df4a:	d0f0      	beq.n	800df2e <__match+0x6>
 800df4c:	2000      	movs	r0, #0
 800df4e:	e7f3      	b.n	800df38 <__match+0x10>

0800df50 <__hexnan>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	680b      	ldr	r3, [r1, #0]
 800df56:	6801      	ldr	r1, [r0, #0]
 800df58:	115e      	asrs	r6, r3, #5
 800df5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df5e:	f013 031f 	ands.w	r3, r3, #31
 800df62:	b087      	sub	sp, #28
 800df64:	bf18      	it	ne
 800df66:	3604      	addne	r6, #4
 800df68:	2500      	movs	r5, #0
 800df6a:	1f37      	subs	r7, r6, #4
 800df6c:	4682      	mov	sl, r0
 800df6e:	4690      	mov	r8, r2
 800df70:	9301      	str	r3, [sp, #4]
 800df72:	f846 5c04 	str.w	r5, [r6, #-4]
 800df76:	46b9      	mov	r9, r7
 800df78:	463c      	mov	r4, r7
 800df7a:	9502      	str	r5, [sp, #8]
 800df7c:	46ab      	mov	fp, r5
 800df7e:	784a      	ldrb	r2, [r1, #1]
 800df80:	1c4b      	adds	r3, r1, #1
 800df82:	9303      	str	r3, [sp, #12]
 800df84:	b342      	cbz	r2, 800dfd8 <__hexnan+0x88>
 800df86:	4610      	mov	r0, r2
 800df88:	9105      	str	r1, [sp, #20]
 800df8a:	9204      	str	r2, [sp, #16]
 800df8c:	f7ff fd94 	bl	800dab8 <__hexdig_fun>
 800df90:	2800      	cmp	r0, #0
 800df92:	d151      	bne.n	800e038 <__hexnan+0xe8>
 800df94:	9a04      	ldr	r2, [sp, #16]
 800df96:	9905      	ldr	r1, [sp, #20]
 800df98:	2a20      	cmp	r2, #32
 800df9a:	d818      	bhi.n	800dfce <__hexnan+0x7e>
 800df9c:	9b02      	ldr	r3, [sp, #8]
 800df9e:	459b      	cmp	fp, r3
 800dfa0:	dd13      	ble.n	800dfca <__hexnan+0x7a>
 800dfa2:	454c      	cmp	r4, r9
 800dfa4:	d206      	bcs.n	800dfb4 <__hexnan+0x64>
 800dfa6:	2d07      	cmp	r5, #7
 800dfa8:	dc04      	bgt.n	800dfb4 <__hexnan+0x64>
 800dfaa:	462a      	mov	r2, r5
 800dfac:	4649      	mov	r1, r9
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f7ff ffa8 	bl	800df04 <L_shift>
 800dfb4:	4544      	cmp	r4, r8
 800dfb6:	d952      	bls.n	800e05e <__hexnan+0x10e>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	f1a4 0904 	sub.w	r9, r4, #4
 800dfbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800dfc2:	f8cd b008 	str.w	fp, [sp, #8]
 800dfc6:	464c      	mov	r4, r9
 800dfc8:	461d      	mov	r5, r3
 800dfca:	9903      	ldr	r1, [sp, #12]
 800dfcc:	e7d7      	b.n	800df7e <__hexnan+0x2e>
 800dfce:	2a29      	cmp	r2, #41	@ 0x29
 800dfd0:	d157      	bne.n	800e082 <__hexnan+0x132>
 800dfd2:	3102      	adds	r1, #2
 800dfd4:	f8ca 1000 	str.w	r1, [sl]
 800dfd8:	f1bb 0f00 	cmp.w	fp, #0
 800dfdc:	d051      	beq.n	800e082 <__hexnan+0x132>
 800dfde:	454c      	cmp	r4, r9
 800dfe0:	d206      	bcs.n	800dff0 <__hexnan+0xa0>
 800dfe2:	2d07      	cmp	r5, #7
 800dfe4:	dc04      	bgt.n	800dff0 <__hexnan+0xa0>
 800dfe6:	462a      	mov	r2, r5
 800dfe8:	4649      	mov	r1, r9
 800dfea:	4620      	mov	r0, r4
 800dfec:	f7ff ff8a 	bl	800df04 <L_shift>
 800dff0:	4544      	cmp	r4, r8
 800dff2:	d936      	bls.n	800e062 <__hexnan+0x112>
 800dff4:	f1a8 0204 	sub.w	r2, r8, #4
 800dff8:	4623      	mov	r3, r4
 800dffa:	f853 1b04 	ldr.w	r1, [r3], #4
 800dffe:	f842 1f04 	str.w	r1, [r2, #4]!
 800e002:	429f      	cmp	r7, r3
 800e004:	d2f9      	bcs.n	800dffa <__hexnan+0xaa>
 800e006:	1b3b      	subs	r3, r7, r4
 800e008:	f023 0303 	bic.w	r3, r3, #3
 800e00c:	3304      	adds	r3, #4
 800e00e:	3401      	adds	r4, #1
 800e010:	3e03      	subs	r6, #3
 800e012:	42b4      	cmp	r4, r6
 800e014:	bf88      	it	hi
 800e016:	2304      	movhi	r3, #4
 800e018:	4443      	add	r3, r8
 800e01a:	2200      	movs	r2, #0
 800e01c:	f843 2b04 	str.w	r2, [r3], #4
 800e020:	429f      	cmp	r7, r3
 800e022:	d2fb      	bcs.n	800e01c <__hexnan+0xcc>
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	b91b      	cbnz	r3, 800e030 <__hexnan+0xe0>
 800e028:	4547      	cmp	r7, r8
 800e02a:	d128      	bne.n	800e07e <__hexnan+0x12e>
 800e02c:	2301      	movs	r3, #1
 800e02e:	603b      	str	r3, [r7, #0]
 800e030:	2005      	movs	r0, #5
 800e032:	b007      	add	sp, #28
 800e034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e038:	3501      	adds	r5, #1
 800e03a:	2d08      	cmp	r5, #8
 800e03c:	f10b 0b01 	add.w	fp, fp, #1
 800e040:	dd06      	ble.n	800e050 <__hexnan+0x100>
 800e042:	4544      	cmp	r4, r8
 800e044:	d9c1      	bls.n	800dfca <__hexnan+0x7a>
 800e046:	2300      	movs	r3, #0
 800e048:	f844 3c04 	str.w	r3, [r4, #-4]
 800e04c:	2501      	movs	r5, #1
 800e04e:	3c04      	subs	r4, #4
 800e050:	6822      	ldr	r2, [r4, #0]
 800e052:	f000 000f 	and.w	r0, r0, #15
 800e056:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e05a:	6020      	str	r0, [r4, #0]
 800e05c:	e7b5      	b.n	800dfca <__hexnan+0x7a>
 800e05e:	2508      	movs	r5, #8
 800e060:	e7b3      	b.n	800dfca <__hexnan+0x7a>
 800e062:	9b01      	ldr	r3, [sp, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d0dd      	beq.n	800e024 <__hexnan+0xd4>
 800e068:	f1c3 0320 	rsb	r3, r3, #32
 800e06c:	f04f 32ff 	mov.w	r2, #4294967295
 800e070:	40da      	lsrs	r2, r3
 800e072:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e076:	4013      	ands	r3, r2
 800e078:	f846 3c04 	str.w	r3, [r6, #-4]
 800e07c:	e7d2      	b.n	800e024 <__hexnan+0xd4>
 800e07e:	3f04      	subs	r7, #4
 800e080:	e7d0      	b.n	800e024 <__hexnan+0xd4>
 800e082:	2004      	movs	r0, #4
 800e084:	e7d5      	b.n	800e032 <__hexnan+0xe2>

0800e086 <__ascii_mbtowc>:
 800e086:	b082      	sub	sp, #8
 800e088:	b901      	cbnz	r1, 800e08c <__ascii_mbtowc+0x6>
 800e08a:	a901      	add	r1, sp, #4
 800e08c:	b142      	cbz	r2, 800e0a0 <__ascii_mbtowc+0x1a>
 800e08e:	b14b      	cbz	r3, 800e0a4 <__ascii_mbtowc+0x1e>
 800e090:	7813      	ldrb	r3, [r2, #0]
 800e092:	600b      	str	r3, [r1, #0]
 800e094:	7812      	ldrb	r2, [r2, #0]
 800e096:	1e10      	subs	r0, r2, #0
 800e098:	bf18      	it	ne
 800e09a:	2001      	movne	r0, #1
 800e09c:	b002      	add	sp, #8
 800e09e:	4770      	bx	lr
 800e0a0:	4610      	mov	r0, r2
 800e0a2:	e7fb      	b.n	800e09c <__ascii_mbtowc+0x16>
 800e0a4:	f06f 0001 	mvn.w	r0, #1
 800e0a8:	e7f8      	b.n	800e09c <__ascii_mbtowc+0x16>

0800e0aa <_realloc_r>:
 800e0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ae:	4680      	mov	r8, r0
 800e0b0:	4615      	mov	r5, r2
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	b921      	cbnz	r1, 800e0c0 <_realloc_r+0x16>
 800e0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ba:	4611      	mov	r1, r2
 800e0bc:	f7fd be60 	b.w	800bd80 <_malloc_r>
 800e0c0:	b92a      	cbnz	r2, 800e0ce <_realloc_r+0x24>
 800e0c2:	f7fd fde9 	bl	800bc98 <_free_r>
 800e0c6:	2400      	movs	r4, #0
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ce:	f000 f840 	bl	800e152 <_malloc_usable_size_r>
 800e0d2:	4285      	cmp	r5, r0
 800e0d4:	4606      	mov	r6, r0
 800e0d6:	d802      	bhi.n	800e0de <_realloc_r+0x34>
 800e0d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e0dc:	d8f4      	bhi.n	800e0c8 <_realloc_r+0x1e>
 800e0de:	4629      	mov	r1, r5
 800e0e0:	4640      	mov	r0, r8
 800e0e2:	f7fd fe4d 	bl	800bd80 <_malloc_r>
 800e0e6:	4607      	mov	r7, r0
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d0ec      	beq.n	800e0c6 <_realloc_r+0x1c>
 800e0ec:	42b5      	cmp	r5, r6
 800e0ee:	462a      	mov	r2, r5
 800e0f0:	4621      	mov	r1, r4
 800e0f2:	bf28      	it	cs
 800e0f4:	4632      	movcs	r2, r6
 800e0f6:	f7ff fc45 	bl	800d984 <memcpy>
 800e0fa:	4621      	mov	r1, r4
 800e0fc:	4640      	mov	r0, r8
 800e0fe:	f7fd fdcb 	bl	800bc98 <_free_r>
 800e102:	463c      	mov	r4, r7
 800e104:	e7e0      	b.n	800e0c8 <_realloc_r+0x1e>

0800e106 <__ascii_wctomb>:
 800e106:	4603      	mov	r3, r0
 800e108:	4608      	mov	r0, r1
 800e10a:	b141      	cbz	r1, 800e11e <__ascii_wctomb+0x18>
 800e10c:	2aff      	cmp	r2, #255	@ 0xff
 800e10e:	d904      	bls.n	800e11a <__ascii_wctomb+0x14>
 800e110:	228a      	movs	r2, #138	@ 0x8a
 800e112:	601a      	str	r2, [r3, #0]
 800e114:	f04f 30ff 	mov.w	r0, #4294967295
 800e118:	4770      	bx	lr
 800e11a:	700a      	strb	r2, [r1, #0]
 800e11c:	2001      	movs	r0, #1
 800e11e:	4770      	bx	lr

0800e120 <fiprintf>:
 800e120:	b40e      	push	{r1, r2, r3}
 800e122:	b503      	push	{r0, r1, lr}
 800e124:	4601      	mov	r1, r0
 800e126:	ab03      	add	r3, sp, #12
 800e128:	4805      	ldr	r0, [pc, #20]	@ (800e140 <fiprintf+0x20>)
 800e12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e12e:	6800      	ldr	r0, [r0, #0]
 800e130:	9301      	str	r3, [sp, #4]
 800e132:	f000 f83f 	bl	800e1b4 <_vfiprintf_r>
 800e136:	b002      	add	sp, #8
 800e138:	f85d eb04 	ldr.w	lr, [sp], #4
 800e13c:	b003      	add	sp, #12
 800e13e:	4770      	bx	lr
 800e140:	20000450 	.word	0x20000450

0800e144 <abort>:
 800e144:	b508      	push	{r3, lr}
 800e146:	2006      	movs	r0, #6
 800e148:	f000 fa08 	bl	800e55c <raise>
 800e14c:	2001      	movs	r0, #1
 800e14e:	f7f4 fc33 	bl	80029b8 <_exit>

0800e152 <_malloc_usable_size_r>:
 800e152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e156:	1f18      	subs	r0, r3, #4
 800e158:	2b00      	cmp	r3, #0
 800e15a:	bfbc      	itt	lt
 800e15c:	580b      	ldrlt	r3, [r1, r0]
 800e15e:	18c0      	addlt	r0, r0, r3
 800e160:	4770      	bx	lr

0800e162 <__sfputc_r>:
 800e162:	6893      	ldr	r3, [r2, #8]
 800e164:	3b01      	subs	r3, #1
 800e166:	2b00      	cmp	r3, #0
 800e168:	b410      	push	{r4}
 800e16a:	6093      	str	r3, [r2, #8]
 800e16c:	da08      	bge.n	800e180 <__sfputc_r+0x1e>
 800e16e:	6994      	ldr	r4, [r2, #24]
 800e170:	42a3      	cmp	r3, r4
 800e172:	db01      	blt.n	800e178 <__sfputc_r+0x16>
 800e174:	290a      	cmp	r1, #10
 800e176:	d103      	bne.n	800e180 <__sfputc_r+0x1e>
 800e178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e17c:	f000 b932 	b.w	800e3e4 <__swbuf_r>
 800e180:	6813      	ldr	r3, [r2, #0]
 800e182:	1c58      	adds	r0, r3, #1
 800e184:	6010      	str	r0, [r2, #0]
 800e186:	7019      	strb	r1, [r3, #0]
 800e188:	4608      	mov	r0, r1
 800e18a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <__sfputs_r>:
 800e190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e192:	4606      	mov	r6, r0
 800e194:	460f      	mov	r7, r1
 800e196:	4614      	mov	r4, r2
 800e198:	18d5      	adds	r5, r2, r3
 800e19a:	42ac      	cmp	r4, r5
 800e19c:	d101      	bne.n	800e1a2 <__sfputs_r+0x12>
 800e19e:	2000      	movs	r0, #0
 800e1a0:	e007      	b.n	800e1b2 <__sfputs_r+0x22>
 800e1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1a6:	463a      	mov	r2, r7
 800e1a8:	4630      	mov	r0, r6
 800e1aa:	f7ff ffda 	bl	800e162 <__sfputc_r>
 800e1ae:	1c43      	adds	r3, r0, #1
 800e1b0:	d1f3      	bne.n	800e19a <__sfputs_r+0xa>
 800e1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e1b4 <_vfiprintf_r>:
 800e1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b8:	460d      	mov	r5, r1
 800e1ba:	b09d      	sub	sp, #116	@ 0x74
 800e1bc:	4614      	mov	r4, r2
 800e1be:	4698      	mov	r8, r3
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	b118      	cbz	r0, 800e1cc <_vfiprintf_r+0x18>
 800e1c4:	6a03      	ldr	r3, [r0, #32]
 800e1c6:	b90b      	cbnz	r3, 800e1cc <_vfiprintf_r+0x18>
 800e1c8:	f7fc fdf8 	bl	800adbc <__sinit>
 800e1cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1ce:	07d9      	lsls	r1, r3, #31
 800e1d0:	d405      	bmi.n	800e1de <_vfiprintf_r+0x2a>
 800e1d2:	89ab      	ldrh	r3, [r5, #12]
 800e1d4:	059a      	lsls	r2, r3, #22
 800e1d6:	d402      	bmi.n	800e1de <_vfiprintf_r+0x2a>
 800e1d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1da:	f7fc ff06 	bl	800afea <__retarget_lock_acquire_recursive>
 800e1de:	89ab      	ldrh	r3, [r5, #12]
 800e1e0:	071b      	lsls	r3, r3, #28
 800e1e2:	d501      	bpl.n	800e1e8 <_vfiprintf_r+0x34>
 800e1e4:	692b      	ldr	r3, [r5, #16]
 800e1e6:	b99b      	cbnz	r3, 800e210 <_vfiprintf_r+0x5c>
 800e1e8:	4629      	mov	r1, r5
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	f000 f938 	bl	800e460 <__swsetup_r>
 800e1f0:	b170      	cbz	r0, 800e210 <_vfiprintf_r+0x5c>
 800e1f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1f4:	07dc      	lsls	r4, r3, #31
 800e1f6:	d504      	bpl.n	800e202 <_vfiprintf_r+0x4e>
 800e1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1fc:	b01d      	add	sp, #116	@ 0x74
 800e1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e202:	89ab      	ldrh	r3, [r5, #12]
 800e204:	0598      	lsls	r0, r3, #22
 800e206:	d4f7      	bmi.n	800e1f8 <_vfiprintf_r+0x44>
 800e208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e20a:	f7fc feef 	bl	800afec <__retarget_lock_release_recursive>
 800e20e:	e7f3      	b.n	800e1f8 <_vfiprintf_r+0x44>
 800e210:	2300      	movs	r3, #0
 800e212:	9309      	str	r3, [sp, #36]	@ 0x24
 800e214:	2320      	movs	r3, #32
 800e216:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e21a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e21e:	2330      	movs	r3, #48	@ 0x30
 800e220:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e3d0 <_vfiprintf_r+0x21c>
 800e224:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e228:	f04f 0901 	mov.w	r9, #1
 800e22c:	4623      	mov	r3, r4
 800e22e:	469a      	mov	sl, r3
 800e230:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e234:	b10a      	cbz	r2, 800e23a <_vfiprintf_r+0x86>
 800e236:	2a25      	cmp	r2, #37	@ 0x25
 800e238:	d1f9      	bne.n	800e22e <_vfiprintf_r+0x7a>
 800e23a:	ebba 0b04 	subs.w	fp, sl, r4
 800e23e:	d00b      	beq.n	800e258 <_vfiprintf_r+0xa4>
 800e240:	465b      	mov	r3, fp
 800e242:	4622      	mov	r2, r4
 800e244:	4629      	mov	r1, r5
 800e246:	4630      	mov	r0, r6
 800e248:	f7ff ffa2 	bl	800e190 <__sfputs_r>
 800e24c:	3001      	adds	r0, #1
 800e24e:	f000 80a7 	beq.w	800e3a0 <_vfiprintf_r+0x1ec>
 800e252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e254:	445a      	add	r2, fp
 800e256:	9209      	str	r2, [sp, #36]	@ 0x24
 800e258:	f89a 3000 	ldrb.w	r3, [sl]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f000 809f 	beq.w	800e3a0 <_vfiprintf_r+0x1ec>
 800e262:	2300      	movs	r3, #0
 800e264:	f04f 32ff 	mov.w	r2, #4294967295
 800e268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e26c:	f10a 0a01 	add.w	sl, sl, #1
 800e270:	9304      	str	r3, [sp, #16]
 800e272:	9307      	str	r3, [sp, #28]
 800e274:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e278:	931a      	str	r3, [sp, #104]	@ 0x68
 800e27a:	4654      	mov	r4, sl
 800e27c:	2205      	movs	r2, #5
 800e27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e282:	4853      	ldr	r0, [pc, #332]	@ (800e3d0 <_vfiprintf_r+0x21c>)
 800e284:	f7f1 ffa4 	bl	80001d0 <memchr>
 800e288:	9a04      	ldr	r2, [sp, #16]
 800e28a:	b9d8      	cbnz	r0, 800e2c4 <_vfiprintf_r+0x110>
 800e28c:	06d1      	lsls	r1, r2, #27
 800e28e:	bf44      	itt	mi
 800e290:	2320      	movmi	r3, #32
 800e292:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e296:	0713      	lsls	r3, r2, #28
 800e298:	bf44      	itt	mi
 800e29a:	232b      	movmi	r3, #43	@ 0x2b
 800e29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e2a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2a6:	d015      	beq.n	800e2d4 <_vfiprintf_r+0x120>
 800e2a8:	9a07      	ldr	r2, [sp, #28]
 800e2aa:	4654      	mov	r4, sl
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	f04f 0c0a 	mov.w	ip, #10
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2b8:	3b30      	subs	r3, #48	@ 0x30
 800e2ba:	2b09      	cmp	r3, #9
 800e2bc:	d94b      	bls.n	800e356 <_vfiprintf_r+0x1a2>
 800e2be:	b1b0      	cbz	r0, 800e2ee <_vfiprintf_r+0x13a>
 800e2c0:	9207      	str	r2, [sp, #28]
 800e2c2:	e014      	b.n	800e2ee <_vfiprintf_r+0x13a>
 800e2c4:	eba0 0308 	sub.w	r3, r0, r8
 800e2c8:	fa09 f303 	lsl.w	r3, r9, r3
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	9304      	str	r3, [sp, #16]
 800e2d0:	46a2      	mov	sl, r4
 800e2d2:	e7d2      	b.n	800e27a <_vfiprintf_r+0xc6>
 800e2d4:	9b03      	ldr	r3, [sp, #12]
 800e2d6:	1d19      	adds	r1, r3, #4
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	9103      	str	r1, [sp, #12]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	bfbb      	ittet	lt
 800e2e0:	425b      	neglt	r3, r3
 800e2e2:	f042 0202 	orrlt.w	r2, r2, #2
 800e2e6:	9307      	strge	r3, [sp, #28]
 800e2e8:	9307      	strlt	r3, [sp, #28]
 800e2ea:	bfb8      	it	lt
 800e2ec:	9204      	strlt	r2, [sp, #16]
 800e2ee:	7823      	ldrb	r3, [r4, #0]
 800e2f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2f2:	d10a      	bne.n	800e30a <_vfiprintf_r+0x156>
 800e2f4:	7863      	ldrb	r3, [r4, #1]
 800e2f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2f8:	d132      	bne.n	800e360 <_vfiprintf_r+0x1ac>
 800e2fa:	9b03      	ldr	r3, [sp, #12]
 800e2fc:	1d1a      	adds	r2, r3, #4
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	9203      	str	r2, [sp, #12]
 800e302:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e306:	3402      	adds	r4, #2
 800e308:	9305      	str	r3, [sp, #20]
 800e30a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e3e0 <_vfiprintf_r+0x22c>
 800e30e:	7821      	ldrb	r1, [r4, #0]
 800e310:	2203      	movs	r2, #3
 800e312:	4650      	mov	r0, sl
 800e314:	f7f1 ff5c 	bl	80001d0 <memchr>
 800e318:	b138      	cbz	r0, 800e32a <_vfiprintf_r+0x176>
 800e31a:	9b04      	ldr	r3, [sp, #16]
 800e31c:	eba0 000a 	sub.w	r0, r0, sl
 800e320:	2240      	movs	r2, #64	@ 0x40
 800e322:	4082      	lsls	r2, r0
 800e324:	4313      	orrs	r3, r2
 800e326:	3401      	adds	r4, #1
 800e328:	9304      	str	r3, [sp, #16]
 800e32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e32e:	4829      	ldr	r0, [pc, #164]	@ (800e3d4 <_vfiprintf_r+0x220>)
 800e330:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e334:	2206      	movs	r2, #6
 800e336:	f7f1 ff4b 	bl	80001d0 <memchr>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d03f      	beq.n	800e3be <_vfiprintf_r+0x20a>
 800e33e:	4b26      	ldr	r3, [pc, #152]	@ (800e3d8 <_vfiprintf_r+0x224>)
 800e340:	bb1b      	cbnz	r3, 800e38a <_vfiprintf_r+0x1d6>
 800e342:	9b03      	ldr	r3, [sp, #12]
 800e344:	3307      	adds	r3, #7
 800e346:	f023 0307 	bic.w	r3, r3, #7
 800e34a:	3308      	adds	r3, #8
 800e34c:	9303      	str	r3, [sp, #12]
 800e34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e350:	443b      	add	r3, r7
 800e352:	9309      	str	r3, [sp, #36]	@ 0x24
 800e354:	e76a      	b.n	800e22c <_vfiprintf_r+0x78>
 800e356:	fb0c 3202 	mla	r2, ip, r2, r3
 800e35a:	460c      	mov	r4, r1
 800e35c:	2001      	movs	r0, #1
 800e35e:	e7a8      	b.n	800e2b2 <_vfiprintf_r+0xfe>
 800e360:	2300      	movs	r3, #0
 800e362:	3401      	adds	r4, #1
 800e364:	9305      	str	r3, [sp, #20]
 800e366:	4619      	mov	r1, r3
 800e368:	f04f 0c0a 	mov.w	ip, #10
 800e36c:	4620      	mov	r0, r4
 800e36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e372:	3a30      	subs	r2, #48	@ 0x30
 800e374:	2a09      	cmp	r2, #9
 800e376:	d903      	bls.n	800e380 <_vfiprintf_r+0x1cc>
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d0c6      	beq.n	800e30a <_vfiprintf_r+0x156>
 800e37c:	9105      	str	r1, [sp, #20]
 800e37e:	e7c4      	b.n	800e30a <_vfiprintf_r+0x156>
 800e380:	fb0c 2101 	mla	r1, ip, r1, r2
 800e384:	4604      	mov	r4, r0
 800e386:	2301      	movs	r3, #1
 800e388:	e7f0      	b.n	800e36c <_vfiprintf_r+0x1b8>
 800e38a:	ab03      	add	r3, sp, #12
 800e38c:	9300      	str	r3, [sp, #0]
 800e38e:	462a      	mov	r2, r5
 800e390:	4b12      	ldr	r3, [pc, #72]	@ (800e3dc <_vfiprintf_r+0x228>)
 800e392:	a904      	add	r1, sp, #16
 800e394:	4630      	mov	r0, r6
 800e396:	f7fb feb9 	bl	800a10c <_printf_float>
 800e39a:	4607      	mov	r7, r0
 800e39c:	1c78      	adds	r0, r7, #1
 800e39e:	d1d6      	bne.n	800e34e <_vfiprintf_r+0x19a>
 800e3a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3a2:	07d9      	lsls	r1, r3, #31
 800e3a4:	d405      	bmi.n	800e3b2 <_vfiprintf_r+0x1fe>
 800e3a6:	89ab      	ldrh	r3, [r5, #12]
 800e3a8:	059a      	lsls	r2, r3, #22
 800e3aa:	d402      	bmi.n	800e3b2 <_vfiprintf_r+0x1fe>
 800e3ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3ae:	f7fc fe1d 	bl	800afec <__retarget_lock_release_recursive>
 800e3b2:	89ab      	ldrh	r3, [r5, #12]
 800e3b4:	065b      	lsls	r3, r3, #25
 800e3b6:	f53f af1f 	bmi.w	800e1f8 <_vfiprintf_r+0x44>
 800e3ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3bc:	e71e      	b.n	800e1fc <_vfiprintf_r+0x48>
 800e3be:	ab03      	add	r3, sp, #12
 800e3c0:	9300      	str	r3, [sp, #0]
 800e3c2:	462a      	mov	r2, r5
 800e3c4:	4b05      	ldr	r3, [pc, #20]	@ (800e3dc <_vfiprintf_r+0x228>)
 800e3c6:	a904      	add	r1, sp, #16
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f7fc f937 	bl	800a63c <_printf_i>
 800e3ce:	e7e4      	b.n	800e39a <_vfiprintf_r+0x1e6>
 800e3d0:	0802c9f9 	.word	0x0802c9f9
 800e3d4:	0802ca03 	.word	0x0802ca03
 800e3d8:	0800a10d 	.word	0x0800a10d
 800e3dc:	0800e191 	.word	0x0800e191
 800e3e0:	0802c9ff 	.word	0x0802c9ff

0800e3e4 <__swbuf_r>:
 800e3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e6:	460e      	mov	r6, r1
 800e3e8:	4614      	mov	r4, r2
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	b118      	cbz	r0, 800e3f6 <__swbuf_r+0x12>
 800e3ee:	6a03      	ldr	r3, [r0, #32]
 800e3f0:	b90b      	cbnz	r3, 800e3f6 <__swbuf_r+0x12>
 800e3f2:	f7fc fce3 	bl	800adbc <__sinit>
 800e3f6:	69a3      	ldr	r3, [r4, #24]
 800e3f8:	60a3      	str	r3, [r4, #8]
 800e3fa:	89a3      	ldrh	r3, [r4, #12]
 800e3fc:	071a      	lsls	r2, r3, #28
 800e3fe:	d501      	bpl.n	800e404 <__swbuf_r+0x20>
 800e400:	6923      	ldr	r3, [r4, #16]
 800e402:	b943      	cbnz	r3, 800e416 <__swbuf_r+0x32>
 800e404:	4621      	mov	r1, r4
 800e406:	4628      	mov	r0, r5
 800e408:	f000 f82a 	bl	800e460 <__swsetup_r>
 800e40c:	b118      	cbz	r0, 800e416 <__swbuf_r+0x32>
 800e40e:	f04f 37ff 	mov.w	r7, #4294967295
 800e412:	4638      	mov	r0, r7
 800e414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	6922      	ldr	r2, [r4, #16]
 800e41a:	1a98      	subs	r0, r3, r2
 800e41c:	6963      	ldr	r3, [r4, #20]
 800e41e:	b2f6      	uxtb	r6, r6
 800e420:	4283      	cmp	r3, r0
 800e422:	4637      	mov	r7, r6
 800e424:	dc05      	bgt.n	800e432 <__swbuf_r+0x4e>
 800e426:	4621      	mov	r1, r4
 800e428:	4628      	mov	r0, r5
 800e42a:	f7ff fa47 	bl	800d8bc <_fflush_r>
 800e42e:	2800      	cmp	r0, #0
 800e430:	d1ed      	bne.n	800e40e <__swbuf_r+0x2a>
 800e432:	68a3      	ldr	r3, [r4, #8]
 800e434:	3b01      	subs	r3, #1
 800e436:	60a3      	str	r3, [r4, #8]
 800e438:	6823      	ldr	r3, [r4, #0]
 800e43a:	1c5a      	adds	r2, r3, #1
 800e43c:	6022      	str	r2, [r4, #0]
 800e43e:	701e      	strb	r6, [r3, #0]
 800e440:	6962      	ldr	r2, [r4, #20]
 800e442:	1c43      	adds	r3, r0, #1
 800e444:	429a      	cmp	r2, r3
 800e446:	d004      	beq.n	800e452 <__swbuf_r+0x6e>
 800e448:	89a3      	ldrh	r3, [r4, #12]
 800e44a:	07db      	lsls	r3, r3, #31
 800e44c:	d5e1      	bpl.n	800e412 <__swbuf_r+0x2e>
 800e44e:	2e0a      	cmp	r6, #10
 800e450:	d1df      	bne.n	800e412 <__swbuf_r+0x2e>
 800e452:	4621      	mov	r1, r4
 800e454:	4628      	mov	r0, r5
 800e456:	f7ff fa31 	bl	800d8bc <_fflush_r>
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d0d9      	beq.n	800e412 <__swbuf_r+0x2e>
 800e45e:	e7d6      	b.n	800e40e <__swbuf_r+0x2a>

0800e460 <__swsetup_r>:
 800e460:	b538      	push	{r3, r4, r5, lr}
 800e462:	4b29      	ldr	r3, [pc, #164]	@ (800e508 <__swsetup_r+0xa8>)
 800e464:	4605      	mov	r5, r0
 800e466:	6818      	ldr	r0, [r3, #0]
 800e468:	460c      	mov	r4, r1
 800e46a:	b118      	cbz	r0, 800e474 <__swsetup_r+0x14>
 800e46c:	6a03      	ldr	r3, [r0, #32]
 800e46e:	b90b      	cbnz	r3, 800e474 <__swsetup_r+0x14>
 800e470:	f7fc fca4 	bl	800adbc <__sinit>
 800e474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e478:	0719      	lsls	r1, r3, #28
 800e47a:	d422      	bmi.n	800e4c2 <__swsetup_r+0x62>
 800e47c:	06da      	lsls	r2, r3, #27
 800e47e:	d407      	bmi.n	800e490 <__swsetup_r+0x30>
 800e480:	2209      	movs	r2, #9
 800e482:	602a      	str	r2, [r5, #0]
 800e484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e488:	81a3      	strh	r3, [r4, #12]
 800e48a:	f04f 30ff 	mov.w	r0, #4294967295
 800e48e:	e033      	b.n	800e4f8 <__swsetup_r+0x98>
 800e490:	0758      	lsls	r0, r3, #29
 800e492:	d512      	bpl.n	800e4ba <__swsetup_r+0x5a>
 800e494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e496:	b141      	cbz	r1, 800e4aa <__swsetup_r+0x4a>
 800e498:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e49c:	4299      	cmp	r1, r3
 800e49e:	d002      	beq.n	800e4a6 <__swsetup_r+0x46>
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	f7fd fbf9 	bl	800bc98 <_free_r>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e4b0:	81a3      	strh	r3, [r4, #12]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	6063      	str	r3, [r4, #4]
 800e4b6:	6923      	ldr	r3, [r4, #16]
 800e4b8:	6023      	str	r3, [r4, #0]
 800e4ba:	89a3      	ldrh	r3, [r4, #12]
 800e4bc:	f043 0308 	orr.w	r3, r3, #8
 800e4c0:	81a3      	strh	r3, [r4, #12]
 800e4c2:	6923      	ldr	r3, [r4, #16]
 800e4c4:	b94b      	cbnz	r3, 800e4da <__swsetup_r+0x7a>
 800e4c6:	89a3      	ldrh	r3, [r4, #12]
 800e4c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e4cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4d0:	d003      	beq.n	800e4da <__swsetup_r+0x7a>
 800e4d2:	4621      	mov	r1, r4
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	f000 f883 	bl	800e5e0 <__smakebuf_r>
 800e4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4de:	f013 0201 	ands.w	r2, r3, #1
 800e4e2:	d00a      	beq.n	800e4fa <__swsetup_r+0x9a>
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	60a2      	str	r2, [r4, #8]
 800e4e8:	6962      	ldr	r2, [r4, #20]
 800e4ea:	4252      	negs	r2, r2
 800e4ec:	61a2      	str	r2, [r4, #24]
 800e4ee:	6922      	ldr	r2, [r4, #16]
 800e4f0:	b942      	cbnz	r2, 800e504 <__swsetup_r+0xa4>
 800e4f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e4f6:	d1c5      	bne.n	800e484 <__swsetup_r+0x24>
 800e4f8:	bd38      	pop	{r3, r4, r5, pc}
 800e4fa:	0799      	lsls	r1, r3, #30
 800e4fc:	bf58      	it	pl
 800e4fe:	6962      	ldrpl	r2, [r4, #20]
 800e500:	60a2      	str	r2, [r4, #8]
 800e502:	e7f4      	b.n	800e4ee <__swsetup_r+0x8e>
 800e504:	2000      	movs	r0, #0
 800e506:	e7f7      	b.n	800e4f8 <__swsetup_r+0x98>
 800e508:	20000450 	.word	0x20000450

0800e50c <_raise_r>:
 800e50c:	291f      	cmp	r1, #31
 800e50e:	b538      	push	{r3, r4, r5, lr}
 800e510:	4605      	mov	r5, r0
 800e512:	460c      	mov	r4, r1
 800e514:	d904      	bls.n	800e520 <_raise_r+0x14>
 800e516:	2316      	movs	r3, #22
 800e518:	6003      	str	r3, [r0, #0]
 800e51a:	f04f 30ff 	mov.w	r0, #4294967295
 800e51e:	bd38      	pop	{r3, r4, r5, pc}
 800e520:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e522:	b112      	cbz	r2, 800e52a <_raise_r+0x1e>
 800e524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e528:	b94b      	cbnz	r3, 800e53e <_raise_r+0x32>
 800e52a:	4628      	mov	r0, r5
 800e52c:	f000 f830 	bl	800e590 <_getpid_r>
 800e530:	4622      	mov	r2, r4
 800e532:	4601      	mov	r1, r0
 800e534:	4628      	mov	r0, r5
 800e536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e53a:	f000 b817 	b.w	800e56c <_kill_r>
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d00a      	beq.n	800e558 <_raise_r+0x4c>
 800e542:	1c59      	adds	r1, r3, #1
 800e544:	d103      	bne.n	800e54e <_raise_r+0x42>
 800e546:	2316      	movs	r3, #22
 800e548:	6003      	str	r3, [r0, #0]
 800e54a:	2001      	movs	r0, #1
 800e54c:	e7e7      	b.n	800e51e <_raise_r+0x12>
 800e54e:	2100      	movs	r1, #0
 800e550:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e554:	4620      	mov	r0, r4
 800e556:	4798      	blx	r3
 800e558:	2000      	movs	r0, #0
 800e55a:	e7e0      	b.n	800e51e <_raise_r+0x12>

0800e55c <raise>:
 800e55c:	4b02      	ldr	r3, [pc, #8]	@ (800e568 <raise+0xc>)
 800e55e:	4601      	mov	r1, r0
 800e560:	6818      	ldr	r0, [r3, #0]
 800e562:	f7ff bfd3 	b.w	800e50c <_raise_r>
 800e566:	bf00      	nop
 800e568:	20000450 	.word	0x20000450

0800e56c <_kill_r>:
 800e56c:	b538      	push	{r3, r4, r5, lr}
 800e56e:	4d07      	ldr	r5, [pc, #28]	@ (800e58c <_kill_r+0x20>)
 800e570:	2300      	movs	r3, #0
 800e572:	4604      	mov	r4, r0
 800e574:	4608      	mov	r0, r1
 800e576:	4611      	mov	r1, r2
 800e578:	602b      	str	r3, [r5, #0]
 800e57a:	f7f4 fa0d 	bl	8002998 <_kill>
 800e57e:	1c43      	adds	r3, r0, #1
 800e580:	d102      	bne.n	800e588 <_kill_r+0x1c>
 800e582:	682b      	ldr	r3, [r5, #0]
 800e584:	b103      	cbz	r3, 800e588 <_kill_r+0x1c>
 800e586:	6023      	str	r3, [r4, #0]
 800e588:	bd38      	pop	{r3, r4, r5, pc}
 800e58a:	bf00      	nop
 800e58c:	20002f38 	.word	0x20002f38

0800e590 <_getpid_r>:
 800e590:	f7f4 b9fa 	b.w	8002988 <_getpid>

0800e594 <__swhatbuf_r>:
 800e594:	b570      	push	{r4, r5, r6, lr}
 800e596:	460c      	mov	r4, r1
 800e598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e59c:	2900      	cmp	r1, #0
 800e59e:	b096      	sub	sp, #88	@ 0x58
 800e5a0:	4615      	mov	r5, r2
 800e5a2:	461e      	mov	r6, r3
 800e5a4:	da0d      	bge.n	800e5c2 <__swhatbuf_r+0x2e>
 800e5a6:	89a3      	ldrh	r3, [r4, #12]
 800e5a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5ac:	f04f 0100 	mov.w	r1, #0
 800e5b0:	bf14      	ite	ne
 800e5b2:	2340      	movne	r3, #64	@ 0x40
 800e5b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	6031      	str	r1, [r6, #0]
 800e5bc:	602b      	str	r3, [r5, #0]
 800e5be:	b016      	add	sp, #88	@ 0x58
 800e5c0:	bd70      	pop	{r4, r5, r6, pc}
 800e5c2:	466a      	mov	r2, sp
 800e5c4:	f000 f848 	bl	800e658 <_fstat_r>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	dbec      	blt.n	800e5a6 <__swhatbuf_r+0x12>
 800e5cc:	9901      	ldr	r1, [sp, #4]
 800e5ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e5d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e5d6:	4259      	negs	r1, r3
 800e5d8:	4159      	adcs	r1, r3
 800e5da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5de:	e7eb      	b.n	800e5b8 <__swhatbuf_r+0x24>

0800e5e0 <__smakebuf_r>:
 800e5e0:	898b      	ldrh	r3, [r1, #12]
 800e5e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5e4:	079d      	lsls	r5, r3, #30
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	460c      	mov	r4, r1
 800e5ea:	d507      	bpl.n	800e5fc <__smakebuf_r+0x1c>
 800e5ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	6123      	str	r3, [r4, #16]
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	6163      	str	r3, [r4, #20]
 800e5f8:	b003      	add	sp, #12
 800e5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5fc:	ab01      	add	r3, sp, #4
 800e5fe:	466a      	mov	r2, sp
 800e600:	f7ff ffc8 	bl	800e594 <__swhatbuf_r>
 800e604:	9f00      	ldr	r7, [sp, #0]
 800e606:	4605      	mov	r5, r0
 800e608:	4639      	mov	r1, r7
 800e60a:	4630      	mov	r0, r6
 800e60c:	f7fd fbb8 	bl	800bd80 <_malloc_r>
 800e610:	b948      	cbnz	r0, 800e626 <__smakebuf_r+0x46>
 800e612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e616:	059a      	lsls	r2, r3, #22
 800e618:	d4ee      	bmi.n	800e5f8 <__smakebuf_r+0x18>
 800e61a:	f023 0303 	bic.w	r3, r3, #3
 800e61e:	f043 0302 	orr.w	r3, r3, #2
 800e622:	81a3      	strh	r3, [r4, #12]
 800e624:	e7e2      	b.n	800e5ec <__smakebuf_r+0xc>
 800e626:	89a3      	ldrh	r3, [r4, #12]
 800e628:	6020      	str	r0, [r4, #0]
 800e62a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e62e:	81a3      	strh	r3, [r4, #12]
 800e630:	9b01      	ldr	r3, [sp, #4]
 800e632:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e636:	b15b      	cbz	r3, 800e650 <__smakebuf_r+0x70>
 800e638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e63c:	4630      	mov	r0, r6
 800e63e:	f000 f81d 	bl	800e67c <_isatty_r>
 800e642:	b128      	cbz	r0, 800e650 <__smakebuf_r+0x70>
 800e644:	89a3      	ldrh	r3, [r4, #12]
 800e646:	f023 0303 	bic.w	r3, r3, #3
 800e64a:	f043 0301 	orr.w	r3, r3, #1
 800e64e:	81a3      	strh	r3, [r4, #12]
 800e650:	89a3      	ldrh	r3, [r4, #12]
 800e652:	431d      	orrs	r5, r3
 800e654:	81a5      	strh	r5, [r4, #12]
 800e656:	e7cf      	b.n	800e5f8 <__smakebuf_r+0x18>

0800e658 <_fstat_r>:
 800e658:	b538      	push	{r3, r4, r5, lr}
 800e65a:	4d07      	ldr	r5, [pc, #28]	@ (800e678 <_fstat_r+0x20>)
 800e65c:	2300      	movs	r3, #0
 800e65e:	4604      	mov	r4, r0
 800e660:	4608      	mov	r0, r1
 800e662:	4611      	mov	r1, r2
 800e664:	602b      	str	r3, [r5, #0]
 800e666:	f7f4 f9f7 	bl	8002a58 <_fstat>
 800e66a:	1c43      	adds	r3, r0, #1
 800e66c:	d102      	bne.n	800e674 <_fstat_r+0x1c>
 800e66e:	682b      	ldr	r3, [r5, #0]
 800e670:	b103      	cbz	r3, 800e674 <_fstat_r+0x1c>
 800e672:	6023      	str	r3, [r4, #0]
 800e674:	bd38      	pop	{r3, r4, r5, pc}
 800e676:	bf00      	nop
 800e678:	20002f38 	.word	0x20002f38

0800e67c <_isatty_r>:
 800e67c:	b538      	push	{r3, r4, r5, lr}
 800e67e:	4d06      	ldr	r5, [pc, #24]	@ (800e698 <_isatty_r+0x1c>)
 800e680:	2300      	movs	r3, #0
 800e682:	4604      	mov	r4, r0
 800e684:	4608      	mov	r0, r1
 800e686:	602b      	str	r3, [r5, #0]
 800e688:	f7f4 f9f6 	bl	8002a78 <_isatty>
 800e68c:	1c43      	adds	r3, r0, #1
 800e68e:	d102      	bne.n	800e696 <_isatty_r+0x1a>
 800e690:	682b      	ldr	r3, [r5, #0]
 800e692:	b103      	cbz	r3, 800e696 <_isatty_r+0x1a>
 800e694:	6023      	str	r3, [r4, #0]
 800e696:	bd38      	pop	{r3, r4, r5, pc}
 800e698:	20002f38 	.word	0x20002f38

0800e69c <log10f>:
 800e69c:	b508      	push	{r3, lr}
 800e69e:	ed2d 8b02 	vpush	{d8}
 800e6a2:	eeb0 8a40 	vmov.f32	s16, s0
 800e6a6:	f000 f8cf 	bl	800e848 <__ieee754_log10f>
 800e6aa:	eeb4 8a48 	vcmp.f32	s16, s16
 800e6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b2:	d60f      	bvs.n	800e6d4 <log10f+0x38>
 800e6b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6bc:	d80a      	bhi.n	800e6d4 <log10f+0x38>
 800e6be:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c6:	d108      	bne.n	800e6da <log10f+0x3e>
 800e6c8:	f7fc fc64 	bl	800af94 <__errno>
 800e6cc:	2322      	movs	r3, #34	@ 0x22
 800e6ce:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e6f0 <log10f+0x54>
 800e6d2:	6003      	str	r3, [r0, #0]
 800e6d4:	ecbd 8b02 	vpop	{d8}
 800e6d8:	bd08      	pop	{r3, pc}
 800e6da:	f7fc fc5b 	bl	800af94 <__errno>
 800e6de:	ecbd 8b02 	vpop	{d8}
 800e6e2:	2321      	movs	r3, #33	@ 0x21
 800e6e4:	6003      	str	r3, [r0, #0]
 800e6e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e6ea:	4802      	ldr	r0, [pc, #8]	@ (800e6f4 <log10f+0x58>)
 800e6ec:	f7fc bc80 	b.w	800aff0 <nanf>
 800e6f0:	ff800000 	.word	0xff800000
 800e6f4:	0802ca4d 	.word	0x0802ca4d

0800e6f8 <powf>:
 800e6f8:	b508      	push	{r3, lr}
 800e6fa:	ed2d 8b04 	vpush	{d8-d9}
 800e6fe:	eeb0 8a60 	vmov.f32	s16, s1
 800e702:	eeb0 9a40 	vmov.f32	s18, s0
 800e706:	f000 f8f7 	bl	800e8f8 <__ieee754_powf>
 800e70a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e712:	eef0 8a40 	vmov.f32	s17, s0
 800e716:	d63e      	bvs.n	800e796 <powf+0x9e>
 800e718:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e720:	d112      	bne.n	800e748 <powf+0x50>
 800e722:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72a:	d039      	beq.n	800e7a0 <powf+0xa8>
 800e72c:	eeb0 0a48 	vmov.f32	s0, s16
 800e730:	f000 f858 	bl	800e7e4 <finitef>
 800e734:	b378      	cbz	r0, 800e796 <powf+0x9e>
 800e736:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73e:	d52a      	bpl.n	800e796 <powf+0x9e>
 800e740:	f7fc fc28 	bl	800af94 <__errno>
 800e744:	2322      	movs	r3, #34	@ 0x22
 800e746:	e014      	b.n	800e772 <powf+0x7a>
 800e748:	f000 f84c 	bl	800e7e4 <finitef>
 800e74c:	b998      	cbnz	r0, 800e776 <powf+0x7e>
 800e74e:	eeb0 0a49 	vmov.f32	s0, s18
 800e752:	f000 f847 	bl	800e7e4 <finitef>
 800e756:	b170      	cbz	r0, 800e776 <powf+0x7e>
 800e758:	eeb0 0a48 	vmov.f32	s0, s16
 800e75c:	f000 f842 	bl	800e7e4 <finitef>
 800e760:	b148      	cbz	r0, 800e776 <powf+0x7e>
 800e762:	eef4 8a68 	vcmp.f32	s17, s17
 800e766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76a:	d7e9      	bvc.n	800e740 <powf+0x48>
 800e76c:	f7fc fc12 	bl	800af94 <__errno>
 800e770:	2321      	movs	r3, #33	@ 0x21
 800e772:	6003      	str	r3, [r0, #0]
 800e774:	e00f      	b.n	800e796 <powf+0x9e>
 800e776:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e77e:	d10a      	bne.n	800e796 <powf+0x9e>
 800e780:	eeb0 0a49 	vmov.f32	s0, s18
 800e784:	f000 f82e 	bl	800e7e4 <finitef>
 800e788:	b128      	cbz	r0, 800e796 <powf+0x9e>
 800e78a:	eeb0 0a48 	vmov.f32	s0, s16
 800e78e:	f000 f829 	bl	800e7e4 <finitef>
 800e792:	2800      	cmp	r0, #0
 800e794:	d1d4      	bne.n	800e740 <powf+0x48>
 800e796:	eeb0 0a68 	vmov.f32	s0, s17
 800e79a:	ecbd 8b04 	vpop	{d8-d9}
 800e79e:	bd08      	pop	{r3, pc}
 800e7a0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e7a4:	e7f7      	b.n	800e796 <powf+0x9e>
	...

0800e7a8 <sqrtf>:
 800e7a8:	b508      	push	{r3, lr}
 800e7aa:	ed2d 8b02 	vpush	{d8}
 800e7ae:	eeb0 8a40 	vmov.f32	s16, s0
 800e7b2:	f000 f821 	bl	800e7f8 <__ieee754_sqrtf>
 800e7b6:	eeb4 8a48 	vcmp.f32	s16, s16
 800e7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7be:	d60c      	bvs.n	800e7da <sqrtf+0x32>
 800e7c0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e7e0 <sqrtf+0x38>
 800e7c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7cc:	d505      	bpl.n	800e7da <sqrtf+0x32>
 800e7ce:	f7fc fbe1 	bl	800af94 <__errno>
 800e7d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e7d6:	2321      	movs	r3, #33	@ 0x21
 800e7d8:	6003      	str	r3, [r0, #0]
 800e7da:	ecbd 8b02 	vpop	{d8}
 800e7de:	bd08      	pop	{r3, pc}
 800e7e0:	00000000 	.word	0x00000000

0800e7e4 <finitef>:
 800e7e4:	ee10 3a10 	vmov	r3, s0
 800e7e8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e7ec:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e7f0:	bfac      	ite	ge
 800e7f2:	2000      	movge	r0, #0
 800e7f4:	2001      	movlt	r0, #1
 800e7f6:	4770      	bx	lr

0800e7f8 <__ieee754_sqrtf>:
 800e7f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e7fc:	4770      	bx	lr
	...

0800e800 <roundf>:
 800e800:	ee10 0a10 	vmov	r0, s0
 800e804:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e808:	3a7f      	subs	r2, #127	@ 0x7f
 800e80a:	2a16      	cmp	r2, #22
 800e80c:	dc15      	bgt.n	800e83a <roundf+0x3a>
 800e80e:	2a00      	cmp	r2, #0
 800e810:	da08      	bge.n	800e824 <roundf+0x24>
 800e812:	3201      	adds	r2, #1
 800e814:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800e818:	d101      	bne.n	800e81e <roundf+0x1e>
 800e81a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800e81e:	ee00 3a10 	vmov	s0, r3
 800e822:	4770      	bx	lr
 800e824:	4907      	ldr	r1, [pc, #28]	@ (800e844 <roundf+0x44>)
 800e826:	4111      	asrs	r1, r2
 800e828:	4201      	tst	r1, r0
 800e82a:	d0fa      	beq.n	800e822 <roundf+0x22>
 800e82c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e830:	4113      	asrs	r3, r2
 800e832:	4403      	add	r3, r0
 800e834:	ea23 0301 	bic.w	r3, r3, r1
 800e838:	e7f1      	b.n	800e81e <roundf+0x1e>
 800e83a:	2a80      	cmp	r2, #128	@ 0x80
 800e83c:	d1f1      	bne.n	800e822 <roundf+0x22>
 800e83e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e842:	4770      	bx	lr
 800e844:	007fffff 	.word	0x007fffff

0800e848 <__ieee754_log10f>:
 800e848:	b508      	push	{r3, lr}
 800e84a:	ee10 3a10 	vmov	r3, s0
 800e84e:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e852:	ed2d 8b02 	vpush	{d8}
 800e856:	d108      	bne.n	800e86a <__ieee754_log10f+0x22>
 800e858:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800e8e0 <__ieee754_log10f+0x98>
 800e85c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800e8e4 <__ieee754_log10f+0x9c>
 800e860:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e864:	ecbd 8b02 	vpop	{d8}
 800e868:	bd08      	pop	{r3, pc}
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	461a      	mov	r2, r3
 800e86e:	da02      	bge.n	800e876 <__ieee754_log10f+0x2e>
 800e870:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e874:	e7f2      	b.n	800e85c <__ieee754_log10f+0x14>
 800e876:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e87a:	db02      	blt.n	800e882 <__ieee754_log10f+0x3a>
 800e87c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e880:	e7f0      	b.n	800e864 <__ieee754_log10f+0x1c>
 800e882:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e886:	bfbf      	itttt	lt
 800e888:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800e8e8 <__ieee754_log10f+0xa0>
 800e88c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e890:	f06f 0118 	mvnlt.w	r1, #24
 800e894:	ee17 2a90 	vmovlt	r2, s15
 800e898:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800e89c:	bfa8      	it	ge
 800e89e:	2100      	movge	r1, #0
 800e8a0:	3b7f      	subs	r3, #127	@ 0x7f
 800e8a2:	440b      	add	r3, r1
 800e8a4:	0fd9      	lsrs	r1, r3, #31
 800e8a6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800e8aa:	ee07 3a90 	vmov	s15, r3
 800e8ae:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e8b2:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800e8b6:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e8ba:	ee00 3a10 	vmov	s0, r3
 800e8be:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800e8c2:	f000 fb7d 	bl	800efc0 <__ieee754_logf>
 800e8c6:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800e8ec <__ieee754_log10f+0xa4>
 800e8ca:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e8ce:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e8f0 <__ieee754_log10f+0xa8>
 800e8d2:	eea8 0a27 	vfma.f32	s0, s16, s15
 800e8d6:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800e8f4 <__ieee754_log10f+0xac>
 800e8da:	eea8 0a27 	vfma.f32	s0, s16, s15
 800e8de:	e7c1      	b.n	800e864 <__ieee754_log10f+0x1c>
 800e8e0:	cc000000 	.word	0xcc000000
 800e8e4:	00000000 	.word	0x00000000
 800e8e8:	4c000000 	.word	0x4c000000
 800e8ec:	3ede5bd9 	.word	0x3ede5bd9
 800e8f0:	355427db 	.word	0x355427db
 800e8f4:	3e9a2080 	.word	0x3e9a2080

0800e8f8 <__ieee754_powf>:
 800e8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8fc:	ee10 4a90 	vmov	r4, s1
 800e900:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800e904:	ed2d 8b02 	vpush	{d8}
 800e908:	ee10 6a10 	vmov	r6, s0
 800e90c:	eeb0 8a40 	vmov.f32	s16, s0
 800e910:	eef0 8a60 	vmov.f32	s17, s1
 800e914:	d10c      	bne.n	800e930 <__ieee754_powf+0x38>
 800e916:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800e91a:	0076      	lsls	r6, r6, #1
 800e91c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800e920:	f240 829c 	bls.w	800ee5c <__ieee754_powf+0x564>
 800e924:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e928:	ecbd 8b02 	vpop	{d8}
 800e92c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e930:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800e934:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e938:	d802      	bhi.n	800e940 <__ieee754_powf+0x48>
 800e93a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e93e:	d908      	bls.n	800e952 <__ieee754_powf+0x5a>
 800e940:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e944:	d1ee      	bne.n	800e924 <__ieee754_powf+0x2c>
 800e946:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e94a:	0064      	lsls	r4, r4, #1
 800e94c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e950:	e7e6      	b.n	800e920 <__ieee754_powf+0x28>
 800e952:	2e00      	cmp	r6, #0
 800e954:	da1e      	bge.n	800e994 <__ieee754_powf+0x9c>
 800e956:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800e95a:	d22b      	bcs.n	800e9b4 <__ieee754_powf+0xbc>
 800e95c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e960:	d332      	bcc.n	800e9c8 <__ieee754_powf+0xd0>
 800e962:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800e966:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e96a:	fa49 f503 	asr.w	r5, r9, r3
 800e96e:	fa05 f303 	lsl.w	r3, r5, r3
 800e972:	454b      	cmp	r3, r9
 800e974:	d126      	bne.n	800e9c4 <__ieee754_powf+0xcc>
 800e976:	f005 0501 	and.w	r5, r5, #1
 800e97a:	f1c5 0502 	rsb	r5, r5, #2
 800e97e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e982:	d122      	bne.n	800e9ca <__ieee754_powf+0xd2>
 800e984:	2c00      	cmp	r4, #0
 800e986:	f280 826f 	bge.w	800ee68 <__ieee754_powf+0x570>
 800e98a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e98e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e992:	e7c9      	b.n	800e928 <__ieee754_powf+0x30>
 800e994:	2500      	movs	r5, #0
 800e996:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e99a:	d1f0      	bne.n	800e97e <__ieee754_powf+0x86>
 800e99c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e9a0:	f000 825c 	beq.w	800ee5c <__ieee754_powf+0x564>
 800e9a4:	d908      	bls.n	800e9b8 <__ieee754_powf+0xc0>
 800e9a6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800ed08 <__ieee754_powf+0x410>
 800e9aa:	2c00      	cmp	r4, #0
 800e9ac:	bfa8      	it	ge
 800e9ae:	eeb0 0a68 	vmovge.f32	s0, s17
 800e9b2:	e7b9      	b.n	800e928 <__ieee754_powf+0x30>
 800e9b4:	2502      	movs	r5, #2
 800e9b6:	e7ee      	b.n	800e996 <__ieee754_powf+0x9e>
 800e9b8:	2c00      	cmp	r4, #0
 800e9ba:	f280 8252 	bge.w	800ee62 <__ieee754_powf+0x56a>
 800e9be:	eeb1 0a68 	vneg.f32	s0, s17
 800e9c2:	e7b1      	b.n	800e928 <__ieee754_powf+0x30>
 800e9c4:	2500      	movs	r5, #0
 800e9c6:	e7da      	b.n	800e97e <__ieee754_powf+0x86>
 800e9c8:	2500      	movs	r5, #0
 800e9ca:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e9ce:	d102      	bne.n	800e9d6 <__ieee754_powf+0xde>
 800e9d0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e9d4:	e7a8      	b.n	800e928 <__ieee754_powf+0x30>
 800e9d6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e9da:	d109      	bne.n	800e9f0 <__ieee754_powf+0xf8>
 800e9dc:	2e00      	cmp	r6, #0
 800e9de:	db07      	blt.n	800e9f0 <__ieee754_powf+0xf8>
 800e9e0:	eeb0 0a48 	vmov.f32	s0, s16
 800e9e4:	ecbd 8b02 	vpop	{d8}
 800e9e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9ec:	f7ff bf04 	b.w	800e7f8 <__ieee754_sqrtf>
 800e9f0:	eeb0 0a48 	vmov.f32	s0, s16
 800e9f4:	f000 fa50 	bl	800ee98 <fabsf>
 800e9f8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800e9fc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800ea00:	4647      	mov	r7, r8
 800ea02:	d002      	beq.n	800ea0a <__ieee754_powf+0x112>
 800ea04:	f1b8 0f00 	cmp.w	r8, #0
 800ea08:	d117      	bne.n	800ea3a <__ieee754_powf+0x142>
 800ea0a:	2c00      	cmp	r4, #0
 800ea0c:	bfbc      	itt	lt
 800ea0e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800ea12:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ea16:	2e00      	cmp	r6, #0
 800ea18:	da86      	bge.n	800e928 <__ieee754_powf+0x30>
 800ea1a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800ea1e:	ea58 0805 	orrs.w	r8, r8, r5
 800ea22:	d104      	bne.n	800ea2e <__ieee754_powf+0x136>
 800ea24:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ea28:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ea2c:	e77c      	b.n	800e928 <__ieee754_powf+0x30>
 800ea2e:	2d01      	cmp	r5, #1
 800ea30:	f47f af7a 	bne.w	800e928 <__ieee754_powf+0x30>
 800ea34:	eeb1 0a40 	vneg.f32	s0, s0
 800ea38:	e776      	b.n	800e928 <__ieee754_powf+0x30>
 800ea3a:	0ff0      	lsrs	r0, r6, #31
 800ea3c:	3801      	subs	r0, #1
 800ea3e:	ea55 0300 	orrs.w	r3, r5, r0
 800ea42:	d104      	bne.n	800ea4e <__ieee754_powf+0x156>
 800ea44:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ea48:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ea4c:	e76c      	b.n	800e928 <__ieee754_powf+0x30>
 800ea4e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800ea52:	d973      	bls.n	800eb3c <__ieee754_powf+0x244>
 800ea54:	4bad      	ldr	r3, [pc, #692]	@ (800ed0c <__ieee754_powf+0x414>)
 800ea56:	4598      	cmp	r8, r3
 800ea58:	d808      	bhi.n	800ea6c <__ieee754_powf+0x174>
 800ea5a:	2c00      	cmp	r4, #0
 800ea5c:	da0b      	bge.n	800ea76 <__ieee754_powf+0x17e>
 800ea5e:	2000      	movs	r0, #0
 800ea60:	ecbd 8b02 	vpop	{d8}
 800ea64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea68:	f000 baa4 	b.w	800efb4 <__math_oflowf>
 800ea6c:	4ba8      	ldr	r3, [pc, #672]	@ (800ed10 <__ieee754_powf+0x418>)
 800ea6e:	4598      	cmp	r8, r3
 800ea70:	d908      	bls.n	800ea84 <__ieee754_powf+0x18c>
 800ea72:	2c00      	cmp	r4, #0
 800ea74:	dcf3      	bgt.n	800ea5e <__ieee754_powf+0x166>
 800ea76:	2000      	movs	r0, #0
 800ea78:	ecbd 8b02 	vpop	{d8}
 800ea7c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea80:	f000 ba92 	b.w	800efa8 <__math_uflowf>
 800ea84:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ea88:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ea8c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800ed14 <__ieee754_powf+0x41c>
 800ea90:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800ea94:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ea98:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ea9c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800eaa0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800eaa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eaa8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800ed18 <__ieee754_powf+0x420>
 800eaac:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800eab0:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800ed1c <__ieee754_powf+0x424>
 800eab4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800eab8:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800ed20 <__ieee754_powf+0x428>
 800eabc:	eef0 6a67 	vmov.f32	s13, s15
 800eac0:	eee0 6a07 	vfma.f32	s13, s0, s14
 800eac4:	ee16 3a90 	vmov	r3, s13
 800eac8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800eacc:	f023 030f 	bic.w	r3, r3, #15
 800ead0:	ee06 3a90 	vmov	s13, r3
 800ead4:	eee0 6a47 	vfms.f32	s13, s0, s14
 800ead8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eadc:	3d01      	subs	r5, #1
 800eade:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800eae2:	4305      	orrs	r5, r0
 800eae4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eae8:	f024 040f 	bic.w	r4, r4, #15
 800eaec:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800eaf0:	bf18      	it	ne
 800eaf2:	eeb0 8a47 	vmovne.f32	s16, s14
 800eaf6:	ee07 4a10 	vmov	s14, r4
 800eafa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800eafe:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800eb02:	ee07 3a90 	vmov	s15, r3
 800eb06:	eee7 0a27 	vfma.f32	s1, s14, s15
 800eb0a:	ee07 4a10 	vmov	s14, r4
 800eb0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb12:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800eb16:	ee17 1a10 	vmov	r1, s14
 800eb1a:	2900      	cmp	r1, #0
 800eb1c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eb20:	f340 80dd 	ble.w	800ecde <__ieee754_powf+0x3e6>
 800eb24:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800eb28:	f240 80ca 	bls.w	800ecc0 <__ieee754_powf+0x3c8>
 800eb2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800eb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb34:	bf4c      	ite	mi
 800eb36:	2001      	movmi	r0, #1
 800eb38:	2000      	movpl	r0, #0
 800eb3a:	e791      	b.n	800ea60 <__ieee754_powf+0x168>
 800eb3c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800eb40:	bf01      	itttt	eq
 800eb42:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800ed24 <__ieee754_powf+0x42c>
 800eb46:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800eb4a:	f06f 0317 	mvneq.w	r3, #23
 800eb4e:	ee17 7a90 	vmoveq	r7, s15
 800eb52:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800eb56:	bf18      	it	ne
 800eb58:	2300      	movne	r3, #0
 800eb5a:	3a7f      	subs	r2, #127	@ 0x7f
 800eb5c:	441a      	add	r2, r3
 800eb5e:	4b72      	ldr	r3, [pc, #456]	@ (800ed28 <__ieee754_powf+0x430>)
 800eb60:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800eb64:	429f      	cmp	r7, r3
 800eb66:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800eb6a:	dd06      	ble.n	800eb7a <__ieee754_powf+0x282>
 800eb6c:	4b6f      	ldr	r3, [pc, #444]	@ (800ed2c <__ieee754_powf+0x434>)
 800eb6e:	429f      	cmp	r7, r3
 800eb70:	f340 80a4 	ble.w	800ecbc <__ieee754_powf+0x3c4>
 800eb74:	3201      	adds	r2, #1
 800eb76:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800eb7a:	2600      	movs	r6, #0
 800eb7c:	4b6c      	ldr	r3, [pc, #432]	@ (800ed30 <__ieee754_powf+0x438>)
 800eb7e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800eb82:	ee07 1a10 	vmov	s14, r1
 800eb86:	edd3 5a00 	vldr	s11, [r3]
 800eb8a:	4b6a      	ldr	r3, [pc, #424]	@ (800ed34 <__ieee754_powf+0x43c>)
 800eb8c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800eb90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eb94:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800eb98:	1049      	asrs	r1, r1, #1
 800eb9a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800eb9e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800eba2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800eba6:	ee37 6a65 	vsub.f32	s12, s14, s11
 800ebaa:	ee07 1a90 	vmov	s15, r1
 800ebae:	ee26 5a24 	vmul.f32	s10, s12, s9
 800ebb2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800ebb6:	ee15 7a10 	vmov	r7, s10
 800ebba:	401f      	ands	r7, r3
 800ebbc:	ee06 7a90 	vmov	s13, r7
 800ebc0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800ebc4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800ebc8:	ee65 7a05 	vmul.f32	s15, s10, s10
 800ebcc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ebd0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ed38 <__ieee754_powf+0x440>
 800ebd4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800ed3c <__ieee754_powf+0x444>
 800ebd8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800ebdc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800ed40 <__ieee754_powf+0x448>
 800ebe0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ebe4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800ed14 <__ieee754_powf+0x41c>
 800ebe8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ebec:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800ed44 <__ieee754_powf+0x44c>
 800ebf0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ebf4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800ed48 <__ieee754_powf+0x450>
 800ebf8:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ebfc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ec00:	ee35 7a26 	vadd.f32	s14, s10, s13
 800ec04:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800ec08:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ec0c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800ec10:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800ec14:	eef0 5a67 	vmov.f32	s11, s15
 800ec18:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800ec1c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800ec20:	ee15 1a90 	vmov	r1, s11
 800ec24:	4019      	ands	r1, r3
 800ec26:	ee05 1a90 	vmov	s11, r1
 800ec2a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ec2e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800ec32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec36:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ec3a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ec3e:	eeb0 6a67 	vmov.f32	s12, s15
 800ec42:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800ec46:	ee16 1a10 	vmov	r1, s12
 800ec4a:	4019      	ands	r1, r3
 800ec4c:	ee06 1a10 	vmov	s12, r1
 800ec50:	eeb0 7a46 	vmov.f32	s14, s12
 800ec54:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800ec58:	493c      	ldr	r1, [pc, #240]	@ (800ed4c <__ieee754_powf+0x454>)
 800ec5a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800ec5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec62:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800ed50 <__ieee754_powf+0x458>
 800ec66:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800ed54 <__ieee754_powf+0x45c>
 800ec6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec6e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800ed58 <__ieee754_powf+0x460>
 800ec72:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ec76:	ed91 7a00 	vldr	s14, [r1]
 800ec7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ec7e:	ee07 2a10 	vmov	s14, r2
 800ec82:	eef0 6a67 	vmov.f32	s13, s15
 800ec86:	4a35      	ldr	r2, [pc, #212]	@ (800ed5c <__ieee754_powf+0x464>)
 800ec88:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ec8c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800ec90:	ed92 5a00 	vldr	s10, [r2]
 800ec94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ec98:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ec9c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800eca0:	ee16 2a90 	vmov	r2, s13
 800eca4:	4013      	ands	r3, r2
 800eca6:	ee06 3a90 	vmov	s13, r3
 800ecaa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ecae:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ecb2:	eea6 7a65 	vfms.f32	s14, s12, s11
 800ecb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecba:	e70f      	b.n	800eadc <__ieee754_powf+0x1e4>
 800ecbc:	2601      	movs	r6, #1
 800ecbe:	e75d      	b.n	800eb7c <__ieee754_powf+0x284>
 800ecc0:	d152      	bne.n	800ed68 <__ieee754_powf+0x470>
 800ecc2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ed60 <__ieee754_powf+0x468>
 800ecc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ecca:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ecce:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ecd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd6:	f73f af29 	bgt.w	800eb2c <__ieee754_powf+0x234>
 800ecda:	2386      	movs	r3, #134	@ 0x86
 800ecdc:	e048      	b.n	800ed70 <__ieee754_powf+0x478>
 800ecde:	4a21      	ldr	r2, [pc, #132]	@ (800ed64 <__ieee754_powf+0x46c>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d907      	bls.n	800ecf4 <__ieee754_powf+0x3fc>
 800ece4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ece8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecec:	bf4c      	ite	mi
 800ecee:	2001      	movmi	r0, #1
 800ecf0:	2000      	movpl	r0, #0
 800ecf2:	e6c1      	b.n	800ea78 <__ieee754_powf+0x180>
 800ecf4:	d138      	bne.n	800ed68 <__ieee754_powf+0x470>
 800ecf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ecfa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ecfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed02:	dbea      	blt.n	800ecda <__ieee754_powf+0x3e2>
 800ed04:	e7ee      	b.n	800ece4 <__ieee754_powf+0x3ec>
 800ed06:	bf00      	nop
 800ed08:	00000000 	.word	0x00000000
 800ed0c:	3f7ffff3 	.word	0x3f7ffff3
 800ed10:	3f800007 	.word	0x3f800007
 800ed14:	3eaaaaab 	.word	0x3eaaaaab
 800ed18:	3fb8aa3b 	.word	0x3fb8aa3b
 800ed1c:	36eca570 	.word	0x36eca570
 800ed20:	3fb8aa00 	.word	0x3fb8aa00
 800ed24:	4b800000 	.word	0x4b800000
 800ed28:	001cc471 	.word	0x001cc471
 800ed2c:	005db3d6 	.word	0x005db3d6
 800ed30:	0802cac0 	.word	0x0802cac0
 800ed34:	fffff000 	.word	0xfffff000
 800ed38:	3e6c3255 	.word	0x3e6c3255
 800ed3c:	3e53f142 	.word	0x3e53f142
 800ed40:	3e8ba305 	.word	0x3e8ba305
 800ed44:	3edb6db7 	.word	0x3edb6db7
 800ed48:	3f19999a 	.word	0x3f19999a
 800ed4c:	0802cab0 	.word	0x0802cab0
 800ed50:	3f76384f 	.word	0x3f76384f
 800ed54:	3f763800 	.word	0x3f763800
 800ed58:	369dc3a0 	.word	0x369dc3a0
 800ed5c:	0802cab8 	.word	0x0802cab8
 800ed60:	3338aa3c 	.word	0x3338aa3c
 800ed64:	43160000 	.word	0x43160000
 800ed68:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800ed6c:	d971      	bls.n	800ee52 <__ieee754_powf+0x55a>
 800ed6e:	15db      	asrs	r3, r3, #23
 800ed70:	3b7e      	subs	r3, #126	@ 0x7e
 800ed72:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800ed76:	4118      	asrs	r0, r3
 800ed78:	4408      	add	r0, r1
 800ed7a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ed7e:	4a3c      	ldr	r2, [pc, #240]	@ (800ee70 <__ieee754_powf+0x578>)
 800ed80:	3b7f      	subs	r3, #127	@ 0x7f
 800ed82:	411a      	asrs	r2, r3
 800ed84:	4002      	ands	r2, r0
 800ed86:	ee07 2a10 	vmov	s14, r2
 800ed8a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800ed8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800ed92:	f1c3 0317 	rsb	r3, r3, #23
 800ed96:	4118      	asrs	r0, r3
 800ed98:	2900      	cmp	r1, #0
 800ed9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed9e:	bfb8      	it	lt
 800eda0:	4240      	neglt	r0, r0
 800eda2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800eda6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800ee74 <__ieee754_powf+0x57c>
 800edaa:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800ee78 <__ieee754_powf+0x580>
 800edae:	ee17 3a10 	vmov	r3, s14
 800edb2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800edb6:	f023 030f 	bic.w	r3, r3, #15
 800edba:	ee07 3a10 	vmov	s14, r3
 800edbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800edc2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800edc6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800edca:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800ee7c <__ieee754_powf+0x584>
 800edce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edd2:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800edd6:	eef0 6a67 	vmov.f32	s13, s15
 800edda:	eee7 6a06 	vfma.f32	s13, s14, s12
 800edde:	eef0 5a66 	vmov.f32	s11, s13
 800ede2:	eee7 5a46 	vfms.f32	s11, s14, s12
 800ede6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800edea:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800edee:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800ee80 <__ieee754_powf+0x588>
 800edf2:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800ee84 <__ieee754_powf+0x58c>
 800edf6:	eea7 6a25 	vfma.f32	s12, s14, s11
 800edfa:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800ee88 <__ieee754_powf+0x590>
 800edfe:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ee02:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800ee8c <__ieee754_powf+0x594>
 800ee06:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ee0a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800ee90 <__ieee754_powf+0x598>
 800ee0e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ee12:	eeb0 6a66 	vmov.f32	s12, s13
 800ee16:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800ee1a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800ee1e:	ee66 5a86 	vmul.f32	s11, s13, s12
 800ee22:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ee26:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800ee2a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800ee2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ee36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee3a:	ee10 3a10 	vmov	r3, s0
 800ee3e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ee42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ee46:	da06      	bge.n	800ee56 <__ieee754_powf+0x55e>
 800ee48:	f000 f82e 	bl	800eea8 <scalbnf>
 800ee4c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ee50:	e56a      	b.n	800e928 <__ieee754_powf+0x30>
 800ee52:	2000      	movs	r0, #0
 800ee54:	e7a5      	b.n	800eda2 <__ieee754_powf+0x4aa>
 800ee56:	ee00 3a10 	vmov	s0, r3
 800ee5a:	e7f7      	b.n	800ee4c <__ieee754_powf+0x554>
 800ee5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ee60:	e562      	b.n	800e928 <__ieee754_powf+0x30>
 800ee62:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800ee94 <__ieee754_powf+0x59c>
 800ee66:	e55f      	b.n	800e928 <__ieee754_powf+0x30>
 800ee68:	eeb0 0a48 	vmov.f32	s0, s16
 800ee6c:	e55c      	b.n	800e928 <__ieee754_powf+0x30>
 800ee6e:	bf00      	nop
 800ee70:	ff800000 	.word	0xff800000
 800ee74:	3f317218 	.word	0x3f317218
 800ee78:	3f317200 	.word	0x3f317200
 800ee7c:	35bfbe8c 	.word	0x35bfbe8c
 800ee80:	b5ddea0e 	.word	0xb5ddea0e
 800ee84:	3331bb4c 	.word	0x3331bb4c
 800ee88:	388ab355 	.word	0x388ab355
 800ee8c:	bb360b61 	.word	0xbb360b61
 800ee90:	3e2aaaab 	.word	0x3e2aaaab
 800ee94:	00000000 	.word	0x00000000

0800ee98 <fabsf>:
 800ee98:	ee10 3a10 	vmov	r3, s0
 800ee9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eea0:	ee00 3a10 	vmov	s0, r3
 800eea4:	4770      	bx	lr
	...

0800eea8 <scalbnf>:
 800eea8:	ee10 3a10 	vmov	r3, s0
 800eeac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800eeb0:	d02b      	beq.n	800ef0a <scalbnf+0x62>
 800eeb2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800eeb6:	d302      	bcc.n	800eebe <scalbnf+0x16>
 800eeb8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eebc:	4770      	bx	lr
 800eebe:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800eec2:	d123      	bne.n	800ef0c <scalbnf+0x64>
 800eec4:	4b24      	ldr	r3, [pc, #144]	@ (800ef58 <scalbnf+0xb0>)
 800eec6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ef5c <scalbnf+0xb4>
 800eeca:	4298      	cmp	r0, r3
 800eecc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eed0:	db17      	blt.n	800ef02 <scalbnf+0x5a>
 800eed2:	ee10 3a10 	vmov	r3, s0
 800eed6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800eeda:	3a19      	subs	r2, #25
 800eedc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800eee0:	4288      	cmp	r0, r1
 800eee2:	dd15      	ble.n	800ef10 <scalbnf+0x68>
 800eee4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ef60 <scalbnf+0xb8>
 800eee8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ef64 <scalbnf+0xbc>
 800eeec:	ee10 3a10 	vmov	r3, s0
 800eef0:	eeb0 7a67 	vmov.f32	s14, s15
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	bfb8      	it	lt
 800eef8:	eef0 7a66 	vmovlt.f32	s15, s13
 800eefc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ef00:	4770      	bx	lr
 800ef02:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ef68 <scalbnf+0xc0>
 800ef06:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ef0a:	4770      	bx	lr
 800ef0c:	0dd2      	lsrs	r2, r2, #23
 800ef0e:	e7e5      	b.n	800eedc <scalbnf+0x34>
 800ef10:	4410      	add	r0, r2
 800ef12:	28fe      	cmp	r0, #254	@ 0xfe
 800ef14:	dce6      	bgt.n	800eee4 <scalbnf+0x3c>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	dd06      	ble.n	800ef28 <scalbnf+0x80>
 800ef1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ef1e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ef22:	ee00 3a10 	vmov	s0, r3
 800ef26:	4770      	bx	lr
 800ef28:	f110 0f16 	cmn.w	r0, #22
 800ef2c:	da09      	bge.n	800ef42 <scalbnf+0x9a>
 800ef2e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ef68 <scalbnf+0xc0>
 800ef32:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800ef6c <scalbnf+0xc4>
 800ef36:	ee10 3a10 	vmov	r3, s0
 800ef3a:	eeb0 7a67 	vmov.f32	s14, s15
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	e7d9      	b.n	800eef6 <scalbnf+0x4e>
 800ef42:	3019      	adds	r0, #25
 800ef44:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ef48:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ef4c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ef70 <scalbnf+0xc8>
 800ef50:	ee07 3a90 	vmov	s15, r3
 800ef54:	e7d7      	b.n	800ef06 <scalbnf+0x5e>
 800ef56:	bf00      	nop
 800ef58:	ffff3cb0 	.word	0xffff3cb0
 800ef5c:	4c000000 	.word	0x4c000000
 800ef60:	7149f2ca 	.word	0x7149f2ca
 800ef64:	f149f2ca 	.word	0xf149f2ca
 800ef68:	0da24260 	.word	0x0da24260
 800ef6c:	8da24260 	.word	0x8da24260
 800ef70:	33000000 	.word	0x33000000

0800ef74 <with_errnof>:
 800ef74:	b510      	push	{r4, lr}
 800ef76:	ed2d 8b02 	vpush	{d8}
 800ef7a:	eeb0 8a40 	vmov.f32	s16, s0
 800ef7e:	4604      	mov	r4, r0
 800ef80:	f7fc f808 	bl	800af94 <__errno>
 800ef84:	eeb0 0a48 	vmov.f32	s0, s16
 800ef88:	ecbd 8b02 	vpop	{d8}
 800ef8c:	6004      	str	r4, [r0, #0]
 800ef8e:	bd10      	pop	{r4, pc}

0800ef90 <xflowf>:
 800ef90:	b130      	cbz	r0, 800efa0 <xflowf+0x10>
 800ef92:	eef1 7a40 	vneg.f32	s15, s0
 800ef96:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ef9a:	2022      	movs	r0, #34	@ 0x22
 800ef9c:	f7ff bfea 	b.w	800ef74 <with_errnof>
 800efa0:	eef0 7a40 	vmov.f32	s15, s0
 800efa4:	e7f7      	b.n	800ef96 <xflowf+0x6>
	...

0800efa8 <__math_uflowf>:
 800efa8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800efb0 <__math_uflowf+0x8>
 800efac:	f7ff bff0 	b.w	800ef90 <xflowf>
 800efb0:	10000000 	.word	0x10000000

0800efb4 <__math_oflowf>:
 800efb4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800efbc <__math_oflowf+0x8>
 800efb8:	f7ff bfea 	b.w	800ef90 <xflowf>
 800efbc:	70000000 	.word	0x70000000

0800efc0 <__ieee754_logf>:
 800efc0:	ee10 3a10 	vmov	r3, s0
 800efc4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800efc8:	d106      	bne.n	800efd8 <__ieee754_logf+0x18>
 800efca:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800f164 <__ieee754_logf+0x1a4>
 800efce:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800f168 <__ieee754_logf+0x1a8>
 800efd2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800efd6:	4770      	bx	lr
 800efd8:	2b00      	cmp	r3, #0
 800efda:	461a      	mov	r2, r3
 800efdc:	da02      	bge.n	800efe4 <__ieee754_logf+0x24>
 800efde:	ee30 7a40 	vsub.f32	s14, s0, s0
 800efe2:	e7f4      	b.n	800efce <__ieee754_logf+0xe>
 800efe4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800efe8:	db02      	blt.n	800eff0 <__ieee754_logf+0x30>
 800efea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800efee:	4770      	bx	lr
 800eff0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800eff4:	bfb8      	it	lt
 800eff6:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800f16c <__ieee754_logf+0x1ac>
 800effa:	485d      	ldr	r0, [pc, #372]	@ (800f170 <__ieee754_logf+0x1b0>)
 800effc:	bfbe      	ittt	lt
 800effe:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f002:	f06f 0118 	mvnlt.w	r1, #24
 800f006:	ee17 2a90 	vmovlt	r2, s15
 800f00a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800f00e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f012:	4410      	add	r0, r2
 800f014:	bfa8      	it	ge
 800f016:	2100      	movge	r1, #0
 800f018:	3b7f      	subs	r3, #127	@ 0x7f
 800f01a:	440b      	add	r3, r1
 800f01c:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800f020:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800f024:	4311      	orrs	r1, r2
 800f026:	ee00 1a10 	vmov	s0, r1
 800f02a:	4952      	ldr	r1, [pc, #328]	@ (800f174 <__ieee754_logf+0x1b4>)
 800f02c:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800f030:	f102 000f 	add.w	r0, r2, #15
 800f034:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f038:	4001      	ands	r1, r0
 800f03a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f03e:	bb89      	cbnz	r1, 800f0a4 <__ieee754_logf+0xe4>
 800f040:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f048:	d10f      	bne.n	800f06a <__ieee754_logf+0xaa>
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	f000 8087 	beq.w	800f15e <__ieee754_logf+0x19e>
 800f050:	ee07 3a90 	vmov	s15, r3
 800f054:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800f178 <__ieee754_logf+0x1b8>
 800f058:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800f17c <__ieee754_logf+0x1bc>
 800f05c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f060:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f064:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f068:	4770      	bx	lr
 800f06a:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800f180 <__ieee754_logf+0x1c0>
 800f06e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f072:	eee0 7a66 	vfms.f32	s15, s0, s13
 800f076:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f07a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f07e:	b913      	cbnz	r3, 800f086 <__ieee754_logf+0xc6>
 800f080:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f084:	4770      	bx	lr
 800f086:	ee07 3a90 	vmov	s15, r3
 800f08a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800f178 <__ieee754_logf+0x1b8>
 800f08e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f092:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f096:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f09a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800f17c <__ieee754_logf+0x1bc>
 800f09e:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800f0a2:	4770      	bx	lr
 800f0a4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800f0a8:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f0ac:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800f184 <__ieee754_logf+0x1c4>
 800f0b0:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800f188 <__ieee754_logf+0x1c8>
 800f0b4:	4935      	ldr	r1, [pc, #212]	@ (800f18c <__ieee754_logf+0x1cc>)
 800f0b6:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800f0ba:	4411      	add	r1, r2
 800f0bc:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800f0c0:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800f0c4:	430a      	orrs	r2, r1
 800f0c6:	2a00      	cmp	r2, #0
 800f0c8:	ee07 3a90 	vmov	s15, r3
 800f0cc:	ee26 5a06 	vmul.f32	s10, s12, s12
 800f0d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f0d4:	ee25 7a05 	vmul.f32	s14, s10, s10
 800f0d8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800f190 <__ieee754_logf+0x1d0>
 800f0dc:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f0e0:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800f194 <__ieee754_logf+0x1d4>
 800f0e4:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f0e8:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800f198 <__ieee754_logf+0x1d8>
 800f0ec:	eee7 7a24 	vfma.f32	s15, s14, s9
 800f0f0:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800f19c <__ieee754_logf+0x1dc>
 800f0f4:	eee7 4a87 	vfma.f32	s9, s15, s14
 800f0f8:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800f1a0 <__ieee754_logf+0x1e0>
 800f0fc:	eee4 7a87 	vfma.f32	s15, s9, s14
 800f100:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f104:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f108:	dd1a      	ble.n	800f140 <__ieee754_logf+0x180>
 800f10a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f10e:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f112:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f11a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f11e:	b913      	cbnz	r3, 800f126 <__ieee754_logf+0x166>
 800f120:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f124:	e7ac      	b.n	800f080 <__ieee754_logf+0xc0>
 800f126:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800f178 <__ieee754_logf+0x1b8>
 800f12a:	eee6 7a86 	vfma.f32	s15, s13, s12
 800f12e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f132:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f136:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800f17c <__ieee754_logf+0x1bc>
 800f13a:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800f13e:	4770      	bx	lr
 800f140:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f144:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f148:	b913      	cbnz	r3, 800f150 <__ieee754_logf+0x190>
 800f14a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f14e:	4770      	bx	lr
 800f150:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800f178 <__ieee754_logf+0x1b8>
 800f154:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f158:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f15c:	e7eb      	b.n	800f136 <__ieee754_logf+0x176>
 800f15e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800f168 <__ieee754_logf+0x1a8>
 800f162:	4770      	bx	lr
 800f164:	cc000000 	.word	0xcc000000
 800f168:	00000000 	.word	0x00000000
 800f16c:	4c000000 	.word	0x4c000000
 800f170:	004afb20 	.word	0x004afb20
 800f174:	007ffff0 	.word	0x007ffff0
 800f178:	3717f7d1 	.word	0x3717f7d1
 800f17c:	3f317180 	.word	0x3f317180
 800f180:	3eaaaaab 	.word	0x3eaaaaab
 800f184:	3e1cd04f 	.word	0x3e1cd04f
 800f188:	3e178897 	.word	0x3e178897
 800f18c:	ffcf5c30 	.word	0xffcf5c30
 800f190:	3e638e29 	.word	0x3e638e29
 800f194:	3ecccccd 	.word	0x3ecccccd
 800f198:	3e3a3325 	.word	0x3e3a3325
 800f19c:	3e924925 	.word	0x3e924925
 800f1a0:	3f2aaaab 	.word	0x3f2aaaab

0800f1a4 <_init>:
 800f1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a6:	bf00      	nop
 800f1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1aa:	bc08      	pop	{r3}
 800f1ac:	469e      	mov	lr, r3
 800f1ae:	4770      	bx	lr

0800f1b0 <_fini>:
 800f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b2:	bf00      	nop
 800f1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1b6:	bc08      	pop	{r3}
 800f1b8:	469e      	mov	lr, r3
 800f1ba:	4770      	bx	lr
