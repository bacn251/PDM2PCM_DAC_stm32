
mic_tst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e98c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d948  0800eb20  0800eb20  0000fb20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c468  0802c468  0002e60c  2**0
                  CONTENTS
  4 .ARM          00000008  0802c468  0802c468  0002d468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c470  0802c470  0002e60c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c470  0802c470  0002d470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c474  0802c474  0002d474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000060c  20000000  0802c478  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002e60c  2**0
                  CONTENTS
 10 .bss          00000acc  2000060c  2000060c  0002e60c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200010d8  200010d8  0002e60c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002e60c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e4f1  00000000  00000000  0002e63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f49  00000000  00000000  0004cb2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00050a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3b  00000000  00000000  00051ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235a9  00000000  00000000  000527e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001843e  00000000  00000000  00075d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf4b3  00000000  00000000  0008e1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000013b  00000000  00000000  0015d67d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ce4  00000000  00000000  0015d7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0016349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002fbb  00000000  00000000  00163515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000d0  00000000  00000000  001664d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000060c 	.word	0x2000060c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eb04 	.word	0x0800eb04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000610 	.word	0x20000610
 80001cc:	0800eb04 	.word	0x0800eb04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000fe8:	4814      	ldr	r0, [pc, #80]	@ (800103c <I2Cx_Init+0x58>)
 8000fea:	f003 f9d7 	bl	800439c <HAL_I2C_GetState>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d121      	bne.n	8001038 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <I2Cx_Init+0x58>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <I2Cx_Init+0x5c>)
 8000ff8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <I2Cx_Init+0x58>)
 8000ffc:	2243      	movs	r2, #67	@ 0x43
 8000ffe:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001000:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <I2Cx_Init+0x58>)
 8001002:	4a10      	ldr	r2, [pc, #64]	@ (8001044 <I2Cx_Init+0x60>)
 8001004:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <I2Cx_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100c:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <I2Cx_Init+0x58>)
 800100e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001012:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <I2Cx_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <I2Cx_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <I2Cx_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8001026:	4b05      	ldr	r3, [pc, #20]	@ (800103c <I2Cx_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <I2Cx_Init+0x58>)
 800102e:	f000 f86b 	bl	8001108 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001032:	4802      	ldr	r0, [pc, #8]	@ (800103c <I2Cx_Init+0x58>)
 8001034:	f002 fd1e 	bl	8003a74 <HAL_I2C_Init>
  }
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000062c 	.word	0x2000062c
 8001040:	40005400 	.word	0x40005400
 8001044:	000186a0 	.word	0x000186a0

08001048 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
 8001052:	460b      	mov	r3, r1
 8001054:	717b      	strb	r3, [r7, #5]
 8001056:	4613      	mov	r3, r2
 8001058:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800105e:	797b      	ldrb	r3, [r7, #5]
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <I2Cx_WriteData+0x48>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	88f9      	ldrh	r1, [r7, #6]
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	2301      	movs	r3, #1
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <I2Cx_WriteData+0x4c>)
 8001076:	f002 fe71 	bl	8003d5c <HAL_I2C_Mem_Write>
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001084:	f000 f834 	bl	80010f0 <I2Cx_Error>
  }
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000400 	.word	0x20000400
 8001094:	2000062c 	.word	0x2000062c

08001098 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af04      	add	r7, sp, #16
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	80fb      	strh	r3, [r7, #6]
 80010a4:	4613      	mov	r3, r2
 80010a6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80010b0:	797b      	ldrb	r3, [r7, #5]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <I2Cx_ReadData+0x50>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	88f9      	ldrh	r1, [r7, #6]
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 030e 	add.w	r3, r7, #14
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	4808      	ldr	r0, [pc, #32]	@ (80010ec <I2Cx_ReadData+0x54>)
 80010ca:	f002 ff41 	bl	8003f50 <HAL_I2C_Mem_Read>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80010d8:	f000 f80a 	bl	80010f0 <I2Cx_Error>
  }
  return value;
 80010dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000400 	.word	0x20000400
 80010ec:	2000062c 	.word	0x2000062c

080010f0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80010f4:	4803      	ldr	r0, [pc, #12]	@ (8001104 <I2Cx_Error+0x14>)
 80010f6:	f002 fe01 	bl	8003cfc <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80010fa:	f7ff ff73 	bl	8000fe4 <I2Cx_Init>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000062c 	.word	0x2000062c

08001108 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	4a24      	ldr	r2, [pc, #144]	@ (80011ac <I2Cx_MspInit+0xa4>)
 800111a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800111e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001120:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	6313      	str	r3, [r2, #48]	@ 0x30
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <I2Cx_MspInit+0xa4>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8001148:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800114e:	2312      	movs	r3, #18
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001156:	2302      	movs	r3, #2
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 800115a:	2304      	movs	r3, #4
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4812      	ldr	r0, [pc, #72]	@ (80011b0 <I2Cx_MspInit+0xa8>)
 8001166:	f002 f9bb 	bl	80034e0 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <I2Cx_MspInit+0xa4>)
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001170:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001174:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8001176:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <I2Cx_MspInit+0xa4>)
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	4a0c      	ldr	r2, [pc, #48]	@ (80011ac <I2Cx_MspInit+0xa4>)
 800117c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001180:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	210f      	movs	r1, #15
 8001186:	201f      	movs	r0, #31
 8001188:	f001 fde7 	bl	8002d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 800118c:	201f      	movs	r0, #31
 800118e:	f001 fe00 	bl	8002d92 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	210f      	movs	r1, #15
 8001196:	2020      	movs	r0, #32
 8001198:	f001 fddf 	bl	8002d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 800119c:	2020      	movs	r0, #32
 800119e:	f001 fdf8 	bl	8002d92 <HAL_NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	@ 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020400 	.word	0x40020400

080011b4 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <AUDIO_IO_Init+0x68>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a16      	ldr	r2, [pc, #88]	@ (800121c <AUDIO_IO_Init+0x68>)
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <AUDIO_IO_Init+0x68>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 80011d6:	2310      	movs	r3, #16
 80011d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80011de:	2302      	movs	r3, #2
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	480d      	ldr	r0, [pc, #52]	@ (8001220 <AUDIO_IO_Init+0x6c>)
 80011ec:	f002 f978 	bl	80034e0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80011f0:	f7ff fef8 	bl	8000fe4 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 80011f4:	2200      	movs	r2, #0
 80011f6:	2110      	movs	r1, #16
 80011f8:	4809      	ldr	r0, [pc, #36]	@ (8001220 <AUDIO_IO_Init+0x6c>)
 80011fa:	f002 fc09 	bl	8003a10 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80011fe:	2005      	movs	r0, #5
 8001200:	f001 fcac 	bl	8002b5c <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8001204:	2201      	movs	r2, #1
 8001206:	2110      	movs	r1, #16
 8001208:	4805      	ldr	r0, [pc, #20]	@ (8001220 <AUDIO_IO_Init+0x6c>)
 800120a:	f002 fc01 	bl	8003a10 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800120e:	2005      	movs	r0, #5
 8001210:	f001 fca4 	bl	8002b5c <HAL_Delay>
}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	40020c00 	.word	0x40020c00

08001224 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	460b      	mov	r3, r1
 800123e:	71bb      	strb	r3, [r7, #6]
 8001240:	4613      	mov	r3, r2
 8001242:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	b29b      	uxth	r3, r3
 8001248:	797a      	ldrb	r2, [r7, #5]
 800124a:	79b9      	ldrb	r1, [r7, #6]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fefb 	bl	8001048 <I2Cx_WriteData>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	460a      	mov	r2, r1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	4613      	mov	r3, r2
 8001268:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	b29b      	uxth	r3, r3
 800126e:	79ba      	ldrb	r2, [r7, #6]
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff10 	bl	8001098 <I2Cx_ReadData>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	4603      	mov	r3, r0
 800128e:	81fb      	strh	r3, [r7, #14]
 8001290:	460b      	mov	r3, r1
 8001292:	81bb      	strh	r3, [r7, #12]
 8001294:	4613      	mov	r3, r2
 8001296:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 800129c:	f7ff ff8a 	bl	80011b4 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	229e      	movs	r2, #158	@ 0x9e
 80012a6:	2102      	movs	r1, #2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fb01 	bl	80018b0 <CODEC_IO_Write>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	4413      	add	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80012b8:	89bb      	ldrh	r3, [r7, #12]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d81b      	bhi.n	80012f8 <cs43l22_Init+0x74>
 80012c0:	a201      	add	r2, pc, #4	@ (adr r2, 80012c8 <cs43l22_Init+0x44>)
 80012c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c6:	bf00      	nop
 80012c8:	080012d9 	.word	0x080012d9
 80012cc:	080012e1 	.word	0x080012e1
 80012d0:	080012e9 	.word	0x080012e9
 80012d4:	080012f1 	.word	0x080012f1
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80012d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001448 <cs43l22_Init+0x1c4>)
 80012da:	22fa      	movs	r2, #250	@ 0xfa
 80012dc:	701a      	strb	r2, [r3, #0]
    break;
 80012de:	e00f      	b.n	8001300 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 80012e0:	4b59      	ldr	r3, [pc, #356]	@ (8001448 <cs43l22_Init+0x1c4>)
 80012e2:	22af      	movs	r2, #175	@ 0xaf
 80012e4:	701a      	strb	r2, [r3, #0]
    break;
 80012e6:	e00b      	b.n	8001300 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 80012e8:	4b57      	ldr	r3, [pc, #348]	@ (8001448 <cs43l22_Init+0x1c4>)
 80012ea:	22aa      	movs	r2, #170	@ 0xaa
 80012ec:	701a      	strb	r2, [r3, #0]
    break;
 80012ee:	e007      	b.n	8001300 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 80012f0:	4b55      	ldr	r3, [pc, #340]	@ (8001448 <cs43l22_Init+0x1c4>)
 80012f2:	2205      	movs	r2, #5
 80012f4:	701a      	strb	r2, [r3, #0]
    break;    
 80012f6:	e003      	b.n	8001300 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 80012f8:	4b53      	ldr	r3, [pc, #332]	@ (8001448 <cs43l22_Init+0x1c4>)
 80012fa:	2205      	movs	r2, #5
 80012fc:	701a      	strb	r2, [r3, #0]
    break;    
 80012fe:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4a50      	ldr	r2, [pc, #320]	@ (8001448 <cs43l22_Init+0x1c4>)
 8001306:	7812      	ldrb	r2, [r2, #0]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	2104      	movs	r1, #4
 800130c:	4618      	mov	r0, r3
 800130e:	f000 facf 	bl	80018b0 <CODEC_IO_Write>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 800131c:	89fb      	ldrh	r3, [r7, #14]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2281      	movs	r2, #129	@ 0x81
 8001322:	2105      	movs	r1, #5
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fac3 	bl	80018b0 <CODEC_IO_Write>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	4413      	add	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001334:	89fb      	ldrh	r3, [r7, #14]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2204      	movs	r2, #4
 800133a:	2106      	movs	r1, #6
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fab7 	bl	80018b0 <CODEC_IO_Write>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	4413      	add	r3, r2
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800134c:	7afa      	ldrb	r2, [r7, #11]
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f964 	bl	8001620 <cs43l22_SetVolume>
 8001358:	4602      	mov	r2, r0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8001360:	89bb      	ldrh	r3, [r7, #12]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d023      	beq.n	80013ae <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8001366:	89fb      	ldrh	r3, [r7, #14]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2206      	movs	r2, #6
 800136c:	210f      	movs	r1, #15
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fa9e 	bl	80018b0 <CODEC_IO_Write>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	4413      	add	r3, r2
 800137c:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2200      	movs	r2, #0
 8001384:	2124      	movs	r1, #36	@ 0x24
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fa92 	bl	80018b0 <CODEC_IO_Write>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	4413      	add	r3, r2
 8001394:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2200      	movs	r2, #0
 800139c:	2125      	movs	r1, #37	@ 0x25
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fa86 	bl	80018b0 <CODEC_IO_Write>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	4413      	add	r3, r2
 80013ac:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2200      	movs	r2, #0
 80013b4:	210a      	movs	r1, #10
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fa7a 	bl	80018b0 <CODEC_IO_Write>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	4413      	add	r3, r2
 80013c4:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2204      	movs	r2, #4
 80013cc:	210e      	movs	r1, #14
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fa6e 	bl	80018b0 <CODEC_IO_Write>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	4413      	add	r3, r2
 80013dc:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2200      	movs	r2, #0
 80013e4:	2127      	movs	r1, #39	@ 0x27
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fa62 	bl	80018b0 <CODEC_IO_Write>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	4413      	add	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	220f      	movs	r2, #15
 80013fc:	211f      	movs	r1, #31
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fa56 	bl	80018b0 <CODEC_IO_Write>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	4413      	add	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x00);
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2200      	movs	r2, #0
 8001414:	211a      	movs	r1, #26
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fa4a 	bl	80018b0 <CODEC_IO_Write>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4413      	add	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x00);
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2200      	movs	r2, #0
 800142c:	211b      	movs	r1, #27
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fa3e 	bl	80018b0 <CODEC_IO_Write>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	4413      	add	r3, r2
 800143c:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 800143e:	697b      	ldr	r3, [r7, #20]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000680 	.word	0x20000680

0800144c <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001450:	f7ff fee8 	bl	8001224 <AUDIO_IO_DeInit>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8001462:	f7ff fea7 	bl	80011b4 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2101      	movs	r1, #1
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fef4 	bl	800125a <AUDIO_IO_Read>
 8001472:	4603      	mov	r3, r0
 8001474:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	f023 0307 	bic.w	r3, r3, #7
 800147c:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	80fb      	strh	r3, [r7, #6]
 8001494:	4613      	mov	r3, r2
 8001496:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <cs43l22_Play+0x70>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d123      	bne.n	80014ec <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2206      	movs	r2, #6
 80014aa:	210e      	movs	r1, #14
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f9ff 	bl	80018b0 <CODEC_IO_Write>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f919 	bl	80016f8 <cs43l22_SetMute>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	229e      	movs	r2, #158	@ 0x9e
 80014d4:	2102      	movs	r1, #2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f9ea 	bl	80018b0 <CODEC_IO_Write>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80014e6:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <cs43l22_Play+0x70>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 80014ec:	68fb      	ldr	r3, [r7, #12]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000434 	.word	0x20000434

080014fc <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	2101      	movs	r1, #1
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f8f2 	bl	80016f8 <cs43l22_SetMute>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2201      	movs	r2, #1
 8001522:	2102      	movs	r1, #2
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f9c3 	bl	80018b0 <CODEC_IO_Write>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f8ce 	bl	80016f8 <cs43l22_SetMute>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	e002      	b.n	8001570 <cs43l22_Resume+0x30>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3301      	adds	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2bfe      	cmp	r3, #254	@ 0xfe
 8001574:	d9f9      	bls.n	800156a <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4a0e      	ldr	r2, [pc, #56]	@ (80015b4 <cs43l22_Resume+0x74>)
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	2104      	movs	r1, #4
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f994 	bl	80018b0 <CODEC_IO_Write>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	229e      	movs	r2, #158	@ 0x9e
 8001598:	2102      	movs	r1, #2
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f988 	bl	80018b0 <CODEC_IO_Write>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000680 	.word	0x20000680

080015b8 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	2101      	movs	r1, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f893 	bl	80016f8 <cs43l22_SetMute>
 80015d2:	4602      	mov	r2, r0
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2204      	movs	r2, #4
 80015e0:	210e      	movs	r1, #14
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f964 	bl	80018b0 <CODEC_IO_Write>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	229f      	movs	r2, #159	@ 0x9f
 80015f8:	2102      	movs	r1, #2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f958 	bl	80018b0 <CODEC_IO_Write>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800160a:	4b04      	ldr	r3, [pc, #16]	@ (800161c <cs43l22_Stop+0x64>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001610:	68fb      	ldr	r3, [r7, #12]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000434 	.word	0x20000434

08001620 <cs43l22_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	460a      	mov	r2, r1
 800162a:	80fb      	strh	r3, [r7, #6]
 800162c:	4613      	mov	r3, r2
 800162e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001634:	797b      	ldrb	r3, [r7, #5]
 8001636:	2b64      	cmp	r3, #100	@ 0x64
 8001638:	d80b      	bhi.n	8001652 <cs43l22_SetVolume+0x32>
 800163a:	797a      	ldrb	r2, [r7, #5]
 800163c:	4613      	mov	r3, r2
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	4a25      	ldr	r2, [pc, #148]	@ (80016d8 <cs43l22_SetVolume+0xb8>)
 8001644:	fb82 1203 	smull	r1, r2, r2, r3
 8001648:	1152      	asrs	r2, r2, #5
 800164a:	17db      	asrs	r3, r3, #31
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	e000      	b.n	8001654 <cs43l22_SetVolume+0x34>
 8001652:	2364      	movs	r3, #100	@ 0x64
 8001654:	72fb      	strb	r3, [r7, #11]

  if(Volume > 0xE6)
 8001656:	797b      	ldrb	r3, [r7, #5]
 8001658:	2be6      	cmp	r3, #230	@ 0xe6
 800165a:	d91c      	bls.n	8001696 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	b2d8      	uxtb	r0, r3
 8001660:	7afb      	ldrb	r3, [r7, #11]
 8001662:	3319      	adds	r3, #25
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	2120      	movs	r1, #32
 800166a:	f000 f921 	bl	80018b0 <CODEC_IO_Write>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	b2d8      	uxtb	r0, r3
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	3319      	adds	r3, #25
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	2121      	movs	r1, #33	@ 0x21
 8001686:	f000 f913 	bl	80018b0 <CODEC_IO_Write>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e01b      	b.n	80016ce <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	b2d8      	uxtb	r0, r3
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	3319      	adds	r3, #25
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	2120      	movs	r1, #32
 80016a4:	f000 f904 	bl	80018b0 <CODEC_IO_Write>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	b2d8      	uxtb	r0, r3
 80016b6:	7afb      	ldrb	r3, [r7, #11]
 80016b8:	3319      	adds	r3, #25
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	2121      	movs	r1, #33	@ 0x21
 80016c0:	f000 f8f6 	bl	80018b0 <CODEC_IO_Write>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	51eb851f 	.word	0x51eb851f

080016dc <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	80fb      	strh	r3, [r7, #6]
  return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d124      	bne.n	8001758 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	22ff      	movs	r2, #255	@ 0xff
 8001714:	2104      	movs	r1, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f8ca 	bl	80018b0 <CODEC_IO_Write>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2201      	movs	r2, #1
 800172c:	2122      	movs	r1, #34	@ 0x22
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f8be 	bl	80018b0 <CODEC_IO_Write>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2201      	movs	r2, #1
 8001744:	2123      	movs	r1, #35	@ 0x23
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f8b2 	bl	80018b0 <CODEC_IO_Write>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e025      	b.n	80017a4 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2200      	movs	r2, #0
 800175e:	2122      	movs	r1, #34	@ 0x22
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f8a5 	bl	80018b0 <CODEC_IO_Write>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4413      	add	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2200      	movs	r2, #0
 8001776:	2123      	movs	r1, #35	@ 0x23
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f899 	bl	80018b0 <CODEC_IO_Write>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4413      	add	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <cs43l22_SetMute+0xb8>)
 800178e:	7812      	ldrb	r2, [r2, #0]
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	2104      	movs	r1, #4
 8001794:	4618      	mov	r0, r3
 8001796:	f000 f88b 	bl	80018b0 <CODEC_IO_Write>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000680 	.word	0x20000680

080017b4 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	80fb      	strh	r3, [r7, #6]
 80017c0:	4613      	mov	r3, r2
 80017c2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80017c8:	797b      	ldrb	r3, [r7, #5]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d84b      	bhi.n	8001868 <cs43l22_SetOutputMode+0xb4>
 80017d0:	a201      	add	r2, pc, #4	@ (adr r2, 80017d8 <cs43l22_SetOutputMode+0x24>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	08001809 	.word	0x08001809
 80017e0:	08001829 	.word	0x08001829
 80017e4:	08001849 	.word	0x08001849
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	22fa      	movs	r2, #250	@ 0xfa
 80017ee:	2104      	movs	r1, #4
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f85d 	bl	80018b0 <CODEC_IO_Write>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001800:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <cs43l22_SetOutputMode+0xe0>)
 8001802:	22fa      	movs	r2, #250	@ 0xfa
 8001804:	701a      	strb	r2, [r3, #0]
      break;
 8001806:	e03f      	b.n	8001888 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	22af      	movs	r2, #175	@ 0xaf
 800180e:	2104      	movs	r1, #4
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f84d 	bl	80018b0 <CODEC_IO_Write>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4413      	add	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <cs43l22_SetOutputMode+0xe0>)
 8001822:	22af      	movs	r2, #175	@ 0xaf
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e02f      	b.n	8001888 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	22aa      	movs	r2, #170	@ 0xaa
 800182e:	2104      	movs	r1, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f83d 	bl	80018b0 <CODEC_IO_Write>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <cs43l22_SetOutputMode+0xe0>)
 8001842:	22aa      	movs	r2, #170	@ 0xaa
 8001844:	701a      	strb	r2, [r3, #0]
      break;
 8001846:	e01f      	b.n	8001888 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2205      	movs	r2, #5
 800184e:	2104      	movs	r1, #4
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f82d 	bl	80018b0 <CODEC_IO_Write>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <cs43l22_SetOutputMode+0xe0>)
 8001862:	2205      	movs	r2, #5
 8001864:	701a      	strb	r2, [r3, #0]
      break;    
 8001866:	e00f      	b.n	8001888 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2205      	movs	r2, #5
 800186e:	2104      	movs	r1, #4
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f81d 	bl	80018b0 <CODEC_IO_Write>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4413      	add	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <cs43l22_SetOutputMode+0xe0>)
 8001882:	2205      	movs	r2, #5
 8001884:	701a      	strb	r2, [r3, #0]
      break;
 8001886:	bf00      	nop
  }  
  return counter;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000680 	.word	0x20000680

08001898 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
  return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	460b      	mov	r3, r1
 80018bc:	71bb      	strb	r3, [r7, #6]
 80018be:	4613      	mov	r3, r2
 80018c0:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80018c6:	797a      	ldrb	r2, [r7, #5]
 80018c8:	79b9      	ldrb	r1, [r7, #6]
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fcb0 	bl	8001232 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	b2db      	uxtb	r3, r3
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <FifoWrite>:
uint8_t fifo_w_ptr = 0;
uint8_t fifo_r_ptr = 0;
uint8_t fifo_read_enabled = 0;

void FifoWrite(int16_t data)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
  fifobuf[fifo_w_ptr] = data;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <FifoWrite+0x30>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <FifoWrite+0x34>)
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
  fifo_w_ptr++;
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <FifoWrite+0x30>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <FifoWrite+0x30>)
 8001902:	701a      	strb	r2, [r3, #0]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000f2c 	.word	0x20000f2c
 8001914:	20000d2c 	.word	0x20000d2c

08001918 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b0a0      	sub	sp, #128	@ 0x80
 800191c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191e:	f001 f8ab 	bl	8002a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001922:	f000 f9bb 	bl	8001c9c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001926:	f000 fa23 	bl	8001d70 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800192a:	f000 fb6b 	bl	8002004 <MX_GPIO_Init>
  MX_DMA_Init();
 800192e:	f000 fb41 	bl	8001fb4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001932:	f000 fa55 	bl	8001de0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001936:	f000 faaf 	bl	8001e98 <MX_I2S3_Init>
  MX_SPI1_Init();
 800193a:	f000 fadb 	bl	8001ef4 <MX_SPI1_Init>
  MX_CRC_Init();
 800193e:	f000 fa33 	bl	8001da8 <MX_CRC_Init>
  MX_I2S2_Init();
 8001942:	f000 fa7b 	bl	8001e3c <MX_I2S2_Init>
  MX_PDM2PCM_Init();
 8001946:	f005 f929 	bl	8006b9c <MX_PDM2PCM_Init>
  MX_USART2_UART_Init();
 800194a:	f000 fb09 	bl	8001f60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  PDM_Filter_Handler_t PDM1_filter_handler;
  PDM_Filter_Config_t PDM1_filter_config;
  /* Initialize PDM Filter structure */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800194e:	2300      	movs	r3, #0
 8001950:	813b      	strh	r3, [r7, #8]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8001952:	2301      	movs	r3, #1
 8001954:	817b      	strh	r3, [r7, #10]
  PDM1_filter_handler.high_pass_tap = 2136746228; // 2104533974; //2136746228; //0.9xx*(2^31-1)
 8001956:	4bbb      	ldr	r3, [pc, #748]	@ (8001c44 <main+0x32c>)
 8001958:	60fb      	str	r3, [r7, #12]
  PDM1_filter_handler.out_ptr_channels = 1;
 800195a:	2301      	movs	r3, #1
 800195c:	827b      	strh	r3, [r7, #18]
  PDM1_filter_handler.in_ptr_channels = 1;
 800195e:	2301      	movs	r3, #1
 8001960:	823b      	strh	r3, [r7, #16]
  PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM1_filter_handler));
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	4618      	mov	r0, r3
 8001968:	f006 fe92 	bl	8008690 <PDM_Filter_Init>

  PDM1_filter_config.output_samples_number = 32;
 800196c:	2320      	movs	r3, #32
 800196e:	807b      	strh	r3, [r7, #2]
  PDM1_filter_config.mic_gain = 25;
 8001970:	2319      	movs	r3, #25
 8001972:	80bb      	strh	r3, [r7, #4]
  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_32; // DAC CLK: 46875 kS/s * 32 bit = 1500000 MHz, PDM2PCM: 1500000 / 32 = 46875 kS/s
 8001974:	2307      	movs	r3, #7
 8001976:	803b      	strh	r3, [r7, #0]
  PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM1_filter_handler, &PDM1_filter_config);
 8001978:	463a      	mov	r2, r7
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f006 ff0f 	bl	80087a4 <PDM_Filter_setConfig>

  uint16_t readid = 0, initret = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800198c:	2300      	movs	r3, #0
 800198e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
  /* Retieve audio codec identifier */
  readid = cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS); // & CS43L22_ID_MASK) == CS43L22_ID)
 8001992:	4bad      	ldr	r3, [pc, #692]	@ (8001c48 <main+0x330>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2094      	movs	r0, #148	@ 0x94
 8001998:	4798      	blx	r3
 800199a:	4603      	mov	r3, r0
 800199c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
  initret = cs43l22_Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_BOTH, 80, AUDIO_FREQUENCY_48K);
 80019a0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80019a4:	2250      	movs	r2, #80	@ 0x50
 80019a6:	2103      	movs	r1, #3
 80019a8:	2094      	movs	r0, #148	@ 0x94
 80019aa:	f7ff fc6b 	bl	8001284 <cs43l22_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
  arm_rfft_fast_init_f32(&fft_instance, WAV_WRITE_SAMPLE_COUNT / 4);
 80019b4:	2140      	movs	r1, #64	@ 0x40
 80019b6:	48a5      	ldr	r0, [pc, #660]	@ (8001c4c <main+0x334>)
 80019b8:	f007 f8d8 	bl	8008b6c <arm_rfft_fast_init_f32>
  {
    txBuf[i] = 32767 * sin(2 * 3.14159265 * (float)i / 128.0);
    txBuf[i+1] = txBuf[i];
  }*/

  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)&txBuf[0], 128);
 80019bc:	2280      	movs	r2, #128	@ 0x80
 80019be:	49a4      	ldr	r1, [pc, #656]	@ (8001c50 <main+0x338>)
 80019c0:	48a4      	ldr	r0, [pc, #656]	@ (8001c54 <main+0x33c>)
 80019c2:	f003 f995 	bl	8004cf0 <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0], 128);
 80019c6:	2280      	movs	r2, #128	@ 0x80
 80019c8:	49a3      	ldr	r1, [pc, #652]	@ (8001c58 <main+0x340>)
 80019ca:	48a4      	ldr	r0, [pc, #656]	@ (8001c5c <main+0x344>)
 80019cc:	f003 fa38 	bl	8004e40 <HAL_I2S_Receive_DMA>
  printf("uart start\n");
 80019d0:	48a3      	ldr	r0, [pc, #652]	@ (8001c60 <main+0x348>)
 80019d2:	f009 f845 	bl	800aa60 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (button_flag)
 80019d6:	4ba3      	ldr	r3, [pc, #652]	@ (8001c64 <main+0x34c>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d014      	beq.n	8001a0a <main+0xf2>
	  {
	      if (start_stop_recording)
 80019e0:	4ba1      	ldr	r3, [pc, #644]	@ (8001c68 <main+0x350>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <main+0xe0>
	      {
	          start_stop_recording = 0;
 80019ea:	4b9f      	ldr	r3, [pc, #636]	@ (8001c68 <main+0x350>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
	          printf("stop recording \n");
 80019f0:	489e      	ldr	r0, [pc, #632]	@ (8001c6c <main+0x354>)
 80019f2:	f009 f835 	bl	800aa60 <puts>
 80019f6:	e005      	b.n	8001a04 <main+0xec>
	      }
	      else
	      {
	          start_stop_recording = 1;
 80019f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001c68 <main+0x350>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
	          printf("start recording \n");
 80019fe:	489c      	ldr	r0, [pc, #624]	@ (8001c70 <main+0x358>)
 8001a00:	f009 f82e 	bl	800aa60 <puts>
	      }

	      button_flag = 0; // Xóa cờ sau khi xử lý
 8001a04:	4b97      	ldr	r3, [pc, #604]	@ (8001c64 <main+0x34c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
	  }
    if (rxstate == 1 &&start_stop_recording==1)
 8001a0a:	4b9a      	ldr	r3, [pc, #616]	@ (8001c74 <main+0x35c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	f040 808e 	bne.w	8001b30 <main+0x218>
 8001a14:	4b94      	ldr	r3, [pc, #592]	@ (8001c68 <main+0x350>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	f040 8088 	bne.w	8001b30 <main+0x218>
    {
      PDM_Filter(&pdmRxBuf[0], &MidBuffer[0], &PDM1_filter_handler);
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	461a      	mov	r2, r3
 8001a26:	4994      	ldr	r1, [pc, #592]	@ (8001c78 <main+0x360>)
 8001a28:	488b      	ldr	r0, [pc, #556]	@ (8001c58 <main+0x340>)
 8001a2a:	f006 ffad 	bl	8008988 <PDM_Filter>
      for (int i = 0; i < 64; i++) // Cập nhật từ 32 thành 64
 8001a2e:	2300      	movs	r3, #0
 8001a30:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a32:	e017      	b.n	8001a64 <main+0x14c>
      {
        FifoWrite(MidBuffer[i]);
 8001a34:	4a90      	ldr	r2, [pc, #576]	@ (8001c78 <main+0x360>)
 8001a36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a38:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff4f 	bl	80018e0 <FifoWrite>
        mic1_data1[i] = (float32_t)MidBuffer[i];
 8001a42:	4a8d      	ldr	r2, [pc, #564]	@ (8001c78 <main+0x360>)
 8001a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a46:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a52:	4a8a      	ldr	r2, [pc, #552]	@ (8001c7c <main+0x364>)
 8001a54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 64; i++) // Cập nhật từ 32 thành 64
 8001a5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a60:	3301      	adds	r3, #1
 8001a62:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a66:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a68:	dde4      	ble.n	8001a34 <main+0x11c>
      }
      arm_rfft_fast_f32(&fft_instance, mic1_data1, output_buffer, 0);
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	4a84      	ldr	r2, [pc, #528]	@ (8001c80 <main+0x368>)
 8001a6e:	4983      	ldr	r1, [pc, #524]	@ (8001c7c <main+0x364>)
 8001a70:	4876      	ldr	r0, [pc, #472]	@ (8001c4c <main+0x334>)
 8001a72:	f007 f965 	bl	8008d40 <arm_rfft_fast_f32>

      // Tính biên độ từ FFT
      for (int i = 0; i < 32; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a7a:	e048      	b.n	8001b0e <main+0x1f6>
      {
    	float  magnitude = sqrtf(output_buffer[2 * i] * output_buffer[2 * i] +
 8001a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4a7f      	ldr	r2, [pc, #508]	@ (8001c80 <main+0x368>)
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	ed93 7a00 	vldr	s14, [r3]
 8001a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8001c80 <main+0x368>)
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	ee27 7a27 	vmul.f32	s14, s14, s15
                                    output_buffer[2 * i + 1] * output_buffer[2 * i + 1]);
 8001a9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	4a77      	ldr	r2, [pc, #476]	@ (8001c80 <main+0x368>)
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	edd3 6a00 	vldr	s13, [r3]
 8001aac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	4a73      	ldr	r2, [pc, #460]	@ (8001c80 <main+0x368>)
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    	float  magnitude = sqrtf(output_buffer[2 * i] * output_buffer[2 * i] +
 8001ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac8:	f00c fc68 	bl	800e39c <sqrtf>
 8001acc:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
        float frequency = i * (48000.0f / 64.0f); // f[i] = i * (fs / N)
 8001ad0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ada:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001c84 <main+0x36c>
 8001ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae2:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

        printf("%.2f Hz: %.2f\r\n", frequency, magnitude);
 8001ae6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001ae8:	f7fe fd2e 	bl	8000548 <__aeabi_f2d>
 8001aec:	4604      	mov	r4, r0
 8001aee:	460d      	mov	r5, r1
 8001af0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001af2:	f7fe fd29 	bl	8000548 <__aeabi_f2d>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	e9cd 2300 	strd	r2, r3, [sp]
 8001afe:	4622      	mov	r2, r4
 8001b00:	462b      	mov	r3, r5
 8001b02:	4861      	ldr	r0, [pc, #388]	@ (8001c88 <main+0x370>)
 8001b04:	f008 ff44 	bl	800a990 <iprintf>
      for (int i = 0; i < 32; i++)
 8001b08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	ddb3      	ble.n	8001a7c <main+0x164>
//      for (int i = 0; i < (WAV_WRITE_SAMPLE_COUNT / 4); i++)
//      {
//        printf("%.2f \r\n", magnitude_buffer[i]);
//      }
//      printf("\n");
      if (fifo_w_ptr - fifo_r_ptr > 128)
 8001b14:	4b5d      	ldr	r3, [pc, #372]	@ (8001c8c <main+0x374>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c90 <main+0x378>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b80      	cmp	r3, #128	@ 0x80
 8001b22:	dd02      	ble.n	8001b2a <main+0x212>
        fifo_read_enabled = 1;
 8001b24:	4b5b      	ldr	r3, [pc, #364]	@ (8001c94 <main+0x37c>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
      rxstate = 0;
 8001b2a:	4b52      	ldr	r3, [pc, #328]	@ (8001c74 <main+0x35c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
    }

    if (rxstate == 2&&start_stop_recording==1)
 8001b30:	4b50      	ldr	r3, [pc, #320]	@ (8001c74 <main+0x35c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	f47f af4e 	bne.w	80019d6 <main+0xbe>
 8001b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c68 <main+0x350>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	f47f af48 	bne.w	80019d6 <main+0xbe>
    {
      PDM_Filter(&pdmRxBuf[64], &MidBuffer[0], &PDM1_filter_handler);
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	494a      	ldr	r1, [pc, #296]	@ (8001c78 <main+0x360>)
 8001b4e:	4852      	ldr	r0, [pc, #328]	@ (8001c98 <main+0x380>)
 8001b50:	f006 ff1a 	bl	8008988 <PDM_Filter>
      for (int i = 0; i < 64; i++) // Cập nhật từ 32 thành 64
 8001b54:	2300      	movs	r3, #0
 8001b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001b58:	e017      	b.n	8001b8a <main+0x272>
      {
        FifoWrite(MidBuffer[i]);
 8001b5a:	4a47      	ldr	r2, [pc, #284]	@ (8001c78 <main+0x360>)
 8001b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b5e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff febc 	bl	80018e0 <FifoWrite>
        mic1_data1[i] = (float32_t)MidBuffer[i];
 8001b68:	4a43      	ldr	r2, [pc, #268]	@ (8001c78 <main+0x360>)
 8001b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b6c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b78:	4a40      	ldr	r2, [pc, #256]	@ (8001c7c <main+0x364>)
 8001b7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 64; i++) // Cập nhật từ 32 thành 64
 8001b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b86:	3301      	adds	r3, #1
 8001b88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b8e:	dde4      	ble.n	8001b5a <main+0x242>
      }
      arm_rfft_fast_f32(&fft_instance, mic1_data1, output_buffer, 0);
 8001b90:	2300      	movs	r3, #0
 8001b92:	4a3b      	ldr	r2, [pc, #236]	@ (8001c80 <main+0x368>)
 8001b94:	4939      	ldr	r1, [pc, #228]	@ (8001c7c <main+0x364>)
 8001b96:	482d      	ldr	r0, [pc, #180]	@ (8001c4c <main+0x334>)
 8001b98:	f007 f8d2 	bl	8008d40 <arm_rfft_fast_f32>

      // Tính biên độ từ FFT
      for (int i = 0; i < 32; i++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ba0:	e048      	b.n	8001c34 <main+0x31c>
      {
    	float  magnitude = sqrtf(output_buffer[2 * i] * output_buffer[2 * i] +
 8001ba2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4a36      	ldr	r2, [pc, #216]	@ (8001c80 <main+0x368>)
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	ed93 7a00 	vldr	s14, [r3]
 8001bb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4a32      	ldr	r2, [pc, #200]	@ (8001c80 <main+0x368>)
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
                                    output_buffer[2 * i + 1] * output_buffer[2 * i + 1]);
 8001bc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001c80 <main+0x368>)
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	edd3 6a00 	vldr	s13, [r3]
 8001bd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a29      	ldr	r2, [pc, #164]	@ (8001c80 <main+0x368>)
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    	float  magnitude = sqrtf(output_buffer[2 * i] * output_buffer[2 * i] +
 8001be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bea:	eeb0 0a67 	vmov.f32	s0, s15
 8001bee:	f00c fbd5 	bl	800e39c <sqrtf>
 8001bf2:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
        float frequency = i * (48000.0f / 64.0f); // f[i] = i * (fs / N)
 8001bf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c00:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001c84 <main+0x36c>
 8001c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c08:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

        printf("%.2f Hz: %.2f\r\n", frequency, magnitude); // Xuất tần số và biên độ
 8001c0c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001c0e:	f7fe fc9b 	bl	8000548 <__aeabi_f2d>
 8001c12:	4604      	mov	r4, r0
 8001c14:	460d      	mov	r5, r1
 8001c16:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001c18:	f7fe fc96 	bl	8000548 <__aeabi_f2d>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	e9cd 2300 	strd	r2, r3, [sp]
 8001c24:	4622      	mov	r2, r4
 8001c26:	462b      	mov	r3, r5
 8001c28:	4817      	ldr	r0, [pc, #92]	@ (8001c88 <main+0x370>)
 8001c2a:	f008 feb1 	bl	800a990 <iprintf>
      for (int i = 0; i < 32; i++)
 8001c2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c30:	3301      	adds	r3, #1
 8001c32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c36:	2b1f      	cmp	r3, #31
 8001c38:	ddb3      	ble.n	8001ba2 <main+0x28a>
//      for (int i = 0; i < (WAV_WRITE_SAMPLE_COUNT / 4); i++)
//      {
//        printf("%.2f \r\n", magnitude_buffer[i]);
//      }
//      printf("\n");
      rxstate = 0;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <main+0x35c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
	  if (button_flag)
 8001c40:	e6c9      	b.n	80019d6 <main+0xbe>
 8001c42:	bf00      	nop
 8001c44:	7f5c28f4 	.word	0x7f5c28f4
 8001c48:	20000404 	.word	0x20000404
 8001c4c:	20000888 	.word	0x20000888
 8001c50:	20000ae8 	.word	0x20000ae8
 8001c54:	20000944 	.word	0x20000944
 8001c58:	20000be8 	.word	0x20000be8
 8001c5c:	200008fc 	.word	0x200008fc
 8001c60:	0800eb20 	.word	0x0800eb20
 8001c64:	20000784 	.word	0x20000784
 8001c68:	20000785 	.word	0x20000785
 8001c6c:	0800eb2c 	.word	0x0800eb2c
 8001c70:	0800eb3c 	.word	0x0800eb3c
 8001c74:	20000d29 	.word	0x20000d29
 8001c78:	20000ce8 	.word	0x20000ce8
 8001c7c:	20000684 	.word	0x20000684
 8001c80:	20000788 	.word	0x20000788
 8001c84:	443b8000 	.word	0x443b8000
 8001c88:	0800eb50 	.word	0x0800eb50
 8001c8c:	20000f2c 	.word	0x20000f2c
 8001c90:	20000f2d 	.word	0x20000f2d
 8001c94:	20000f2e 	.word	0x20000f2e
 8001c98:	20000c68 	.word	0x20000c68

08001c9c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b094      	sub	sp, #80	@ 0x50
 8001ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca2:	f107 0320 	add.w	r3, r7, #32
 8001ca6:	2230      	movs	r2, #48	@ 0x30
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f008 ffd8 	bl	800ac60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <SystemClock_Config+0xcc>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	4a27      	ldr	r2, [pc, #156]	@ (8001d68 <SystemClock_Config+0xcc>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd0:	4b25      	ldr	r3, [pc, #148]	@ (8001d68 <SystemClock_Config+0xcc>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <SystemClock_Config+0xd0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a21      	ldr	r2, [pc, #132]	@ (8001d6c <SystemClock_Config+0xd0>)
 8001ce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <SystemClock_Config+0xd0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d02:	2302      	movs	r3, #2
 8001d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d10:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 fd18 	bl	8005758 <HAL_RCC_OscConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d2e:	f000 fad9 	bl	80022e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d32:	230f      	movs	r3, #15
 8001d34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d3e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	2105      	movs	r1, #5
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 ff79 	bl	8005c48 <HAL_RCC_ClockConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d5c:	f000 fac2 	bl	80022e4 <Error_Handler>
  }
}
 8001d60:	bf00      	nop
 8001d62:	3750      	adds	r7, #80	@ 0x50
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40007000 	.word	0x40007000

08001d70 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d76:	463b      	mov	r3, r7
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001d82:	2301      	movs	r3, #1
 8001d84:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001d86:	23c0      	movs	r3, #192	@ 0xc0
 8001d88:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4618      	mov	r0, r3
 8001d92:	f004 f979 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8001d9c:	f000 faa2 	bl	80022e4 <Error_Handler>
  }
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <MX_CRC_Init+0x30>)
 8001dae:	4a0b      	ldr	r2, [pc, #44]	@ (8001ddc <MX_CRC_Init+0x34>)
 8001db0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001db2:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <MX_CRC_Init+0x30>)
 8001db4:	f001 f807 	bl	8002dc6 <HAL_CRC_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001dbe:	f000 fa91 	bl	80022e4 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <MX_CRC_Init+0x30>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b03      	ldr	r3, [pc, #12]	@ (8001dd8 <MX_CRC_Init+0x30>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200008a0 	.word	0x200008a0
 8001ddc:	40023000 	.word	0x40023000

08001de0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001de6:	4a13      	ldr	r2, [pc, #76]	@ (8001e34 <MX_I2C1_Init+0x54>)
 8001de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001dec:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <MX_I2C1_Init+0x58>)
 8001dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001dfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e10:	4b07      	ldr	r3, [pc, #28]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e1c:	4804      	ldr	r0, [pc, #16]	@ (8001e30 <MX_I2C1_Init+0x50>)
 8001e1e:	f001 fe29 	bl	8003a74 <HAL_I2C_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e28:	f000 fa5c 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200008a8 	.word	0x200008a8
 8001e34:	40005400 	.word	0x40005400
 8001e38:	000186a0 	.word	0x000186a0

08001e3c <MX_I2S2_Init>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001e40:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <MX_I2S2_Init+0x54>)
 8001e42:	4a14      	ldr	r2, [pc, #80]	@ (8001e94 <MX_I2S2_Init+0x58>)
 8001e44:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <MX_I2S2_Init+0x54>)
 8001e48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e4c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <MX_I2S2_Init+0x54>)
 8001e50:	2210      	movs	r2, #16
 8001e52:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001e54:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <MX_I2S2_Init+0x54>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <MX_I2S2_Init+0x54>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <MX_I2S2_Init+0x54>)
 8001e62:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001e66:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <MX_I2S2_Init+0x54>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <MX_I2S2_Init+0x54>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <MX_I2S2_Init+0x54>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <MX_I2S2_Init+0x54>)
 8001e7c:	f002 fdf8 	bl	8004a70 <HAL_I2S_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8001e86:	f000 fa2d 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200008fc 	.word	0x200008fc
 8001e94:	40003800 	.word	0x40003800

08001e98 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <MX_I2S3_Init+0x54>)
 8001e9e:	4a14      	ldr	r2, [pc, #80]	@ (8001ef0 <MX_I2S3_Init+0x58>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <MX_I2S3_Init+0x54>)
 8001ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <MX_I2S3_Init+0x54>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <MX_I2S3_Init+0x54>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <MX_I2S3_Init+0x54>)
 8001eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ebc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <MX_I2S3_Init+0x54>)
 8001ec0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001ec4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <MX_I2S3_Init+0x54>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <MX_I2S3_Init+0x54>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <MX_I2S3_Init+0x54>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	@ (8001eec <MX_I2S3_Init+0x54>)
 8001eda:	f002 fdc9 	bl	8004a70 <HAL_I2S_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001ee4:	f000 f9fe 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000944 	.word	0x20000944
 8001ef0:	40003c00 	.word	0x40003c00

08001ef4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001efa:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <MX_SPI1_Init+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f06:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f40:	220a      	movs	r2, #10
 8001f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f46:	f004 f9df 	bl	8006308 <HAL_SPI_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f50:	f000 f9c8 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000a4c 	.word	0x20000a4c
 8001f5c:	40013000 	.word	0x40013000

08001f60 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <MX_USART2_UART_Init+0x50>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f98:	f004 fa3f 	bl	800641a <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fa2:	f000 f99f 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000aa4 	.word	0x20000aa4
 8001fb0:	40004400 	.word	0x40004400

08001fb4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <MX_DMA_Init+0x4c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	@ (8002000 <MX_DMA_Init+0x4c>)
 8001fc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <MX_DMA_Init+0x4c>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	200e      	movs	r0, #14
 8001fdc:	f000 febd 	bl	8002d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001fe0:	200e      	movs	r0, #14
 8001fe2:	f000 fed6 	bl	8002d92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2010      	movs	r0, #16
 8001fec:	f000 feb5 	bl	8002d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ff0:	2010      	movs	r0, #16
 8001ff2:	f000 fece 	bl	8002d92 <HAL_NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800

08002004 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08c      	sub	sp, #48	@ 0x30
 8002008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	4b74      	ldr	r3, [pc, #464]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	4a73      	ldr	r2, [pc, #460]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 8002024:	f043 0310 	orr.w	r3, r3, #16
 8002028:	6313      	str	r3, [r2, #48]	@ 0x30
 800202a:	4b71      	ldr	r3, [pc, #452]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	4b6d      	ldr	r3, [pc, #436]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	4a6c      	ldr	r2, [pc, #432]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6313      	str	r3, [r2, #48]	@ 0x30
 8002046:	4b6a      	ldr	r3, [pc, #424]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b66      	ldr	r3, [pc, #408]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	4a65      	ldr	r2, [pc, #404]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 800205c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002060:	6313      	str	r3, [r2, #48]	@ 0x30
 8002062:	4b63      	ldr	r3, [pc, #396]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b5f      	ldr	r3, [pc, #380]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	4a5e      	ldr	r2, [pc, #376]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6313      	str	r3, [r2, #48]	@ 0x30
 800207e:	4b5c      	ldr	r3, [pc, #368]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b58      	ldr	r3, [pc, #352]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	4a57      	ldr	r2, [pc, #348]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	6313      	str	r3, [r2, #48]	@ 0x30
 800209a:	4b55      	ldr	r3, [pc, #340]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	4b51      	ldr	r3, [pc, #324]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	4a50      	ldr	r2, [pc, #320]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b6:	4b4e      	ldr	r3, [pc, #312]	@ (80021f0 <MX_GPIO_Init+0x1ec>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2108      	movs	r1, #8
 80020c6:	484b      	ldr	r0, [pc, #300]	@ (80021f4 <MX_GPIO_Init+0x1f0>)
 80020c8:	f001 fca2 	bl	8003a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80020cc:	2201      	movs	r2, #1
 80020ce:	2101      	movs	r1, #1
 80020d0:	4849      	ldr	r0, [pc, #292]	@ (80021f8 <MX_GPIO_Init+0x1f4>)
 80020d2:	f001 fc9d 	bl	8003a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80020dc:	4847      	ldr	r0, [pc, #284]	@ (80021fc <MX_GPIO_Init+0x1f8>)
 80020de:	f001 fc97 	bl	8003a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80020e2:	2308      	movs	r3, #8
 80020e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	4619      	mov	r1, r3
 80020f8:	483e      	ldr	r0, [pc, #248]	@ (80021f4 <MX_GPIO_Init+0x1f0>)
 80020fa:	f001 f9f1 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80020fe:	2301      	movs	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4619      	mov	r1, r3
 8002114:	4838      	ldr	r0, [pc, #224]	@ (80021f8 <MX_GPIO_Init+0x1f4>)
 8002116:	f001 f9e3 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800211a:	2301      	movs	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800211e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	4834      	ldr	r0, [pc, #208]	@ (8002200 <MX_GPIO_Init+0x1fc>)
 8002130:	f001 f9d6 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002134:	2304      	movs	r3, #4
 8002136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	482f      	ldr	r0, [pc, #188]	@ (8002204 <MX_GPIO_Init+0x200>)
 8002148:	f001 f9ca 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 800214c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	4825      	ldr	r0, [pc, #148]	@ (80021fc <MX_GPIO_Init+0x1f8>)
 8002166:	f001 f9bb 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800216a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800216e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	4619      	mov	r1, r3
 800217e:	4820      	ldr	r0, [pc, #128]	@ (8002200 <MX_GPIO_Init+0x1fc>)
 8002180:	f001 f9ae 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 8002184:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002196:	230a      	movs	r3, #10
 8002198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	4817      	ldr	r0, [pc, #92]	@ (8002200 <MX_GPIO_Init+0x1fc>)
 80021a2:	f001 f99d 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80021a6:	2320      	movs	r3, #32
 80021a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	4619      	mov	r1, r3
 80021b8:	4810      	ldr	r0, [pc, #64]	@ (80021fc <MX_GPIO_Init+0x1f8>)
 80021ba:	f001 f991 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80021be:	2302      	movs	r3, #2
 80021c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021c2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80021c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	4808      	ldr	r0, [pc, #32]	@ (80021f4 <MX_GPIO_Init+0x1f0>)
 80021d4:	f001 f984 	bl	80034e0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0); // Đặt mức ưu tiên cho ngắt
 80021d8:	2200      	movs	r2, #0
 80021da:	2102      	movs	r1, #2
 80021dc:	2006      	movs	r0, #6
 80021de:	f000 fdbc 	bl	8002d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);         // Bật ngắt EXTI0
 80021e2:	2006      	movs	r0, #6
 80021e4:	f000 fdd5 	bl	8002d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80021e8:	bf00      	nop
 80021ea:	3730      	adds	r7, #48	@ 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40020800 	.word	0x40020800
 80021fc:	40020c00 	.word	0x40020c00
 8002200:	40020000 	.word	0x40020000
 8002204:	40020400 	.word	0x40020400

08002208 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002210:	1d39      	adds	r1, r7, #4
 8002212:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002216:	2201      	movs	r2, #1
 8002218:	4803      	ldr	r0, [pc, #12]	@ (8002228 <__io_putchar+0x20>)
 800221a:	f004 f94b 	bl	80064b4 <HAL_UART_Transmit>
  return ch;
 800221e:	687b      	ldr	r3, [r7, #4]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000aa4 	.word	0x20000aa4

0800222c <HAL_I2S_TxHalfCpltCallback>:
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  txstate = 1;
 8002234:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000d28 	.word	0x20000d28

0800224c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  txstate = 2;
 8002254:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <HAL_I2S_TxCpltCallback+0x1c>)
 8002256:	2202      	movs	r2, #2
 8002258:	701a      	strb	r2, [r3, #0]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000d28 	.word	0x20000d28

0800226c <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  rxstate = 1;
 8002274:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000d29 	.word	0x20000d29

0800228c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  rxstate = 2;
 8002294:	4b04      	ldr	r3, [pc, #16]	@ (80022a8 <HAL_I2S_RxCpltCallback+0x1c>)
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000d29 	.word	0x20000d29

080022ac <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // Xử lý ngắt qua HAL
 80022b0:	2001      	movs	r0, #1
 80022b2:	f001 fbc7 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0) // Kiểm tra ngắt từ PA0
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_GPIO_EXTI_Callback+0x16>
  {
    button_flag = 1; // Đặt cờ khi nút được nhấn
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <HAL_GPIO_EXTI_Callback+0x24>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000784 	.word	0x20000784

080022e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e8:	b672      	cpsid	i
}
 80022ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <Error_Handler+0x8>

080022f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	4b10      	ldr	r3, [pc, #64]	@ (800233c <HAL_MspInit+0x4c>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	4a0f      	ldr	r2, [pc, #60]	@ (800233c <HAL_MspInit+0x4c>)
 8002300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002304:	6453      	str	r3, [r2, #68]	@ 0x44
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <HAL_MspInit+0x4c>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_MspInit+0x4c>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	4a08      	ldr	r2, [pc, #32]	@ (800233c <HAL_MspInit+0x4c>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002320:	6413      	str	r3, [r2, #64]	@ 0x40
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_MspInit+0x4c>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800232e:	2007      	movs	r0, #7
 8002330:	f000 fd08 	bl	8002d44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0b      	ldr	r2, [pc, #44]	@ (800237c <HAL_CRC_MspInit+0x3c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10d      	bne.n	800236e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <HAL_CRC_MspInit+0x40>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	4a09      	ldr	r2, [pc, #36]	@ (8002380 <HAL_CRC_MspInit+0x40>)
 800235c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002360:	6313      	str	r3, [r2, #48]	@ 0x30
 8002362:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <HAL_CRC_MspInit+0x40>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40023000 	.word	0x40023000
 8002380:	40023800 	.word	0x40023800

08002384 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	@ 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a19      	ldr	r2, [pc, #100]	@ (8002408 <HAL_I2C_MspInit+0x84>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d12c      	bne.n	8002400 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	4b18      	ldr	r3, [pc, #96]	@ (800240c <HAL_I2C_MspInit+0x88>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	4a17      	ldr	r2, [pc, #92]	@ (800240c <HAL_I2C_MspInit+0x88>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <HAL_I2C_MspInit+0x88>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80023c2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c8:	2312      	movs	r3, #18
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023d4:	2304      	movs	r3, #4
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	480c      	ldr	r0, [pc, #48]	@ (8002410 <HAL_I2C_MspInit+0x8c>)
 80023e0:	f001 f87e 	bl	80034e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <HAL_I2C_MspInit+0x88>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	4a07      	ldr	r2, [pc, #28]	@ (800240c <HAL_I2C_MspInit+0x88>)
 80023ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f4:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_I2C_MspInit+0x88>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002400:	bf00      	nop
 8002402:	3728      	adds	r7, #40	@ 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40005400 	.word	0x40005400
 800240c:	40023800 	.word	0x40023800
 8002410:	40020400 	.word	0x40020400

08002414 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <HAL_I2C_MspDeInit+0x38>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d10e      	bne.n	8002444 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <HAL_I2C_MspDeInit+0x3c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <HAL_I2C_MspDeInit+0x3c>)
 800242c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002430:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8002432:	2140      	movs	r1, #64	@ 0x40
 8002434:	4807      	ldr	r0, [pc, #28]	@ (8002454 <HAL_I2C_MspDeInit+0x40>)
 8002436:	f001 f9ef 	bl	8003818 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 800243a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800243e:	4805      	ldr	r0, [pc, #20]	@ (8002454 <HAL_I2C_MspDeInit+0x40>)
 8002440:	f001 f9ea 	bl	8003818 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40005400 	.word	0x40005400
 8002450:	40023800 	.word	0x40023800
 8002454:	40020400 	.word	0x40020400

08002458 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08e      	sub	sp, #56	@ 0x38
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a8b      	ldr	r2, [pc, #556]	@ (80026a4 <HAL_I2S_MspInit+0x24c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f040 8085 	bne.w	8002586 <HAL_I2S_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	623b      	str	r3, [r7, #32]
 8002480:	4b89      	ldr	r3, [pc, #548]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	4a88      	ldr	r2, [pc, #544]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 8002486:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800248a:	6413      	str	r3, [r2, #64]	@ 0x40
 800248c:	4b86      	ldr	r3, [pc, #536]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002494:	623b      	str	r3, [r7, #32]
 8002496:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	4b82      	ldr	r3, [pc, #520]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	4a81      	ldr	r2, [pc, #516]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a8:	4b7f      	ldr	r3, [pc, #508]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	4b7b      	ldr	r3, [pc, #492]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	4a7a      	ldr	r2, [pc, #488]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c4:	4b78      	ldr	r3, [pc, #480]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80024d0:	2308      	movs	r3, #8
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024e0:	2305      	movs	r3, #5
 80024e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80024e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e8:	4619      	mov	r1, r3
 80024ea:	4870      	ldr	r0, [pc, #448]	@ (80026ac <HAL_I2S_MspInit+0x254>)
 80024ec:	f000 fff8 	bl	80034e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80024f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002502:	2305      	movs	r3, #5
 8002504:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	4868      	ldr	r0, [pc, #416]	@ (80026b0 <HAL_I2S_MspInit+0x258>)
 800250e:	f000 ffe7 	bl	80034e0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002512:	4b68      	ldr	r3, [pc, #416]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 8002514:	4a68      	ldr	r2, [pc, #416]	@ (80026b8 <HAL_I2S_MspInit+0x260>)
 8002516:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002518:	4b66      	ldr	r3, [pc, #408]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 800251a:	2200      	movs	r2, #0
 800251c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800251e:	4b65      	ldr	r3, [pc, #404]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002524:	4b63      	ldr	r3, [pc, #396]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 8002526:	2200      	movs	r2, #0
 8002528:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800252a:	4b62      	ldr	r3, [pc, #392]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 800252c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002530:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002532:	4b60      	ldr	r3, [pc, #384]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 8002534:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002538:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800253a:	4b5e      	ldr	r3, [pc, #376]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 800253c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002540:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002542:	4b5c      	ldr	r3, [pc, #368]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 8002544:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002548:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800254a:	4b5a      	ldr	r3, [pc, #360]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 800254c:	2200      	movs	r2, #0
 800254e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002550:	4b58      	ldr	r3, [pc, #352]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 8002552:	2204      	movs	r2, #4
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002556:	4b57      	ldr	r3, [pc, #348]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 8002558:	2203      	movs	r2, #3
 800255a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800255c:	4b55      	ldr	r3, [pc, #340]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 800255e:	2200      	movs	r2, #0
 8002560:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002562:	4b54      	ldr	r3, [pc, #336]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002568:	4852      	ldr	r0, [pc, #328]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 800256a:	f000 fc49 	bl	8002e00 <HAL_DMA_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8002574:	f7ff feb6 	bl	80022e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a4e      	ldr	r2, [pc, #312]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 800257c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800257e:	4a4d      	ldr	r2, [pc, #308]	@ (80026b4 <HAL_I2S_MspInit+0x25c>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002584:	e089      	b.n	800269a <HAL_I2S_MspInit+0x242>
  else if(hi2s->Instance==SPI3)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a4c      	ldr	r2, [pc, #304]	@ (80026bc <HAL_I2S_MspInit+0x264>)
 800258c:	4293      	cmp	r3, r2
 800258e:	f040 8084 	bne.w	800269a <HAL_I2S_MspInit+0x242>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	4b44      	ldr	r3, [pc, #272]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	4a43      	ldr	r2, [pc, #268]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 800259c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a2:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	4b3d      	ldr	r3, [pc, #244]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	4a3c      	ldr	r2, [pc, #240]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025be:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	4a35      	ldr	r2, [pc, #212]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025da:	4b33      	ldr	r3, [pc, #204]	@ (80026a8 <HAL_I2S_MspInit+0x250>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80025e6:	2310      	movs	r3, #16
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025f6:	2306      	movs	r3, #6
 80025f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80025fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025fe:	4619      	mov	r1, r3
 8002600:	482f      	ldr	r0, [pc, #188]	@ (80026c0 <HAL_I2S_MspInit+0x268>)
 8002602:	f000 ff6d 	bl	80034e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002606:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800260a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002618:	2306      	movs	r3, #6
 800261a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800261c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002620:	4619      	mov	r1, r3
 8002622:	4822      	ldr	r0, [pc, #136]	@ (80026ac <HAL_I2S_MspInit+0x254>)
 8002624:	f000 ff5c 	bl	80034e0 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002628:	4b26      	ldr	r3, [pc, #152]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 800262a:	4a27      	ldr	r2, [pc, #156]	@ (80026c8 <HAL_I2S_MspInit+0x270>)
 800262c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800262e:	4b25      	ldr	r3, [pc, #148]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 8002630:	2200      	movs	r2, #0
 8002632:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002634:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 8002636:	2240      	movs	r2, #64	@ 0x40
 8002638:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800263a:	4b22      	ldr	r3, [pc, #136]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002640:	4b20      	ldr	r3, [pc, #128]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 8002642:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002646:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002648:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 800264a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800264e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002650:	4b1c      	ldr	r3, [pc, #112]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 8002652:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002656:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002658:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 800265a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800265e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002660:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002666:	4b17      	ldr	r3, [pc, #92]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 8002668:	2204      	movs	r2, #4
 800266a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800266c:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 800266e:	2203      	movs	r2, #3
 8002670:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002672:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 8002674:	2200      	movs	r2, #0
 8002676:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002678:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800267e:	4811      	ldr	r0, [pc, #68]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 8002680:	f000 fbbe 	bl	8002e00 <HAL_DMA_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2S_MspInit+0x236>
      Error_Handler();
 800268a:	f7ff fe2b 	bl	80022e4 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a0c      	ldr	r2, [pc, #48]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 8002692:	639a      	str	r2, [r3, #56]	@ 0x38
 8002694:	4a0b      	ldr	r2, [pc, #44]	@ (80026c4 <HAL_I2S_MspInit+0x26c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800269a:	bf00      	nop
 800269c:	3738      	adds	r7, #56	@ 0x38
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40003800 	.word	0x40003800
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40020800 	.word	0x40020800
 80026b0:	40020400 	.word	0x40020400
 80026b4:	2000098c 	.word	0x2000098c
 80026b8:	40026058 	.word	0x40026058
 80026bc:	40003c00 	.word	0x40003c00
 80026c0:	40020000 	.word	0x40020000
 80026c4:	200009ec 	.word	0x200009ec
 80026c8:	40026088 	.word	0x40026088

080026cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	@ 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a19      	ldr	r2, [pc, #100]	@ (8002750 <HAL_SPI_MspInit+0x84>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d12b      	bne.n	8002746 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	4b18      	ldr	r3, [pc, #96]	@ (8002754 <HAL_SPI_MspInit+0x88>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	4a17      	ldr	r2, [pc, #92]	@ (8002754 <HAL_SPI_MspInit+0x88>)
 80026f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fe:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <HAL_SPI_MspInit+0x88>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <HAL_SPI_MspInit+0x88>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	4a10      	ldr	r2, [pc, #64]	@ (8002754 <HAL_SPI_MspInit+0x88>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6313      	str	r3, [r2, #48]	@ 0x30
 800271a:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <HAL_SPI_MspInit+0x88>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002726:	23e0      	movs	r3, #224	@ 0xe0
 8002728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	2300      	movs	r3, #0
 8002734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002736:	2305      	movs	r3, #5
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	4805      	ldr	r0, [pc, #20]	@ (8002758 <HAL_SPI_MspInit+0x8c>)
 8002742:	f000 fecd 	bl	80034e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	@ 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40013000 	.word	0x40013000
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000

0800275c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	@ 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a19      	ldr	r2, [pc, #100]	@ (80027e0 <HAL_UART_MspInit+0x84>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d12b      	bne.n	80027d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <HAL_UART_MspInit+0x88>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	4a17      	ldr	r2, [pc, #92]	@ (80027e4 <HAL_UART_MspInit+0x88>)
 8002788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800278c:	6413      	str	r3, [r2, #64]	@ 0x40
 800278e:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <HAL_UART_MspInit+0x88>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <HAL_UART_MspInit+0x88>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a10      	ldr	r2, [pc, #64]	@ (80027e4 <HAL_UART_MspInit+0x88>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <HAL_UART_MspInit+0x88>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027b6:	230c      	movs	r3, #12
 80027b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027c6:	2307      	movs	r3, #7
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	4805      	ldr	r0, [pc, #20]	@ (80027e8 <HAL_UART_MspInit+0x8c>)
 80027d2:	f000 fe85 	bl	80034e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027d6:	bf00      	nop
 80027d8:	3728      	adds	r7, #40	@ 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40004400 	.word	0x40004400
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40020000 	.word	0x40020000

080027ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <NMI_Handler+0x4>

080027f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <HardFault_Handler+0x4>

080027fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <MemManage_Handler+0x4>

08002804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002808:	bf00      	nop
 800280a:	e7fd      	b.n	8002808 <BusFault_Handler+0x4>

0800280c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <UsageFault_Handler+0x4>

08002814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002842:	f000 f96b 	bl	8002b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <DMA1_Stream3_IRQHandler+0x10>)
 8002852:	f000 fbdb 	bl	800300c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000098c 	.word	0x2000098c

08002860 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <DMA1_Stream5_IRQHandler+0x10>)
 8002866:	f000 fbd1 	bl	800300c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200009ec 	.word	0x200009ec

08002874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return 1;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <_kill>:

int _kill(int pid, int sig)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800288e:	f008 fa39 	bl	800ad04 <__errno>
 8002892:	4603      	mov	r3, r0
 8002894:	2216      	movs	r2, #22
 8002896:	601a      	str	r2, [r3, #0]
  return -1;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_exit>:

void _exit (int status)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ffe7 	bl	8002884 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028b6:	bf00      	nop
 80028b8:	e7fd      	b.n	80028b6 <_exit+0x12>

080028ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e00a      	b.n	80028e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028cc:	f3af 8000 	nop.w
 80028d0:	4601      	mov	r1, r0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	60ba      	str	r2, [r7, #8]
 80028d8:	b2ca      	uxtb	r2, r1
 80028da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3301      	adds	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	dbf0      	blt.n	80028cc <_read+0x12>
  }

  return len;
 80028ea:	687b      	ldr	r3, [r7, #4]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	e009      	b.n	800291a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	60ba      	str	r2, [r7, #8]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fc7a 	bl	8002208 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3301      	adds	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	429a      	cmp	r2, r3
 8002920:	dbf1      	blt.n	8002906 <_write+0x12>
  }
  return len;
 8002922:	687b      	ldr	r3, [r7, #4]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <_close>:

int _close(int file)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002954:	605a      	str	r2, [r3, #4]
  return 0;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <_isatty>:

int _isatty(int file)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800296c:	2301      	movs	r3, #1
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800299c:	4a14      	ldr	r2, [pc, #80]	@ (80029f0 <_sbrk+0x5c>)
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <_sbrk+0x60>)
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a8:	4b13      	ldr	r3, [pc, #76]	@ (80029f8 <_sbrk+0x64>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b0:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <_sbrk+0x64>)
 80029b2:	4a12      	ldr	r2, [pc, #72]	@ (80029fc <_sbrk+0x68>)
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b6:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d207      	bcs.n	80029d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c4:	f008 f99e 	bl	800ad04 <__errno>
 80029c8:	4603      	mov	r3, r0
 80029ca:	220c      	movs	r2, #12
 80029cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
 80029d2:	e009      	b.n	80029e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d4:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <_sbrk+0x64>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029da:	4b07      	ldr	r3, [pc, #28]	@ (80029f8 <_sbrk+0x64>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a05      	ldr	r2, [pc, #20]	@ (80029f8 <_sbrk+0x64>)
 80029e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e6:	68fb      	ldr	r3, [r7, #12]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20020000 	.word	0x20020000
 80029f4:	00000400 	.word	0x00000400
 80029f8:	20000f30 	.word	0x20000f30
 80029fc:	200010d8 	.word	0x200010d8

08002a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a04:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <SystemInit+0x20>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0a:	4a05      	ldr	r2, [pc, #20]	@ (8002a20 <SystemInit+0x20>)
 8002a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a28:	480d      	ldr	r0, [pc, #52]	@ (8002a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a2a:	490e      	ldr	r1, [pc, #56]	@ (8002a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a30:	e002      	b.n	8002a38 <LoopCopyDataInit>

08002a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a36:	3304      	adds	r3, #4

08002a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a3c:	d3f9      	bcc.n	8002a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a40:	4c0b      	ldr	r4, [pc, #44]	@ (8002a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a44:	e001      	b.n	8002a4a <LoopFillZerobss>

08002a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a48:	3204      	adds	r2, #4

08002a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a4c:	d3fb      	bcc.n	8002a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a4e:	f7ff ffd7 	bl	8002a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a52:	f008 f95d 	bl	800ad10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a56:	f7fe ff5f 	bl	8001918 <main>
  bx  lr    
 8002a5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a64:	2000060c 	.word	0x2000060c
  ldr r2, =_sidata
 8002a68:	0802c478 	.word	0x0802c478
  ldr r2, =_sbss
 8002a6c:	2000060c 	.word	0x2000060c
  ldr r4, =_ebss
 8002a70:	200010d8 	.word	0x200010d8

08002a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a74:	e7fe      	b.n	8002a74 <ADC_IRQHandler>
	...

08002a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab8 <HAL_Init+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <HAL_Init+0x40>)
 8002a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a88:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab8 <HAL_Init+0x40>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <HAL_Init+0x40>)
 8002a8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a94:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <HAL_Init+0x40>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a07      	ldr	r2, [pc, #28]	@ (8002ab8 <HAL_Init+0x40>)
 8002a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f000 f94f 	bl	8002d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f000 f808 	bl	8002abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aac:	f7ff fc20 	bl	80022f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00

08002abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac4:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <HAL_InitTick+0x54>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_InitTick+0x58>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f967 	bl	8002dae <HAL_SYSTICK_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00e      	b.n	8002b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0f      	cmp	r3, #15
 8002aee:	d80a      	bhi.n	8002b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af0:	2200      	movs	r2, #0
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f000 f92f 	bl	8002d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002afc:	4a06      	ldr	r2, [pc, #24]	@ (8002b18 <HAL_InitTick+0x5c>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000438 	.word	0x20000438
 8002b14:	20000440 	.word	0x20000440
 8002b18:	2000043c 	.word	0x2000043c

08002b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <HAL_IncTick+0x20>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_IncTick+0x24>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4a04      	ldr	r2, [pc, #16]	@ (8002b40 <HAL_IncTick+0x24>)
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000440 	.word	0x20000440
 8002b40:	20000f34 	.word	0x20000f34

08002b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return uwTick;
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_GetTick+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000f34 	.word	0x20000f34

08002b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b64:	f7ff ffee 	bl	8002b44 <HAL_GetTick>
 8002b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d005      	beq.n	8002b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <HAL_Delay+0x44>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b82:	bf00      	nop
 8002b84:	f7ff ffde 	bl	8002b44 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d8f7      	bhi.n	8002b84 <HAL_Delay+0x28>
  {
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000440 	.word	0x20000440

08002ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd6:	4a04      	ldr	r2, [pc, #16]	@ (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	60d3      	str	r3, [r2, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf0:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	f003 0307 	and.w	r3, r3, #7
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	db0b      	blt.n	8002c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4907      	ldr	r1, [pc, #28]	@ (8002c40 <__NVIC_EnableIRQ+0x38>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2001      	movs	r0, #1
 8002c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e100 	.word	0xe000e100

08002c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	db0a      	blt.n	8002c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	490c      	ldr	r1, [pc, #48]	@ (8002c90 <__NVIC_SetPriority+0x4c>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	0112      	lsls	r2, r2, #4
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	440b      	add	r3, r1
 8002c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c6c:	e00a      	b.n	8002c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4908      	ldr	r1, [pc, #32]	@ (8002c94 <__NVIC_SetPriority+0x50>)
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	3b04      	subs	r3, #4
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	440b      	add	r3, r1
 8002c82:	761a      	strb	r2, [r3, #24]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000e100 	.word	0xe000e100
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	@ 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f1c3 0307 	rsb	r3, r3, #7
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	bf28      	it	cs
 8002cb6:	2304      	movcs	r3, #4
 8002cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	2b06      	cmp	r3, #6
 8002cc0:	d902      	bls.n	8002cc8 <NVIC_EncodePriority+0x30>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3b03      	subs	r3, #3
 8002cc6:	e000      	b.n	8002cca <NVIC_EncodePriority+0x32>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	401a      	ands	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	43d9      	mvns	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	4313      	orrs	r3, r2
         );
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3724      	adds	r7, #36	@ 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d10:	d301      	bcc.n	8002d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00f      	b.n	8002d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d16:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <SysTick_Config+0x40>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1e:	210f      	movs	r1, #15
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	f7ff ff8e 	bl	8002c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <SysTick_Config+0x40>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2e:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <SysTick_Config+0x40>)
 8002d30:	2207      	movs	r2, #7
 8002d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	e000e010 	.word	0xe000e010

08002d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff29 	bl	8002ba4 <__NVIC_SetPriorityGrouping>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d6c:	f7ff ff3e 	bl	8002bec <__NVIC_GetPriorityGrouping>
 8002d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	6978      	ldr	r0, [r7, #20]
 8002d78:	f7ff ff8e 	bl	8002c98 <NVIC_EncodePriority>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff5d 	bl	8002c44 <__NVIC_SetPriority>
}
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff31 	bl	8002c08 <__NVIC_EnableIRQ>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ffa2 	bl	8002d00 <SysTick_Config>
 8002dbc:	4603      	mov	r3, r0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e00e      	b.n	8002df6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	795b      	ldrb	r3, [r3, #5]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d105      	bne.n	8002dee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff faa9 	bl	8002340 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7ff fe9a 	bl	8002b44 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e099      	b.n	8002f50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e3c:	e00f      	b.n	8002e5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e3e:	f7ff fe81 	bl	8002b44 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d908      	bls.n	8002e5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2203      	movs	r2, #3
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e078      	b.n	8002f50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e8      	bne.n	8002e3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4b38      	ldr	r3, [pc, #224]	@ (8002f58 <HAL_DMA_Init+0x158>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d107      	bne.n	8002ec8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f023 0307 	bic.w	r3, r3, #7
 8002ede:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d117      	bne.n	8002f22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00e      	beq.n	8002f22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fa6f 	bl	80033e8 <DMA_CheckFifoParam>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2240      	movs	r2, #64	@ 0x40
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e016      	b.n	8002f50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fa26 	bl	800337c <DMA_CalcBaseAndBitshift>
 8002f30:	4603      	mov	r3, r0
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f38:	223f      	movs	r2, #63	@ 0x3f
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	f010803f 	.word	0xf010803f

08002f5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_DMA_Start_IT+0x26>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e040      	b.n	8003004 <HAL_DMA_Start_IT+0xa8>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d12f      	bne.n	8002ff6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f9b8 	bl	8003320 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	223f      	movs	r2, #63	@ 0x3f
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0216 	orr.w	r2, r2, #22
 8002fca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0208 	orr.w	r2, r2, #8
 8002fe2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e005      	b.n	8003002 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
 8003000:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003002:	7dfb      	ldrb	r3, [r7, #23]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003018:	4b8e      	ldr	r3, [pc, #568]	@ (8003254 <HAL_DMA_IRQHandler+0x248>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a8e      	ldr	r2, [pc, #568]	@ (8003258 <HAL_DMA_IRQHandler+0x24c>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0a9b      	lsrs	r3, r3, #10
 8003024:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	2208      	movs	r2, #8
 8003038:	409a      	lsls	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01a      	beq.n	8003078 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0204 	bic.w	r2, r2, #4
 800305e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003064:	2208      	movs	r2, #8
 8003066:	409a      	lsls	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	2201      	movs	r2, #1
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d012      	beq.n	80030ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	2201      	movs	r2, #1
 800309c:	409a      	lsls	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a6:	f043 0202 	orr.w	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b2:	2204      	movs	r2, #4
 80030b4:	409a      	lsls	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d012      	beq.n	80030e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d0:	2204      	movs	r2, #4
 80030d2:	409a      	lsls	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	f043 0204 	orr.w	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e8:	2210      	movs	r2, #16
 80030ea:	409a      	lsls	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d043      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d03c      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	2210      	movs	r2, #16
 8003108:	409a      	lsls	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d018      	beq.n	800314e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d108      	bne.n	800313c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d024      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
 800313a:	e01f      	b.n	800317c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
 800314c:	e016      	b.n	800317c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d107      	bne.n	800316c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0208 	bic.w	r2, r2, #8
 800316a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	2220      	movs	r2, #32
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 808f 	beq.w	80032ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8087 	beq.w	80032ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a2:	2220      	movs	r2, #32
 80031a4:	409a      	lsls	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d136      	bne.n	8003224 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0216 	bic.w	r2, r2, #22
 80031c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <HAL_DMA_IRQHandler+0x1da>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0208 	bic.w	r2, r2, #8
 80031f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	223f      	movs	r2, #63	@ 0x3f
 80031fc:	409a      	lsls	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003216:	2b00      	cmp	r3, #0
 8003218:	d07e      	beq.n	8003318 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
        }
        return;
 8003222:	e079      	b.n	8003318 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01d      	beq.n	800326e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10d      	bne.n	800325c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003244:	2b00      	cmp	r3, #0
 8003246:	d031      	beq.n	80032ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
 8003250:	e02c      	b.n	80032ac <HAL_DMA_IRQHandler+0x2a0>
 8003252:	bf00      	nop
 8003254:	20000438 	.word	0x20000438
 8003258:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d023      	beq.n	80032ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
 800326c:	e01e      	b.n	80032ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10f      	bne.n	800329c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0210 	bic.w	r2, r2, #16
 800328a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d032      	beq.n	800331a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d022      	beq.n	8003306 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2205      	movs	r2, #5
 80032c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	3301      	adds	r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d307      	bcc.n	80032f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f2      	bne.n	80032d8 <HAL_DMA_IRQHandler+0x2cc>
 80032f2:	e000      	b.n	80032f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
 8003316:	e000      	b.n	800331a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003318:	bf00      	nop
    }
  }
}
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800333c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b40      	cmp	r3, #64	@ 0x40
 800334c:	d108      	bne.n	8003360 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800335e:	e007      	b.n	8003370 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	60da      	str	r2, [r3, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	3b10      	subs	r3, #16
 800338c:	4a14      	ldr	r2, [pc, #80]	@ (80033e0 <DMA_CalcBaseAndBitshift+0x64>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003396:	4a13      	ldr	r2, [pc, #76]	@ (80033e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d909      	bls.n	80033be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	1d1a      	adds	r2, r3, #4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80033bc:	e007      	b.n	80033ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	aaaaaaab 	.word	0xaaaaaaab
 80033e4:	0800ebb0 	.word	0x0800ebb0

080033e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11f      	bne.n	8003442 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d856      	bhi.n	80034b6 <DMA_CheckFifoParam+0xce>
 8003408:	a201      	add	r2, pc, #4	@ (adr r2, 8003410 <DMA_CheckFifoParam+0x28>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003421 	.word	0x08003421
 8003414:	08003433 	.word	0x08003433
 8003418:	08003421 	.word	0x08003421
 800341c:	080034b7 	.word	0x080034b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d046      	beq.n	80034ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e043      	b.n	80034ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800343a:	d140      	bne.n	80034be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003440:	e03d      	b.n	80034be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344a:	d121      	bne.n	8003490 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d837      	bhi.n	80034c2 <DMA_CheckFifoParam+0xda>
 8003452:	a201      	add	r2, pc, #4	@ (adr r2, 8003458 <DMA_CheckFifoParam+0x70>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	08003469 	.word	0x08003469
 800345c:	0800346f 	.word	0x0800346f
 8003460:	08003469 	.word	0x08003469
 8003464:	08003481 	.word	0x08003481
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      break;
 800346c:	e030      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003472:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d025      	beq.n	80034c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347e:	e022      	b.n	80034c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003488:	d11f      	bne.n	80034ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800348e:	e01c      	b.n	80034ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d903      	bls.n	800349e <DMA_CheckFifoParam+0xb6>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d003      	beq.n	80034a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800349c:	e018      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
      break;
 80034a2:	e015      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00e      	beq.n	80034ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      break;
 80034b4:	e00b      	b.n	80034ce <DMA_CheckFifoParam+0xe6>
      break;
 80034b6:	bf00      	nop
 80034b8:	e00a      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034ba:	bf00      	nop
 80034bc:	e008      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034be:	bf00      	nop
 80034c0:	e006      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034c2:	bf00      	nop
 80034c4:	e004      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034ce:	bf00      	nop
    }
  } 
  
  return status; 
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop

080034e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	@ 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	e16b      	b.n	80037d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034fc:	2201      	movs	r2, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	f040 815a 	bne.w	80037ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d005      	beq.n	8003532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352e:	2b02      	cmp	r3, #2
 8003530:	d130      	bne.n	8003594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003568:	2201      	movs	r2, #1
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 0201 	and.w	r2, r3, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b03      	cmp	r3, #3
 800359e:	d017      	beq.n	80035d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d123      	bne.n	8003624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	08da      	lsrs	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3208      	adds	r2, #8
 80035e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	220f      	movs	r2, #15
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	08da      	lsrs	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3208      	adds	r2, #8
 800361e:	69b9      	ldr	r1, [r7, #24]
 8003620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	2203      	movs	r2, #3
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0203 	and.w	r2, r3, #3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80b4 	beq.w	80037ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b60      	ldr	r3, [pc, #384]	@ (80037ec <HAL_GPIO_Init+0x30c>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	4a5f      	ldr	r2, [pc, #380]	@ (80037ec <HAL_GPIO_Init+0x30c>)
 8003670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003674:	6453      	str	r3, [r2, #68]	@ 0x44
 8003676:	4b5d      	ldr	r3, [pc, #372]	@ (80037ec <HAL_GPIO_Init+0x30c>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003682:	4a5b      	ldr	r2, [pc, #364]	@ (80037f0 <HAL_GPIO_Init+0x310>)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	3302      	adds	r3, #2
 800368a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	220f      	movs	r2, #15
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a52      	ldr	r2, [pc, #328]	@ (80037f4 <HAL_GPIO_Init+0x314>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02b      	beq.n	8003706 <HAL_GPIO_Init+0x226>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a51      	ldr	r2, [pc, #324]	@ (80037f8 <HAL_GPIO_Init+0x318>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d025      	beq.n	8003702 <HAL_GPIO_Init+0x222>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a50      	ldr	r2, [pc, #320]	@ (80037fc <HAL_GPIO_Init+0x31c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01f      	beq.n	80036fe <HAL_GPIO_Init+0x21e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003800 <HAL_GPIO_Init+0x320>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d019      	beq.n	80036fa <HAL_GPIO_Init+0x21a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003804 <HAL_GPIO_Init+0x324>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_GPIO_Init+0x216>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003808 <HAL_GPIO_Init+0x328>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00d      	beq.n	80036f2 <HAL_GPIO_Init+0x212>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4c      	ldr	r2, [pc, #304]	@ (800380c <HAL_GPIO_Init+0x32c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <HAL_GPIO_Init+0x20e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003810 <HAL_GPIO_Init+0x330>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_GPIO_Init+0x20a>
 80036e6:	2307      	movs	r3, #7
 80036e8:	e00e      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036ea:	2308      	movs	r3, #8
 80036ec:	e00c      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036ee:	2306      	movs	r3, #6
 80036f0:	e00a      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036f2:	2305      	movs	r3, #5
 80036f4:	e008      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036f6:	2304      	movs	r3, #4
 80036f8:	e006      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036fa:	2303      	movs	r3, #3
 80036fc:	e004      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036fe:	2302      	movs	r3, #2
 8003700:	e002      	b.n	8003708 <HAL_GPIO_Init+0x228>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_GPIO_Init+0x228>
 8003706:	2300      	movs	r3, #0
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	f002 0203 	and.w	r2, r2, #3
 800370e:	0092      	lsls	r2, r2, #2
 8003710:	4093      	lsls	r3, r2
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003718:	4935      	ldr	r1, [pc, #212]	@ (80037f0 <HAL_GPIO_Init+0x310>)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003726:	4b3b      	ldr	r3, [pc, #236]	@ (8003814 <HAL_GPIO_Init+0x334>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800374a:	4a32      	ldr	r2, [pc, #200]	@ (8003814 <HAL_GPIO_Init+0x334>)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003750:	4b30      	ldr	r3, [pc, #192]	@ (8003814 <HAL_GPIO_Init+0x334>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003774:	4a27      	ldr	r2, [pc, #156]	@ (8003814 <HAL_GPIO_Init+0x334>)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800377a:	4b26      	ldr	r3, [pc, #152]	@ (8003814 <HAL_GPIO_Init+0x334>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800379e:	4a1d      	ldr	r2, [pc, #116]	@ (8003814 <HAL_GPIO_Init+0x334>)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <HAL_GPIO_Init+0x334>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037c8:	4a12      	ldr	r2, [pc, #72]	@ (8003814 <HAL_GPIO_Init+0x334>)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3301      	adds	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b0f      	cmp	r3, #15
 80037d8:	f67f ae90 	bls.w	80034fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3724      	adds	r7, #36	@ 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40013800 	.word	0x40013800
 80037f4:	40020000 	.word	0x40020000
 80037f8:	40020400 	.word	0x40020400
 80037fc:	40020800 	.word	0x40020800
 8003800:	40020c00 	.word	0x40020c00
 8003804:	40021000 	.word	0x40021000
 8003808:	40021400 	.word	0x40021400
 800380c:	40021800 	.word	0x40021800
 8003810:	40021c00 	.word	0x40021c00
 8003814:	40013c00 	.word	0x40013c00

08003818 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e0cd      	b.n	80039d0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003834:	2201      	movs	r2, #1
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	429a      	cmp	r2, r3
 800384c:	f040 80bd 	bne.w	80039ca <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003850:	4a65      	ldr	r2, [pc, #404]	@ (80039e8 <HAL_GPIO_DeInit+0x1d0>)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	3302      	adds	r3, #2
 8003858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	4013      	ands	r3, r2
 8003870:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a5d      	ldr	r2, [pc, #372]	@ (80039ec <HAL_GPIO_DeInit+0x1d4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d02b      	beq.n	80038d2 <HAL_GPIO_DeInit+0xba>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a5c      	ldr	r2, [pc, #368]	@ (80039f0 <HAL_GPIO_DeInit+0x1d8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d025      	beq.n	80038ce <HAL_GPIO_DeInit+0xb6>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a5b      	ldr	r2, [pc, #364]	@ (80039f4 <HAL_GPIO_DeInit+0x1dc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01f      	beq.n	80038ca <HAL_GPIO_DeInit+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a5a      	ldr	r2, [pc, #360]	@ (80039f8 <HAL_GPIO_DeInit+0x1e0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d019      	beq.n	80038c6 <HAL_GPIO_DeInit+0xae>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a59      	ldr	r2, [pc, #356]	@ (80039fc <HAL_GPIO_DeInit+0x1e4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_GPIO_DeInit+0xaa>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a58      	ldr	r2, [pc, #352]	@ (8003a00 <HAL_GPIO_DeInit+0x1e8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00d      	beq.n	80038be <HAL_GPIO_DeInit+0xa6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a57      	ldr	r2, [pc, #348]	@ (8003a04 <HAL_GPIO_DeInit+0x1ec>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <HAL_GPIO_DeInit+0xa2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a56      	ldr	r2, [pc, #344]	@ (8003a08 <HAL_GPIO_DeInit+0x1f0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_GPIO_DeInit+0x9e>
 80038b2:	2307      	movs	r3, #7
 80038b4:	e00e      	b.n	80038d4 <HAL_GPIO_DeInit+0xbc>
 80038b6:	2308      	movs	r3, #8
 80038b8:	e00c      	b.n	80038d4 <HAL_GPIO_DeInit+0xbc>
 80038ba:	2306      	movs	r3, #6
 80038bc:	e00a      	b.n	80038d4 <HAL_GPIO_DeInit+0xbc>
 80038be:	2305      	movs	r3, #5
 80038c0:	e008      	b.n	80038d4 <HAL_GPIO_DeInit+0xbc>
 80038c2:	2304      	movs	r3, #4
 80038c4:	e006      	b.n	80038d4 <HAL_GPIO_DeInit+0xbc>
 80038c6:	2303      	movs	r3, #3
 80038c8:	e004      	b.n	80038d4 <HAL_GPIO_DeInit+0xbc>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e002      	b.n	80038d4 <HAL_GPIO_DeInit+0xbc>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_GPIO_DeInit+0xbc>
 80038d2:	2300      	movs	r3, #0
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	f002 0203 	and.w	r2, r2, #3
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	4093      	lsls	r3, r2
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d132      	bne.n	800394a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038e4:	4b49      	ldr	r3, [pc, #292]	@ (8003a0c <HAL_GPIO_DeInit+0x1f4>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	4947      	ldr	r1, [pc, #284]	@ (8003a0c <HAL_GPIO_DeInit+0x1f4>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038f2:	4b46      	ldr	r3, [pc, #280]	@ (8003a0c <HAL_GPIO_DeInit+0x1f4>)
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	4944      	ldr	r1, [pc, #272]	@ (8003a0c <HAL_GPIO_DeInit+0x1f4>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003900:	4b42      	ldr	r3, [pc, #264]	@ (8003a0c <HAL_GPIO_DeInit+0x1f4>)
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43db      	mvns	r3, r3
 8003908:	4940      	ldr	r1, [pc, #256]	@ (8003a0c <HAL_GPIO_DeInit+0x1f4>)
 800390a:	4013      	ands	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800390e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a0c <HAL_GPIO_DeInit+0x1f4>)
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	43db      	mvns	r3, r3
 8003916:	493d      	ldr	r1, [pc, #244]	@ (8003a0c <HAL_GPIO_DeInit+0x1f4>)
 8003918:	4013      	ands	r3, r2
 800391a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	220f      	movs	r2, #15
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800392c:	4a2e      	ldr	r2, [pc, #184]	@ (80039e8 <HAL_GPIO_DeInit+0x1d0>)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	3302      	adds	r3, #2
 8003934:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	43da      	mvns	r2, r3
 800393c:	482a      	ldr	r0, [pc, #168]	@ (80039e8 <HAL_GPIO_DeInit+0x1d0>)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	400a      	ands	r2, r1
 8003944:	3302      	adds	r3, #2
 8003946:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2103      	movs	r1, #3
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	401a      	ands	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	08da      	lsrs	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3208      	adds	r2, #8
 8003968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	220f      	movs	r2, #15
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	08d2      	lsrs	r2, r2, #3
 8003980:	4019      	ands	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3208      	adds	r2, #8
 8003986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	2103      	movs	r1, #3
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	401a      	ands	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	2101      	movs	r1, #1
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	401a      	ands	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	2103      	movs	r1, #3
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	401a      	ands	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	3301      	adds	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	f67f af2e 	bls.w	8003834 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40013800 	.word	0x40013800
 80039ec:	40020000 	.word	0x40020000
 80039f0:	40020400 	.word	0x40020400
 80039f4:	40020800 	.word	0x40020800
 80039f8:	40020c00 	.word	0x40020c00
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40021400 	.word	0x40021400
 8003a04:	40021800 	.word	0x40021800
 8003a08:	40021c00 	.word	0x40021c00
 8003a0c:	40013c00 	.word	0x40013c00

08003a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	807b      	strh	r3, [r7, #2]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a20:	787b      	ldrb	r3, [r7, #1]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a26:	887a      	ldrh	r2, [r7, #2]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a2c:	e003      	b.n	8003a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a2e:	887b      	ldrh	r3, [r7, #2]
 8003a30:	041a      	lsls	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	619a      	str	r2, [r3, #24]
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a4e:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a5a:	4a05      	ldr	r2, [pc, #20]	@ (8003a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fc2a 	bl	80022bc <HAL_GPIO_EXTI_Callback>
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40013c00 	.word	0x40013c00

08003a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e12b      	b.n	8003cde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fe fc72 	bl	8002384 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2224      	movs	r2, #36	@ 0x24
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ac6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ad6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ad8:	f002 faae 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8003adc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4a81      	ldr	r2, [pc, #516]	@ (8003ce8 <HAL_I2C_Init+0x274>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d807      	bhi.n	8003af8 <HAL_I2C_Init+0x84>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4a80      	ldr	r2, [pc, #512]	@ (8003cec <HAL_I2C_Init+0x278>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	bf94      	ite	ls
 8003af0:	2301      	movls	r3, #1
 8003af2:	2300      	movhi	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e006      	b.n	8003b06 <HAL_I2C_Init+0x92>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a7d      	ldr	r2, [pc, #500]	@ (8003cf0 <HAL_I2C_Init+0x27c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	bf94      	ite	ls
 8003b00:	2301      	movls	r3, #1
 8003b02:	2300      	movhi	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e0e7      	b.n	8003cde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a78      	ldr	r2, [pc, #480]	@ (8003cf4 <HAL_I2C_Init+0x280>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0c9b      	lsrs	r3, r3, #18
 8003b18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ce8 <HAL_I2C_Init+0x274>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d802      	bhi.n	8003b48 <HAL_I2C_Init+0xd4>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3301      	adds	r3, #1
 8003b46:	e009      	b.n	8003b5c <HAL_I2C_Init+0xe8>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	4a69      	ldr	r2, [pc, #420]	@ (8003cf8 <HAL_I2C_Init+0x284>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	099b      	lsrs	r3, r3, #6
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	495c      	ldr	r1, [pc, #368]	@ (8003ce8 <HAL_I2C_Init+0x274>)
 8003b78:	428b      	cmp	r3, r1
 8003b7a:	d819      	bhi.n	8003bb0 <HAL_I2C_Init+0x13c>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1e59      	subs	r1, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b8a:	1c59      	adds	r1, r3, #1
 8003b8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b90:	400b      	ands	r3, r1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_I2C_Init+0x138>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1e59      	subs	r1, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003baa:	e051      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003bac:	2304      	movs	r3, #4
 8003bae:	e04f      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d111      	bne.n	8003bdc <HAL_I2C_Init+0x168>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1e58      	subs	r0, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	440b      	add	r3, r1
 8003bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e012      	b.n	8003c02 <HAL_I2C_Init+0x18e>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1e58      	subs	r0, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	0099      	lsls	r1, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_I2C_Init+0x196>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e022      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10e      	bne.n	8003c30 <HAL_I2C_Init+0x1bc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1e58      	subs	r0, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6859      	ldr	r1, [r3, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	440b      	add	r3, r1
 8003c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c24:	3301      	adds	r3, #1
 8003c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c2e:	e00f      	b.n	8003c50 <HAL_I2C_Init+0x1dc>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1e58      	subs	r0, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	0099      	lsls	r1, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c46:	3301      	adds	r3, #1
 8003c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	6809      	ldr	r1, [r1, #0]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6911      	ldr	r1, [r2, #16]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68d2      	ldr	r2, [r2, #12]
 8003c8a:	4311      	orrs	r1, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	000186a0 	.word	0x000186a0
 8003cec:	001e847f 	.word	0x001e847f
 8003cf0:	003d08ff 	.word	0x003d08ff
 8003cf4:	431bde83 	.word	0x431bde83
 8003cf8:	10624dd3 	.word	0x10624dd3

08003cfc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e021      	b.n	8003d52 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2224      	movs	r2, #36	@ 0x24
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fe fb74 	bl	8002414 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	4608      	mov	r0, r1
 8003d66:	4611      	mov	r1, r2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	817b      	strh	r3, [r7, #10]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	813b      	strh	r3, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d76:	f7fe fee5 	bl	8002b44 <HAL_GetTick>
 8003d7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	f040 80d9 	bne.w	8003f3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2319      	movs	r3, #25
 8003d90:	2201      	movs	r2, #1
 8003d92:	496d      	ldr	r1, [pc, #436]	@ (8003f48 <HAL_I2C_Mem_Write+0x1ec>)
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fc8d 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
 8003da2:	e0cc      	b.n	8003f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_I2C_Mem_Write+0x56>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e0c5      	b.n	8003f3e <HAL_I2C_Mem_Write+0x1e2>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d007      	beq.n	8003dd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003de6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2221      	movs	r2, #33	@ 0x21
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2240      	movs	r2, #64	@ 0x40
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a3a      	ldr	r2, [r7, #32]
 8003e02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a4d      	ldr	r2, [pc, #308]	@ (8003f4c <HAL_I2C_Mem_Write+0x1f0>)
 8003e18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e1a:	88f8      	ldrh	r0, [r7, #6]
 8003e1c:	893a      	ldrh	r2, [r7, #8]
 8003e1e:	8979      	ldrh	r1, [r7, #10]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	4603      	mov	r3, r0
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fac4 	bl	80043b8 <I2C_RequestMemoryWrite>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d052      	beq.n	8003edc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e081      	b.n	8003f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fd0e 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00d      	beq.n	8003e66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d107      	bne.n	8003e62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e06b      	b.n	8003f3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	781a      	ldrb	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d11b      	bne.n	8003edc <HAL_I2C_Mem_Write+0x180>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d017      	beq.n	8003edc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	781a      	ldrb	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1aa      	bne.n	8003e3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fcfa 	bl	80048e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d107      	bne.n	8003f0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e016      	b.n	8003f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	00100002 	.word	0x00100002
 8003f4c:	ffff0000 	.word	0xffff0000

08003f50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08c      	sub	sp, #48	@ 0x30
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	4608      	mov	r0, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	817b      	strh	r3, [r7, #10]
 8003f62:	460b      	mov	r3, r1
 8003f64:	813b      	strh	r3, [r7, #8]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f6a:	f7fe fdeb 	bl	8002b44 <HAL_GetTick>
 8003f6e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	f040 8208 	bne.w	800438e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	2319      	movs	r3, #25
 8003f84:	2201      	movs	r2, #1
 8003f86:	497b      	ldr	r1, [pc, #492]	@ (8004174 <HAL_I2C_Mem_Read+0x224>)
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fb93 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
 8003f96:	e1fb      	b.n	8004390 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_I2C_Mem_Read+0x56>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e1f4      	b.n	8004390 <HAL_I2C_Mem_Read+0x440>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d007      	beq.n	8003fcc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2222      	movs	r2, #34	@ 0x22
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2240      	movs	r2, #64	@ 0x40
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4a5b      	ldr	r2, [pc, #364]	@ (8004178 <HAL_I2C_Mem_Read+0x228>)
 800400c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800400e:	88f8      	ldrh	r0, [r7, #6]
 8004010:	893a      	ldrh	r2, [r7, #8]
 8004012:	8979      	ldrh	r1, [r7, #10]
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	4603      	mov	r3, r0
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fa60 	bl	80044e4 <I2C_RequestMemoryRead>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e1b0      	b.n	8004390 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004032:	2b00      	cmp	r3, #0
 8004034:	d113      	bne.n	800405e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004036:	2300      	movs	r3, #0
 8004038:	623b      	str	r3, [r7, #32]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	623b      	str	r3, [r7, #32]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	623b      	str	r3, [r7, #32]
 800404a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	e184      	b.n	8004368 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004062:	2b01      	cmp	r3, #1
 8004064:	d11b      	bne.n	800409e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004074:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	e164      	b.n	8004368 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d11b      	bne.n	80040de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c6:	2300      	movs	r3, #0
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	e144      	b.n	8004368 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040f4:	e138      	b.n	8004368 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	f200 80f1 	bhi.w	80042e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004104:	2b01      	cmp	r3, #1
 8004106:	d123      	bne.n	8004150 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fc29 	bl	8004964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e139      	b.n	8004390 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800414e:	e10b      	b.n	8004368 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004154:	2b02      	cmp	r3, #2
 8004156:	d14e      	bne.n	80041f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415e:	2200      	movs	r2, #0
 8004160:	4906      	ldr	r1, [pc, #24]	@ (800417c <HAL_I2C_Mem_Read+0x22c>)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 faa6 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e10e      	b.n	8004390 <HAL_I2C_Mem_Read+0x440>
 8004172:	bf00      	nop
 8004174:	00100002 	.word	0x00100002
 8004178:	ffff0000 	.word	0xffff0000
 800417c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800418e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041f4:	e0b8      	b.n	8004368 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fc:	2200      	movs	r2, #0
 80041fe:	4966      	ldr	r1, [pc, #408]	@ (8004398 <HAL_I2C_Mem_Read+0x448>)
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fa57 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0bf      	b.n	8004390 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800421e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004258:	2200      	movs	r2, #0
 800425a:	494f      	ldr	r1, [pc, #316]	@ (8004398 <HAL_I2C_Mem_Read+0x448>)
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fa29 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e091      	b.n	8004390 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800427a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042e0:	e042      	b.n	8004368 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fb3c 	bl	8004964 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e04c      	b.n	8004390 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b04      	cmp	r3, #4
 8004334:	d118      	bne.n	8004368 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	f47f aec2 	bne.w	80040f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	e000      	b.n	8004390 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
  }
}
 8004390:	4618      	mov	r0, r3
 8004392:	3728      	adds	r7, #40	@ 0x28
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	00010004 	.word	0x00010004

0800439c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043aa:	b2db      	uxtb	r3, r3
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	4608      	mov	r0, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	461a      	mov	r2, r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	817b      	strh	r3, [r7, #10]
 80043ca:	460b      	mov	r3, r1
 80043cc:	813b      	strh	r3, [r7, #8]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f960 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004408:	d103      	bne.n	8004412 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004410:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e05f      	b.n	80044d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004424:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	6a3a      	ldr	r2, [r7, #32]
 800442a:	492d      	ldr	r1, [pc, #180]	@ (80044e0 <I2C_RequestMemoryWrite+0x128>)
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f998 	bl	8004762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e04c      	b.n	80044d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004454:	6a39      	ldr	r1, [r7, #32]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fa02 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	2b04      	cmp	r3, #4
 8004468:	d107      	bne.n	800447a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004478:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e02b      	b.n	80044d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004484:	893b      	ldrh	r3, [r7, #8]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	611a      	str	r2, [r3, #16]
 800448e:	e021      	b.n	80044d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004490:	893b      	ldrh	r3, [r7, #8]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	b29b      	uxth	r3, r3
 8004496:	b2da      	uxtb	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a0:	6a39      	ldr	r1, [r7, #32]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f9dc 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d107      	bne.n	80044c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e005      	b.n	80044d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ca:	893b      	ldrh	r3, [r7, #8]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	00010002 	.word	0x00010002

080044e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	4608      	mov	r0, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	817b      	strh	r3, [r7, #10]
 80044f6:	460b      	mov	r3, r1
 80044f8:	813b      	strh	r3, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800450c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800451c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	2200      	movs	r2, #0
 8004526:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f8c2 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00d      	beq.n	8004552 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004544:	d103      	bne.n	800454e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e0aa      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004552:	897b      	ldrh	r3, [r7, #10]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	6a3a      	ldr	r2, [r7, #32]
 8004566:	4952      	ldr	r1, [pc, #328]	@ (80046b0 <I2C_RequestMemoryRead+0x1cc>)
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f8fa 	bl	8004762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e097      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004590:	6a39      	ldr	r1, [r7, #32]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f964 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d107      	bne.n	80045b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e076      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d105      	bne.n	80045cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c0:	893b      	ldrh	r3, [r7, #8]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	611a      	str	r2, [r3, #16]
 80045ca:	e021      	b.n	8004610 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045cc:	893b      	ldrh	r3, [r7, #8]
 80045ce:	0a1b      	lsrs	r3, r3, #8
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045dc:	6a39      	ldr	r1, [r7, #32]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f93e 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d107      	bne.n	8004602 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e050      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004606:	893b      	ldrh	r3, [r7, #8]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004612:	6a39      	ldr	r1, [r7, #32]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f923 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00d      	beq.n	800463c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	2b04      	cmp	r3, #4
 8004626:	d107      	bne.n	8004638 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004636:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e035      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800464a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	2200      	movs	r2, #0
 8004654:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f82b 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004672:	d103      	bne.n	800467c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800467a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e013      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004680:	897b      	ldrh	r3, [r7, #10]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	b2da      	uxtb	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	6a3a      	ldr	r2, [r7, #32]
 8004694:	4906      	ldr	r1, [pc, #24]	@ (80046b0 <I2C_RequestMemoryRead+0x1cc>)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f863 	bl	8004762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	00010002 	.word	0x00010002

080046b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c4:	e025      	b.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d021      	beq.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ce:	f7fe fa39 	bl	8002b44 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d302      	bcc.n	80046e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d116      	bne.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	f043 0220 	orr.w	r2, r3, #32
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e023      	b.n	800475a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	0c1b      	lsrs	r3, r3, #16
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	d10d      	bne.n	8004738 <I2C_WaitOnFlagUntilTimeout+0x84>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	43da      	mvns	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4013      	ands	r3, r2
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	bf0c      	ite	eq
 800472e:	2301      	moveq	r3, #1
 8004730:	2300      	movne	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	e00c      	b.n	8004752 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	43da      	mvns	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4013      	ands	r3, r2
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	bf0c      	ite	eq
 800474a:	2301      	moveq	r3, #1
 800474c:	2300      	movne	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	429a      	cmp	r2, r3
 8004756:	d0b6      	beq.n	80046c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	607a      	str	r2, [r7, #4]
 800476e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004770:	e051      	b.n	8004816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004780:	d123      	bne.n	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004790:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800479a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	f043 0204 	orr.w	r2, r3, #4
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e046      	b.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d021      	beq.n	8004816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d2:	f7fe f9b7 	bl	8002b44 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d302      	bcc.n	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d116      	bne.n	8004816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e020      	b.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	0c1b      	lsrs	r3, r3, #16
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10c      	bne.n	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	43da      	mvns	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4013      	ands	r3, r2
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	e00b      	b.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	43da      	mvns	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4013      	ands	r3, r2
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d18d      	bne.n	8004772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800486c:	e02d      	b.n	80048ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f8ce 	bl	8004a10 <I2C_IsAcknowledgeFailed>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e02d      	b.n	80048da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d021      	beq.n	80048ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004886:	f7fe f95d 	bl	8002b44 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	429a      	cmp	r2, r3
 8004894:	d302      	bcc.n	800489c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d116      	bne.n	80048ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e007      	b.n	80048da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d4:	2b80      	cmp	r3, #128	@ 0x80
 80048d6:	d1ca      	bne.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ee:	e02d      	b.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f88d 	bl	8004a10 <I2C_IsAcknowledgeFailed>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e02d      	b.n	800495c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d021      	beq.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004908:	f7fe f91c 	bl	8002b44 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	429a      	cmp	r2, r3
 8004916:	d302      	bcc.n	800491e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d116      	bne.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e007      	b.n	800495c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b04      	cmp	r3, #4
 8004958:	d1ca      	bne.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004970:	e042      	b.n	80049f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b10      	cmp	r3, #16
 800497e:	d119      	bne.n	80049b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0210 	mvn.w	r2, #16
 8004988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e029      	b.n	8004a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b4:	f7fe f8c6 	bl	8002b44 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d302      	bcc.n	80049ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d116      	bne.n	80049f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	f043 0220 	orr.w	r2, r3, #32
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e007      	b.n	8004a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a02:	2b40      	cmp	r3, #64	@ 0x40
 8004a04:	d1b5      	bne.n	8004972 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a26:	d11b      	bne.n	8004a60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	f043 0204 	orr.w	r2, r3, #4
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e128      	b.n	8004cd4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a90      	ldr	r2, [pc, #576]	@ (8004cdc <HAL_I2S_Init+0x26c>)
 8004a9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fd fcdb 	bl	8002458 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004ab8:	f023 030f 	bic.w	r3, r3, #15
 8004abc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d060      	beq.n	8004b90 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d102      	bne.n	8004adc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ad6:	2310      	movs	r3, #16
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	e001      	b.n	8004ae0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004adc:	2320      	movs	r3, #32
 8004ade:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d802      	bhi.n	8004aee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004aee:	2001      	movs	r0, #1
 8004af0:	f001 fbac 	bl	800624c <HAL_RCCEx_GetPeriphCLKFreq>
 8004af4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004afe:	d125      	bne.n	8004b4c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d010      	beq.n	8004b2a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	3305      	adds	r3, #5
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	e01f      	b.n	8004b6a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b46:	3305      	adds	r3, #5
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	e00e      	b.n	8004b6a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b66:	3305      	adds	r3, #5
 8004b68:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ce0 <HAL_I2S_Init+0x270>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	08db      	lsrs	r3, r3, #3
 8004b74:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e003      	b.n	8004b98 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b90:	2302      	movs	r3, #2
 8004b92:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d902      	bls.n	8004ba4 <HAL_I2S_Init+0x134>
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	2bff      	cmp	r3, #255	@ 0xff
 8004ba2:	d907      	bls.n	8004bb4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba8:	f043 0210 	orr.w	r2, r3, #16
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e08f      	b.n	8004cd4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	ea42 0103 	orr.w	r1, r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004bd2:	f023 030f 	bic.w	r3, r3, #15
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6851      	ldr	r1, [r2, #4]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6892      	ldr	r2, [r2, #8]
 8004bde:	4311      	orrs	r1, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	68d2      	ldr	r2, [r2, #12]
 8004be4:	4311      	orrs	r1, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6992      	ldr	r2, [r2, #24]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d161      	bne.n	8004cc4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a38      	ldr	r2, [pc, #224]	@ (8004ce4 <HAL_I2S_Init+0x274>)
 8004c04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a37      	ldr	r2, [pc, #220]	@ (8004ce8 <HAL_I2S_Init+0x278>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d101      	bne.n	8004c14 <HAL_I2S_Init+0x1a4>
 8004c10:	4b36      	ldr	r3, [pc, #216]	@ (8004cec <HAL_I2S_Init+0x27c>)
 8004c12:	e001      	b.n	8004c18 <HAL_I2S_Init+0x1a8>
 8004c14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	4932      	ldr	r1, [pc, #200]	@ (8004ce8 <HAL_I2S_Init+0x278>)
 8004c20:	428a      	cmp	r2, r1
 8004c22:	d101      	bne.n	8004c28 <HAL_I2S_Init+0x1b8>
 8004c24:	4a31      	ldr	r2, [pc, #196]	@ (8004cec <HAL_I2S_Init+0x27c>)
 8004c26:	e001      	b.n	8004c2c <HAL_I2S_Init+0x1bc>
 8004c28:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004c2c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c30:	f023 030f 	bic.w	r3, r3, #15
 8004c34:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ce8 <HAL_I2S_Init+0x278>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d101      	bne.n	8004c44 <HAL_I2S_Init+0x1d4>
 8004c40:	4b2a      	ldr	r3, [pc, #168]	@ (8004cec <HAL_I2S_Init+0x27c>)
 8004c42:	e001      	b.n	8004c48 <HAL_I2S_Init+0x1d8>
 8004c44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c48:	2202      	movs	r2, #2
 8004c4a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a25      	ldr	r2, [pc, #148]	@ (8004ce8 <HAL_I2S_Init+0x278>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d101      	bne.n	8004c5a <HAL_I2S_Init+0x1ea>
 8004c56:	4b25      	ldr	r3, [pc, #148]	@ (8004cec <HAL_I2S_Init+0x27c>)
 8004c58:	e001      	b.n	8004c5e <HAL_I2S_Init+0x1ee>
 8004c5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c6a:	d003      	beq.n	8004c74 <HAL_I2S_Init+0x204>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d103      	bne.n	8004c7c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	e001      	b.n	8004c80 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c94:	4313      	orrs	r3, r2
 8004c96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	897b      	ldrh	r3, [r7, #10]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004cac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8004ce8 <HAL_I2S_Init+0x278>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d101      	bne.n	8004cbc <HAL_I2S_Init+0x24c>
 8004cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cec <HAL_I2S_Init+0x27c>)
 8004cba:	e001      	b.n	8004cc0 <HAL_I2S_Init+0x250>
 8004cbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cc0:	897a      	ldrh	r2, [r7, #10]
 8004cc2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	0800518f 	.word	0x0800518f
 8004ce0:	cccccccd 	.word	0xcccccccd
 8004ce4:	080052a5 	.word	0x080052a5
 8004ce8:	40003800 	.word	0x40003800
 8004cec:	40003400 	.word	0x40003400

08004cf0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_I2S_Transmit_DMA+0x1a>
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e08e      	b.n	8004e2c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_I2S_Transmit_DMA+0x2e>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e086      	b.n	8004e2c <HAL_I2S_Transmit_DMA+0x13c>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d005      	beq.n	8004d3e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e076      	b.n	8004e2c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2203      	movs	r2, #3
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d002      	beq.n	8004d6a <HAL_I2S_Transmit_DMA+0x7a>
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2b05      	cmp	r3, #5
 8004d68:	d10a      	bne.n	8004d80 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d7e:	e005      	b.n	8004d8c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	4a28      	ldr	r2, [pc, #160]	@ (8004e34 <HAL_I2S_Transmit_DMA+0x144>)
 8004d92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	4a27      	ldr	r2, [pc, #156]	@ (8004e38 <HAL_I2S_Transmit_DMA+0x148>)
 8004d9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da0:	4a26      	ldr	r2, [pc, #152]	@ (8004e3c <HAL_I2S_Transmit_DMA+0x14c>)
 8004da2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004dac:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004db4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004dbc:	f7fe f8ce 	bl	8002f5c <HAL_DMA_Start_IT>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00f      	beq.n	8004de6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dca:	f043 0208 	orr.w	r2, r3, #8
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e022      	b.n	8004e2c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d107      	bne.n	8004e04 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69da      	ldr	r2, [r3, #28]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e02:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d107      	bne.n	8004e22 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0202 	orr.w	r2, r2, #2
 8004e20:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	0800500f 	.word	0x0800500f
 8004e38:	08004fcd 	.word	0x08004fcd
 8004e3c:	08005089 	.word	0x08005089

08004e40 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_I2S_Receive_DMA+0x1a>
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e0a1      	b.n	8004fa2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_I2S_Receive_DMA+0x2e>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e099      	b.n	8004fa2 <HAL_I2S_Receive_DMA+0x162>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d005      	beq.n	8004e8e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e089      	b.n	8004fa2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2204      	movs	r2, #4
 8004e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d002      	beq.n	8004eba <HAL_I2S_Receive_DMA+0x7a>
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8004ec4:	88fb      	ldrh	r3, [r7, #6]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	865a      	strh	r2, [r3, #50]	@ 0x32
 8004ece:	e005      	b.n	8004edc <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	88fa      	ldrh	r2, [r7, #6]
 8004eda:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee0:	4a32      	ldr	r2, [pc, #200]	@ (8004fac <HAL_I2S_Receive_DMA+0x16c>)
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee8:	4a31      	ldr	r2, [pc, #196]	@ (8004fb0 <HAL_I2S_Receive_DMA+0x170>)
 8004eea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef0:	4a30      	ldr	r2, [pc, #192]	@ (8004fb4 <HAL_I2S_Receive_DMA+0x174>)
 8004ef2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004efe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f02:	d10a      	bne.n	8004f1a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	330c      	adds	r3, #12
 8004f24:	4619      	mov	r1, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004f30:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004f32:	f7fe f813 	bl	8002f5c <HAL_DMA_Start_IT>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00f      	beq.n	8004f5c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f40:	f043 0208 	orr.w	r2, r3, #8
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e022      	b.n	8004fa2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d107      	bne.n	8004f7a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f78:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d107      	bne.n	8004f98 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	0800506d 	.word	0x0800506d
 8004fb0:	0800502b 	.word	0x0800502b
 8004fb4:	08005089 	.word	0x08005089

08004fb8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10e      	bne.n	8005000 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0202 	bic.w	r2, r2, #2
 8004ff0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7fd f923 	bl	800224c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7fd f905 	bl	800222c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005036:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10e      	bne.n	800505e <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7fd f914 	bl	800228c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7fd f8f6 	bl	800226c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0203 	bic.w	r2, r2, #3
 80050a4:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050be:	f043 0208 	orr.w	r2, r3, #8
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff ff76 	bl	8004fb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	881a      	ldrh	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	1c9a      	adds	r2, r3, #2
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10e      	bne.n	8005128 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005118:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fd f892 	bl	800224c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	b292      	uxth	r2, r2
 8005144:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10e      	bne.n	8005186 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005176:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7fd f883 	bl	800228c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b086      	sub	sp, #24
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d13a      	bne.n	8005220 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d109      	bne.n	80051c8 <I2S_IRQHandler+0x3a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051be:	2b40      	cmp	r3, #64	@ 0x40
 80051c0:	d102      	bne.n	80051c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff ffb4 	bl	8005130 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ce:	2b40      	cmp	r3, #64	@ 0x40
 80051d0:	d126      	bne.n	8005220 <I2S_IRQHandler+0x92>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d11f      	bne.n	8005220 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80051ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005212:	f043 0202 	orr.w	r2, r3, #2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff fecc 	bl	8004fb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b03      	cmp	r3, #3
 800522a:	d136      	bne.n	800529a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b02      	cmp	r3, #2
 8005234:	d109      	bne.n	800524a <I2S_IRQHandler+0xbc>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005240:	2b80      	cmp	r3, #128	@ 0x80
 8005242:	d102      	bne.n	800524a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ff45 	bl	80050d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b08      	cmp	r3, #8
 8005252:	d122      	bne.n	800529a <I2S_IRQHandler+0x10c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b20      	cmp	r3, #32
 8005260:	d11b      	bne.n	800529a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005270:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528c:	f043 0204 	orr.w	r2, r3, #4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fe8f 	bl	8004fb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800529a:	bf00      	nop
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a92      	ldr	r2, [pc, #584]	@ (8005504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d101      	bne.n	80052c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80052be:	4b92      	ldr	r3, [pc, #584]	@ (8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052c0:	e001      	b.n	80052c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80052c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a8b      	ldr	r2, [pc, #556]	@ (8005504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d101      	bne.n	80052e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80052dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052de:	e001      	b.n	80052e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80052e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f0:	d004      	beq.n	80052fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f040 8099 	bne.w	800542e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d107      	bne.n	8005316 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f925 	bl	8005560 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d107      	bne.n	8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9c8 	bl	80056c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005336:	2b40      	cmp	r3, #64	@ 0x40
 8005338:	d13a      	bne.n	80053b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d035      	beq.n	80053b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a6e      	ldr	r2, [pc, #440]	@ (8005504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d101      	bne.n	8005352 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800534e:	4b6e      	ldr	r3, [pc, #440]	@ (8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005350:	e001      	b.n	8005356 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005352:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4969      	ldr	r1, [pc, #420]	@ (8005504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800535e:	428b      	cmp	r3, r1
 8005360:	d101      	bne.n	8005366 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005362:	4b69      	ldr	r3, [pc, #420]	@ (8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005364:	e001      	b.n	800536a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005366:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800536a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800536e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800537e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	f043 0202 	orr.w	r2, r3, #2
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff fe04 	bl	8004fb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	f040 80c3 	bne.w	8005542 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80bd 	beq.w	8005542 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80053d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a49      	ldr	r2, [pc, #292]	@ (8005504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d101      	bne.n	80053e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80053e2:	4b49      	ldr	r3, [pc, #292]	@ (8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053e4:	e001      	b.n	80053ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80053e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4944      	ldr	r1, [pc, #272]	@ (8005504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053f2:	428b      	cmp	r3, r1
 80053f4:	d101      	bne.n	80053fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80053f6:	4b44      	ldr	r3, [pc, #272]	@ (8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053f8:	e001      	b.n	80053fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80053fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005402:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005404:	2300      	movs	r3, #0
 8005406:	60bb      	str	r3, [r7, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541e:	f043 0204 	orr.w	r2, r3, #4
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff fdc6 	bl	8004fb8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800542c:	e089      	b.n	8005542 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b02      	cmp	r3, #2
 8005436:	d107      	bne.n	8005448 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f8be 	bl	80055c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b01      	cmp	r3, #1
 8005450:	d107      	bne.n	8005462 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f8fd 	bl	800565c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005468:	2b40      	cmp	r3, #64	@ 0x40
 800546a:	d12f      	bne.n	80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	d02a      	beq.n	80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005484:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1e      	ldr	r2, [pc, #120]	@ (8005504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d101      	bne.n	8005494 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005490:	4b1d      	ldr	r3, [pc, #116]	@ (8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005492:	e001      	b.n	8005498 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005494:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4919      	ldr	r1, [pc, #100]	@ (8005504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054a0:	428b      	cmp	r3, r1
 80054a2:	d101      	bne.n	80054a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80054a4:	4b18      	ldr	r3, [pc, #96]	@ (8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054a6:	e001      	b.n	80054ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80054a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80054b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054be:	f043 0202 	orr.w	r2, r3, #2
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff fd76 	bl	8004fb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d136      	bne.n	8005544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d031      	beq.n	8005544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a07      	ldr	r2, [pc, #28]	@ (8005504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d101      	bne.n	80054ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80054ea:	4b07      	ldr	r3, [pc, #28]	@ (8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054ec:	e001      	b.n	80054f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80054ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4902      	ldr	r1, [pc, #8]	@ (8005504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054fa:	428b      	cmp	r3, r1
 80054fc:	d106      	bne.n	800550c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80054fe:	4b02      	ldr	r3, [pc, #8]	@ (8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005500:	e006      	b.n	8005510 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005502:	bf00      	nop
 8005504:	40003800 	.word	0x40003800
 8005508:	40003400 	.word	0x40003400
 800550c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005510:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005514:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005524:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005532:	f043 0204 	orr.w	r2, r3, #4
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff fd3c 	bl	8004fb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005540:	e000      	b.n	8005544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005542:	bf00      	nop
}
 8005544:	bf00      	nop
 8005546:	3720      	adds	r7, #32
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	1c99      	adds	r1, r3, #2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6251      	str	r1, [r2, #36]	@ 0x24
 8005572:	881a      	ldrh	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d113      	bne.n	80055ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff ffc9 	bl	800554c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055ba:	bf00      	nop
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	1c99      	adds	r1, r3, #2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6251      	str	r1, [r2, #36]	@ 0x24
 80055d6:	8819      	ldrh	r1, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005654 <I2SEx_TxISR_I2SExt+0x90>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d101      	bne.n	80055e6 <I2SEx_TxISR_I2SExt+0x22>
 80055e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005658 <I2SEx_TxISR_I2SExt+0x94>)
 80055e4:	e001      	b.n	80055ea <I2SEx_TxISR_I2SExt+0x26>
 80055e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055ea:	460a      	mov	r2, r1
 80055ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d121      	bne.n	800564a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a12      	ldr	r2, [pc, #72]	@ (8005654 <I2SEx_TxISR_I2SExt+0x90>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d101      	bne.n	8005614 <I2SEx_TxISR_I2SExt+0x50>
 8005610:	4b11      	ldr	r3, [pc, #68]	@ (8005658 <I2SEx_TxISR_I2SExt+0x94>)
 8005612:	e001      	b.n	8005618 <I2SEx_TxISR_I2SExt+0x54>
 8005614:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	490d      	ldr	r1, [pc, #52]	@ (8005654 <I2SEx_TxISR_I2SExt+0x90>)
 8005620:	428b      	cmp	r3, r1
 8005622:	d101      	bne.n	8005628 <I2SEx_TxISR_I2SExt+0x64>
 8005624:	4b0c      	ldr	r3, [pc, #48]	@ (8005658 <I2SEx_TxISR_I2SExt+0x94>)
 8005626:	e001      	b.n	800562c <I2SEx_TxISR_I2SExt+0x68>
 8005628:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800562c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005630:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d106      	bne.n	800564a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ff81 	bl	800554c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40003800 	.word	0x40003800
 8005658:	40003400 	.word	0x40003400

0800565c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68d8      	ldr	r0, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566e:	1c99      	adds	r1, r3, #2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005674:	b282      	uxth	r2, r0
 8005676:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d113      	bne.n	80056b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800569e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff ff4a 	bl	800554c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a20      	ldr	r2, [pc, #128]	@ (8005750 <I2SEx_RxISR_I2SExt+0x90>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d101      	bne.n	80056d6 <I2SEx_RxISR_I2SExt+0x16>
 80056d2:	4b20      	ldr	r3, [pc, #128]	@ (8005754 <I2SEx_RxISR_I2SExt+0x94>)
 80056d4:	e001      	b.n	80056da <I2SEx_RxISR_I2SExt+0x1a>
 80056d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056da:	68d8      	ldr	r0, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	1c99      	adds	r1, r3, #2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80056e6:	b282      	uxth	r2, r0
 80056e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d121      	bne.n	8005746 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a12      	ldr	r2, [pc, #72]	@ (8005750 <I2SEx_RxISR_I2SExt+0x90>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d101      	bne.n	8005710 <I2SEx_RxISR_I2SExt+0x50>
 800570c:	4b11      	ldr	r3, [pc, #68]	@ (8005754 <I2SEx_RxISR_I2SExt+0x94>)
 800570e:	e001      	b.n	8005714 <I2SEx_RxISR_I2SExt+0x54>
 8005710:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	490d      	ldr	r1, [pc, #52]	@ (8005750 <I2SEx_RxISR_I2SExt+0x90>)
 800571c:	428b      	cmp	r3, r1
 800571e:	d101      	bne.n	8005724 <I2SEx_RxISR_I2SExt+0x64>
 8005720:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <I2SEx_RxISR_I2SExt+0x94>)
 8005722:	e001      	b.n	8005728 <I2SEx_RxISR_I2SExt+0x68>
 8005724:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005728:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800572c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ff03 	bl	800554c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005746:	bf00      	nop
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40003800 	.word	0x40003800
 8005754:	40003400 	.word	0x40003400

08005758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e267      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d075      	beq.n	8005862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005776:	4b88      	ldr	r3, [pc, #544]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	2b04      	cmp	r3, #4
 8005780:	d00c      	beq.n	800579c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005782:	4b85      	ldr	r3, [pc, #532]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800578a:	2b08      	cmp	r3, #8
 800578c:	d112      	bne.n	80057b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800578e:	4b82      	ldr	r3, [pc, #520]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800579a:	d10b      	bne.n	80057b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579c:	4b7e      	ldr	r3, [pc, #504]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d05b      	beq.n	8005860 <HAL_RCC_OscConfig+0x108>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d157      	bne.n	8005860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e242      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057bc:	d106      	bne.n	80057cc <HAL_RCC_OscConfig+0x74>
 80057be:	4b76      	ldr	r3, [pc, #472]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a75      	ldr	r2, [pc, #468]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80057c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e01d      	b.n	8005808 <HAL_RCC_OscConfig+0xb0>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057d4:	d10c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x98>
 80057d6:	4b70      	ldr	r3, [pc, #448]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a6f      	ldr	r2, [pc, #444]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80057dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a6c      	ldr	r2, [pc, #432]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80057e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e00b      	b.n	8005808 <HAL_RCC_OscConfig+0xb0>
 80057f0:	4b69      	ldr	r3, [pc, #420]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a68      	ldr	r2, [pc, #416]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80057f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	4b66      	ldr	r3, [pc, #408]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a65      	ldr	r2, [pc, #404]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 8005802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d013      	beq.n	8005838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005810:	f7fd f998 	bl	8002b44 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005818:	f7fd f994 	bl	8002b44 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b64      	cmp	r3, #100	@ 0x64
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e207      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582a:	4b5b      	ldr	r3, [pc, #364]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f0      	beq.n	8005818 <HAL_RCC_OscConfig+0xc0>
 8005836:	e014      	b.n	8005862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fd f984 	bl	8002b44 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005840:	f7fd f980 	bl	8002b44 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	@ 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e1f3      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005852:	4b51      	ldr	r3, [pc, #324]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0xe8>
 800585e:	e000      	b.n	8005862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d063      	beq.n	8005936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800586e:	4b4a      	ldr	r3, [pc, #296]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 030c 	and.w	r3, r3, #12
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00b      	beq.n	8005892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800587a:	4b47      	ldr	r3, [pc, #284]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005882:	2b08      	cmp	r3, #8
 8005884:	d11c      	bne.n	80058c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005886:	4b44      	ldr	r3, [pc, #272]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d116      	bne.n	80058c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005892:	4b41      	ldr	r3, [pc, #260]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <HAL_RCC_OscConfig+0x152>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d001      	beq.n	80058aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e1c7      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4937      	ldr	r1, [pc, #220]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058be:	e03a      	b.n	8005936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d020      	beq.n	800590a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058c8:	4b34      	ldr	r3, [pc, #208]	@ (800599c <HAL_RCC_OscConfig+0x244>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ce:	f7fd f939 	bl	8002b44 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058d6:	f7fd f935 	bl	8002b44 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e1a8      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f4:	4b28      	ldr	r3, [pc, #160]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	4925      	ldr	r1, [pc, #148]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 8005904:	4313      	orrs	r3, r2
 8005906:	600b      	str	r3, [r1, #0]
 8005908:	e015      	b.n	8005936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800590a:	4b24      	ldr	r3, [pc, #144]	@ (800599c <HAL_RCC_OscConfig+0x244>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fd f918 	bl	8002b44 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005918:	f7fd f914 	bl	8002b44 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e187      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800592a:	4b1b      	ldr	r3, [pc, #108]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f0      	bne.n	8005918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d036      	beq.n	80059b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d016      	beq.n	8005978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800594a:	4b15      	ldr	r3, [pc, #84]	@ (80059a0 <HAL_RCC_OscConfig+0x248>)
 800594c:	2201      	movs	r2, #1
 800594e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005950:	f7fd f8f8 	bl	8002b44 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005958:	f7fd f8f4 	bl	8002b44 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e167      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800596a:	4b0b      	ldr	r3, [pc, #44]	@ (8005998 <HAL_RCC_OscConfig+0x240>)
 800596c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x200>
 8005976:	e01b      	b.n	80059b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005978:	4b09      	ldr	r3, [pc, #36]	@ (80059a0 <HAL_RCC_OscConfig+0x248>)
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800597e:	f7fd f8e1 	bl	8002b44 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005984:	e00e      	b.n	80059a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005986:	f7fd f8dd 	bl	8002b44 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d907      	bls.n	80059a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e150      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
 8005998:	40023800 	.word	0x40023800
 800599c:	42470000 	.word	0x42470000
 80059a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a4:	4b88      	ldr	r3, [pc, #544]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 80059a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1ea      	bne.n	8005986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8097 	beq.w	8005aec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059c2:	4b81      	ldr	r3, [pc, #516]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 80059c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10f      	bne.n	80059ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	4b7d      	ldr	r3, [pc, #500]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d6:	4a7c      	ldr	r2, [pc, #496]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80059de:	4b7a      	ldr	r3, [pc, #488]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059e6:	60bb      	str	r3, [r7, #8]
 80059e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ee:	4b77      	ldr	r3, [pc, #476]	@ (8005bcc <HAL_RCC_OscConfig+0x474>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d118      	bne.n	8005a2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059fa:	4b74      	ldr	r3, [pc, #464]	@ (8005bcc <HAL_RCC_OscConfig+0x474>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a73      	ldr	r2, [pc, #460]	@ (8005bcc <HAL_RCC_OscConfig+0x474>)
 8005a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a06:	f7fd f89d 	bl	8002b44 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a0e:	f7fd f899 	bl	8002b44 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e10c      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a20:	4b6a      	ldr	r3, [pc, #424]	@ (8005bcc <HAL_RCC_OscConfig+0x474>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0f0      	beq.n	8005a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d106      	bne.n	8005a42 <HAL_RCC_OscConfig+0x2ea>
 8005a34:	4b64      	ldr	r3, [pc, #400]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a38:	4a63      	ldr	r2, [pc, #396]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a3a:	f043 0301 	orr.w	r3, r3, #1
 8005a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a40:	e01c      	b.n	8005a7c <HAL_RCC_OscConfig+0x324>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b05      	cmp	r3, #5
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCC_OscConfig+0x30c>
 8005a4a:	4b5f      	ldr	r3, [pc, #380]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a4e:	4a5e      	ldr	r2, [pc, #376]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a50:	f043 0304 	orr.w	r3, r3, #4
 8005a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a56:	4b5c      	ldr	r3, [pc, #368]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5a:	4a5b      	ldr	r2, [pc, #364]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a5c:	f043 0301 	orr.w	r3, r3, #1
 8005a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a62:	e00b      	b.n	8005a7c <HAL_RCC_OscConfig+0x324>
 8005a64:	4b58      	ldr	r3, [pc, #352]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a68:	4a57      	ldr	r2, [pc, #348]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a70:	4b55      	ldr	r3, [pc, #340]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a74:	4a54      	ldr	r2, [pc, #336]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a76:	f023 0304 	bic.w	r3, r3, #4
 8005a7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d015      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a84:	f7fd f85e 	bl	8002b44 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8a:	e00a      	b.n	8005aa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a8c:	f7fd f85a 	bl	8002b44 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e0cb      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa2:	4b49      	ldr	r3, [pc, #292]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0ee      	beq.n	8005a8c <HAL_RCC_OscConfig+0x334>
 8005aae:	e014      	b.n	8005ada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ab0:	f7fd f848 	bl	8002b44 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab6:	e00a      	b.n	8005ace <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab8:	f7fd f844 	bl	8002b44 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e0b5      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ace:	4b3e      	ldr	r3, [pc, #248]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1ee      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d105      	bne.n	8005aec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ae0:	4b39      	ldr	r3, [pc, #228]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae4:	4a38      	ldr	r2, [pc, #224]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80a1 	beq.w	8005c38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005af6:	4b34      	ldr	r3, [pc, #208]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 030c 	and.w	r3, r3, #12
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d05c      	beq.n	8005bbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d141      	bne.n	8005b8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0a:	4b31      	ldr	r3, [pc, #196]	@ (8005bd0 <HAL_RCC_OscConfig+0x478>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b10:	f7fd f818 	bl	8002b44 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fd f814 	bl	8002b44 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e087      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2a:	4b27      	ldr	r3, [pc, #156]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f0      	bne.n	8005b18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69da      	ldr	r2, [r3, #28]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b44:	019b      	lsls	r3, r3, #6
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4c:	085b      	lsrs	r3, r3, #1
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	041b      	lsls	r3, r3, #16
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b58:	061b      	lsls	r3, r3, #24
 8005b5a:	491b      	ldr	r1, [pc, #108]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b60:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd0 <HAL_RCC_OscConfig+0x478>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b66:	f7fc ffed 	bl	8002b44 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b6e:	f7fc ffe9 	bl	8002b44 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e05c      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b80:	4b11      	ldr	r3, [pc, #68]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f0      	beq.n	8005b6e <HAL_RCC_OscConfig+0x416>
 8005b8c:	e054      	b.n	8005c38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8e:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <HAL_RCC_OscConfig+0x478>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b94:	f7fc ffd6 	bl	8002b44 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b9c:	f7fc ffd2 	bl	8002b44 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e045      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bae:	4b06      	ldr	r3, [pc, #24]	@ (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0x444>
 8005bba:	e03d      	b.n	8005c38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d107      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e038      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	40007000 	.word	0x40007000
 8005bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c44 <HAL_RCC_OscConfig+0x4ec>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d028      	beq.n	8005c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d121      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d11a      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c04:	4013      	ands	r3, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d111      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d107      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40023800 	.word	0x40023800

08005c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0cc      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c5c:	4b68      	ldr	r3, [pc, #416]	@ (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d90c      	bls.n	8005c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6a:	4b65      	ldr	r3, [pc, #404]	@ (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c72:	4b63      	ldr	r3, [pc, #396]	@ (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d001      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0b8      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d020      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c9c:	4b59      	ldr	r3, [pc, #356]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	4a58      	ldr	r2, [pc, #352]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cb4:	4b53      	ldr	r3, [pc, #332]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	4a52      	ldr	r2, [pc, #328]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc0:	4b50      	ldr	r3, [pc, #320]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	494d      	ldr	r1, [pc, #308]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d044      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d107      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce6:	4b47      	ldr	r3, [pc, #284]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d119      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e07f      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d003      	beq.n	8005d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d107      	bne.n	8005d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d06:	4b3f      	ldr	r3, [pc, #252]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e06f      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d16:	4b3b      	ldr	r3, [pc, #236]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e067      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d26:	4b37      	ldr	r3, [pc, #220]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f023 0203 	bic.w	r2, r3, #3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	4934      	ldr	r1, [pc, #208]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d38:	f7fc ff04 	bl	8002b44 <HAL_GetTick>
 8005d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3e:	e00a      	b.n	8005d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d40:	f7fc ff00 	bl	8002b44 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e04f      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d56:	4b2b      	ldr	r3, [pc, #172]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 020c 	and.w	r2, r3, #12
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d1eb      	bne.n	8005d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d68:	4b25      	ldr	r3, [pc, #148]	@ (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d20c      	bcs.n	8005d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d76:	4b22      	ldr	r3, [pc, #136]	@ (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7e:	4b20      	ldr	r3, [pc, #128]	@ (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d001      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e032      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d9c:	4b19      	ldr	r3, [pc, #100]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4916      	ldr	r1, [pc, #88]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dba:	4b12      	ldr	r3, [pc, #72]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	490e      	ldr	r1, [pc, #56]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dce:	f000 f821 	bl	8005e14 <HAL_RCC_GetSysClockFreq>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	490a      	ldr	r1, [pc, #40]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c0>)
 8005de0:	5ccb      	ldrb	r3, [r1, r3]
 8005de2:	fa22 f303 	lsr.w	r3, r2, r3
 8005de6:	4a09      	ldr	r2, [pc, #36]	@ (8005e0c <HAL_RCC_ClockConfig+0x1c4>)
 8005de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dea:	4b09      	ldr	r3, [pc, #36]	@ (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fc fe64 	bl	8002abc <HAL_InitTick>

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023c00 	.word	0x40023c00
 8005e04:	40023800 	.word	0x40023800
 8005e08:	0800eb98 	.word	0x0800eb98
 8005e0c:	20000438 	.word	0x20000438
 8005e10:	2000043c 	.word	0x2000043c

08005e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e18:	b094      	sub	sp, #80	@ 0x50
 8005e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e20:	2300      	movs	r3, #0
 8005e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e24:	2300      	movs	r3, #0
 8005e26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e2c:	4b79      	ldr	r3, [pc, #484]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 030c 	and.w	r3, r3, #12
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d00d      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0x40>
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	f200 80e1 	bhi.w	8006000 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <HAL_RCC_GetSysClockFreq+0x34>
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d003      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e46:	e0db      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e48:	4b73      	ldr	r3, [pc, #460]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005e4c:	e0db      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e4e:	4b73      	ldr	r3, [pc, #460]	@ (800601c <HAL_RCC_GetSysClockFreq+0x208>)
 8005e50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e52:	e0d8      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e54:	4b6f      	ldr	r3, [pc, #444]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e5e:	4b6d      	ldr	r3, [pc, #436]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d063      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e6a:	4b6a      	ldr	r3, [pc, #424]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	099b      	lsrs	r3, r3, #6
 8005e70:	2200      	movs	r2, #0
 8005e72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e7e:	2300      	movs	r3, #0
 8005e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e86:	4622      	mov	r2, r4
 8005e88:	462b      	mov	r3, r5
 8005e8a:	f04f 0000 	mov.w	r0, #0
 8005e8e:	f04f 0100 	mov.w	r1, #0
 8005e92:	0159      	lsls	r1, r3, #5
 8005e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e98:	0150      	lsls	r0, r2, #5
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	1a51      	subs	r1, r2, r1
 8005ea2:	6139      	str	r1, [r7, #16]
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005eb8:	4659      	mov	r1, fp
 8005eba:	018b      	lsls	r3, r1, #6
 8005ebc:	4651      	mov	r1, sl
 8005ebe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ec2:	4651      	mov	r1, sl
 8005ec4:	018a      	lsls	r2, r1, #6
 8005ec6:	4651      	mov	r1, sl
 8005ec8:	ebb2 0801 	subs.w	r8, r2, r1
 8005ecc:	4659      	mov	r1, fp
 8005ece:	eb63 0901 	sbc.w	r9, r3, r1
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ee6:	4690      	mov	r8, r2
 8005ee8:	4699      	mov	r9, r3
 8005eea:	4623      	mov	r3, r4
 8005eec:	eb18 0303 	adds.w	r3, r8, r3
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	462b      	mov	r3, r5
 8005ef4:	eb49 0303 	adc.w	r3, r9, r3
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f06:	4629      	mov	r1, r5
 8005f08:	024b      	lsls	r3, r1, #9
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f10:	4621      	mov	r1, r4
 8005f12:	024a      	lsls	r2, r1, #9
 8005f14:	4610      	mov	r0, r2
 8005f16:	4619      	mov	r1, r3
 8005f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f24:	f7fa feb0 	bl	8000c88 <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f30:	e058      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f32:	4b38      	ldr	r3, [pc, #224]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	099b      	lsrs	r3, r3, #6
 8005f38:	2200      	movs	r2, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f42:	623b      	str	r3, [r7, #32]
 8005f44:	2300      	movs	r3, #0
 8005f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	f04f 0000 	mov.w	r0, #0
 8005f54:	f04f 0100 	mov.w	r1, #0
 8005f58:	0159      	lsls	r1, r3, #5
 8005f5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f5e:	0150      	lsls	r0, r2, #5
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4641      	mov	r1, r8
 8005f66:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f84:	ebb2 040a 	subs.w	r4, r2, sl
 8005f88:	eb63 050b 	sbc.w	r5, r3, fp
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	00eb      	lsls	r3, r5, #3
 8005f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f9a:	00e2      	lsls	r2, r4, #3
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	4643      	mov	r3, r8
 8005fa2:	18e3      	adds	r3, r4, r3
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	eb45 0303 	adc.w	r3, r5, r3
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fba:	4629      	mov	r1, r5
 8005fbc:	028b      	lsls	r3, r1, #10
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	028a      	lsls	r2, r1, #10
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fce:	2200      	movs	r2, #0
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	61fa      	str	r2, [r7, #28]
 8005fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd8:	f7fa fe56 	bl	8000c88 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	0c1b      	lsrs	r3, r3, #16
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	3301      	adds	r3, #1
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005ff4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ffe:	e002      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006000:	4b05      	ldr	r3, [pc, #20]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x204>)
 8006002:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006008:	4618      	mov	r0, r3
 800600a:	3750      	adds	r7, #80	@ 0x50
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006012:	bf00      	nop
 8006014:	40023800 	.word	0x40023800
 8006018:	00f42400 	.word	0x00f42400
 800601c:	007a1200 	.word	0x007a1200

08006020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006024:	4b03      	ldr	r3, [pc, #12]	@ (8006034 <HAL_RCC_GetHCLKFreq+0x14>)
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20000438 	.word	0x20000438

08006038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800603c:	f7ff fff0 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8006040:	4602      	mov	r2, r0
 8006042:	4b05      	ldr	r3, [pc, #20]	@ (8006058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	0a9b      	lsrs	r3, r3, #10
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	4903      	ldr	r1, [pc, #12]	@ (800605c <HAL_RCC_GetPCLK1Freq+0x24>)
 800604e:	5ccb      	ldrb	r3, [r1, r3]
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40023800 	.word	0x40023800
 800605c:	0800eba8 	.word	0x0800eba8

08006060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006064:	f7ff ffdc 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b05      	ldr	r3, [pc, #20]	@ (8006080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	0b5b      	lsrs	r3, r3, #13
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4903      	ldr	r1, [pc, #12]	@ (8006084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40023800 	.word	0x40023800
 8006084:	0800eba8 	.word	0x0800eba8

08006088 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d105      	bne.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d035      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060b0:	4b62      	ldr	r3, [pc, #392]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060b6:	f7fc fd45 	bl	8002b44 <HAL_GetTick>
 80060ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060be:	f7fc fd41 	bl	8002b44 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e0b0      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060d0:	4b5b      	ldr	r3, [pc, #364]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f0      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	019a      	lsls	r2, r3, #6
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	071b      	lsls	r3, r3, #28
 80060e8:	4955      	ldr	r1, [pc, #340]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060f0:	4b52      	ldr	r3, [pc, #328]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060f6:	f7fc fd25 	bl	8002b44 <HAL_GetTick>
 80060fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060fc:	e008      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060fe:	f7fc fd21 	bl	8002b44 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e090      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006110:	4b4b      	ldr	r3, [pc, #300]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f0      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8083 	beq.w	8006230 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	4b44      	ldr	r3, [pc, #272]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006132:	4a43      	ldr	r2, [pc, #268]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006138:	6413      	str	r3, [r2, #64]	@ 0x40
 800613a:	4b41      	ldr	r3, [pc, #260]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006146:	4b3f      	ldr	r3, [pc, #252]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a3e      	ldr	r2, [pc, #248]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800614c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006150:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006152:	f7fc fcf7 	bl	8002b44 <HAL_GetTick>
 8006156:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006158:	e008      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800615a:	f7fc fcf3 	bl	8002b44 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e062      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800616c:	4b35      	ldr	r3, [pc, #212]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f0      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006178:	4b31      	ldr	r3, [pc, #196]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006180:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d02f      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	429a      	cmp	r2, r3
 8006194:	d028      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006196:	4b2a      	ldr	r3, [pc, #168]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800619a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800619e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061a0:	4b29      	ldr	r3, [pc, #164]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061a6:	4b28      	ldr	r3, [pc, #160]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061ac:	4a24      	ldr	r2, [pc, #144]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061b2:	4b23      	ldr	r3, [pc, #140]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d114      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061be:	f7fc fcc1 	bl	8002b44 <HAL_GetTick>
 80061c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c4:	e00a      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061c6:	f7fc fcbd 	bl	8002b44 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d901      	bls.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e02a      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061dc:	4b18      	ldr	r3, [pc, #96]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0ee      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061f4:	d10d      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80061f6:	4b12      	ldr	r3, [pc, #72]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800620a:	490d      	ldr	r1, [pc, #52]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800620c:	4313      	orrs	r3, r2
 800620e:	608b      	str	r3, [r1, #8]
 8006210:	e005      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006212:	4b0b      	ldr	r3, [pc, #44]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	4a0a      	ldr	r2, [pc, #40]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006218:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800621c:	6093      	str	r3, [r2, #8]
 800621e:	4b08      	ldr	r3, [pc, #32]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006220:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800622a:	4905      	ldr	r1, [pc, #20]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800622c:	4313      	orrs	r3, r2
 800622e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	42470068 	.word	0x42470068
 8006240:	40023800 	.word	0x40023800
 8006244:	40007000 	.word	0x40007000
 8006248:	42470e40 	.word	0x42470e40

0800624c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d13e      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800626a:	4b23      	ldr	r3, [pc, #140]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d12f      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006280:	4b1e      	ldr	r3, [pc, #120]	@ (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006282:	617b      	str	r3, [r7, #20]
          break;
 8006284:	e02f      	b.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006286:	4b1c      	ldr	r3, [pc, #112]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800628e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006292:	d108      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006294:	4b18      	ldr	r3, [pc, #96]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800629c:	4a18      	ldr	r2, [pc, #96]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800629e:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	e007      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80062a6:	4b14      	ldr	r3, [pc, #80]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062ae:	4a15      	ldr	r2, [pc, #84]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80062b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80062b6:	4b10      	ldr	r3, [pc, #64]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80062b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062bc:	099b      	lsrs	r3, r3, #6
 80062be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	fb02 f303 	mul.w	r3, r2, r3
 80062c8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80062ca:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80062cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062d0:	0f1b      	lsrs	r3, r3, #28
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062dc:	617b      	str	r3, [r7, #20]
          break;
 80062de:	e002      	b.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
          break;
 80062e4:	bf00      	nop
        }
      }
      break;
 80062e6:	bf00      	nop
    }
  }
  return frequency;
 80062e8:	697b      	ldr	r3, [r7, #20]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40023800 	.word	0x40023800
 80062fc:	00bb8000 	.word	0x00bb8000
 8006300:	007a1200 	.word	0x007a1200
 8006304:	00f42400 	.word	0x00f42400

08006308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e07b      	b.n	8006412 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d108      	bne.n	8006334 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800632a:	d009      	beq.n	8006340 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	61da      	str	r2, [r3, #28]
 8006332:	e005      	b.n	8006340 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fc f9b6 	bl	80026cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006376:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c4:	ea42 0103 	orr.w	r1, r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	0c1b      	lsrs	r3, r3, #16
 80063de:	f003 0104 	and.w	r1, r3, #4
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	f003 0210 	and.w	r2, r3, #16
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006400:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e03f      	b.n	80064ac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fc f98b 	bl	800275c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2224      	movs	r2, #36	@ 0x24
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800645c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f928 	bl	80066b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006472:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006482:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006492:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08a      	sub	sp, #40	@ 0x28
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	4613      	mov	r3, r2
 80064c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d17c      	bne.n	80065ce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_UART_Transmit+0x2c>
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e075      	b.n	80065d0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_UART_Transmit+0x3e>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e06e      	b.n	80065d0 <HAL_UART_Transmit+0x11c>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2221      	movs	r2, #33	@ 0x21
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006508:	f7fc fb1c 	bl	8002b44 <HAL_GetTick>
 800650c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	88fa      	ldrh	r2, [r7, #6]
 8006512:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	88fa      	ldrh	r2, [r7, #6]
 8006518:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006522:	d108      	bne.n	8006536 <HAL_UART_Transmit+0x82>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e003      	b.n	800653e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8006546:	e02a      	b.n	800659e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2200      	movs	r2, #0
 8006550:	2180      	movs	r1, #128	@ 0x80
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f840 	bl	80065d8 <UART_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e036      	b.n	80065d0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10b      	bne.n	8006580 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006576:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	3302      	adds	r3, #2
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	e007      	b.n	8006590 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	781a      	ldrb	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3301      	adds	r3, #1
 800658e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1cf      	bne.n	8006548 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2200      	movs	r2, #0
 80065b0:	2140      	movs	r1, #64	@ 0x40
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f810 	bl	80065d8 <UART_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e006      	b.n	80065d0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e000      	b.n	80065d0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80065ce:	2302      	movs	r3, #2
  }
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3720      	adds	r7, #32
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b090      	sub	sp, #64	@ 0x40
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	4613      	mov	r3, r2
 80065e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e8:	e050      	b.n	800668c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d04c      	beq.n	800668c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <UART_WaitOnFlagUntilTimeout+0x30>
 80065f8:	f7fc faa4 	bl	8002b44 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006604:	429a      	cmp	r2, r3
 8006606:	d241      	bcs.n	800668c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	330c      	adds	r3, #12
 800660e:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	330c      	adds	r3, #12
 8006626:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006628:	637a      	str	r2, [r7, #52]	@ 0x34
 800662a:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800662e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e5      	bne.n	8006608 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3314      	adds	r3, #20
 8006642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	613b      	str	r3, [r7, #16]
   return(result);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3314      	adds	r3, #20
 800665a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800665c:	623a      	str	r2, [r7, #32]
 800665e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	69f9      	ldr	r1, [r7, #28]
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	61bb      	str	r3, [r7, #24]
   return(result);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e5      	bne.n	800663c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2220      	movs	r2, #32
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e00f      	b.n	80066ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4013      	ands	r3, r2
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d09f      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3740      	adds	r7, #64	@ 0x40
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066b8:	b0c0      	sub	sp, #256	@ 0x100
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d0:	68d9      	ldr	r1, [r3, #12]
 80066d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	ea40 0301 	orr.w	r3, r0, r1
 80066dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	431a      	orrs	r2, r3
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800670c:	f021 010c 	bic.w	r1, r1, #12
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800671a:	430b      	orrs	r3, r1
 800671c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800671e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800672a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672e:	6999      	ldr	r1, [r3, #24]
 8006730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	ea40 0301 	orr.w	r3, r0, r1
 800673a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4b8f      	ldr	r3, [pc, #572]	@ (8006980 <UART_SetConfig+0x2cc>)
 8006744:	429a      	cmp	r2, r3
 8006746:	d005      	beq.n	8006754 <UART_SetConfig+0xa0>
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	4b8d      	ldr	r3, [pc, #564]	@ (8006984 <UART_SetConfig+0x2d0>)
 8006750:	429a      	cmp	r2, r3
 8006752:	d104      	bne.n	800675e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006754:	f7ff fc84 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 8006758:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800675c:	e003      	b.n	8006766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800675e:	f7ff fc6b 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006762:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006770:	f040 810c 	bne.w	800698c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006778:	2200      	movs	r2, #0
 800677a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800677e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006786:	4622      	mov	r2, r4
 8006788:	462b      	mov	r3, r5
 800678a:	1891      	adds	r1, r2, r2
 800678c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800678e:	415b      	adcs	r3, r3
 8006790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006796:	4621      	mov	r1, r4
 8006798:	eb12 0801 	adds.w	r8, r2, r1
 800679c:	4629      	mov	r1, r5
 800679e:	eb43 0901 	adc.w	r9, r3, r1
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067b6:	4690      	mov	r8, r2
 80067b8:	4699      	mov	r9, r3
 80067ba:	4623      	mov	r3, r4
 80067bc:	eb18 0303 	adds.w	r3, r8, r3
 80067c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067c4:	462b      	mov	r3, r5
 80067c6:	eb49 0303 	adc.w	r3, r9, r3
 80067ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80067de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067e2:	460b      	mov	r3, r1
 80067e4:	18db      	adds	r3, r3, r3
 80067e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067e8:	4613      	mov	r3, r2
 80067ea:	eb42 0303 	adc.w	r3, r2, r3
 80067ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80067f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80067f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80067f8:	f7fa fa46 	bl	8000c88 <__aeabi_uldivmod>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4b61      	ldr	r3, [pc, #388]	@ (8006988 <UART_SetConfig+0x2d4>)
 8006802:	fba3 2302 	umull	r2, r3, r3, r2
 8006806:	095b      	lsrs	r3, r3, #5
 8006808:	011c      	lsls	r4, r3, #4
 800680a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800680e:	2200      	movs	r2, #0
 8006810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006814:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800681c:	4642      	mov	r2, r8
 800681e:	464b      	mov	r3, r9
 8006820:	1891      	adds	r1, r2, r2
 8006822:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006824:	415b      	adcs	r3, r3
 8006826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800682c:	4641      	mov	r1, r8
 800682e:	eb12 0a01 	adds.w	sl, r2, r1
 8006832:	4649      	mov	r1, r9
 8006834:	eb43 0b01 	adc.w	fp, r3, r1
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800684c:	4692      	mov	sl, r2
 800684e:	469b      	mov	fp, r3
 8006850:	4643      	mov	r3, r8
 8006852:	eb1a 0303 	adds.w	r3, sl, r3
 8006856:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800685a:	464b      	mov	r3, r9
 800685c:	eb4b 0303 	adc.w	r3, fp, r3
 8006860:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006870:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006878:	460b      	mov	r3, r1
 800687a:	18db      	adds	r3, r3, r3
 800687c:	643b      	str	r3, [r7, #64]	@ 0x40
 800687e:	4613      	mov	r3, r2
 8006880:	eb42 0303 	adc.w	r3, r2, r3
 8006884:	647b      	str	r3, [r7, #68]	@ 0x44
 8006886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800688a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800688e:	f7fa f9fb 	bl	8000c88 <__aeabi_uldivmod>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4611      	mov	r1, r2
 8006898:	4b3b      	ldr	r3, [pc, #236]	@ (8006988 <UART_SetConfig+0x2d4>)
 800689a:	fba3 2301 	umull	r2, r3, r3, r1
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	2264      	movs	r2, #100	@ 0x64
 80068a2:	fb02 f303 	mul.w	r3, r2, r3
 80068a6:	1acb      	subs	r3, r1, r3
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80068ae:	4b36      	ldr	r3, [pc, #216]	@ (8006988 <UART_SetConfig+0x2d4>)
 80068b0:	fba3 2302 	umull	r2, r3, r3, r2
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068bc:	441c      	add	r4, r3
 80068be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80068cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80068d0:	4642      	mov	r2, r8
 80068d2:	464b      	mov	r3, r9
 80068d4:	1891      	adds	r1, r2, r2
 80068d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80068d8:	415b      	adcs	r3, r3
 80068da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80068e0:	4641      	mov	r1, r8
 80068e2:	1851      	adds	r1, r2, r1
 80068e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80068e6:	4649      	mov	r1, r9
 80068e8:	414b      	adcs	r3, r1
 80068ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80068f8:	4659      	mov	r1, fp
 80068fa:	00cb      	lsls	r3, r1, #3
 80068fc:	4651      	mov	r1, sl
 80068fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006902:	4651      	mov	r1, sl
 8006904:	00ca      	lsls	r2, r1, #3
 8006906:	4610      	mov	r0, r2
 8006908:	4619      	mov	r1, r3
 800690a:	4603      	mov	r3, r0
 800690c:	4642      	mov	r2, r8
 800690e:	189b      	adds	r3, r3, r2
 8006910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006914:	464b      	mov	r3, r9
 8006916:	460a      	mov	r2, r1
 8006918:	eb42 0303 	adc.w	r3, r2, r3
 800691c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800692c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006934:	460b      	mov	r3, r1
 8006936:	18db      	adds	r3, r3, r3
 8006938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800693a:	4613      	mov	r3, r2
 800693c:	eb42 0303 	adc.w	r3, r2, r3
 8006940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800694a:	f7fa f99d 	bl	8000c88 <__aeabi_uldivmod>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4b0d      	ldr	r3, [pc, #52]	@ (8006988 <UART_SetConfig+0x2d4>)
 8006954:	fba3 1302 	umull	r1, r3, r3, r2
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	2164      	movs	r1, #100	@ 0x64
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	3332      	adds	r3, #50	@ 0x32
 8006966:	4a08      	ldr	r2, [pc, #32]	@ (8006988 <UART_SetConfig+0x2d4>)
 8006968:	fba2 2303 	umull	r2, r3, r2, r3
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	f003 0207 	and.w	r2, r3, #7
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4422      	add	r2, r4
 800697a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800697c:	e106      	b.n	8006b8c <UART_SetConfig+0x4d8>
 800697e:	bf00      	nop
 8006980:	40011000 	.word	0x40011000
 8006984:	40011400 	.word	0x40011400
 8006988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800698c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006990:	2200      	movs	r2, #0
 8006992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006996:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800699a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800699e:	4642      	mov	r2, r8
 80069a0:	464b      	mov	r3, r9
 80069a2:	1891      	adds	r1, r2, r2
 80069a4:	6239      	str	r1, [r7, #32]
 80069a6:	415b      	adcs	r3, r3
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80069aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069ae:	4641      	mov	r1, r8
 80069b0:	1854      	adds	r4, r2, r1
 80069b2:	4649      	mov	r1, r9
 80069b4:	eb43 0501 	adc.w	r5, r3, r1
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	f04f 0300 	mov.w	r3, #0
 80069c0:	00eb      	lsls	r3, r5, #3
 80069c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069c6:	00e2      	lsls	r2, r4, #3
 80069c8:	4614      	mov	r4, r2
 80069ca:	461d      	mov	r5, r3
 80069cc:	4643      	mov	r3, r8
 80069ce:	18e3      	adds	r3, r4, r3
 80069d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069d4:	464b      	mov	r3, r9
 80069d6:	eb45 0303 	adc.w	r3, r5, r3
 80069da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069ee:	f04f 0200 	mov.w	r2, #0
 80069f2:	f04f 0300 	mov.w	r3, #0
 80069f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80069fa:	4629      	mov	r1, r5
 80069fc:	008b      	lsls	r3, r1, #2
 80069fe:	4621      	mov	r1, r4
 8006a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a04:	4621      	mov	r1, r4
 8006a06:	008a      	lsls	r2, r1, #2
 8006a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a0c:	f7fa f93c 	bl	8000c88 <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4b60      	ldr	r3, [pc, #384]	@ (8006b98 <UART_SetConfig+0x4e4>)
 8006a16:	fba3 2302 	umull	r2, r3, r3, r2
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	011c      	lsls	r4, r3, #4
 8006a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a30:	4642      	mov	r2, r8
 8006a32:	464b      	mov	r3, r9
 8006a34:	1891      	adds	r1, r2, r2
 8006a36:	61b9      	str	r1, [r7, #24]
 8006a38:	415b      	adcs	r3, r3
 8006a3a:	61fb      	str	r3, [r7, #28]
 8006a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a40:	4641      	mov	r1, r8
 8006a42:	1851      	adds	r1, r2, r1
 8006a44:	6139      	str	r1, [r7, #16]
 8006a46:	4649      	mov	r1, r9
 8006a48:	414b      	adcs	r3, r1
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a58:	4659      	mov	r1, fp
 8006a5a:	00cb      	lsls	r3, r1, #3
 8006a5c:	4651      	mov	r1, sl
 8006a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a62:	4651      	mov	r1, sl
 8006a64:	00ca      	lsls	r2, r1, #3
 8006a66:	4610      	mov	r0, r2
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	189b      	adds	r3, r3, r2
 8006a70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a74:	464b      	mov	r3, r9
 8006a76:	460a      	mov	r2, r1
 8006a78:	eb42 0303 	adc.w	r3, r2, r3
 8006a7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a98:	4649      	mov	r1, r9
 8006a9a:	008b      	lsls	r3, r1, #2
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	008a      	lsls	r2, r1, #2
 8006aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006aaa:	f7fa f8ed 	bl	8000c88 <__aeabi_uldivmod>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	4b38      	ldr	r3, [pc, #224]	@ (8006b98 <UART_SetConfig+0x4e4>)
 8006ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8006aba:	095b      	lsrs	r3, r3, #5
 8006abc:	2264      	movs	r2, #100	@ 0x64
 8006abe:	fb02 f303 	mul.w	r3, r2, r3
 8006ac2:	1acb      	subs	r3, r1, r3
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	3332      	adds	r3, #50	@ 0x32
 8006ac8:	4a33      	ldr	r2, [pc, #204]	@ (8006b98 <UART_SetConfig+0x4e4>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	095b      	lsrs	r3, r3, #5
 8006ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ad4:	441c      	add	r4, r3
 8006ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ada:	2200      	movs	r2, #0
 8006adc:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ade:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ae0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	1891      	adds	r1, r2, r2
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	415b      	adcs	r3, r3
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006af4:	4641      	mov	r1, r8
 8006af6:	1851      	adds	r1, r2, r1
 8006af8:	6039      	str	r1, [r7, #0]
 8006afa:	4649      	mov	r1, r9
 8006afc:	414b      	adcs	r3, r1
 8006afe:	607b      	str	r3, [r7, #4]
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	f04f 0300 	mov.w	r3, #0
 8006b08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	00cb      	lsls	r3, r1, #3
 8006b10:	4651      	mov	r1, sl
 8006b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b16:	4651      	mov	r1, sl
 8006b18:	00ca      	lsls	r2, r1, #3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4603      	mov	r3, r0
 8006b20:	4642      	mov	r2, r8
 8006b22:	189b      	adds	r3, r3, r2
 8006b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b26:	464b      	mov	r3, r9
 8006b28:	460a      	mov	r2, r1
 8006b2a:	eb42 0303 	adc.w	r3, r2, r3
 8006b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b48:	4649      	mov	r1, r9
 8006b4a:	008b      	lsls	r3, r1, #2
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b52:	4641      	mov	r1, r8
 8006b54:	008a      	lsls	r2, r1, #2
 8006b56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b5a:	f7fa f895 	bl	8000c88 <__aeabi_uldivmod>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4b0d      	ldr	r3, [pc, #52]	@ (8006b98 <UART_SetConfig+0x4e4>)
 8006b64:	fba3 1302 	umull	r1, r3, r3, r2
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	2164      	movs	r1, #100	@ 0x64
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	3332      	adds	r3, #50	@ 0x32
 8006b76:	4a08      	ldr	r2, [pc, #32]	@ (8006b98 <UART_SetConfig+0x4e4>)
 8006b78:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	f003 020f 	and.w	r2, r3, #15
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4422      	add	r2, r4
 8006b8a:	609a      	str	r2, [r3, #8]
}
 8006b8c:	bf00      	nop
 8006b8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b92:	46bd      	mov	sp, r7
 8006b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b98:	51eb851f 	.word	0x51eb851f

08006b9c <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8006ba0:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <MX_PDM2PCM_Init+0x48>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8006be4 <MX_PDM2PCM_Init+0x48>)
 8006ba8:	2201      	movs	r2, #1
 8006baa:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8006bac:	4b0d      	ldr	r3, [pc, #52]	@ (8006be4 <MX_PDM2PCM_Init+0x48>)
 8006bae:	4a0e      	ldr	r2, [pc, #56]	@ (8006be8 <MX_PDM2PCM_Init+0x4c>)
 8006bb0:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006be4 <MX_PDM2PCM_Init+0x48>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8006bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8006be4 <MX_PDM2PCM_Init+0x48>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8006bbe:	4809      	ldr	r0, [pc, #36]	@ (8006be4 <MX_PDM2PCM_Init+0x48>)
 8006bc0:	f001 fd66 	bl	8008690 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8006bc4:	4b09      	ldr	r3, [pc, #36]	@ (8006bec <MX_PDM2PCM_Init+0x50>)
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8006bca:	4b08      	ldr	r3, [pc, #32]	@ (8006bec <MX_PDM2PCM_Init+0x50>)
 8006bcc:	2210      	movs	r2, #16
 8006bce:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8006bd0:	4b06      	ldr	r3, [pc, #24]	@ (8006bec <MX_PDM2PCM_Init+0x50>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8006bd6:	4905      	ldr	r1, [pc, #20]	@ (8006bec <MX_PDM2PCM_Init+0x50>)
 8006bd8:	4802      	ldr	r0, [pc, #8]	@ (8006be4 <MX_PDM2PCM_Init+0x48>)
 8006bda:	f001 fde3 	bl	80087a4 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8006bde:	bf00      	nop
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000f38 	.word	0x20000f38
 8006be8:	7d70a3d6 	.word	0x7d70a3d6
 8006bec:	20000f84 	.word	0x20000f84

08006bf0 <D16_GENERIC>:
 8006bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	b089      	sub	sp, #36	@ 0x24
 8006bf6:	68d4      	ldr	r4, [r2, #12]
 8006bf8:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8006bfa:	6993      	ldr	r3, [r2, #24]
 8006bfc:	9407      	str	r4, [sp, #28]
 8006bfe:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8006c00:	9306      	str	r3, [sp, #24]
 8006c02:	9402      	str	r4, [sp, #8]
 8006c04:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8006c08:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8006c0c:	69d3      	ldr	r3, [r2, #28]
 8006c0e:	6896      	ldr	r6, [r2, #8]
 8006c10:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8006c12:	9103      	str	r1, [sp, #12]
 8006c14:	2d00      	cmp	r5, #0
 8006c16:	d066      	beq.n	8006ce6 <D16_GENERIC+0xf6>
 8006c18:	f004 0510 	and.w	r5, r4, #16
 8006c1c:	f004 0420 	and.w	r4, r4, #32
 8006c20:	9504      	str	r5, [sp, #16]
 8006c22:	4938      	ldr	r1, [pc, #224]	@ (8006d04 <D16_GENERIC+0x114>)
 8006c24:	9405      	str	r4, [sp, #20]
 8006c26:	f04f 0e00 	mov.w	lr, #0
 8006c2a:	4635      	mov	r5, r6
 8006c2c:	e04f      	b.n	8006cce <D16_GENERIC+0xde>
 8006c2e:	5d87      	ldrb	r7, [r0, r6]
 8006c30:	7804      	ldrb	r4, [r0, #0]
 8006c32:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8006c36:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8006c3a:	b2e6      	uxtb	r6, r4
 8006c3c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8006c40:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8006c44:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8006c48:	4433      	add	r3, r6
 8006c4a:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8006c4e:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8006c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c56:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8006c5a:	0aa3      	lsrs	r3, r4, #10
 8006c5c:	4c2a      	ldr	r4, [pc, #168]	@ (8006d08 <D16_GENERIC+0x118>)
 8006c5e:	fb26 5404 	smlad	r4, r6, r4, r5
 8006c62:	4d2a      	ldr	r5, [pc, #168]	@ (8006d0c <D16_GENERIC+0x11c>)
 8006c64:	fb26 f505 	smuad	r5, r6, r5
 8006c68:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8006c6c:	eb04 080a 	add.w	r8, r4, sl
 8006c70:	eba8 080b 	sub.w	r8, r8, fp
 8006c74:	4646      	mov	r6, r8
 8006c76:	17f7      	asrs	r7, r6, #31
 8006c78:	e9cd 6700 	strd	r6, r7, [sp]
 8006c7c:	9e04      	ldr	r6, [sp, #16]
 8006c7e:	f10e 0c01 	add.w	ip, lr, #1
 8006c82:	b16e      	cbz	r6, 8006ca0 <D16_GENERIC+0xb0>
 8006c84:	6a16      	ldr	r6, [r2, #32]
 8006c86:	9f01      	ldr	r7, [sp, #4]
 8006c88:	fba8 8906 	umull	r8, r9, r8, r6
 8006c8c:	fb06 9907 	mla	r9, r6, r7, r9
 8006c90:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8006c94:	f149 0900 	adc.w	r9, r9, #0
 8006c98:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8006c9c:	46a3      	mov	fp, r4
 8006c9e:	4654      	mov	r4, sl
 8006ca0:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8006ca2:	9f02      	ldr	r7, [sp, #8]
 8006ca4:	0424      	lsls	r4, r4, #16
 8006ca6:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8006caa:	f04f 0900 	mov.w	r9, #0
 8006cae:	fb0e fe06 	mul.w	lr, lr, r6
 8006cb2:	fbc7 8904 	smlal	r8, r9, r7, r4
 8006cb6:	9e03      	ldr	r6, [sp, #12]
 8006cb8:	464f      	mov	r7, r9
 8006cba:	10bc      	asrs	r4, r7, #2
 8006cbc:	f304 040f 	ssat	r4, #16, r4
 8006cc0:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8006cc4:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8006cc6:	fa1f fe8c 	uxth.w	lr, ip
 8006cca:	4574      	cmp	r4, lr
 8006ccc:	d90a      	bls.n	8006ce4 <D16_GENERIC+0xf4>
 8006cce:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8006cd0:	2c01      	cmp	r4, #1
 8006cd2:	b2e6      	uxtb	r6, r4
 8006cd4:	d1ab      	bne.n	8006c2e <D16_GENERIC+0x3e>
 8006cd6:	9e05      	ldr	r6, [sp, #20]
 8006cd8:	f850 4b02 	ldr.w	r4, [r0], #2
 8006cdc:	2e00      	cmp	r6, #0
 8006cde:	d0ac      	beq.n	8006c3a <D16_GENERIC+0x4a>
 8006ce0:	ba64      	rev16	r4, r4
 8006ce2:	e7aa      	b.n	8006c3a <D16_GENERIC+0x4a>
 8006ce4:	462e      	mov	r6, r5
 8006ce6:	9907      	ldr	r1, [sp, #28]
 8006ce8:	61d3      	str	r3, [r2, #28]
 8006cea:	9b06      	ldr	r3, [sp, #24]
 8006cec:	6096      	str	r6, [r2, #8]
 8006cee:	2000      	movs	r0, #0
 8006cf0:	60d1      	str	r1, [r2, #12]
 8006cf2:	f8c2 a010 	str.w	sl, [r2, #16]
 8006cf6:	f8c2 b014 	str.w	fp, [r2, #20]
 8006cfa:	6193      	str	r3, [r2, #24]
 8006cfc:	b009      	add	sp, #36	@ 0x24
 8006cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d02:	bf00      	nop
 8006d04:	20000000 	.word	0x20000000
 8006d08:	00030001 	.word	0x00030001
 8006d0c:	00010003 	.word	0x00010003

08006d10 <D24_GENERIC>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8006d16:	6993      	ldr	r3, [r2, #24]
 8006d18:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8006d1a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8006d1e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8006d22:	6894      	ldr	r4, [r2, #8]
 8006d24:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8006d28:	b089      	sub	sp, #36	@ 0x24
 8006d2a:	9307      	str	r3, [sp, #28]
 8006d2c:	9503      	str	r5, [sp, #12]
 8006d2e:	69d3      	ldr	r3, [r2, #28]
 8006d30:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8006d32:	9104      	str	r1, [sp, #16]
 8006d34:	2e00      	cmp	r6, #0
 8006d36:	f000 8096 	beq.w	8006e66 <D24_GENERIC+0x156>
 8006d3a:	f005 0610 	and.w	r6, r5, #16
 8006d3e:	f005 0520 	and.w	r5, r5, #32
 8006d42:	4954      	ldr	r1, [pc, #336]	@ (8006e94 <D24_GENERIC+0x184>)
 8006d44:	9605      	str	r6, [sp, #20]
 8006d46:	9506      	str	r5, [sp, #24]
 8006d48:	f04f 0e00 	mov.w	lr, #0
 8006d4c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d50:	e06a      	b.n	8006e28 <D24_GENERIC+0x118>
 8006d52:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8006d56:	f810 8007 	ldrb.w	r8, [r0, r7]
 8006d5a:	f890 c000 	ldrb.w	ip, [r0]
 8006d5e:	042d      	lsls	r5, r5, #16
 8006d60:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8006d64:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8006d68:	44ac      	add	ip, r5
 8006d6a:	4438      	add	r0, r7
 8006d6c:	fa5f f68c 	uxtb.w	r6, ip
 8006d70:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8006d74:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8006d78:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8006d7c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d80:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8006d84:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8006d88:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8006d8c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8006d90:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006d94:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8006d98:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8006d9c:	4d3e      	ldr	r5, [pc, #248]	@ (8006e98 <D24_GENERIC+0x188>)
 8006d9e:	fb26 b705 	smlad	r7, r6, r5, fp
 8006da2:	4d3e      	ldr	r5, [pc, #248]	@ (8006e9c <D24_GENERIC+0x18c>)
 8006da4:	fb26 4b05 	smlad	fp, r6, r5, r4
 8006da8:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8006dac:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8006db0:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8006db4:	2401      	movs	r4, #1
 8006db6:	fb26 f604 	smuad	r6, r6, r4
 8006dba:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8006dbe:	9f02      	ldr	r7, [sp, #8]
 8006dc0:	eb0e 0c04 	add.w	ip, lr, r4
 8006dc4:	eb08 0406 	add.w	r4, r8, r6
 8006dc8:	eb05 060a 	add.w	r6, r5, sl
 8006dcc:	1bf6      	subs	r6, r6, r7
 8006dce:	4637      	mov	r7, r6
 8006dd0:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8006dd4:	e9cd 7800 	strd	r7, r8, [sp]
 8006dd8:	9f05      	ldr	r7, [sp, #20]
 8006dda:	b177      	cbz	r7, 8006dfa <D24_GENERIC+0xea>
 8006ddc:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8006de0:	9502      	str	r5, [sp, #8]
 8006de2:	fba6 9a08 	umull	r9, sl, r6, r8
 8006de6:	9e01      	ldr	r6, [sp, #4]
 8006de8:	fb08 aa06 	mla	sl, r8, r6, sl
 8006dec:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8006df0:	f14a 0700 	adc.w	r7, sl, #0
 8006df4:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8006df8:	4655      	mov	r5, sl
 8006dfa:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8006dfc:	9f03      	ldr	r7, [sp, #12]
 8006dfe:	03ad      	lsls	r5, r5, #14
 8006e00:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8006e04:	f04f 0900 	mov.w	r9, #0
 8006e08:	fb0e fe06 	mul.w	lr, lr, r6
 8006e0c:	fbc7 8905 	smlal	r8, r9, r7, r5
 8006e10:	9e04      	ldr	r6, [sp, #16]
 8006e12:	464f      	mov	r7, r9
 8006e14:	10bd      	asrs	r5, r7, #2
 8006e16:	f305 050f 	ssat	r5, #16, r5
 8006e1a:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8006e1e:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8006e20:	fa1f fe8c 	uxth.w	lr, ip
 8006e24:	4575      	cmp	r5, lr
 8006e26:	d91c      	bls.n	8006e62 <D24_GENERIC+0x152>
 8006e28:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8006e2a:	b2ef      	uxtb	r7, r5
 8006e2c:	2d01      	cmp	r5, #1
 8006e2e:	b23e      	sxth	r6, r7
 8006e30:	d18f      	bne.n	8006d52 <D24_GENERIC+0x42>
 8006e32:	9d06      	ldr	r5, [sp, #24]
 8006e34:	b15d      	cbz	r5, 8006e4e <D24_GENERIC+0x13e>
 8006e36:	f01e 0f01 	tst.w	lr, #1
 8006e3a:	d122      	bne.n	8006e82 <D24_GENERIC+0x172>
 8006e3c:	7805      	ldrb	r5, [r0, #0]
 8006e3e:	78c7      	ldrb	r7, [r0, #3]
 8006e40:	7846      	ldrb	r6, [r0, #1]
 8006e42:	022d      	lsls	r5, r5, #8
 8006e44:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8006e48:	44b4      	add	ip, r6
 8006e4a:	3002      	adds	r0, #2
 8006e4c:	e78e      	b.n	8006d6c <D24_GENERIC+0x5c>
 8006e4e:	7846      	ldrb	r6, [r0, #1]
 8006e50:	f890 c002 	ldrb.w	ip, [r0, #2]
 8006e54:	f810 5b03 	ldrb.w	r5, [r0], #3
 8006e58:	0236      	lsls	r6, r6, #8
 8006e5a:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8006e5e:	44ac      	add	ip, r5
 8006e60:	e784      	b.n	8006d6c <D24_GENERIC+0x5c>
 8006e62:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8006e66:	61d3      	str	r3, [r2, #28]
 8006e68:	9b07      	ldr	r3, [sp, #28]
 8006e6a:	6094      	str	r4, [r2, #8]
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f8c2 b00c 	str.w	fp, [r2, #12]
 8006e72:	f8c2 a010 	str.w	sl, [r2, #16]
 8006e76:	f8c2 9014 	str.w	r9, [r2, #20]
 8006e7a:	6193      	str	r3, [r2, #24]
 8006e7c:	b009      	add	sp, #36	@ 0x24
 8006e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e82:	78c5      	ldrb	r5, [r0, #3]
 8006e84:	7887      	ldrb	r7, [r0, #2]
 8006e86:	f810 6b04 	ldrb.w	r6, [r0], #4
 8006e8a:	022d      	lsls	r5, r5, #8
 8006e8c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8006e90:	44b4      	add	ip, r6
 8006e92:	e76b      	b.n	8006d6c <D24_GENERIC+0x5c>
 8006e94:	20000000 	.word	0x20000000
 8006e98:	00030001 	.word	0x00030001
 8006e9c:	00060007 	.word	0x00060007

08006ea0 <D32_GENERIC>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8006ea6:	6993      	ldr	r3, [r2, #24]
 8006ea8:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8006eaa:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8006eae:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8006eb2:	69d6      	ldr	r6, [r2, #28]
 8006eb4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8006eb8:	b089      	sub	sp, #36	@ 0x24
 8006eba:	9307      	str	r3, [sp, #28]
 8006ebc:	9403      	str	r4, [sp, #12]
 8006ebe:	6893      	ldr	r3, [r2, #8]
 8006ec0:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8006ec2:	9104      	str	r1, [sp, #16]
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	f000 809f 	beq.w	8007008 <D32_GENERIC+0x168>
 8006eca:	f004 0510 	and.w	r5, r4, #16
 8006ece:	f004 0420 	and.w	r4, r4, #32
 8006ed2:	9505      	str	r5, [sp, #20]
 8006ed4:	4953      	ldr	r1, [pc, #332]	@ (8007024 <D32_GENERIC+0x184>)
 8006ed6:	9406      	str	r4, [sp, #24]
 8006ed8:	f04f 0c00 	mov.w	ip, #0
 8006edc:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ee0:	461d      	mov	r5, r3
 8006ee2:	4617      	mov	r7, r2
 8006ee4:	e077      	b.n	8006fd6 <D32_GENERIC+0x136>
 8006ee6:	f818 3003 	ldrb.w	r3, [r8, r3]
 8006eea:	f810 800e 	ldrb.w	r8, [r0, lr]
 8006eee:	f810 e002 	ldrb.w	lr, [r0, r2]
 8006ef2:	7800      	ldrb	r0, [r0, #0]
 8006ef4:	041b      	lsls	r3, r3, #16
 8006ef6:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8006efa:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8006efe:	4403      	add	r3, r0
 8006f00:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8006f04:	b2dc      	uxtb	r4, r3
 8006f06:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006f0a:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8006f0e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8006f12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006f16:	0e1b      	lsrs	r3, r3, #24
 8006f18:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8006f1c:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8006f20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006f24:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8006f28:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8006f2c:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8006f30:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8006f34:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006f38:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006f3c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006f40:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8006f44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f48:	4b37      	ldr	r3, [pc, #220]	@ (8007028 <D32_GENERIC+0x188>)
 8006f4a:	fb22 b403 	smlad	r4, r2, r3, fp
 8006f4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006f52:	fb2e 4803 	smlad	r8, lr, r3, r4
 8006f56:	4b35      	ldr	r3, [pc, #212]	@ (800702c <D32_GENERIC+0x18c>)
 8006f58:	fb22 5503 	smlad	r5, r2, r3, r5
 8006f5c:	4b34      	ldr	r3, [pc, #208]	@ (8007030 <D32_GENERIC+0x190>)
 8006f5e:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8006f62:	2301      	movs	r3, #1
 8006f64:	fb22 f203 	smuad	r2, r2, r3
 8006f68:	4b32      	ldr	r3, [pc, #200]	@ (8007034 <D32_GENERIC+0x194>)
 8006f6a:	fb2e 2503 	smlad	r5, lr, r3, r2
 8006f6e:	9b02      	ldr	r3, [sp, #8]
 8006f70:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 8006f74:	eb04 080a 	add.w	r8, r4, sl
 8006f78:	eba8 0803 	sub.w	r8, r8, r3
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	17d3      	asrs	r3, r2, #31
 8006f80:	e9cd 2300 	strd	r2, r3, [sp]
 8006f84:	9b05      	ldr	r3, [sp, #20]
 8006f86:	f10c 0e01 	add.w	lr, ip, #1
 8006f8a:	b16b      	cbz	r3, 8006fa8 <D32_GENERIC+0x108>
 8006f8c:	6a3a      	ldr	r2, [r7, #32]
 8006f8e:	9b01      	ldr	r3, [sp, #4]
 8006f90:	9402      	str	r4, [sp, #8]
 8006f92:	fba8 8902 	umull	r8, r9, r8, r2
 8006f96:	fb02 9903 	mla	r9, r2, r3, r9
 8006f9a:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8006f9e:	f149 0900 	adc.w	r9, r9, #0
 8006fa2:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8006fa6:	4654      	mov	r4, sl
 8006fa8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006faa:	9a04      	ldr	r2, [sp, #16]
 8006fac:	fb0c fc03 	mul.w	ip, ip, r3
 8006fb0:	9b03      	ldr	r3, [sp, #12]
 8006fb2:	0364      	lsls	r4, r4, #13
 8006fb4:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8006fb8:	f04f 0900 	mov.w	r9, #0
 8006fbc:	fbc3 8904 	smlal	r8, r9, r3, r4
 8006fc0:	464b      	mov	r3, r9
 8006fc2:	109b      	asrs	r3, r3, #2
 8006fc4:	f303 030f 	ssat	r3, #16, r3
 8006fc8:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8006fcc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006fce:	fa1f fc8e 	uxth.w	ip, lr
 8006fd2:	4563      	cmp	r3, ip
 8006fd4:	d914      	bls.n	8007000 <D32_GENERIC+0x160>
 8006fd6:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 8006fd8:	b2e2      	uxtb	r2, r4
 8006fda:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8006fde:	eb00 080e 	add.w	r8, r0, lr
 8006fe2:	4253      	negs	r3, r2
 8006fe4:	2c01      	cmp	r4, #1
 8006fe6:	eb08 0403 	add.w	r4, r8, r3
 8006fea:	f47f af7c 	bne.w	8006ee6 <D32_GENERIC+0x46>
 8006fee:	1d02      	adds	r2, r0, #4
 8006ff0:	6803      	ldr	r3, [r0, #0]
 8006ff2:	9806      	ldr	r0, [sp, #24]
 8006ff4:	b110      	cbz	r0, 8006ffc <D32_GENERIC+0x15c>
 8006ff6:	ba5b      	rev16	r3, r3
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	e783      	b.n	8006f04 <D32_GENERIC+0x64>
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	e781      	b.n	8006f04 <D32_GENERIC+0x64>
 8007000:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007004:	462b      	mov	r3, r5
 8007006:	463a      	mov	r2, r7
 8007008:	6093      	str	r3, [r2, #8]
 800700a:	9b07      	ldr	r3, [sp, #28]
 800700c:	f8c2 b00c 	str.w	fp, [r2, #12]
 8007010:	2000      	movs	r0, #0
 8007012:	61d6      	str	r6, [r2, #28]
 8007014:	f8c2 a010 	str.w	sl, [r2, #16]
 8007018:	f8c2 9014 	str.w	r9, [r2, #20]
 800701c:	6193      	str	r3, [r2, #24]
 800701e:	b009      	add	sp, #36	@ 0x24
 8007020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007024:	20000000 	.word	0x20000000
 8007028:	00060003 	.word	0x00060003
 800702c:	000a000c 	.word	0x000a000c
 8007030:	000c000a 	.word	0x000c000a
 8007034:	00030006 	.word	0x00030006

08007038 <D48_GENERIC>:
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	b089      	sub	sp, #36	@ 0x24
 800703e:	6953      	ldr	r3, [r2, #20]
 8007040:	68d4      	ldr	r4, [r2, #12]
 8007042:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8007044:	9302      	str	r3, [sp, #8]
 8007046:	9400      	str	r4, [sp, #0]
 8007048:	6993      	ldr	r3, [r2, #24]
 800704a:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800704c:	9307      	str	r3, [sp, #28]
 800704e:	9403      	str	r4, [sp, #12]
 8007050:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007054:	69d6      	ldr	r6, [r2, #28]
 8007056:	6893      	ldr	r3, [r2, #8]
 8007058:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 800705a:	9104      	str	r1, [sp, #16]
 800705c:	2d00      	cmp	r5, #0
 800705e:	f000 80c5 	beq.w	80071ec <D48_GENERIC+0x1b4>
 8007062:	f004 0510 	and.w	r5, r4, #16
 8007066:	f004 0420 	and.w	r4, r4, #32
 800706a:	4967      	ldr	r1, [pc, #412]	@ (8007208 <D48_GENERIC+0x1d0>)
 800706c:	9505      	str	r5, [sp, #20]
 800706e:	9406      	str	r4, [sp, #24]
 8007070:	f04f 0c00 	mov.w	ip, #0
 8007074:	4657      	mov	r7, sl
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	e09c      	b.n	80071b4 <D48_GENERIC+0x17c>
 800707a:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800707e:	f810 b009 	ldrb.w	fp, [r0, r9]
 8007082:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8007086:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800708a:	7800      	ldrb	r0, [r0, #0]
 800708c:	0424      	lsls	r4, r4, #16
 800708e:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8007092:	f818 4005 	ldrb.w	r4, [r8, r5]
 8007096:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800709a:	44a8      	add	r8, r5
 800709c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 80070a0:	eb0b 0500 	add.w	r5, fp, r0
 80070a4:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 80070a8:	fa5f f885 	uxtb.w	r8, r5
 80070ac:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80070b0:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 80070b4:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 80070b8:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 80070bc:	0e2d      	lsrs	r5, r5, #24
 80070be:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 80070c2:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 80070c6:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 80070ca:	b2e6      	uxtb	r6, r4
 80070cc:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 80070d0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80070d4:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 80070d8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80070dc:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 80070e0:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 80070e4:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80070e8:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 80070ec:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80070f0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80070f4:	f3c6 0909 	ubfx	r9, r6, #0, #10
 80070f8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80070fc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007100:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007104:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8007108:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800710c:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8007110:	4c3e      	ldr	r4, [pc, #248]	@ (800720c <D48_GENERIC+0x1d4>)
 8007112:	9d00      	ldr	r5, [sp, #0]
 8007114:	fb2a 5404 	smlad	r4, sl, r4, r5
 8007118:	4d3d      	ldr	r5, [pc, #244]	@ (8007210 <D48_GENERIC+0x1d8>)
 800711a:	fb28 4405 	smlad	r4, r8, r5, r4
 800711e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007122:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8007126:	4c3b      	ldr	r4, [pc, #236]	@ (8007214 <D48_GENERIC+0x1dc>)
 8007128:	9b01      	ldr	r3, [sp, #4]
 800712a:	fb2a 3304 	smlad	r3, sl, r4, r3
 800712e:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 8007132:	fb28 3304 	smlad	r3, r8, r4, r3
 8007136:	4c38      	ldr	r4, [pc, #224]	@ (8007218 <D48_GENERIC+0x1e0>)
 8007138:	fb2e 3304 	smlad	r3, lr, r4, r3
 800713c:	2501      	movs	r5, #1
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	fb2a fa05 	smuad	sl, sl, r5
 8007144:	4b35      	ldr	r3, [pc, #212]	@ (800721c <D48_GENERIC+0x1e4>)
 8007146:	fb28 a803 	smlad	r8, r8, r3, sl
 800714a:	4b35      	ldr	r3, [pc, #212]	@ (8007220 <D48_GENERIC+0x1e8>)
 800714c:	fb2e 8303 	smlad	r3, lr, r3, r8
 8007150:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	9b02      	ldr	r3, [sp, #8]
 8007158:	eb04 0807 	add.w	r8, r4, r7
 800715c:	eba8 0803 	sub.w	r8, r8, r3
 8007160:	9b05      	ldr	r3, [sp, #20]
 8007162:	4465      	add	r5, ip
 8007164:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8007168:	b163      	cbz	r3, 8007184 <D48_GENERIC+0x14c>
 800716a:	6a17      	ldr	r7, [r2, #32]
 800716c:	9402      	str	r4, [sp, #8]
 800716e:	fba8 8907 	umull	r8, r9, r8, r7
 8007172:	fb07 990b 	mla	r9, r7, fp, r9
 8007176:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 800717a:	f149 0900 	adc.w	r9, r9, #0
 800717e:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8007182:	463c      	mov	r4, r7
 8007184:	f8b2 e028 	ldrh.w	lr, [r2, #40]	@ 0x28
 8007188:	9b03      	ldr	r3, [sp, #12]
 800718a:	02e4      	lsls	r4, r4, #11
 800718c:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007190:	f04f 0900 	mov.w	r9, #0
 8007194:	fb0c fc0e 	mul.w	ip, ip, lr
 8007198:	fbc3 8904 	smlal	r8, r9, r3, r4
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	ea4f 04a9 	mov.w	r4, r9, asr #2
 80071a2:	f304 040f 	ssat	r4, #16, r4
 80071a6:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 80071aa:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80071ac:	fa1f fc85 	uxth.w	ip, r5
 80071b0:	4564      	cmp	r4, ip
 80071b2:	d919      	bls.n	80071e8 <D48_GENERIC+0x1b0>
 80071b4:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 80071b6:	fa5f fe84 	uxtb.w	lr, r4
 80071ba:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 80071be:	f1ce 0500 	rsb	r5, lr, #0
 80071c2:	eb00 0b09 	add.w	fp, r0, r9
 80071c6:	eb0b 0a05 	add.w	sl, fp, r5
 80071ca:	2c01      	cmp	r4, #1
 80071cc:	eb0a 0809 	add.w	r8, sl, r9
 80071d0:	f47f af53 	bne.w	800707a <D48_GENERIC+0x42>
 80071d4:	9b06      	ldr	r3, [sp, #24]
 80071d6:	6805      	ldr	r5, [r0, #0]
 80071d8:	6844      	ldr	r4, [r0, #4]
 80071da:	3006      	adds	r0, #6
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f43f af63 	beq.w	80070a8 <D48_GENERIC+0x70>
 80071e2:	ba6d      	rev16	r5, r5
 80071e4:	ba64      	rev16	r4, r4
 80071e6:	e75f      	b.n	80070a8 <D48_GENERIC+0x70>
 80071e8:	9b01      	ldr	r3, [sp, #4]
 80071ea:	46ba      	mov	sl, r7
 80071ec:	6093      	str	r3, [r2, #8]
 80071ee:	9b00      	ldr	r3, [sp, #0]
 80071f0:	60d3      	str	r3, [r2, #12]
 80071f2:	9b02      	ldr	r3, [sp, #8]
 80071f4:	6153      	str	r3, [r2, #20]
 80071f6:	9b07      	ldr	r3, [sp, #28]
 80071f8:	61d6      	str	r6, [r2, #28]
 80071fa:	2000      	movs	r0, #0
 80071fc:	f8c2 a010 	str.w	sl, [r2, #16]
 8007200:	6193      	str	r3, [r2, #24]
 8007202:	b009      	add	sp, #36	@ 0x24
 8007204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007208:	20000000 	.word	0x20000000
 800720c:	000f000a 	.word	0x000f000a
 8007210:	00060003 	.word	0x00060003
 8007214:	00150019 	.word	0x00150019
 8007218:	00190015 	.word	0x00190015
 800721c:	00030006 	.word	0x00030006
 8007220:	000a000f 	.word	0x000a000f

08007224 <D64_GENERIC>:
 8007224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007228:	b089      	sub	sp, #36	@ 0x24
 800722a:	6913      	ldr	r3, [r2, #16]
 800722c:	6895      	ldr	r5, [r2, #8]
 800722e:	9303      	str	r3, [sp, #12]
 8007230:	9501      	str	r5, [sp, #4]
 8007232:	6953      	ldr	r3, [r2, #20]
 8007234:	68d5      	ldr	r5, [r2, #12]
 8007236:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	9500      	str	r5, [sp, #0]
 800723c:	6993      	ldr	r3, [r2, #24]
 800723e:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8007240:	9307      	str	r3, [sp, #28]
 8007242:	9505      	str	r5, [sp, #20]
 8007244:	69d3      	ldr	r3, [r2, #28]
 8007246:	9106      	str	r1, [sp, #24]
 8007248:	2c00      	cmp	r4, #0
 800724a:	f000 80d9 	beq.w	8007400 <D64_GENERIC+0x1dc>
 800724e:	6a11      	ldr	r1, [r2, #32]
 8007250:	9102      	str	r1, [sp, #8]
 8007252:	f8df e1ec 	ldr.w	lr, [pc, #492]	@ 8007440 <D64_GENERIC+0x21c>
 8007256:	f04f 0c00 	mov.w	ip, #0
 800725a:	4681      	mov	r9, r0
 800725c:	e0c1      	b.n	80073e2 <D64_GENERIC+0x1be>
 800725e:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8007262:	4274      	negs	r4, r6
 8007264:	eb09 0708 	add.w	r7, r9, r8
 8007268:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800726c:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8007270:	5d38      	ldrb	r0, [r7, r4]
 8007272:	5d29      	ldrb	r1, [r5, r4]
 8007274:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8007278:	f819 a008 	ldrb.w	sl, [r9, r8]
 800727c:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8007280:	f899 7000 	ldrb.w	r7, [r9]
 8007284:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8007288:	4425      	add	r5, r4
 800728a:	0409      	lsls	r1, r1, #16
 800728c:	0400      	lsls	r0, r0, #16
 800728e:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8007292:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8007296:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800729a:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800729e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80072a2:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80072a6:	4459      	add	r1, fp
 80072a8:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 80072ac:	4438      	add	r0, r7
 80072ae:	b2c5      	uxtb	r5, r0
 80072b0:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80072b4:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 80072b8:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80072bc:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80072c0:	0e00      	lsrs	r0, r0, #24
 80072c2:	eb03 0806 	add.w	r8, r3, r6
 80072c6:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 80072ca:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 80072ce:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80072d2:	b2c8      	uxtb	r0, r1
 80072d4:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80072d8:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80072dc:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 80072e0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80072e4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80072e8:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80072ec:	0e09      	lsrs	r1, r1, #24
 80072ee:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 80072f2:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80072f6:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80072fa:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80072fe:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8007302:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8007306:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800730a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800730e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007312:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007316:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800731a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800731e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007322:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007326:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800732a:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800732e:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8007332:	0a8b      	lsrs	r3, r1, #10
 8007334:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007338:	4939      	ldr	r1, [pc, #228]	@ (8007420 <D64_GENERIC+0x1fc>)
 800733a:	9c00      	ldr	r4, [sp, #0]
 800733c:	fb28 4101 	smlad	r1, r8, r1, r4
 8007340:	4c38      	ldr	r4, [pc, #224]	@ (8007424 <D64_GENERIC+0x200>)
 8007342:	fb27 1104 	smlad	r1, r7, r4, r1
 8007346:	4c38      	ldr	r4, [pc, #224]	@ (8007428 <D64_GENERIC+0x204>)
 8007348:	fb20 1104 	smlad	r1, r0, r4, r1
 800734c:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8007350:	fb2a 1106 	smlad	r1, sl, r6, r1
 8007354:	4c35      	ldr	r4, [pc, #212]	@ (800742c <D64_GENERIC+0x208>)
 8007356:	9d01      	ldr	r5, [sp, #4]
 8007358:	fb28 5404 	smlad	r4, r8, r4, r5
 800735c:	4d33      	ldr	r5, [pc, #204]	@ (800742c <D64_GENERIC+0x208>)
 800735e:	fb2a 4415 	smladx	r4, sl, r5, r4
 8007362:	4d33      	ldr	r5, [pc, #204]	@ (8007430 <D64_GENERIC+0x20c>)
 8007364:	fb27 4405 	smlad	r4, r7, r5, r4
 8007368:	fb20 4415 	smladx	r4, r0, r5, r4
 800736c:	2501      	movs	r5, #1
 800736e:	9400      	str	r4, [sp, #0]
 8007370:	fb28 f805 	smuad	r8, r8, r5
 8007374:	4c2f      	ldr	r4, [pc, #188]	@ (8007434 <D64_GENERIC+0x210>)
 8007376:	fb27 8704 	smlad	r7, r7, r4, r8
 800737a:	4c2f      	ldr	r4, [pc, #188]	@ (8007438 <D64_GENERIC+0x214>)
 800737c:	fb20 7004 	smlad	r0, r0, r4, r7
 8007380:	4c2e      	ldr	r4, [pc, #184]	@ (800743c <D64_GENERIC+0x218>)
 8007382:	fb2a 0004 	smlad	r0, sl, r4, r0
 8007386:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 800738a:	9902      	ldr	r1, [sp, #8]
 800738c:	9001      	str	r0, [sp, #4]
 800738e:	b189      	cbz	r1, 80073b4 <D64_GENERIC+0x190>
 8007390:	9803      	ldr	r0, [sp, #12]
 8007392:	9c04      	ldr	r4, [sp, #16]
 8007394:	9604      	str	r6, [sp, #16]
 8007396:	4430      	add	r0, r6
 8007398:	1b00      	subs	r0, r0, r4
 800739a:	17c5      	asrs	r5, r0, #31
 800739c:	460f      	mov	r7, r1
 800739e:	fba0 0101 	umull	r0, r1, r0, r1
 80073a2:	fb07 1105 	mla	r1, r7, r5, r1
 80073a6:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 80073aa:	f141 0100 	adc.w	r1, r1, #0
 80073ae:	0049      	lsls	r1, r1, #1
 80073b0:	9103      	str	r1, [sp, #12]
 80073b2:	460e      	mov	r6, r1
 80073b4:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 80073b6:	9905      	ldr	r1, [sp, #20]
 80073b8:	9806      	ldr	r0, [sp, #24]
 80073ba:	02b6      	lsls	r6, r6, #10
 80073bc:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 80073c0:	f04f 0800 	mov.w	r8, #0
 80073c4:	fb0c f404 	mul.w	r4, ip, r4
 80073c8:	fbc1 7806 	smlal	r7, r8, r1, r6
 80073cc:	4641      	mov	r1, r8
 80073ce:	1089      	asrs	r1, r1, #2
 80073d0:	f301 010f 	ssat	r1, #16, r1
 80073d4:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 80073d8:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 80073da:	f10c 0c01 	add.w	ip, ip, #1
 80073de:	4561      	cmp	r1, ip
 80073e0:	dd0e      	ble.n	8007400 <D64_GENERIC+0x1dc>
 80073e2:	8d56      	ldrh	r6, [r2, #42]	@ 0x2a
 80073e4:	2e01      	cmp	r6, #1
 80073e6:	f47f af3a 	bne.w	800725e <D64_GENERIC+0x3a>
 80073ea:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 80073ec:	06b4      	lsls	r4, r6, #26
 80073ee:	e899 0003 	ldmia.w	r9, {r0, r1}
 80073f2:	f109 0908 	add.w	r9, r9, #8
 80073f6:	f57f af5a 	bpl.w	80072ae <D64_GENERIC+0x8a>
 80073fa:	ba40      	rev16	r0, r0
 80073fc:	ba49      	rev16	r1, r1
 80073fe:	e756      	b.n	80072ae <D64_GENERIC+0x8a>
 8007400:	61d3      	str	r3, [r2, #28]
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	9901      	ldr	r1, [sp, #4]
 8007406:	6113      	str	r3, [r2, #16]
 8007408:	9b04      	ldr	r3, [sp, #16]
 800740a:	6091      	str	r1, [r2, #8]
 800740c:	6153      	str	r3, [r2, #20]
 800740e:	9900      	ldr	r1, [sp, #0]
 8007410:	9b07      	ldr	r3, [sp, #28]
 8007412:	60d1      	str	r1, [r2, #12]
 8007414:	2000      	movs	r0, #0
 8007416:	6193      	str	r3, [r2, #24]
 8007418:	b009      	add	sp, #36	@ 0x24
 800741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741e:	bf00      	nop
 8007420:	001c0015 	.word	0x001c0015
 8007424:	000f000a 	.word	0x000f000a
 8007428:	00060003 	.word	0x00060003
 800742c:	0024002a 	.word	0x0024002a
 8007430:	002e0030 	.word	0x002e0030
 8007434:	00030006 	.word	0x00030006
 8007438:	000a000f 	.word	0x000a000f
 800743c:	0015001c 	.word	0x0015001c
 8007440:	20000000 	.word	0x20000000

08007444 <D80_GENERIC>:
 8007444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007448:	b08b      	sub	sp, #44	@ 0x2c
 800744a:	6914      	ldr	r4, [r2, #16]
 800744c:	9404      	str	r4, [sp, #16]
 800744e:	6954      	ldr	r4, [r2, #20]
 8007450:	9405      	str	r4, [sp, #20]
 8007452:	6994      	ldr	r4, [r2, #24]
 8007454:	9409      	str	r4, [sp, #36]	@ 0x24
 8007456:	6894      	ldr	r4, [r2, #8]
 8007458:	9402      	str	r4, [sp, #8]
 800745a:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 800745c:	68d4      	ldr	r4, [r2, #12]
 800745e:	9401      	str	r4, [sp, #4]
 8007460:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007462:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8007466:	9406      	str	r4, [sp, #24]
 8007468:	9107      	str	r1, [sp, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 810f 	beq.w	800768e <D80_GENERIC+0x24a>
 8007470:	6a13      	ldr	r3, [r2, #32]
 8007472:	9308      	str	r3, [sp, #32]
 8007474:	2300      	movs	r3, #0
 8007476:	9200      	str	r2, [sp, #0]
 8007478:	f8df 9264 	ldr.w	r9, [pc, #612]	@ 80076e0 <D80_GENERIC+0x29c>
 800747c:	f8cd b00c 	str.w	fp, [sp, #12]
 8007480:	461a      	mov	r2, r3
 8007482:	e0ed      	b.n	8007660 <D80_GENERIC+0x21c>
 8007484:	fa5f fc8c 	uxtb.w	ip, ip
 8007488:	fa0f f48c 	sxth.w	r4, ip
 800748c:	0066      	lsls	r6, r4, #1
 800748e:	eb06 0804 	add.w	r8, r6, r4
 8007492:	f1cc 0500 	rsb	r5, ip, #0
 8007496:	eb00 0108 	add.w	r1, r0, r8
 800749a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800749e:	194b      	adds	r3, r1, r5
 80074a0:	5d49      	ldrb	r1, [r1, r5]
 80074a2:	f810 a008 	ldrb.w	sl, [r0, r8]
 80074a6:	f813 b004 	ldrb.w	fp, [r3, r4]
 80074aa:	f810 c00c 	ldrb.w	ip, [r0, ip]
 80074ae:	f890 8000 	ldrb.w	r8, [r0]
 80074b2:	eb03 0e04 	add.w	lr, r3, r4
 80074b6:	eb0e 0705 	add.w	r7, lr, r5
 80074ba:	0409      	lsls	r1, r1, #16
 80074bc:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80074c0:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80074c4:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80074c8:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80074cc:	eb0a 0004 	add.w	r0, sl, r4
 80074d0:	041b      	lsls	r3, r3, #16
 80074d2:	f81a a004 	ldrb.w	sl, [sl, r4]
 80074d6:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 80074da:	5d44      	ldrb	r4, [r0, r5]
 80074dc:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80074e0:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80074e4:	4428      	add	r0, r5
 80074e6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80074ea:	4441      	add	r1, r8
 80074ec:	4430      	add	r0, r6
 80074ee:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 80074f2:	441f      	add	r7, r3
 80074f4:	b2cd      	uxtb	r5, r1
 80074f6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80074fa:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 80074fe:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007508:	0e09      	lsrs	r1, r1, #24
 800750a:	4433      	add	r3, r6
 800750c:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8007510:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8007514:	b2fd      	uxtb	r5, r7
 8007516:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800751a:	469b      	mov	fp, r3
 800751c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8007520:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8007524:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8007528:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800752c:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8007530:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8007534:	0e3b      	lsrs	r3, r7, #24
 8007536:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800753a:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800753e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007542:	fa5f fe84 	uxtb.w	lr, r4
 8007546:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800754a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800754e:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8007552:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8007556:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800755a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800755e:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8007562:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8007566:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800756a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800756e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8007572:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007576:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800757a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800757e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8007582:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8007586:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800758a:	0aa3      	lsrs	r3, r4, #10
 800758c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007590:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007594:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007598:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800759c:	9303      	str	r3, [sp, #12]
 800759e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 80075a2:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 80075a6:	4b42      	ldr	r3, [pc, #264]	@ (80076b0 <D80_GENERIC+0x26c>)
 80075a8:	9901      	ldr	r1, [sp, #4]
 80075aa:	fb2b 1303 	smlad	r3, fp, r3, r1
 80075ae:	4941      	ldr	r1, [pc, #260]	@ (80076b4 <D80_GENERIC+0x270>)
 80075b0:	fb28 3301 	smlad	r3, r8, r1, r3
 80075b4:	4940      	ldr	r1, [pc, #256]	@ (80076b8 <D80_GENERIC+0x274>)
 80075b6:	fb2c 3301 	smlad	r3, ip, r1, r3
 80075ba:	4940      	ldr	r1, [pc, #256]	@ (80076bc <D80_GENERIC+0x278>)
 80075bc:	fb27 3301 	smlad	r3, r7, r1, r3
 80075c0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80075c4:	fb2e 3301 	smlad	r3, lr, r1, r3
 80075c8:	493d      	ldr	r1, [pc, #244]	@ (80076c0 <D80_GENERIC+0x27c>)
 80075ca:	9c02      	ldr	r4, [sp, #8]
 80075cc:	fb2b 4401 	smlad	r4, fp, r1, r4
 80075d0:	493c      	ldr	r1, [pc, #240]	@ (80076c4 <D80_GENERIC+0x280>)
 80075d2:	fb28 4401 	smlad	r4, r8, r1, r4
 80075d6:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 80075da:	fb2c 4101 	smlad	r1, ip, r1, r4
 80075de:	4c3a      	ldr	r4, [pc, #232]	@ (80076c8 <D80_GENERIC+0x284>)
 80075e0:	fb27 1104 	smlad	r1, r7, r4, r1
 80075e4:	4c39      	ldr	r4, [pc, #228]	@ (80076cc <D80_GENERIC+0x288>)
 80075e6:	fb2e 1104 	smlad	r1, lr, r4, r1
 80075ea:	9101      	str	r1, [sp, #4]
 80075ec:	2101      	movs	r1, #1
 80075ee:	fb2b fb01 	smuad	fp, fp, r1
 80075f2:	4937      	ldr	r1, [pc, #220]	@ (80076d0 <D80_GENERIC+0x28c>)
 80075f4:	fb28 b801 	smlad	r8, r8, r1, fp
 80075f8:	4d36      	ldr	r5, [pc, #216]	@ (80076d4 <D80_GENERIC+0x290>)
 80075fa:	fb2c 8c05 	smlad	ip, ip, r5, r8
 80075fe:	4d36      	ldr	r5, [pc, #216]	@ (80076d8 <D80_GENERIC+0x294>)
 8007600:	fb27 c705 	smlad	r7, r7, r5, ip
 8007604:	4d35      	ldr	r5, [pc, #212]	@ (80076dc <D80_GENERIC+0x298>)
 8007606:	fb2e 7105 	smlad	r1, lr, r5, r7
 800760a:	9102      	str	r1, [sp, #8]
 800760c:	9908      	ldr	r1, [sp, #32]
 800760e:	f5a3 337a 	sub.w	r3, r3, #256000	@ 0x3e800
 8007612:	b181      	cbz	r1, 8007636 <D80_GENERIC+0x1f2>
 8007614:	9c04      	ldr	r4, [sp, #16]
 8007616:	9d05      	ldr	r5, [sp, #20]
 8007618:	9305      	str	r3, [sp, #20]
 800761a:	441c      	add	r4, r3
 800761c:	1b64      	subs	r4, r4, r5
 800761e:	17e7      	asrs	r7, r4, #31
 8007620:	fba4 4501 	umull	r4, r5, r4, r1
 8007624:	fb01 5507 	mla	r5, r1, r7, r5
 8007628:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 800762c:	f145 0500 	adc.w	r5, r5, #0
 8007630:	0069      	lsls	r1, r5, #1
 8007632:	9104      	str	r1, [sp, #16]
 8007634:	460b      	mov	r3, r1
 8007636:	9e00      	ldr	r6, [sp, #0]
 8007638:	9f06      	ldr	r7, [sp, #24]
 800763a:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 800763c:	025b      	lsls	r3, r3, #9
 800763e:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8007642:	2500      	movs	r5, #0
 8007644:	fb02 f101 	mul.w	r1, r2, r1
 8007648:	fbc7 4503 	smlal	r4, r5, r7, r3
 800764c:	9c07      	ldr	r4, [sp, #28]
 800764e:	10ab      	asrs	r3, r5, #2
 8007650:	f303 030f 	ssat	r3, #16, r3
 8007654:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8007658:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 800765a:	3201      	adds	r2, #1
 800765c:	4293      	cmp	r3, r2
 800765e:	dd13      	ble.n	8007688 <D80_GENERIC+0x244>
 8007660:	9b00      	ldr	r3, [sp, #0]
 8007662:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	@ 0x2a
 8007666:	f1bc 0f01 	cmp.w	ip, #1
 800766a:	f47f af0b 	bne.w	8007484 <D80_GENERIC+0x40>
 800766e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007670:	6884      	ldr	r4, [r0, #8]
 8007672:	069b      	lsls	r3, r3, #26
 8007674:	e890 0082 	ldmia.w	r0, {r1, r7}
 8007678:	f100 000a 	add.w	r0, r0, #10
 800767c:	f57f af3a 	bpl.w	80074f4 <D80_GENERIC+0xb0>
 8007680:	ba49      	rev16	r1, r1
 8007682:	ba7f      	rev16	r7, r7
 8007684:	ba64      	rev16	r4, r4
 8007686:	e735      	b.n	80074f4 <D80_GENERIC+0xb0>
 8007688:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800768c:	4632      	mov	r2, r6
 800768e:	9b02      	ldr	r3, [sp, #8]
 8007690:	6093      	str	r3, [r2, #8]
 8007692:	9b01      	ldr	r3, [sp, #4]
 8007694:	60d3      	str	r3, [r2, #12]
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	6113      	str	r3, [r2, #16]
 800769a:	9b05      	ldr	r3, [sp, #20]
 800769c:	6153      	str	r3, [r2, #20]
 800769e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a0:	f8c2 b01c 	str.w	fp, [r2, #28]
 80076a4:	2000      	movs	r0, #0
 80076a6:	6193      	str	r3, [r2, #24]
 80076a8:	b00b      	add	sp, #44	@ 0x2c
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	bf00      	nop
 80076b0:	002d0024 	.word	0x002d0024
 80076b4:	001c0015 	.word	0x001c0015
 80076b8:	000f000a 	.word	0x000f000a
 80076bc:	00060003 	.word	0x00060003
 80076c0:	0037003f 	.word	0x0037003f
 80076c4:	00450049 	.word	0x00450049
 80076c8:	00490045 	.word	0x00490045
 80076cc:	003f0037 	.word	0x003f0037
 80076d0:	00030006 	.word	0x00030006
 80076d4:	000a000f 	.word	0x000a000f
 80076d8:	0015001c 	.word	0x0015001c
 80076dc:	0024002d 	.word	0x0024002d
 80076e0:	20000000 	.word	0x20000000

080076e4 <D128_GENERIC>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	b093      	sub	sp, #76	@ 0x4c
 80076ea:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80076ec:	9005      	str	r0, [sp, #20]
 80076ee:	4610      	mov	r0, r2
 80076f0:	9201      	str	r2, [sp, #4]
 80076f2:	6912      	ldr	r2, [r2, #16]
 80076f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80076f6:	4602      	mov	r2, r0
 80076f8:	6940      	ldr	r0, [r0, #20]
 80076fa:	900d      	str	r0, [sp, #52]	@ 0x34
 80076fc:	4610      	mov	r0, r2
 80076fe:	4614      	mov	r4, r2
 8007700:	6992      	ldr	r2, [r2, #24]
 8007702:	9211      	str	r2, [sp, #68]	@ 0x44
 8007704:	69c2      	ldr	r2, [r0, #28]
 8007706:	9202      	str	r2, [sp, #8]
 8007708:	68e2      	ldr	r2, [r4, #12]
 800770a:	6880      	ldr	r0, [r0, #8]
 800770c:	9203      	str	r2, [sp, #12]
 800770e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007710:	9004      	str	r0, [sp, #16]
 8007712:	920e      	str	r2, [sp, #56]	@ 0x38
 8007714:	910f      	str	r1, [sp, #60]	@ 0x3c
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 819b 	beq.w	8007a52 <D128_GENERIC+0x36e>
 800771c:	6a23      	ldr	r3, [r4, #32]
 800771e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007720:	2300      	movs	r3, #0
 8007722:	f8df 93a8 	ldr.w	r9, [pc, #936]	@ 8007acc <D128_GENERIC+0x3e8>
 8007726:	9306      	str	r3, [sp, #24]
 8007728:	e17a      	b.n	8007a20 <D128_GENERIC+0x33c>
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	9d05      	ldr	r5, [sp, #20]
 800772e:	b214      	sxth	r4, r2
 8007730:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8007734:	4250      	negs	r0, r2
 8007736:	eb05 010a 	add.w	r1, r5, sl
 800773a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800773e:	eb01 0800 	add.w	r8, r1, r0
 8007742:	eb0b 0c04 	add.w	ip, fp, r4
 8007746:	eb08 070c 	add.w	r7, r8, ip
 800774a:	183b      	adds	r3, r7, r0
 800774c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8007750:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8007754:	eb0e 0604 	add.w	r6, lr, r4
 8007758:	9307      	str	r3, [sp, #28]
 800775a:	1833      	adds	r3, r6, r0
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	462b      	mov	r3, r5
 8007760:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8007764:	f8cd a020 	str.w	sl, [sp, #32]
 8007768:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800776c:	f813 c002 	ldrb.w	ip, [r3, r2]
 8007770:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8007774:	5c3a      	ldrb	r2, [r7, r0]
 8007776:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800777a:	781f      	ldrb	r7, [r3, #0]
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	9d05      	ldr	r5, [sp, #20]
 8007780:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8007784:	5c09      	ldrb	r1, [r1, r0]
 8007786:	9709      	str	r7, [sp, #36]	@ 0x24
 8007788:	9307      	str	r3, [sp, #28]
 800778a:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800778e:	5c33      	ldrb	r3, [r6, r0]
 8007790:	0412      	lsls	r2, r2, #16
 8007792:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8007796:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800779a:	9d08      	ldr	r5, [sp, #32]
 800779c:	eb06 0a04 	add.w	sl, r6, r4
 80077a0:	0409      	lsls	r1, r1, #16
 80077a2:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 80077a6:	f81a 5000 	ldrb.w	r5, [sl, r0]
 80077aa:	5d36      	ldrb	r6, [r6, r4]
 80077ac:	9c05      	ldr	r4, [sp, #20]
 80077ae:	042d      	lsls	r5, r5, #16
 80077b0:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 80077b4:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80077b8:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 80077bc:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 80077c0:	eb0a 0c00 	add.w	ip, sl, r0
 80077c4:	041b      	lsls	r3, r3, #16
 80077c6:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80077ca:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 80077ce:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 80077d2:	9d07      	ldr	r5, [sp, #28]
 80077d4:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80077d8:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 80077dc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80077de:	4458      	add	r0, fp
 80077e0:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 80077e4:	9005      	str	r0, [sp, #20]
 80077e6:	4439      	add	r1, r7
 80077e8:	442a      	add	r2, r5
 80077ea:	44b2      	add	sl, r6
 80077ec:	1918      	adds	r0, r3, r4
 80077ee:	b2cb      	uxtb	r3, r1
 80077f0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80077f4:	9e02      	ldr	r6, [sp, #8]
 80077f6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80077fa:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 80077fe:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8007802:	441e      	add	r6, r3
 8007804:	0e09      	lsrs	r1, r1, #24
 8007806:	4633      	mov	r3, r6
 8007808:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800780c:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8007810:	b2d4      	uxtb	r4, r2
 8007812:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8007816:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800781a:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800781e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8007822:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007826:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800782a:	0e12      	lsrs	r2, r2, #24
 800782c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8007830:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8007834:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8007838:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800783c:	9702      	str	r7, [sp, #8]
 800783e:	b2c2      	uxtb	r2, r0
 8007840:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8007844:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8007848:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800784c:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8007850:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8007854:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8007858:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800785c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8007860:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8007864:	0e00      	lsrs	r0, r0, #24
 8007866:	fa5f f68a 	uxtb.w	r6, sl
 800786a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800786e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007870:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8007874:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8007878:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800787c:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8007880:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007884:	950a      	str	r5, [sp, #40]	@ 0x28
 8007886:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800788a:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800788e:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8007892:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007896:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800789a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800789e:	920b      	str	r2, [sp, #44]	@ 0x2c
 80078a0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80078a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078a6:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80078aa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80078ae:	9307      	str	r3, [sp, #28]
 80078b0:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80078b4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	f8cd c008 	str.w	ip, [sp, #8]
 80078be:	4694      	mov	ip, r2
 80078c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078c2:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 80078c6:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80078ca:	9a02      	ldr	r2, [sp, #8]
 80078cc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80078d0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80078d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80078d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078da:	f8cd a020 	str.w	sl, [sp, #32]
 80078de:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80078e2:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80078e6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80078ea:	9b07      	ldr	r3, [sp, #28]
 80078ec:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80078f0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80078f4:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 80078f8:	9a08      	ldr	r2, [sp, #32]
 80078fa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80078fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007902:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8007906:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800790a:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800790e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007912:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007916:	0a96      	lsrs	r6, r2, #10
 8007918:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800791c:	9602      	str	r6, [sp, #8]
 800791e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007922:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8007926:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800792a:	4e53      	ldr	r6, [pc, #332]	@ (8007a78 <D128_GENERIC+0x394>)
 800792c:	9f03      	ldr	r7, [sp, #12]
 800792e:	fb2c 7606 	smlad	r6, ip, r6, r7
 8007932:	4f52      	ldr	r7, [pc, #328]	@ (8007a7c <D128_GENERIC+0x398>)
 8007934:	fb2a 6607 	smlad	r6, sl, r7, r6
 8007938:	4f51      	ldr	r7, [pc, #324]	@ (8007a80 <D128_GENERIC+0x39c>)
 800793a:	fb21 6607 	smlad	r6, r1, r7, r6
 800793e:	4f51      	ldr	r7, [pc, #324]	@ (8007a84 <D128_GENERIC+0x3a0>)
 8007940:	fb24 6607 	smlad	r6, r4, r7, r6
 8007944:	4f50      	ldr	r7, [pc, #320]	@ (8007a88 <D128_GENERIC+0x3a4>)
 8007946:	fb28 6607 	smlad	r6, r8, r7, r6
 800794a:	4f50      	ldr	r7, [pc, #320]	@ (8007a8c <D128_GENERIC+0x3a8>)
 800794c:	fb20 6607 	smlad	r6, r0, r7, r6
 8007950:	4f4f      	ldr	r7, [pc, #316]	@ (8007a90 <D128_GENERIC+0x3ac>)
 8007952:	fb23 6607 	smlad	r6, r3, r7, r6
 8007956:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 800795a:	fb25 6607 	smlad	r6, r5, r7, r6
 800795e:	4f4d      	ldr	r7, [pc, #308]	@ (8007a94 <D128_GENERIC+0x3b0>)
 8007960:	9a04      	ldr	r2, [sp, #16]
 8007962:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8007966:	4a4c      	ldr	r2, [pc, #304]	@ (8007a98 <D128_GENERIC+0x3b4>)
 8007968:	fb2a ee02 	smlad	lr, sl, r2, lr
 800796c:	4f4b      	ldr	r7, [pc, #300]	@ (8007a9c <D128_GENERIC+0x3b8>)
 800796e:	fb21 ee07 	smlad	lr, r1, r7, lr
 8007972:	4f4b      	ldr	r7, [pc, #300]	@ (8007aa0 <D128_GENERIC+0x3bc>)
 8007974:	fb24 ee07 	smlad	lr, r4, r7, lr
 8007978:	4f4a      	ldr	r7, [pc, #296]	@ (8007aa4 <D128_GENERIC+0x3c0>)
 800797a:	fb28 ee07 	smlad	lr, r8, r7, lr
 800797e:	4f4a      	ldr	r7, [pc, #296]	@ (8007aa8 <D128_GENERIC+0x3c4>)
 8007980:	fb20 ee07 	smlad	lr, r0, r7, lr
 8007984:	4f49      	ldr	r7, [pc, #292]	@ (8007aac <D128_GENERIC+0x3c8>)
 8007986:	fb23 e707 	smlad	r7, r3, r7, lr
 800798a:	f8df e144 	ldr.w	lr, [pc, #324]	@ 8007ad0 <D128_GENERIC+0x3ec>
 800798e:	fb25 720e 	smlad	r2, r5, lr, r7
 8007992:	f04f 0b01 	mov.w	fp, #1
 8007996:	9203      	str	r2, [sp, #12]
 8007998:	fb2c fb0b 	smuad	fp, ip, fp
 800799c:	4f44      	ldr	r7, [pc, #272]	@ (8007ab0 <D128_GENERIC+0x3cc>)
 800799e:	fb2a ba07 	smlad	sl, sl, r7, fp
 80079a2:	4f44      	ldr	r7, [pc, #272]	@ (8007ab4 <D128_GENERIC+0x3d0>)
 80079a4:	fb21 aa07 	smlad	sl, r1, r7, sl
 80079a8:	4f43      	ldr	r7, [pc, #268]	@ (8007ab8 <D128_GENERIC+0x3d4>)
 80079aa:	fb24 aa07 	smlad	sl, r4, r7, sl
 80079ae:	4f43      	ldr	r7, [pc, #268]	@ (8007abc <D128_GENERIC+0x3d8>)
 80079b0:	fb28 a707 	smlad	r7, r8, r7, sl
 80079b4:	4a42      	ldr	r2, [pc, #264]	@ (8007ac0 <D128_GENERIC+0x3dc>)
 80079b6:	fb20 7702 	smlad	r7, r0, r2, r7
 80079ba:	4a42      	ldr	r2, [pc, #264]	@ (8007ac4 <D128_GENERIC+0x3e0>)
 80079bc:	fb23 7702 	smlad	r7, r3, r2, r7
 80079c0:	4b41      	ldr	r3, [pc, #260]	@ (8007ac8 <D128_GENERIC+0x3e4>)
 80079c2:	fb25 7303 	smlad	r3, r5, r3, r7
 80079c6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80079c8:	9304      	str	r3, [sp, #16]
 80079ca:	f5a6 1680 	sub.w	r6, r6, #1048576	@ 0x100000
 80079ce:	b185      	cbz	r5, 80079f2 <D128_GENERIC+0x30e>
 80079d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80079d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80079d4:	960d      	str	r6, [sp, #52]	@ 0x34
 80079d6:	4432      	add	r2, r6
 80079d8:	1a52      	subs	r2, r2, r1
 80079da:	17d1      	asrs	r1, r2, #31
 80079dc:	fba2 2305 	umull	r2, r3, r2, r5
 80079e0:	fb05 3301 	mla	r3, r5, r1, r3
 80079e4:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 80079e8:	f143 0300 	adc.w	r3, r3, #0
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80079f0:	461e      	mov	r6, r3
 80079f2:	9801      	ldr	r0, [sp, #4]
 80079f4:	9c06      	ldr	r4, [sp, #24]
 80079f6:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 80079f8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80079fa:	01f6      	lsls	r6, r6, #7
 80079fc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a00:	2300      	movs	r3, #0
 8007a02:	fbc5 2306 	smlal	r2, r3, r5, r6
 8007a06:	fb04 f101 	mul.w	r1, r4, r1
 8007a0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007a0c:	109b      	asrs	r3, r3, #2
 8007a0e:	f303 030f 	ssat	r3, #16, r3
 8007a12:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8007a16:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8007a18:	1c62      	adds	r2, r4, #1
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	9206      	str	r2, [sp, #24]
 8007a1e:	dd18      	ble.n	8007a52 <D128_GENERIC+0x36e>
 8007a20:	9b01      	ldr	r3, [sp, #4]
 8007a22:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8007a24:	2a01      	cmp	r2, #1
 8007a26:	f47f ae80 	bne.w	800772a <D128_GENERIC+0x46>
 8007a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a2c:	9d05      	ldr	r5, [sp, #20]
 8007a2e:	069b      	lsls	r3, r3, #26
 8007a30:	6829      	ldr	r1, [r5, #0]
 8007a32:	686a      	ldr	r2, [r5, #4]
 8007a34:	68a8      	ldr	r0, [r5, #8]
 8007a36:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8007a3a:	f105 0410 	add.w	r4, r5, #16
 8007a3e:	d506      	bpl.n	8007a4e <D128_GENERIC+0x36a>
 8007a40:	ba49      	rev16	r1, r1
 8007a42:	ba52      	rev16	r2, r2
 8007a44:	ba40      	rev16	r0, r0
 8007a46:	fa9a fa9a 	rev16.w	sl, sl
 8007a4a:	9405      	str	r4, [sp, #20]
 8007a4c:	e6cf      	b.n	80077ee <D128_GENERIC+0x10a>
 8007a4e:	9405      	str	r4, [sp, #20]
 8007a50:	e6cd      	b.n	80077ee <D128_GENERIC+0x10a>
 8007a52:	9a01      	ldr	r2, [sp, #4]
 8007a54:	9904      	ldr	r1, [sp, #16]
 8007a56:	6091      	str	r1, [r2, #8]
 8007a58:	9903      	ldr	r1, [sp, #12]
 8007a5a:	60d1      	str	r1, [r2, #12]
 8007a5c:	9b02      	ldr	r3, [sp, #8]
 8007a5e:	61d3      	str	r3, [r2, #28]
 8007a60:	4611      	mov	r1, r2
 8007a62:	4613      	mov	r3, r2
 8007a64:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a66:	610a      	str	r2, [r1, #16]
 8007a68:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007a6a:	6159      	str	r1, [r3, #20]
 8007a6c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007a6e:	6199      	str	r1, [r3, #24]
 8007a70:	2000      	movs	r0, #0
 8007a72:	b013      	add	sp, #76	@ 0x4c
 8007a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a78:	00780069 	.word	0x00780069
 8007a7c:	005b004e 	.word	0x005b004e
 8007a80:	00420037 	.word	0x00420037
 8007a84:	002d0024 	.word	0x002d0024
 8007a88:	001c0015 	.word	0x001c0015
 8007a8c:	000f000a 	.word	0x000f000a
 8007a90:	00060003 	.word	0x00060003
 8007a94:	00880096 	.word	0x00880096
 8007a98:	00a200ac 	.word	0x00a200ac
 8007a9c:	00b400ba 	.word	0x00b400ba
 8007aa0:	00be00c0 	.word	0x00be00c0
 8007aa4:	00c000be 	.word	0x00c000be
 8007aa8:	00ba00b4 	.word	0x00ba00b4
 8007aac:	00ac00a2 	.word	0x00ac00a2
 8007ab0:	00030006 	.word	0x00030006
 8007ab4:	000a000f 	.word	0x000a000f
 8007ab8:	0015001c 	.word	0x0015001c
 8007abc:	0024002d 	.word	0x0024002d
 8007ac0:	00370042 	.word	0x00370042
 8007ac4:	004e005b 	.word	0x004e005b
 8007ac8:	00690078 	.word	0x00690078
 8007acc:	20000000 	.word	0x20000000
 8007ad0:	00960088 	.word	0x00960088

08007ad4 <D16_1CH_HTONS_VOL_HP>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	4691      	mov	r9, r2
 8007ada:	b083      	sub	sp, #12
 8007adc:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8007ade:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8007ae2:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	4680      	mov	r8, r0
 8007aea:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8007aee:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007af2:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007af6:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8007afa:	9401      	str	r4, [sp, #4]
 8007afc:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8007b00:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8007b04:	2a00      	cmp	r2, #0
 8007b06:	d04e      	beq.n	8007ba6 <D16_1CH_HTONS_VOL_HP+0xd2>
 8007b08:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 8007bb4 <D16_1CH_HTONS_VOL_HP+0xe0>
 8007b0c:	1e8c      	subs	r4, r1, #2
 8007b0e:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8007b12:	f858 2b02 	ldr.w	r2, [r8], #2
 8007b16:	ba52      	rev16	r2, r2
 8007b18:	b2d6      	uxtb	r6, r2
 8007b1a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007b1e:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8007b22:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007b26:	4413      	add	r3, r2
 8007b28:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8007b2c:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8007b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007b38:	0a93      	lsrs	r3, r2, #10
 8007b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8007bac <D16_1CH_HTONS_VOL_HP+0xd8>)
 8007b3c:	fb21 5202 	smlad	r2, r1, r2, r5
 8007b40:	4d1b      	ldr	r5, [pc, #108]	@ (8007bb0 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8007b42:	fb21 f505 	smuad	r5, r1, r5
 8007b46:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8007b4a:	4410      	add	r0, r2
 8007b4c:	1bc0      	subs	r0, r0, r7
 8007b4e:	17c7      	asrs	r7, r0, #31
 8007b50:	fba0 010e 	umull	r0, r1, r0, lr
 8007b54:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 8007b58:	fb0e 1107 	mla	r1, lr, r7, r1
 8007b5c:	f141 0100 	adc.w	r1, r1, #0
 8007b60:	0448      	lsls	r0, r1, #17
 8007b62:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8007b66:	2700      	movs	r7, #0
 8007b68:	fbc0 670a 	smlal	r6, r7, r0, sl
 8007b6c:	45d8      	cmp	r8, fp
 8007b6e:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8007b72:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8007b76:	4617      	mov	r7, r2
 8007b78:	f301 010f 	ssat	r1, #16, r1
 8007b7c:	f824 1f02 	strh.w	r1, [r4, #2]!
 8007b80:	d1c7      	bne.n	8007b12 <D16_1CH_HTONS_VOL_HP+0x3e>
 8007b82:	9901      	ldr	r1, [sp, #4]
 8007b84:	f8c9 301c 	str.w	r3, [r9, #28]
 8007b88:	9b00      	ldr	r3, [sp, #0]
 8007b8a:	f8c9 0010 	str.w	r0, [r9, #16]
 8007b8e:	2000      	movs	r0, #0
 8007b90:	f8c9 5008 	str.w	r5, [r9, #8]
 8007b94:	f8c9 100c 	str.w	r1, [r9, #12]
 8007b98:	f8c9 2014 	str.w	r2, [r9, #20]
 8007b9c:	f8c9 3018 	str.w	r3, [r9, #24]
 8007ba0:	b003      	add	sp, #12
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba6:	463a      	mov	r2, r7
 8007ba8:	4621      	mov	r1, r4
 8007baa:	e7eb      	b.n	8007b84 <D16_1CH_HTONS_VOL_HP+0xb0>
 8007bac:	00030001 	.word	0x00030001
 8007bb0:	00010003 	.word	0x00010003
 8007bb4:	20000000 	.word	0x20000000

08007bb8 <D24_1CH_HTONS_VOL_HP>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	b089      	sub	sp, #36	@ 0x24
 8007bbe:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8007bc0:	6996      	ldr	r6, [r2, #24]
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 8007bc6:	9207      	str	r2, [sp, #28]
 8007bc8:	6915      	ldr	r5, [r2, #16]
 8007bca:	6954      	ldr	r4, [r2, #20]
 8007bcc:	9606      	str	r6, [sp, #24]
 8007bce:	6893      	ldr	r3, [r2, #8]
 8007bd0:	69d6      	ldr	r6, [r2, #28]
 8007bd2:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8007bd6:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8007bda:	9a04      	ldr	r2, [sp, #16]
 8007bdc:	9705      	str	r7, [sp, #20]
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	d07e      	beq.n	8007ce0 <D24_1CH_HTONS_VOL_HP+0x128>
 8007be2:	f1a1 0b02 	sub.w	fp, r1, #2
 8007be6:	2700      	movs	r7, #0
 8007be8:	46a8      	mov	r8, r5
 8007bea:	f8cd b004 	str.w	fp, [sp, #4]
 8007bee:	4655      	mov	r5, sl
 8007bf0:	46e3      	mov	fp, ip
 8007bf2:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 8007cec <D24_1CH_HTONS_VOL_HP+0x134>
 8007bf6:	46ba      	mov	sl, r7
 8007bf8:	469c      	mov	ip, r3
 8007bfa:	e055      	b.n	8007ca8 <D24_1CH_HTONS_VOL_HP+0xf0>
 8007bfc:	7802      	ldrb	r2, [r0, #0]
 8007bfe:	78c3      	ldrb	r3, [r0, #3]
 8007c00:	7841      	ldrb	r1, [r0, #1]
 8007c02:	0212      	lsls	r2, r2, #8
 8007c04:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8007c08:	440b      	add	r3, r1
 8007c0a:	3002      	adds	r0, #2
 8007c0c:	b2d9      	uxtb	r1, r3
 8007c0e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007c12:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8007c16:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8007c1a:	0c1b      	lsrs	r3, r3, #16
 8007c1c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8007c20:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8007c24:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8007c28:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8007c2c:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8007c30:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8007c34:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8007c38:	4a2a      	ldr	r2, [pc, #168]	@ (8007ce4 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8007c3a:	fb23 b102 	smlad	r1, r3, r2, fp
 8007c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ce8 <D24_1CH_HTONS_VOL_HP+0x130>)
 8007c40:	fb23 cb02 	smlad	fp, r3, r2, ip
 8007c44:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8007c48:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8007c4c:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8007c50:	2201      	movs	r2, #1
 8007c52:	fb23 f702 	smuad	r7, r3, r2
 8007c56:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 8007c5a:	eb01 0208 	add.w	r2, r1, r8
 8007c5e:	1b12      	subs	r2, r2, r4
 8007c60:	17d4      	asrs	r4, r2, #31
 8007c62:	fba2 2305 	umull	r2, r3, r2, r5
 8007c66:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8007c6a:	fb05 3304 	mla	r3, r5, r4, r3
 8007c6e:	f143 0300 	adc.w	r3, r3, #0
 8007c72:	9c05      	ldr	r4, [sp, #20]
 8007c74:	03da      	lsls	r2, r3, #15
 8007c76:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007c7a:	f04f 0900 	mov.w	r9, #0
 8007c7e:	fbc4 8902 	smlal	r8, r9, r4, r2
 8007c82:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007c86:	9a01      	ldr	r2, [sp, #4]
 8007c88:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8007c8c:	9b03      	ldr	r3, [sp, #12]
 8007c8e:	109b      	asrs	r3, r3, #2
 8007c90:	f303 030f 	ssat	r3, #16, r3
 8007c94:	f822 3f02 	strh.w	r3, [r2, #2]!
 8007c98:	9b04      	ldr	r3, [sp, #16]
 8007c9a:	9201      	str	r2, [sp, #4]
 8007c9c:	f10a 0a01 	add.w	sl, sl, #1
 8007ca0:	459a      	cmp	sl, r3
 8007ca2:	44bc      	add	ip, r7
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	d00b      	beq.n	8007cc0 <D24_1CH_HTONS_VOL_HP+0x108>
 8007ca8:	f01a 0f01 	tst.w	sl, #1
 8007cac:	d0a6      	beq.n	8007bfc <D24_1CH_HTONS_VOL_HP+0x44>
 8007cae:	78c2      	ldrb	r2, [r0, #3]
 8007cb0:	7883      	ldrb	r3, [r0, #2]
 8007cb2:	f810 1b04 	ldrb.w	r1, [r0], #4
 8007cb6:	0212      	lsls	r2, r2, #8
 8007cb8:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8007cbc:	440b      	add	r3, r1
 8007cbe:	e7a5      	b.n	8007c0c <D24_1CH_HTONS_VOL_HP+0x54>
 8007cc0:	4663      	mov	r3, ip
 8007cc2:	4645      	mov	r5, r8
 8007cc4:	46dc      	mov	ip, fp
 8007cc6:	9807      	ldr	r0, [sp, #28]
 8007cc8:	6141      	str	r1, [r0, #20]
 8007cca:	9906      	ldr	r1, [sp, #24]
 8007ccc:	6083      	str	r3, [r0, #8]
 8007cce:	f8c0 c00c 	str.w	ip, [r0, #12]
 8007cd2:	61c6      	str	r6, [r0, #28]
 8007cd4:	6105      	str	r5, [r0, #16]
 8007cd6:	6181      	str	r1, [r0, #24]
 8007cd8:	2000      	movs	r0, #0
 8007cda:	b009      	add	sp, #36	@ 0x24
 8007cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	e7f0      	b.n	8007cc6 <D24_1CH_HTONS_VOL_HP+0x10e>
 8007ce4:	00030001 	.word	0x00030001
 8007ce8:	00060007 	.word	0x00060007
 8007cec:	20000000 	.word	0x20000000

08007cf0 <D32_1CH_HTONS_VOL_HP>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	4692      	mov	sl, r2
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8007cfa:	f8da 3018 	ldr.w	r3, [sl, #24]
 8007cfe:	f8da 5030 	ldr.w	r5, [sl, #48]	@ 0x30
 8007d02:	9304      	str	r3, [sp, #16]
 8007d04:	f8da 4010 	ldr.w	r4, [sl, #16]
 8007d08:	f8da 8014 	ldr.w	r8, [sl, #20]
 8007d0c:	f8da 601c 	ldr.w	r6, [sl, #28]
 8007d10:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007d14:	f8da e00c 	ldr.w	lr, [sl, #12]
 8007d18:	9501      	str	r5, [sp, #4]
 8007d1a:	f8da c020 	ldr.w	ip, [sl, #32]
 8007d1e:	2a00      	cmp	r2, #0
 8007d20:	d07b      	beq.n	8007e1a <D32_1CH_HTONS_VOL_HP+0x12a>
 8007d22:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007d26:	4f3e      	ldr	r7, [pc, #248]	@ (8007e20 <D32_1CH_HTONS_VOL_HP+0x130>)
 8007d28:	f8cd c00c 	str.w	ip, [sp, #12]
 8007d2c:	9202      	str	r2, [sp, #8]
 8007d2e:	460d      	mov	r5, r1
 8007d30:	46a1      	mov	r9, r4
 8007d32:	4684      	mov	ip, r0
 8007d34:	f8cd a014 	str.w	sl, [sp, #20]
 8007d38:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007d3c:	ba49      	rev16	r1, r1
 8007d3e:	b2c8      	uxtb	r0, r1
 8007d40:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8007d44:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8007d48:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8007d4c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8007d50:	0e09      	lsrs	r1, r1, #24
 8007d52:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8007d56:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8007d5a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8007d5e:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8007d62:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8007d66:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8007d6a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007d6e:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8007d72:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007d76:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007d7a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8007d7e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8007d82:	4a28      	ldr	r2, [pc, #160]	@ (8007e24 <D32_1CH_HTONS_VOL_HP+0x134>)
 8007d84:	fb20 e202 	smlad	r2, r0, r2, lr
 8007d88:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8007d8c:	fb2a 2101 	smlad	r1, sl, r1, r2
 8007d90:	4a25      	ldr	r2, [pc, #148]	@ (8007e28 <D32_1CH_HTONS_VOL_HP+0x138>)
 8007d92:	fb20 3302 	smlad	r3, r0, r2, r3
 8007d96:	4a25      	ldr	r2, [pc, #148]	@ (8007e2c <D32_1CH_HTONS_VOL_HP+0x13c>)
 8007d98:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	fb20 f003 	smuad	r0, r0, r3
 8007da2:	4b23      	ldr	r3, [pc, #140]	@ (8007e30 <D32_1CH_HTONS_VOL_HP+0x140>)
 8007da4:	fb2a 0303 	smlad	r3, sl, r3, r0
 8007da8:	f5a1 4280 	sub.w	r2, r1, #16384	@ 0x4000
 8007dac:	9c03      	ldr	r4, [sp, #12]
 8007dae:	eb02 0009 	add.w	r0, r2, r9
 8007db2:	eba0 0008 	sub.w	r0, r0, r8
 8007db6:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8007dba:	fba0 0104 	umull	r0, r1, r0, r4
 8007dbe:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 8007dc2:	fb04 110b 	mla	r1, r4, fp, r1
 8007dc6:	f141 0100 	adc.w	r1, r1, #0
 8007dca:	9c01      	ldr	r4, [sp, #4]
 8007dcc:	0388      	lsls	r0, r1, #14
 8007dce:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007dd2:	f04f 0900 	mov.w	r9, #0
 8007dd6:	fbc0 8904 	smlal	r8, r9, r0, r4
 8007dda:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8007dde:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8007de2:	f300 000f 	ssat	r0, #16, r0
 8007de6:	9902      	ldr	r1, [sp, #8]
 8007de8:	f825 0b02 	strh.w	r0, [r5], #2
 8007dec:	428d      	cmp	r5, r1
 8007dee:	4690      	mov	r8, r2
 8007df0:	d1a2      	bne.n	8007d38 <D32_1CH_HTONS_VOL_HP+0x48>
 8007df2:	f8dd a014 	ldr.w	sl, [sp, #20]
 8007df6:	464c      	mov	r4, r9
 8007df8:	f8ca 3008 	str.w	r3, [sl, #8]
 8007dfc:	9b04      	ldr	r3, [sp, #16]
 8007dfe:	f8ca e00c 	str.w	lr, [sl, #12]
 8007e02:	2000      	movs	r0, #0
 8007e04:	f8ca 601c 	str.w	r6, [sl, #28]
 8007e08:	f8ca 4010 	str.w	r4, [sl, #16]
 8007e0c:	f8ca 2014 	str.w	r2, [sl, #20]
 8007e10:	f8ca 3018 	str.w	r3, [sl, #24]
 8007e14:	b007      	add	sp, #28
 8007e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1a:	4642      	mov	r2, r8
 8007e1c:	e7ec      	b.n	8007df8 <D32_1CH_HTONS_VOL_HP+0x108>
 8007e1e:	bf00      	nop
 8007e20:	20000000 	.word	0x20000000
 8007e24:	00060003 	.word	0x00060003
 8007e28:	000a000c 	.word	0x000a000c
 8007e2c:	000c000a 	.word	0x000c000a
 8007e30:	00030006 	.word	0x00030006

08007e34 <D48_1CH_HTONS_VOL_HP>:
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	4613      	mov	r3, r2
 8007e3a:	461c      	mov	r4, r3
 8007e3c:	b087      	sub	sp, #28
 8007e3e:	4625      	mov	r5, r4
 8007e40:	4626      	mov	r6, r4
 8007e42:	6b2d      	ldr	r5, [r5, #48]	@ 0x30
 8007e44:	9205      	str	r2, [sp, #20]
 8007e46:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8007e48:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8007e4c:	9501      	str	r5, [sp, #4]
 8007e4e:	4680      	mov	r8, r0
 8007e50:	6a35      	ldr	r5, [r6, #32]
 8007e52:	6918      	ldr	r0, [r3, #16]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	9304      	str	r3, [sp, #16]
 8007e58:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8007e5c:	68a3      	ldr	r3, [r4, #8]
 8007e5e:	9502      	str	r5, [sp, #8]
 8007e60:	68e4      	ldr	r4, [r4, #12]
 8007e62:	2a00      	cmp	r2, #0
 8007e64:	f000 808c 	beq.w	8007f80 <D48_1CH_HTONS_VOL_HP+0x14c>
 8007e68:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007e6c:	4d45      	ldr	r5, [pc, #276]	@ (8007f84 <D48_1CH_HTONS_VOL_HP+0x150>)
 8007e6e:	9203      	str	r2, [sp, #12]
 8007e70:	468c      	mov	ip, r1
 8007e72:	e898 0044 	ldmia.w	r8, {r2, r6}
 8007e76:	f108 0806 	add.w	r8, r8, #6
 8007e7a:	ba52      	rev16	r2, r2
 8007e7c:	ba76      	rev16	r6, r6
 8007e7e:	b2d7      	uxtb	r7, r2
 8007e80:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007e84:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8007e88:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8007e8c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8007e90:	0e12      	lsrs	r2, r2, #24
 8007e92:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8007e96:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8007e9a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8007e9e:	fa5f fb86 	uxtb.w	fp, r6
 8007ea2:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8007ea6:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8007eaa:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8007eae:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8007eb2:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8007eb6:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8007eba:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8007ebe:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007ec2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007ec6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007eca:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8007ece:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007ed2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007ed6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007eda:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8007ede:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8007ee2:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8007ee6:	4a28      	ldr	r2, [pc, #160]	@ (8007f88 <D48_1CH_HTONS_VOL_HP+0x154>)
 8007ee8:	fb2a 4202 	smlad	r2, sl, r2, r4
 8007eec:	4927      	ldr	r1, [pc, #156]	@ (8007f8c <D48_1CH_HTONS_VOL_HP+0x158>)
 8007eee:	fb27 2201 	smlad	r2, r7, r1, r2
 8007ef2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8007ef6:	fb26 2201 	smlad	r2, r6, r1, r2
 8007efa:	4925      	ldr	r1, [pc, #148]	@ (8007f90 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8007efc:	fb2a 3401 	smlad	r4, sl, r1, r3
 8007f00:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 8007f04:	fb27 4403 	smlad	r4, r7, r3, r4
 8007f08:	4b22      	ldr	r3, [pc, #136]	@ (8007f94 <D48_1CH_HTONS_VOL_HP+0x160>)
 8007f0a:	fb26 4403 	smlad	r4, r6, r3, r4
 8007f0e:	2101      	movs	r1, #1
 8007f10:	fb2a fa01 	smuad	sl, sl, r1
 8007f14:	4b20      	ldr	r3, [pc, #128]	@ (8007f98 <D48_1CH_HTONS_VOL_HP+0x164>)
 8007f16:	fb27 a703 	smlad	r7, r7, r3, sl
 8007f1a:	4b20      	ldr	r3, [pc, #128]	@ (8007f9c <D48_1CH_HTONS_VOL_HP+0x168>)
 8007f1c:	fb26 7303 	smlad	r3, r6, r3, r7
 8007f20:	f5a2 4258 	sub.w	r2, r2, #55296	@ 0xd800
 8007f24:	9e02      	ldr	r6, [sp, #8]
 8007f26:	9f01      	ldr	r7, [sp, #4]
 8007f28:	4410      	add	r0, r2
 8007f2a:	eba0 0009 	sub.w	r0, r0, r9
 8007f2e:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8007f32:	fba0 0106 	umull	r0, r1, r0, r6
 8007f36:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 8007f3a:	fb06 110a 	mla	r1, r6, sl, r1
 8007f3e:	f141 0100 	adc.w	r1, r1, #0
 8007f42:	0308      	lsls	r0, r1, #12
 8007f44:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 8007f48:	f04f 0a00 	mov.w	sl, #0
 8007f4c:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8007f50:	4657      	mov	r7, sl
 8007f52:	10b8      	asrs	r0, r7, #2
 8007f54:	f300 000f 	ssat	r0, #16, r0
 8007f58:	f82c 0b02 	strh.w	r0, [ip], #2
 8007f5c:	0048      	lsls	r0, r1, #1
 8007f5e:	9903      	ldr	r1, [sp, #12]
 8007f60:	458c      	cmp	ip, r1
 8007f62:	4691      	mov	r9, r2
 8007f64:	d185      	bne.n	8007e72 <D48_1CH_HTONS_VOL_HP+0x3e>
 8007f66:	9d05      	ldr	r5, [sp, #20]
 8007f68:	616a      	str	r2, [r5, #20]
 8007f6a:	9a04      	ldr	r2, [sp, #16]
 8007f6c:	6128      	str	r0, [r5, #16]
 8007f6e:	2000      	movs	r0, #0
 8007f70:	60ab      	str	r3, [r5, #8]
 8007f72:	60ec      	str	r4, [r5, #12]
 8007f74:	f8c5 e01c 	str.w	lr, [r5, #28]
 8007f78:	61aa      	str	r2, [r5, #24]
 8007f7a:	b007      	add	sp, #28
 8007f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f80:	464a      	mov	r2, r9
 8007f82:	e7f0      	b.n	8007f66 <D48_1CH_HTONS_VOL_HP+0x132>
 8007f84:	20000000 	.word	0x20000000
 8007f88:	000f000a 	.word	0x000f000a
 8007f8c:	00060003 	.word	0x00060003
 8007f90:	00150019 	.word	0x00150019
 8007f94:	00190015 	.word	0x00190015
 8007f98:	00030006 	.word	0x00030006
 8007f9c:	000a000f 	.word	0x000a000f

08007fa0 <D64_1CH_HTONS_VOL_HP>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	b089      	sub	sp, #36	@ 0x24
 8007fa6:	4614      	mov	r4, r2
 8007fa8:	9207      	str	r2, [sp, #28]
 8007faa:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8007fac:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8007fb0:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8007fb4:	6992      	ldr	r2, [r2, #24]
 8007fb6:	9206      	str	r2, [sp, #24]
 8007fb8:	68e2      	ldr	r2, [r4, #12]
 8007fba:	9201      	str	r2, [sp, #4]
 8007fbc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007fbe:	9203      	str	r2, [sp, #12]
 8007fc0:	6a22      	ldr	r2, [r4, #32]
 8007fc2:	69e5      	ldr	r5, [r4, #28]
 8007fc4:	68a6      	ldr	r6, [r4, #8]
 8007fc6:	9204      	str	r2, [sp, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 80b0 	beq.w	800812e <D64_1CH_HTONS_VOL_HP+0x18e>
 8007fce:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8007fd2:	4f58      	ldr	r7, [pc, #352]	@ (8008134 <D64_1CH_HTONS_VOL_HP+0x194>)
 8007fd4:	9305      	str	r3, [sp, #20]
 8007fd6:	9102      	str	r1, [sp, #8]
 8007fd8:	f850 2b08 	ldr.w	r2, [r0], #8
 8007fdc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007fe0:	ba52      	rev16	r2, r2
 8007fe2:	fa93 f993 	rev16.w	r9, r3
 8007fe6:	b2d4      	uxtb	r4, r2
 8007fe8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8007fec:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8007ff0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8007ff4:	9901      	ldr	r1, [sp, #4]
 8007ff6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007ffa:	0e12      	lsrs	r2, r2, #24
 8007ffc:	44ab      	add	fp, r5
 8007ffe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008002:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8008006:	fa5f f289 	uxtb.w	r2, r9
 800800a:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800800e:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8008012:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8008016:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800801a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800801e:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8008022:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8008026:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800802a:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800802e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8008032:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8008036:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800803a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800803e:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8008042:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008046:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800804a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800804e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008052:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008056:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800805a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800805e:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8008062:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008066:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800806a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800806e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008072:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8008076:	4b30      	ldr	r3, [pc, #192]	@ (8008138 <D64_1CH_HTONS_VOL_HP+0x198>)
 8008078:	fb2b 1303 	smlad	r3, fp, r3, r1
 800807c:	492f      	ldr	r1, [pc, #188]	@ (800813c <D64_1CH_HTONS_VOL_HP+0x19c>)
 800807e:	fb24 3301 	smlad	r3, r4, r1, r3
 8008082:	492f      	ldr	r1, [pc, #188]	@ (8008140 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8008084:	fb22 3301 	smlad	r3, r2, r1, r3
 8008088:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 800808c:	fb2e 390a 	smlad	r9, lr, sl, r3
 8008090:	4b2c      	ldr	r3, [pc, #176]	@ (8008144 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8008092:	fb2b 6603 	smlad	r6, fp, r3, r6
 8008096:	fb2e 6613 	smladx	r6, lr, r3, r6
 800809a:	4b2b      	ldr	r3, [pc, #172]	@ (8008148 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800809c:	fb24 6603 	smlad	r6, r4, r3, r6
 80080a0:	fb22 6313 	smladx	r3, r2, r3, r6
 80080a4:	f04f 0a01 	mov.w	sl, #1
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	fb2b fb0a 	smuad	fp, fp, sl
 80080ae:	4b27      	ldr	r3, [pc, #156]	@ (800814c <D64_1CH_HTONS_VOL_HP+0x1ac>)
 80080b0:	fb24 ba03 	smlad	sl, r4, r3, fp
 80080b4:	4b26      	ldr	r3, [pc, #152]	@ (8008150 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 80080b6:	fb22 a203 	smlad	r2, r2, r3, sl
 80080ba:	4b26      	ldr	r3, [pc, #152]	@ (8008154 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 80080bc:	fb2e 2603 	smlad	r6, lr, r3, r2
 80080c0:	f5a9 3a00 	sub.w	sl, r9, #131072	@ 0x20000
 80080c4:	eb0a 020c 	add.w	r2, sl, ip
 80080c8:	9c04      	ldr	r4, [sp, #16]
 80080ca:	9903      	ldr	r1, [sp, #12]
 80080cc:	eba2 0208 	sub.w	r2, r2, r8
 80080d0:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80080d4:	fba2 2304 	umull	r2, r3, r2, r4
 80080d8:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 80080dc:	fb04 3309 	mla	r3, r4, r9, r3
 80080e0:	f143 0300 	adc.w	r3, r3, #0
 80080e4:	02da      	lsls	r2, r3, #11
 80080e6:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80080ea:	f04f 0900 	mov.w	r9, #0
 80080ee:	fbc1 8902 	smlal	r8, r9, r1, r2
 80080f2:	9902      	ldr	r1, [sp, #8]
 80080f4:	ea4f 02a9 	mov.w	r2, r9, asr #2
 80080f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80080fc:	f302 020f 	ssat	r2, #16, r2
 8008100:	9b05      	ldr	r3, [sp, #20]
 8008102:	f821 2b02 	strh.w	r2, [r1], #2
 8008106:	4299      	cmp	r1, r3
 8008108:	9102      	str	r1, [sp, #8]
 800810a:	46d0      	mov	r8, sl
 800810c:	f47f af64 	bne.w	8007fd8 <D64_1CH_HTONS_VOL_HP+0x38>
 8008110:	9a07      	ldr	r2, [sp, #28]
 8008112:	9901      	ldr	r1, [sp, #4]
 8008114:	60d1      	str	r1, [r2, #12]
 8008116:	9906      	ldr	r1, [sp, #24]
 8008118:	6096      	str	r6, [r2, #8]
 800811a:	2000      	movs	r0, #0
 800811c:	61d5      	str	r5, [r2, #28]
 800811e:	f8c2 c010 	str.w	ip, [r2, #16]
 8008122:	f8c2 a014 	str.w	sl, [r2, #20]
 8008126:	6191      	str	r1, [r2, #24]
 8008128:	b009      	add	sp, #36	@ 0x24
 800812a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812e:	46c2      	mov	sl, r8
 8008130:	4622      	mov	r2, r4
 8008132:	e7ee      	b.n	8008112 <D64_1CH_HTONS_VOL_HP+0x172>
 8008134:	20000000 	.word	0x20000000
 8008138:	001c0015 	.word	0x001c0015
 800813c:	000f000a 	.word	0x000f000a
 8008140:	00060003 	.word	0x00060003
 8008144:	0024002a 	.word	0x0024002a
 8008148:	002e0030 	.word	0x002e0030
 800814c:	00030006 	.word	0x00030006
 8008150:	000a000f 	.word	0x000a000f
 8008154:	0015001c 	.word	0x0015001c

08008158 <D80_1CH_HTONS_VOL_HP>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	4613      	mov	r3, r2
 800815e:	b089      	sub	sp, #36	@ 0x24
 8008160:	4686      	mov	lr, r0
 8008162:	6918      	ldr	r0, [r3, #16]
 8008164:	9000      	str	r0, [sp, #0]
 8008166:	4618      	mov	r0, r3
 8008168:	461c      	mov	r4, r3
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	9302      	str	r3, [sp, #8]
 800816e:	6983      	ldr	r3, [r0, #24]
 8008170:	9306      	str	r3, [sp, #24]
 8008172:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8008176:	69c3      	ldr	r3, [r0, #28]
 8008178:	68c0      	ldr	r0, [r0, #12]
 800817a:	9207      	str	r2, [sp, #28]
 800817c:	9001      	str	r0, [sp, #4]
 800817e:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8008180:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008182:	9003      	str	r0, [sp, #12]
 8008184:	6a20      	ldr	r0, [r4, #32]
 8008186:	9004      	str	r0, [sp, #16]
 8008188:	2a00      	cmp	r2, #0
 800818a:	f000 80d2 	beq.w	8008332 <D80_1CH_HTONS_VOL_HP+0x1da>
 800818e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008192:	4869      	ldr	r0, [pc, #420]	@ (8008338 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8008194:	9205      	str	r2, [sp, #20]
 8008196:	461c      	mov	r4, r3
 8008198:	f8de 5000 	ldr.w	r5, [lr]
 800819c:	f8de 2004 	ldr.w	r2, [lr, #4]
 80081a0:	f8de 3008 	ldr.w	r3, [lr, #8]
 80081a4:	f10e 0e0a 	add.w	lr, lr, #10
 80081a8:	ba6d      	rev16	r5, r5
 80081aa:	ba52      	rev16	r2, r2
 80081ac:	fa93 fb93 	rev16.w	fp, r3
 80081b0:	b2ee      	uxtb	r6, r5
 80081b2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80081b6:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80081ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80081be:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80081c2:	eb04 0a07 	add.w	sl, r4, r7
 80081c6:	0e2d      	lsrs	r5, r5, #24
 80081c8:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80081cc:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80081d0:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 80081d4:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 80081d8:	b2d5      	uxtb	r5, r2
 80081da:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80081de:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 80081e2:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 80081e6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80081ea:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80081ee:	0e12      	lsrs	r2, r2, #24
 80081f0:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 80081f4:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 80081f8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80081fc:	fa5f f48b 	uxtb.w	r4, fp
 8008200:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008204:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8008208:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800820c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8008210:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8008214:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8008218:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800821c:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8008220:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008224:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008228:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800822c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008230:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008234:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008238:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800823c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008240:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8008244:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008248:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800824c:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8008250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008254:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8008258:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800825c:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8008260:	4d36      	ldr	r5, [pc, #216]	@ (800833c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8008262:	9f01      	ldr	r7, [sp, #4]
 8008264:	fb23 7505 	smlad	r5, r3, r5, r7
 8008268:	4f35      	ldr	r7, [pc, #212]	@ (8008340 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800826a:	fb29 5507 	smlad	r5, r9, r7, r5
 800826e:	4f35      	ldr	r7, [pc, #212]	@ (8008344 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008270:	fb28 5507 	smlad	r5, r8, r7, r5
 8008274:	4f34      	ldr	r7, [pc, #208]	@ (8008348 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008276:	fb22 5507 	smlad	r5, r2, r7, r5
 800827a:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 800827e:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8008282:	4d32      	ldr	r5, [pc, #200]	@ (800834c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008284:	fb23 cc05 	smlad	ip, r3, r5, ip
 8008288:	4d31      	ldr	r5, [pc, #196]	@ (8008350 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800828a:	fb29 cc05 	smlad	ip, r9, r5, ip
 800828e:	f04f 154b 	mov.w	r5, #4915275	@ 0x4b004b
 8008292:	fb28 c505 	smlad	r5, r8, r5, ip
 8008296:	4f2f      	ldr	r7, [pc, #188]	@ (8008354 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8008298:	fb22 5507 	smlad	r5, r2, r7, r5
 800829c:	4f2e      	ldr	r7, [pc, #184]	@ (8008358 <D80_1CH_HTONS_VOL_HP+0x200>)
 800829e:	fb26 5507 	smlad	r5, r6, r7, r5
 80082a2:	f04f 0a01 	mov.w	sl, #1
 80082a6:	9501      	str	r5, [sp, #4]
 80082a8:	fb23 fa0a 	smuad	sl, r3, sl
 80082ac:	4b2b      	ldr	r3, [pc, #172]	@ (800835c <D80_1CH_HTONS_VOL_HP+0x204>)
 80082ae:	fb29 a903 	smlad	r9, r9, r3, sl
 80082b2:	4d2b      	ldr	r5, [pc, #172]	@ (8008360 <D80_1CH_HTONS_VOL_HP+0x208>)
 80082b4:	fb28 9805 	smlad	r8, r8, r5, r9
 80082b8:	4d2a      	ldr	r5, [pc, #168]	@ (8008364 <D80_1CH_HTONS_VOL_HP+0x20c>)
 80082ba:	fb22 8205 	smlad	r2, r2, r5, r8
 80082be:	4b2a      	ldr	r3, [pc, #168]	@ (8008368 <D80_1CH_HTONS_VOL_HP+0x210>)
 80082c0:	fb26 2c03 	smlad	ip, r6, r3, r2
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	9d04      	ldr	r5, [sp, #16]
 80082c8:	f5ab 3a7a 	sub.w	sl, fp, #256000	@ 0x3e800
 80082cc:	4453      	add	r3, sl
 80082ce:	461a      	mov	r2, r3
 80082d0:	9b02      	ldr	r3, [sp, #8]
 80082d2:	f8cd a008 	str.w	sl, [sp, #8]
 80082d6:	1ad2      	subs	r2, r2, r3
 80082d8:	17d7      	asrs	r7, r2, #31
 80082da:	fba2 2305 	umull	r2, r3, r2, r5
 80082de:	fb05 3307 	mla	r3, r5, r7, r3
 80082e2:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 80082e6:	f143 0300 	adc.w	r3, r3, #0
 80082ea:	9d03      	ldr	r5, [sp, #12]
 80082ec:	029a      	lsls	r2, r3, #10
 80082ee:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 80082f2:	2700      	movs	r7, #0
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	fbc5 6702 	smlal	r6, r7, r5, r2
 80082fa:	10ba      	asrs	r2, r7, #2
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	f302 020f 	ssat	r2, #16, r2
 8008302:	9b05      	ldr	r3, [sp, #20]
 8008304:	f821 2b02 	strh.w	r2, [r1], #2
 8008308:	4299      	cmp	r1, r3
 800830a:	f47f af45 	bne.w	8008198 <D80_1CH_HTONS_VOL_HP+0x40>
 800830e:	4623      	mov	r3, r4
 8008310:	9907      	ldr	r1, [sp, #28]
 8008312:	9801      	ldr	r0, [sp, #4]
 8008314:	60c8      	str	r0, [r1, #12]
 8008316:	9a00      	ldr	r2, [sp, #0]
 8008318:	f8c1 c008 	str.w	ip, [r1, #8]
 800831c:	4608      	mov	r0, r1
 800831e:	61cb      	str	r3, [r1, #28]
 8008320:	610a      	str	r2, [r1, #16]
 8008322:	f8c1 a014 	str.w	sl, [r1, #20]
 8008326:	9906      	ldr	r1, [sp, #24]
 8008328:	6181      	str	r1, [r0, #24]
 800832a:	2000      	movs	r0, #0
 800832c:	b009      	add	sp, #36	@ 0x24
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	f8dd a008 	ldr.w	sl, [sp, #8]
 8008336:	e7eb      	b.n	8008310 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8008338:	20000000 	.word	0x20000000
 800833c:	002d0024 	.word	0x002d0024
 8008340:	001c0015 	.word	0x001c0015
 8008344:	000f000a 	.word	0x000f000a
 8008348:	00060003 	.word	0x00060003
 800834c:	0037003f 	.word	0x0037003f
 8008350:	00450049 	.word	0x00450049
 8008354:	00490045 	.word	0x00490045
 8008358:	003f0037 	.word	0x003f0037
 800835c:	00030006 	.word	0x00030006
 8008360:	000a000f 	.word	0x000a000f
 8008364:	0015001c 	.word	0x0015001c
 8008368:	0024002d 	.word	0x0024002d

0800836c <D128_1CH_HTONS_VOL_HP>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	b093      	sub	sp, #76	@ 0x4c
 8008372:	4614      	mov	r4, r2
 8008374:	9211      	str	r2, [sp, #68]	@ 0x44
 8008376:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008378:	6912      	ldr	r2, [r2, #16]
 800837a:	9203      	str	r2, [sp, #12]
 800837c:	4622      	mov	r2, r4
 800837e:	4615      	mov	r5, r2
 8008380:	6964      	ldr	r4, [r4, #20]
 8008382:	9406      	str	r4, [sp, #24]
 8008384:	4614      	mov	r4, r2
 8008386:	6992      	ldr	r2, [r2, #24]
 8008388:	9210      	str	r2, [sp, #64]	@ 0x40
 800838a:	68ea      	ldr	r2, [r5, #12]
 800838c:	9204      	str	r2, [sp, #16]
 800838e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8008390:	69e6      	ldr	r6, [r4, #28]
 8008392:	920d      	str	r2, [sp, #52]	@ 0x34
 8008394:	68a4      	ldr	r4, [r4, #8]
 8008396:	6a2a      	ldr	r2, [r5, #32]
 8008398:	9405      	str	r4, [sp, #20]
 800839a:	920e      	str	r2, [sp, #56]	@ 0x38
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8145 	beq.w	800862c <D128_1CH_HTONS_VOL_HP+0x2c0>
 80083a2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80083a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083a8:	f8df 82dc 	ldr.w	r8, [pc, #732]	@ 8008688 <D128_1CH_HTONS_VOL_HP+0x31c>
 80083ac:	9107      	str	r1, [sp, #28]
 80083ae:	f100 0310 	add.w	r3, r0, #16
 80083b2:	4699      	mov	r9, r3
 80083b4:	f1a9 0110 	sub.w	r1, r9, #16
 80083b8:	c90e      	ldmia	r1, {r1, r2, r3}
 80083ba:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80083be:	ba49      	rev16	r1, r1
 80083c0:	ba52      	rev16	r2, r2
 80083c2:	ba5b      	rev16	r3, r3
 80083c4:	fa90 fa90 	rev16.w	sl, r0
 80083c8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80083cc:	b2cc      	uxtb	r4, r1
 80083ce:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 80083d2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80083d6:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80083da:	0e09      	lsrs	r1, r1, #24
 80083dc:	4426      	add	r6, r4
 80083de:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80083e2:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 80083e6:	b2d0      	uxtb	r0, r2
 80083e8:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80083ec:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 80083f0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80083f4:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80083f8:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80083fc:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8008400:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008404:	0e12      	lsrs	r2, r2, #24
 8008406:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800840a:	9701      	str	r7, [sp, #4]
 800840c:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8008410:	4627      	mov	r7, r4
 8008412:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8008416:	9702      	str	r7, [sp, #8]
 8008418:	b2da      	uxtb	r2, r3
 800841a:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800841e:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8008422:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8008426:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800842a:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800842e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008432:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008436:	0e1b      	lsrs	r3, r3, #24
 8008438:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800843c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8008440:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8008444:	fa5f f38a 	uxtb.w	r3, sl
 8008448:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800844c:	960a      	str	r6, [sp, #40]	@ 0x28
 800844e:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8008452:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8008456:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800845a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800845e:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008460:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008464:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008468:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800846c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8008470:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8008474:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008478:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800847c:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8008480:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8008484:	9308      	str	r3, [sp, #32]
 8008486:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800848a:	9b01      	ldr	r3, [sp, #4]
 800848c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008490:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8008494:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008498:	9b02      	ldr	r3, [sp, #8]
 800849a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800849e:	9302      	str	r3, [sp, #8]
 80084a0:	9b08      	ldr	r3, [sp, #32]
 80084a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084a6:	9308      	str	r3, [sp, #32]
 80084a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084aa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80084ae:	950c      	str	r5, [sp, #48]	@ 0x30
 80084b0:	461d      	mov	r5, r3
 80084b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084b4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80084b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80084bc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80084c0:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	9b02      	ldr	r3, [sp, #8]
 80084c8:	9202      	str	r2, [sp, #8]
 80084ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084cc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80084ce:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80084d2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80084d6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80084da:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80084de:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80084e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084e6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 80084ea:	9b08      	ldr	r3, [sp, #32]
 80084ec:	9f01      	ldr	r7, [sp, #4]
 80084ee:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80084f2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80084f6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80084fa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80084fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008502:	46be      	mov	lr, r7
 8008504:	0a96      	lsrs	r6, r2, #10
 8008506:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800850a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800850e:	4f49      	ldr	r7, [pc, #292]	@ (8008634 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8008510:	9a04      	ldr	r2, [sp, #16]
 8008512:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8008516:	4a48      	ldr	r2, [pc, #288]	@ (8008638 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8008518:	fb2a ee02 	smlad	lr, sl, r2, lr
 800851c:	4a47      	ldr	r2, [pc, #284]	@ (800863c <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800851e:	fb21 ee02 	smlad	lr, r1, r2, lr
 8008522:	4a47      	ldr	r2, [pc, #284]	@ (8008640 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8008524:	fb24 ee02 	smlad	lr, r4, r2, lr
 8008528:	4a46      	ldr	r2, [pc, #280]	@ (8008644 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800852a:	9f02      	ldr	r7, [sp, #8]
 800852c:	fb27 ee02 	smlad	lr, r7, r2, lr
 8008530:	4a45      	ldr	r2, [pc, #276]	@ (8008648 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8008532:	fb20 ee02 	smlad	lr, r0, r2, lr
 8008536:	4a45      	ldr	r2, [pc, #276]	@ (800864c <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8008538:	fb23 e702 	smlad	r7, r3, r2, lr
 800853c:	f44f 3e80 	mov.w	lr, #65536	@ 0x10000
 8008540:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8008544:	9f01      	ldr	r7, [sp, #4]
 8008546:	4a42      	ldr	r2, [pc, #264]	@ (8008650 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8008548:	46bc      	mov	ip, r7
 800854a:	9f05      	ldr	r7, [sp, #20]
 800854c:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8008550:	4a40      	ldr	r2, [pc, #256]	@ (8008654 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8008552:	fb2a cc02 	smlad	ip, sl, r2, ip
 8008556:	4f40      	ldr	r7, [pc, #256]	@ (8008658 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8008558:	fb21 cc07 	smlad	ip, r1, r7, ip
 800855c:	4f3f      	ldr	r7, [pc, #252]	@ (800865c <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800855e:	fb24 cc07 	smlad	ip, r4, r7, ip
 8008562:	4f3f      	ldr	r7, [pc, #252]	@ (8008660 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8008564:	9a02      	ldr	r2, [sp, #8]
 8008566:	fb22 cc07 	smlad	ip, r2, r7, ip
 800856a:	4f3e      	ldr	r7, [pc, #248]	@ (8008664 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800856c:	fb20 cc07 	smlad	ip, r0, r7, ip
 8008570:	4f3d      	ldr	r7, [pc, #244]	@ (8008668 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8008572:	fb23 c707 	smlad	r7, r3, r7, ip
 8008576:	f8df c114 	ldr.w	ip, [pc, #276]	@ 800868c <D128_1CH_HTONS_VOL_HP+0x320>
 800857a:	fb25 720c 	smlad	r2, r5, ip, r7
 800857e:	f04f 0b01 	mov.w	fp, #1
 8008582:	9204      	str	r2, [sp, #16]
 8008584:	9f01      	ldr	r7, [sp, #4]
 8008586:	fb27 fb0b 	smuad	fp, r7, fp
 800858a:	4f38      	ldr	r7, [pc, #224]	@ (800866c <D128_1CH_HTONS_VOL_HP+0x300>)
 800858c:	fb2a ba07 	smlad	sl, sl, r7, fp
 8008590:	4f37      	ldr	r7, [pc, #220]	@ (8008670 <D128_1CH_HTONS_VOL_HP+0x304>)
 8008592:	fb21 aa07 	smlad	sl, r1, r7, sl
 8008596:	4f37      	ldr	r7, [pc, #220]	@ (8008674 <D128_1CH_HTONS_VOL_HP+0x308>)
 8008598:	fb24 aa07 	smlad	sl, r4, r7, sl
 800859c:	4f36      	ldr	r7, [pc, #216]	@ (8008678 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800859e:	9a02      	ldr	r2, [sp, #8]
 80085a0:	fb22 a707 	smlad	r7, r2, r7, sl
 80085a4:	4a35      	ldr	r2, [pc, #212]	@ (800867c <D128_1CH_HTONS_VOL_HP+0x310>)
 80085a6:	fb20 7702 	smlad	r7, r0, r2, r7
 80085aa:	4a35      	ldr	r2, [pc, #212]	@ (8008680 <D128_1CH_HTONS_VOL_HP+0x314>)
 80085ac:	fb23 7702 	smlad	r7, r3, r2, r7
 80085b0:	4b34      	ldr	r3, [pc, #208]	@ (8008684 <D128_1CH_HTONS_VOL_HP+0x318>)
 80085b2:	fb25 7303 	smlad	r3, r5, r3, r7
 80085b6:	9305      	str	r3, [sp, #20]
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80085bc:	f5ae 1e80 	sub.w	lr, lr, #1048576	@ 0x100000
 80085c0:	4473      	add	r3, lr
 80085c2:	461a      	mov	r2, r3
 80085c4:	9b06      	ldr	r3, [sp, #24]
 80085c6:	f8cd e018 	str.w	lr, [sp, #24]
 80085ca:	1ad2      	subs	r2, r2, r3
 80085cc:	17d1      	asrs	r1, r2, #31
 80085ce:	fba2 2304 	umull	r2, r3, r2, r4
 80085d2:	fb04 3301 	mla	r3, r4, r1, r3
 80085d6:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 80085da:	f143 0300 	adc.w	r3, r3, #0
 80085de:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80085e0:	021a      	lsls	r2, r3, #8
 80085e2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80085e6:	2100      	movs	r1, #0
 80085e8:	fbc4 0102 	smlal	r0, r1, r4, r2
 80085ec:	108a      	asrs	r2, r1, #2
 80085ee:	9907      	ldr	r1, [sp, #28]
 80085f0:	f302 020f 	ssat	r2, #16, r2
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	f821 2b02 	strh.w	r2, [r1], #2
 80085fa:	9303      	str	r3, [sp, #12]
 80085fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085fe:	9107      	str	r1, [sp, #28]
 8008600:	4299      	cmp	r1, r3
 8008602:	f109 0910 	add.w	r9, r9, #16
 8008606:	f47f aed5 	bne.w	80083b4 <D128_1CH_HTONS_VOL_HP+0x48>
 800860a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800860c:	9905      	ldr	r1, [sp, #20]
 800860e:	6091      	str	r1, [r2, #8]
 8008610:	9904      	ldr	r1, [sp, #16]
 8008612:	60d1      	str	r1, [r2, #12]
 8008614:	4613      	mov	r3, r2
 8008616:	61d6      	str	r6, [r2, #28]
 8008618:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800861a:	9a03      	ldr	r2, [sp, #12]
 800861c:	611a      	str	r2, [r3, #16]
 800861e:	2000      	movs	r0, #0
 8008620:	f8c3 e014 	str.w	lr, [r3, #20]
 8008624:	6199      	str	r1, [r3, #24]
 8008626:	b013      	add	sp, #76	@ 0x4c
 8008628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8008630:	e7eb      	b.n	800860a <D128_1CH_HTONS_VOL_HP+0x29e>
 8008632:	bf00      	nop
 8008634:	00780069 	.word	0x00780069
 8008638:	005b004e 	.word	0x005b004e
 800863c:	00420037 	.word	0x00420037
 8008640:	002d0024 	.word	0x002d0024
 8008644:	001c0015 	.word	0x001c0015
 8008648:	000f000a 	.word	0x000f000a
 800864c:	00060003 	.word	0x00060003
 8008650:	00880096 	.word	0x00880096
 8008654:	00a200ac 	.word	0x00a200ac
 8008658:	00b400ba 	.word	0x00b400ba
 800865c:	00be00c0 	.word	0x00be00c0
 8008660:	00c000be 	.word	0x00c000be
 8008664:	00ba00b4 	.word	0x00ba00b4
 8008668:	00ac00a2 	.word	0x00ac00a2
 800866c:	00030006 	.word	0x00030006
 8008670:	000a000f 	.word	0x000a000f
 8008674:	0015001c 	.word	0x0015001c
 8008678:	0024002d 	.word	0x0024002d
 800867c:	00370042 	.word	0x00370042
 8008680:	004e005b 	.word	0x004e005b
 8008684:	00690078 	.word	0x00690078
 8008688:	20000000 	.word	0x20000000
 800868c:	00960088 	.word	0x00960088

08008690 <PDM_Filter_Init>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	2240      	movs	r2, #64	@ 0x40
 8008694:	4604      	mov	r4, r0
 8008696:	2100      	movs	r1, #0
 8008698:	300c      	adds	r0, #12
 800869a:	f002 fae1 	bl	800ac60 <memset>
 800869e:	493b      	ldr	r1, [pc, #236]	@ (800878c <PDM_Filter_Init+0xfc>)
 80086a0:	483b      	ldr	r0, [pc, #236]	@ (8008790 <PDM_Filter_Init+0x100>)
 80086a2:	f000 f98d 	bl	80089c0 <CRC_Lock>
 80086a6:	8822      	ldrh	r2, [r4, #0]
 80086a8:	8963      	ldrh	r3, [r4, #10]
 80086aa:	4938      	ldr	r1, [pc, #224]	@ (800878c <PDM_Filter_Init+0xfc>)
 80086ac:	8925      	ldrh	r5, [r4, #8]
 80086ae:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80086b0:	2801      	cmp	r0, #1
 80086b2:	f04f 0300 	mov.w	r3, #0
 80086b6:	bf18      	it	ne
 80086b8:	2100      	movne	r1, #0
 80086ba:	2a01      	cmp	r2, #1
 80086bc:	6461      	str	r1, [r4, #68]	@ 0x44
 80086be:	86e5      	strh	r5, [r4, #54]	@ 0x36
 80086c0:	61a3      	str	r3, [r4, #24]
 80086c2:	6123      	str	r3, [r4, #16]
 80086c4:	6163      	str	r3, [r4, #20]
 80086c6:	60e3      	str	r3, [r4, #12]
 80086c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80086ca:	61e3      	str	r3, [r4, #28]
 80086cc:	6223      	str	r3, [r4, #32]
 80086ce:	6423      	str	r3, [r4, #64]	@ 0x40
 80086d0:	d918      	bls.n	8008704 <PDM_Filter_Init+0x74>
 80086d2:	2003      	movs	r0, #3
 80086d4:	2302      	movs	r3, #2
 80086d6:	8862      	ldrh	r2, [r4, #2]
 80086d8:	2a01      	cmp	r2, #1
 80086da:	d91d      	bls.n	8008718 <PDM_Filter_Init+0x88>
 80086dc:	2140      	movs	r1, #64	@ 0x40
 80086de:	2300      	movs	r3, #0
 80086e0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80086e2:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80086e6:	6862      	ldr	r2, [r4, #4]
 80086e8:	bf04      	itt	eq
 80086ea:	6421      	streq	r1, [r4, #64]	@ 0x40
 80086ec:	460b      	moveq	r3, r1
 80086ee:	b11a      	cbz	r2, 80086f8 <PDM_Filter_Init+0x68>
 80086f0:	f043 0310 	orr.w	r3, r3, #16
 80086f4:	6423      	str	r3, [r4, #64]	@ 0x40
 80086f6:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80086f8:	2200      	movs	r2, #0
 80086fa:	8722      	strh	r2, [r4, #56]	@ 0x38
 80086fc:	b908      	cbnz	r0, 8008702 <PDM_Filter_Init+0x72>
 80086fe:	3380      	adds	r3, #128	@ 0x80
 8008700:	6423      	str	r3, [r4, #64]	@ 0x40
 8008702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008704:	4d23      	ldr	r5, [pc, #140]	@ (8008794 <PDM_Filter_Init+0x104>)
 8008706:	d010      	beq.n	800872a <PDM_Filter_Init+0x9a>
 8008708:	782a      	ldrb	r2, [r5, #0]
 800870a:	2a01      	cmp	r2, #1
 800870c:	d027      	beq.n	800875e <PDM_Filter_Init+0xce>
 800870e:	8862      	ldrh	r2, [r4, #2]
 8008710:	2a01      	cmp	r2, #1
 8008712:	f04f 0001 	mov.w	r0, #1
 8008716:	d8e1      	bhi.n	80086dc <PDM_Filter_Init+0x4c>
 8008718:	d001      	beq.n	800871e <PDM_Filter_Init+0x8e>
 800871a:	4618      	mov	r0, r3
 800871c:	e7de      	b.n	80086dc <PDM_Filter_Init+0x4c>
 800871e:	2220      	movs	r2, #32
 8008720:	4618      	mov	r0, r3
 8008722:	6422      	str	r2, [r4, #64]	@ 0x40
 8008724:	4613      	mov	r3, r2
 8008726:	2160      	movs	r1, #96	@ 0x60
 8008728:	e7da      	b.n	80086e0 <PDM_Filter_Init+0x50>
 800872a:	7829      	ldrb	r1, [r5, #0]
 800872c:	2900      	cmp	r1, #0
 800872e:	d1ee      	bne.n	800870e <PDM_Filter_Init+0x7e>
 8008730:	4919      	ldr	r1, [pc, #100]	@ (8008798 <PDM_Filter_Init+0x108>)
 8008732:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 80087a0 <PDM_Filter_Init+0x110>
 8008736:	4f19      	ldr	r7, [pc, #100]	@ (800879c <PDM_Filter_Init+0x10c>)
 8008738:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 800873c:	684a      	ldr	r2, [r1, #4]
 800873e:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8008742:	ea02 0007 	and.w	r0, r2, r7
 8008746:	4303      	orrs	r3, r0
 8008748:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800874c:	4413      	add	r3, r2
 800874e:	f841 3f04 	str.w	r3, [r1, #4]!
 8008752:	428e      	cmp	r6, r1
 8008754:	d1f2      	bne.n	800873c <PDM_Filter_Init+0xac>
 8008756:	2001      	movs	r0, #1
 8008758:	7028      	strb	r0, [r5, #0]
 800875a:	2300      	movs	r3, #0
 800875c:	e7bb      	b.n	80086d6 <PDM_Filter_Init+0x46>
 800875e:	490e      	ldr	r1, [pc, #56]	@ (8008798 <PDM_Filter_Init+0x108>)
 8008760:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 80087a0 <PDM_Filter_Init+0x110>
 8008764:	4f0d      	ldr	r7, [pc, #52]	@ (800879c <PDM_Filter_Init+0x10c>)
 8008766:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 800876a:	684a      	ldr	r2, [r1, #4]
 800876c:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8008770:	ea02 0007 	and.w	r0, r2, r7
 8008774:	4303      	orrs	r3, r0
 8008776:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800877a:	4413      	add	r3, r2
 800877c:	f841 3f04 	str.w	r3, [r1, #4]!
 8008780:	428e      	cmp	r6, r1
 8008782:	d1f2      	bne.n	800876a <PDM_Filter_Init+0xda>
 8008784:	2300      	movs	r3, #0
 8008786:	702b      	strb	r3, [r5, #0]
 8008788:	e7c1      	b.n	800870e <PDM_Filter_Init+0x7e>
 800878a:	bf00      	nop
 800878c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008790:	f407a5c2 	.word	0xf407a5c2
 8008794:	20000628 	.word	0x20000628
 8008798:	1ffffffc 	.word	0x1ffffffc
 800879c:	000ffc00 	.word	0x000ffc00
 80087a0:	3ff00000 	.word	0x3ff00000

080087a4 <PDM_Filter_setConfig>:
 80087a4:	4b66      	ldr	r3, [pc, #408]	@ (8008940 <PDM_Filter_setConfig+0x19c>)
 80087a6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d001      	beq.n	80087b0 <PDM_Filter_setConfig+0xc>
 80087ac:	2004      	movs	r0, #4
 80087ae:	4770      	bx	lr
 80087b0:	b530      	push	{r4, r5, lr}
 80087b2:	880a      	ldrh	r2, [r1, #0]
 80087b4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80087b6:	ed2d 8b04 	vpush	{d8-d9}
 80087ba:	4604      	mov	r4, r0
 80087bc:	460d      	mov	r5, r1
 80087be:	1e51      	subs	r1, r2, #1
 80087c0:	f423 7080 	bic.w	r0, r3, #256	@ 0x100
 80087c4:	2906      	cmp	r1, #6
 80087c6:	b083      	sub	sp, #12
 80087c8:	6420      	str	r0, [r4, #64]	@ 0x40
 80087ca:	d91a      	bls.n	8008802 <PDM_Filter_setConfig+0x5e>
 80087cc:	2008      	movs	r0, #8
 80087ce:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 80087d2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80087d6:	4299      	cmp	r1, r3
 80087d8:	d07e      	beq.n	80088d8 <PDM_Filter_setConfig+0x134>
 80087da:	f113 0f0c 	cmn.w	r3, #12
 80087de:	da2a      	bge.n	8008836 <PDM_Filter_setConfig+0x92>
 80087e0:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 80087e4:	3040      	adds	r0, #64	@ 0x40
 80087e6:	80ab      	strh	r3, [r5, #4]
 80087e8:	8622      	strh	r2, [r4, #48]	@ 0x30
 80087ea:	886b      	ldrh	r3, [r5, #2]
 80087ec:	8663      	strh	r3, [r4, #50]	@ 0x32
 80087ee:	b920      	cbnz	r0, 80087fa <PDM_Filter_setConfig+0x56>
 80087f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087f6:	6423      	str	r3, [r4, #64]	@ 0x40
 80087f8:	2000      	movs	r0, #0
 80087fa:	b003      	add	sp, #12
 80087fc:	ecbd 8b04 	vpop	{d8-d9}
 8008800:	bd30      	pop	{r4, r5, pc}
 8008802:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 8008804:	4291      	cmp	r1, r2
 8008806:	d06c      	beq.n	80088e2 <PDM_Filter_setConfig+0x13e>
 8008808:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 800880c:	f023 0301 	bic.w	r3, r3, #1
 8008810:	4313      	orrs	r3, r2
 8008812:	f003 0170 	and.w	r1, r3, #112	@ 0x70
 8008816:	6423      	str	r3, [r4, #64]	@ 0x40
 8008818:	2970      	cmp	r1, #112	@ 0x70
 800881a:	f003 030f 	and.w	r3, r3, #15
 800881e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008822:	d066      	beq.n	80088f2 <PDM_Filter_setConfig+0x14e>
 8008824:	2b06      	cmp	r3, #6
 8008826:	f200 8089 	bhi.w	800893c <PDM_Filter_setConfig+0x198>
 800882a:	e8df f003 	tbb	[pc, r3]
 800882e:	4f52      	.short	0x4f52
 8008830:	3d43494c 	.word	0x3d43494c
 8008834:	46          	.byte	0x46
 8008835:	00          	.byte	0x00
 8008836:	2b33      	cmp	r3, #51	@ 0x33
 8008838:	dc32      	bgt.n	80088a0 <PDM_Filter_setConfig+0xfc>
 800883a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800883c:	f002 020f 	and.w	r2, r2, #15
 8008840:	3a01      	subs	r2, #1
 8008842:	2a06      	cmp	r2, #6
 8008844:	d872      	bhi.n	800892c <PDM_Filter_setConfig+0x188>
 8008846:	493f      	ldr	r1, [pc, #252]	@ (8008944 <PDM_Filter_setConfig+0x1a0>)
 8008848:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800884c:	ed92 9a00 	vldr	s18, [r2]
 8008850:	ed92 8a07 	vldr	s16, [r2, #28]
 8008854:	9001      	str	r0, [sp, #4]
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800885e:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8008862:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8008866:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800886a:	f005 fd3f 	bl	800e2ec <powf>
 800886e:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8008948 <PDM_Filter_setConfig+0x1a4>
 8008872:	eef0 8a40 	vmov.f32	s17, s0
 8008876:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800887a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800887e:	f005 fd35 	bl	800e2ec <powf>
 8008882:	ee28 8a28 	vmul.f32	s16, s16, s17
 8008886:	ee28 0a00 	vmul.f32	s0, s16, s0
 800888a:	f005 fdb3 	bl	800e3f4 <roundf>
 800888e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8008892:	88ab      	ldrh	r3, [r5, #4]
 8008894:	882a      	ldrh	r2, [r5, #0]
 8008896:	9801      	ldr	r0, [sp, #4]
 8008898:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 800889c:	8723      	strh	r3, [r4, #56]	@ 0x38
 800889e:	e7a3      	b.n	80087e8 <PDM_Filter_setConfig+0x44>
 80088a0:	2333      	movs	r3, #51	@ 0x33
 80088a2:	3040      	adds	r0, #64	@ 0x40
 80088a4:	80ab      	strh	r3, [r5, #4]
 80088a6:	e79f      	b.n	80087e8 <PDM_Filter_setConfig+0x44>
 80088a8:	4b28      	ldr	r3, [pc, #160]	@ (800894c <PDM_Filter_setConfig+0x1a8>)
 80088aa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80088ac:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80088b0:	2000      	movs	r0, #0
 80088b2:	e792      	b.n	80087da <PDM_Filter_setConfig+0x36>
 80088b4:	4b26      	ldr	r3, [pc, #152]	@ (8008950 <PDM_Filter_setConfig+0x1ac>)
 80088b6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80088b8:	e7f8      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 80088ba:	4b26      	ldr	r3, [pc, #152]	@ (8008954 <PDM_Filter_setConfig+0x1b0>)
 80088bc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80088be:	e7f5      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 80088c0:	4b25      	ldr	r3, [pc, #148]	@ (8008958 <PDM_Filter_setConfig+0x1b4>)
 80088c2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80088c4:	e7f2      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 80088c6:	4b25      	ldr	r3, [pc, #148]	@ (800895c <PDM_Filter_setConfig+0x1b8>)
 80088c8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80088ca:	e7ef      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 80088cc:	4b24      	ldr	r3, [pc, #144]	@ (8008960 <PDM_Filter_setConfig+0x1bc>)
 80088ce:	64a3      	str	r3, [r4, #72]	@ 0x48
 80088d0:	e7ec      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 80088d2:	4b24      	ldr	r3, [pc, #144]	@ (8008964 <PDM_Filter_setConfig+0x1c0>)
 80088d4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80088d6:	e7e9      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 80088d8:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 80088da:	4291      	cmp	r1, r2
 80088dc:	f47f af7d 	bne.w	80087da <PDM_Filter_setConfig+0x36>
 80088e0:	e783      	b.n	80087ea <PDM_Filter_setConfig+0x46>
 80088e2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80088e6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 80088ea:	4299      	cmp	r1, r3
 80088ec:	d023      	beq.n	8008936 <PDM_Filter_setConfig+0x192>
 80088ee:	2000      	movs	r0, #0
 80088f0:	e773      	b.n	80087da <PDM_Filter_setConfig+0x36>
 80088f2:	2b06      	cmp	r3, #6
 80088f4:	d822      	bhi.n	800893c <PDM_Filter_setConfig+0x198>
 80088f6:	e8df f003 	tbb	[pc, r3]
 80088fa:	1316      	.short	0x1316
 80088fc:	070a0d10 	.word	0x070a0d10
 8008900:	04          	.byte	0x04
 8008901:	00          	.byte	0x00
 8008902:	4b19      	ldr	r3, [pc, #100]	@ (8008968 <PDM_Filter_setConfig+0x1c4>)
 8008904:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008906:	e7d1      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 8008908:	4b18      	ldr	r3, [pc, #96]	@ (800896c <PDM_Filter_setConfig+0x1c8>)
 800890a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800890c:	e7ce      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 800890e:	4b18      	ldr	r3, [pc, #96]	@ (8008970 <PDM_Filter_setConfig+0x1cc>)
 8008910:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008912:	e7cb      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 8008914:	4b17      	ldr	r3, [pc, #92]	@ (8008974 <PDM_Filter_setConfig+0x1d0>)
 8008916:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008918:	e7c8      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 800891a:	4b17      	ldr	r3, [pc, #92]	@ (8008978 <PDM_Filter_setConfig+0x1d4>)
 800891c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800891e:	e7c5      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 8008920:	4b16      	ldr	r3, [pc, #88]	@ (800897c <PDM_Filter_setConfig+0x1d8>)
 8008922:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008924:	e7c2      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 8008926:	4b16      	ldr	r3, [pc, #88]	@ (8008980 <PDM_Filter_setConfig+0x1dc>)
 8008928:	64a3      	str	r3, [r4, #72]	@ 0x48
 800892a:	e7bf      	b.n	80088ac <PDM_Filter_setConfig+0x108>
 800892c:	ed9f 8a15 	vldr	s16, [pc, #84]	@ 8008984 <PDM_Filter_setConfig+0x1e0>
 8008930:	eeb0 9a48 	vmov.f32	s18, s16
 8008934:	e78e      	b.n	8008854 <PDM_Filter_setConfig+0xb0>
 8008936:	886b      	ldrh	r3, [r5, #2]
 8008938:	8663      	strh	r3, [r4, #50]	@ 0x32
 800893a:	e759      	b.n	80087f0 <PDM_Filter_setConfig+0x4c>
 800893c:	2000      	movs	r0, #0
 800893e:	e746      	b.n	80087ce <PDM_Filter_setConfig+0x2a>
 8008940:	b5e8b5cd 	.word	0xb5e8b5cd
 8008944:	0800eb60 	.word	0x0800eb60
 8008948:	42000000 	.word	0x42000000
 800894c:	08006d11 	.word	0x08006d11
 8008950:	08006bf1 	.word	0x08006bf1
 8008954:	08006ea1 	.word	0x08006ea1
 8008958:	080076e5 	.word	0x080076e5
 800895c:	08007445 	.word	0x08007445
 8008960:	08007225 	.word	0x08007225
 8008964:	08007039 	.word	0x08007039
 8008968:	08007cf1 	.word	0x08007cf1
 800896c:	08007bb9 	.word	0x08007bb9
 8008970:	08007ad5 	.word	0x08007ad5
 8008974:	0800836d 	.word	0x0800836d
 8008978:	08008159 	.word	0x08008159
 800897c:	08007fa1 	.word	0x08007fa1
 8008980:	08007e35 	.word	0x08007e35
 8008984:	00000000 	.word	0x00000000

08008988 <PDM_Filter>:
 8008988:	b410      	push	{r4}
 800898a:	4b0c      	ldr	r3, [pc, #48]	@ (80089bc <PDM_Filter+0x34>)
 800898c:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800898e:	429c      	cmp	r4, r3
 8008990:	d003      	beq.n	800899a <PDM_Filter+0x12>
 8008992:	2004      	movs	r0, #4
 8008994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800899c:	05dc      	lsls	r4, r3, #23
 800899e:	d407      	bmi.n	80089b0 <PDM_Filter+0x28>
 80089a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089a4:	bf14      	ite	ne
 80089a6:	2020      	movne	r0, #32
 80089a8:	2030      	moveq	r0, #48	@ 0x30
 80089aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 80089b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b6:	320c      	adds	r2, #12
 80089b8:	4718      	bx	r3
 80089ba:	bf00      	nop
 80089bc:	b5e8b5cd 	.word	0xb5e8b5cd

080089c0 <CRC_Lock>:
 80089c0:	4a17      	ldr	r2, [pc, #92]	@ (8008a20 <CRC_Lock+0x60>)
 80089c2:	6813      	ldr	r3, [r2, #0]
 80089c4:	b410      	push	{r4}
 80089c6:	f023 0301 	bic.w	r3, r3, #1
 80089ca:	4c16      	ldr	r4, [pc, #88]	@ (8008a24 <CRC_Lock+0x64>)
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	b933      	cbnz	r3, 80089e0 <CRC_Lock+0x20>
 80089d2:	4b15      	ldr	r3, [pc, #84]	@ (8008a28 <CRC_Lock+0x68>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089da:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80089de:	d00f      	beq.n	8008a00 <CRC_Lock+0x40>
 80089e0:	4a12      	ldr	r2, [pc, #72]	@ (8008a2c <CRC_Lock+0x6c>)
 80089e2:	2301      	movs	r3, #1
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1fc      	bne.n	80089e6 <CRC_Lock+0x26>
 80089ec:	4b10      	ldr	r3, [pc, #64]	@ (8008a30 <CRC_Lock+0x70>)
 80089ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f2:	6018      	str	r0, [r3, #0]
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	1a08      	subs	r0, r1, r0
 80089f8:	fab0 f080 	clz	r0, r0
 80089fc:	0940      	lsrs	r0, r0, #5
 80089fe:	4770      	bx	lr
 8008a00:	4a0c      	ldr	r2, [pc, #48]	@ (8008a34 <CRC_Lock+0x74>)
 8008a02:	2301      	movs	r3, #1
 8008a04:	6013      	str	r3, [r2, #0]
 8008a06:	6813      	ldr	r3, [r2, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1fc      	bne.n	8008a06 <CRC_Lock+0x46>
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a38 <CRC_Lock+0x78>)
 8008a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a12:	6018      	str	r0, [r3, #0]
 8008a14:	6818      	ldr	r0, [r3, #0]
 8008a16:	1a40      	subs	r0, r0, r1
 8008a18:	fab0 f080 	clz	r0, r0
 8008a1c:	0940      	lsrs	r0, r0, #5
 8008a1e:	4770      	bx	lr
 8008a20:	e0002000 	.word	0xe0002000
 8008a24:	e0042000 	.word	0xe0042000
 8008a28:	5c001000 	.word	0x5c001000
 8008a2c:	40023008 	.word	0x40023008
 8008a30:	40023000 	.word	0x40023000
 8008a34:	58024c08 	.word	0x58024c08
 8008a38:	58024c00 	.word	0x58024c00

08008a3c <arm_rfft_32_fast_init_f32>:
 8008a3c:	b150      	cbz	r0, 8008a54 <arm_rfft_32_fast_init_f32+0x18>
 8008a3e:	b510      	push	{r4, lr}
 8008a40:	2110      	movs	r1, #16
 8008a42:	4604      	mov	r4, r0
 8008a44:	f000 fd58 	bl	80094f8 <arm_cfft_init_f32>
 8008a48:	b918      	cbnz	r0, 8008a52 <arm_rfft_32_fast_init_f32+0x16>
 8008a4a:	4b04      	ldr	r3, [pc, #16]	@ (8008a5c <arm_rfft_32_fast_init_f32+0x20>)
 8008a4c:	6163      	str	r3, [r4, #20]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	8222      	strh	r2, [r4, #16]
 8008a52:	bd10      	pop	{r4, pc}
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	08027610 	.word	0x08027610

08008a60 <arm_rfft_64_fast_init_f32>:
 8008a60:	b150      	cbz	r0, 8008a78 <arm_rfft_64_fast_init_f32+0x18>
 8008a62:	b510      	push	{r4, lr}
 8008a64:	2120      	movs	r1, #32
 8008a66:	4604      	mov	r4, r0
 8008a68:	f000 fd46 	bl	80094f8 <arm_cfft_init_f32>
 8008a6c:	b918      	cbnz	r0, 8008a76 <arm_rfft_64_fast_init_f32+0x16>
 8008a6e:	4b04      	ldr	r3, [pc, #16]	@ (8008a80 <arm_rfft_64_fast_init_f32+0x20>)
 8008a70:	6163      	str	r3, [r4, #20]
 8008a72:	2240      	movs	r2, #64	@ 0x40
 8008a74:	8222      	strh	r2, [r4, #16]
 8008a76:	bd10      	pop	{r4, pc}
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	0802be90 	.word	0x0802be90

08008a84 <arm_rfft_128_fast_init_f32>:
 8008a84:	b150      	cbz	r0, 8008a9c <arm_rfft_128_fast_init_f32+0x18>
 8008a86:	b510      	push	{r4, lr}
 8008a88:	2140      	movs	r1, #64	@ 0x40
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	f000 fd34 	bl	80094f8 <arm_cfft_init_f32>
 8008a90:	b918      	cbnz	r0, 8008a9a <arm_rfft_128_fast_init_f32+0x16>
 8008a92:	4b04      	ldr	r3, [pc, #16]	@ (8008aa4 <arm_rfft_128_fast_init_f32+0x20>)
 8008a94:	6163      	str	r3, [r4, #20]
 8008a96:	2280      	movs	r2, #128	@ 0x80
 8008a98:	8222      	strh	r2, [r4, #16]
 8008a9a:	bd10      	pop	{r4, pc}
 8008a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	08025010 	.word	0x08025010

08008aa8 <arm_rfft_256_fast_init_f32>:
 8008aa8:	b158      	cbz	r0, 8008ac2 <arm_rfft_256_fast_init_f32+0x1a>
 8008aaa:	b510      	push	{r4, lr}
 8008aac:	2180      	movs	r1, #128	@ 0x80
 8008aae:	4604      	mov	r4, r0
 8008ab0:	f000 fd22 	bl	80094f8 <arm_cfft_init_f32>
 8008ab4:	b920      	cbnz	r0, 8008ac0 <arm_rfft_256_fast_init_f32+0x18>
 8008ab6:	4b04      	ldr	r3, [pc, #16]	@ (8008ac8 <arm_rfft_256_fast_init_f32+0x20>)
 8008ab8:	6163      	str	r3, [r4, #20]
 8008aba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008abe:	8222      	strh	r2, [r4, #16]
 8008ac0:	bd10      	pop	{r4, pc}
 8008ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac6:	4770      	bx	lr
 8008ac8:	08027210 	.word	0x08027210

08008acc <arm_rfft_512_fast_init_f32>:
 8008acc:	b160      	cbz	r0, 8008ae8 <arm_rfft_512_fast_init_f32+0x1c>
 8008ace:	b510      	push	{r4, lr}
 8008ad0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	f000 fd0f 	bl	80094f8 <arm_cfft_init_f32>
 8008ada:	b920      	cbnz	r0, 8008ae6 <arm_rfft_512_fast_init_f32+0x1a>
 8008adc:	4b04      	ldr	r3, [pc, #16]	@ (8008af0 <arm_rfft_512_fast_init_f32+0x24>)
 8008ade:	6163      	str	r3, [r4, #20]
 8008ae0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ae4:	8222      	strh	r2, [r4, #16]
 8008ae6:	bd10      	pop	{r4, pc}
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	0802b690 	.word	0x0802b690

08008af4 <arm_rfft_1024_fast_init_f32>:
 8008af4:	b160      	cbz	r0, 8008b10 <arm_rfft_1024_fast_init_f32+0x1c>
 8008af6:	b510      	push	{r4, lr}
 8008af8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008afc:	4604      	mov	r4, r0
 8008afe:	f000 fcfb 	bl	80094f8 <arm_cfft_init_f32>
 8008b02:	b920      	cbnz	r0, 8008b0e <arm_rfft_1024_fast_init_f32+0x1a>
 8008b04:	4b04      	ldr	r3, [pc, #16]	@ (8008b18 <arm_rfft_1024_fast_init_f32+0x24>)
 8008b06:	6163      	str	r3, [r4, #20]
 8008b08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008b0c:	8222      	strh	r2, [r4, #16]
 8008b0e:	bd10      	pop	{r4, pc}
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	08024010 	.word	0x08024010

08008b1c <arm_rfft_2048_fast_init_f32>:
 8008b1c:	b160      	cbz	r0, 8008b38 <arm_rfft_2048_fast_init_f32+0x1c>
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008b24:	4604      	mov	r4, r0
 8008b26:	f000 fce7 	bl	80094f8 <arm_cfft_init_f32>
 8008b2a:	b920      	cbnz	r0, 8008b36 <arm_rfft_2048_fast_init_f32+0x1a>
 8008b2c:	4b04      	ldr	r3, [pc, #16]	@ (8008b40 <arm_rfft_2048_fast_init_f32+0x24>)
 8008b2e:	6163      	str	r3, [r4, #20]
 8008b30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b34:	8222      	strh	r2, [r4, #16]
 8008b36:	bd10      	pop	{r4, pc}
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	08025210 	.word	0x08025210

08008b44 <arm_rfft_4096_fast_init_f32>:
 8008b44:	b160      	cbz	r0, 8008b60 <arm_rfft_4096_fast_init_f32+0x1c>
 8008b46:	b510      	push	{r4, lr}
 8008b48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	f000 fcd3 	bl	80094f8 <arm_cfft_init_f32>
 8008b52:	b920      	cbnz	r0, 8008b5e <arm_rfft_4096_fast_init_f32+0x1a>
 8008b54:	4b04      	ldr	r3, [pc, #16]	@ (8008b68 <arm_rfft_4096_fast_init_f32+0x24>)
 8008b56:	6163      	str	r3, [r4, #20]
 8008b58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008b5c:	8222      	strh	r2, [r4, #16]
 8008b5e:	bd10      	pop	{r4, pc}
 8008b60:	f04f 30ff 	mov.w	r0, #4294967295
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	08027690 	.word	0x08027690

08008b6c <arm_rfft_fast_init_f32>:
 8008b6c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008b70:	d024      	beq.n	8008bbc <arm_rfft_fast_init_f32+0x50>
 8008b72:	d807      	bhi.n	8008b84 <arm_rfft_fast_init_f32+0x18>
 8008b74:	2980      	cmp	r1, #128	@ 0x80
 8008b76:	d01c      	beq.n	8008bb2 <arm_rfft_fast_init_f32+0x46>
 8008b78:	d90c      	bls.n	8008b94 <arm_rfft_fast_init_f32+0x28>
 8008b7a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008b7e:	d11a      	bne.n	8008bb6 <arm_rfft_fast_init_f32+0x4a>
 8008b80:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc0 <arm_rfft_fast_init_f32+0x54>)
 8008b82:	4718      	bx	r3
 8008b84:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8008b88:	d011      	beq.n	8008bae <arm_rfft_fast_init_f32+0x42>
 8008b8a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8008b8e:	d107      	bne.n	8008ba0 <arm_rfft_fast_init_f32+0x34>
 8008b90:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc4 <arm_rfft_fast_init_f32+0x58>)
 8008b92:	4718      	bx	r3
 8008b94:	2920      	cmp	r1, #32
 8008b96:	d008      	beq.n	8008baa <arm_rfft_fast_init_f32+0x3e>
 8008b98:	2940      	cmp	r1, #64	@ 0x40
 8008b9a:	d10c      	bne.n	8008bb6 <arm_rfft_fast_init_f32+0x4a>
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc8 <arm_rfft_fast_init_f32+0x5c>)
 8008b9e:	e7f0      	b.n	8008b82 <arm_rfft_fast_init_f32+0x16>
 8008ba0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008ba4:	d107      	bne.n	8008bb6 <arm_rfft_fast_init_f32+0x4a>
 8008ba6:	4b09      	ldr	r3, [pc, #36]	@ (8008bcc <arm_rfft_fast_init_f32+0x60>)
 8008ba8:	e7eb      	b.n	8008b82 <arm_rfft_fast_init_f32+0x16>
 8008baa:	4b09      	ldr	r3, [pc, #36]	@ (8008bd0 <arm_rfft_fast_init_f32+0x64>)
 8008bac:	e7e9      	b.n	8008b82 <arm_rfft_fast_init_f32+0x16>
 8008bae:	4b09      	ldr	r3, [pc, #36]	@ (8008bd4 <arm_rfft_fast_init_f32+0x68>)
 8008bb0:	e7e7      	b.n	8008b82 <arm_rfft_fast_init_f32+0x16>
 8008bb2:	4b09      	ldr	r3, [pc, #36]	@ (8008bd8 <arm_rfft_fast_init_f32+0x6c>)
 8008bb4:	e7e5      	b.n	8008b82 <arm_rfft_fast_init_f32+0x16>
 8008bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bba:	4770      	bx	lr
 8008bbc:	4b07      	ldr	r3, [pc, #28]	@ (8008bdc <arm_rfft_fast_init_f32+0x70>)
 8008bbe:	e7e0      	b.n	8008b82 <arm_rfft_fast_init_f32+0x16>
 8008bc0:	08008aa9 	.word	0x08008aa9
 8008bc4:	08008b45 	.word	0x08008b45
 8008bc8:	08008a61 	.word	0x08008a61
 8008bcc:	08008af5 	.word	0x08008af5
 8008bd0:	08008a3d 	.word	0x08008a3d
 8008bd4:	08008b1d 	.word	0x08008b1d
 8008bd8:	08008a85 	.word	0x08008a85
 8008bdc:	08008acd 	.word	0x08008acd

08008be0 <stage_rfft_f32>:
 8008be0:	b410      	push	{r4}
 8008be2:	edd1 7a00 	vldr	s15, [r1]
 8008be6:	ed91 7a01 	vldr	s14, [r1, #4]
 8008bea:	8804      	ldrh	r4, [r0, #0]
 8008bec:	6940      	ldr	r0, [r0, #20]
 8008bee:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008bf2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008bf6:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8008bfa:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008bfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c02:	3c01      	subs	r4, #1
 8008c04:	ee26 7a84 	vmul.f32	s14, s13, s8
 8008c08:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008c0c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8008c10:	ed82 7a00 	vstr	s14, [r2]
 8008c14:	edc2 7a01 	vstr	s15, [r2, #4]
 8008c18:	3010      	adds	r0, #16
 8008c1a:	3210      	adds	r2, #16
 8008c1c:	3b08      	subs	r3, #8
 8008c1e:	3110      	adds	r1, #16
 8008c20:	ed11 5a02 	vldr	s10, [r1, #-8]
 8008c24:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c28:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008c2c:	edd3 4a03 	vldr	s9, [r3, #12]
 8008c30:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008c34:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008c38:	ee77 5a45 	vsub.f32	s11, s14, s10
 8008c3c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008c40:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008c44:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008c48:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008c4c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008c50:	ee37 7a23 	vadd.f32	s14, s14, s7
 8008c54:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008c58:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008c5c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008c60:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008c64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c68:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008c6c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008c70:	3c01      	subs	r4, #1
 8008c72:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008c76:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008c7a:	f1a3 0308 	sub.w	r3, r3, #8
 8008c7e:	f101 0108 	add.w	r1, r1, #8
 8008c82:	f100 0008 	add.w	r0, r0, #8
 8008c86:	f102 0208 	add.w	r2, r2, #8
 8008c8a:	d1c9      	bne.n	8008c20 <stage_rfft_f32+0x40>
 8008c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop

08008c94 <merge_rfft_f32>:
 8008c94:	b410      	push	{r4}
 8008c96:	edd1 7a00 	vldr	s15, [r1]
 8008c9a:	edd1 6a01 	vldr	s13, [r1, #4]
 8008c9e:	8804      	ldrh	r4, [r0, #0]
 8008ca0:	6940      	ldr	r0, [r0, #20]
 8008ca2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008ca6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008caa:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8008cae:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008cb2:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008cb6:	3c01      	subs	r4, #1
 8008cb8:	ed82 7a00 	vstr	s14, [r2]
 8008cbc:	edc2 7a01 	vstr	s15, [r2, #4]
 8008cc0:	b3dc      	cbz	r4, 8008d3a <merge_rfft_f32+0xa6>
 8008cc2:	00e3      	lsls	r3, r4, #3
 8008cc4:	3b08      	subs	r3, #8
 8008cc6:	440b      	add	r3, r1
 8008cc8:	3010      	adds	r0, #16
 8008cca:	3210      	adds	r2, #16
 8008ccc:	3110      	adds	r1, #16
 8008cce:	ed11 5a02 	vldr	s10, [r1, #-8]
 8008cd2:	ed93 7a02 	vldr	s14, [r3, #8]
 8008cd6:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008cda:	edd3 4a03 	vldr	s9, [r3, #12]
 8008cde:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008ce2:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008ce6:	ee75 5a47 	vsub.f32	s11, s10, s14
 8008cea:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008cee:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008cf2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008cf6:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008cfa:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008cfe:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008d02:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008d06:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008d0a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008d0e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8008d12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d16:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008d1a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008d1e:	3c01      	subs	r4, #1
 8008d20:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008d24:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008d28:	f1a3 0308 	sub.w	r3, r3, #8
 8008d2c:	f101 0108 	add.w	r1, r1, #8
 8008d30:	f100 0008 	add.w	r0, r0, #8
 8008d34:	f102 0208 	add.w	r2, r2, #8
 8008d38:	d1c9      	bne.n	8008cce <merge_rfft_f32+0x3a>
 8008d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <arm_rfft_fast_f32>:
 8008d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d44:	461c      	mov	r4, r3
 8008d46:	4605      	mov	r5, r0
 8008d48:	4616      	mov	r6, r2
 8008d4a:	b14b      	cbz	r3, 8008d60 <arm_rfft_fast_f32+0x20>
 8008d4c:	f7ff ffa2 	bl	8008c94 <merge_rfft_f32>
 8008d50:	4622      	mov	r2, r4
 8008d52:	4631      	mov	r1, r6
 8008d54:	4628      	mov	r0, r5
 8008d56:	2301      	movs	r3, #1
 8008d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5c:	f000 bb34 	b.w	80093c8 <arm_cfft_f32>
 8008d60:	460f      	mov	r7, r1
 8008d62:	461a      	mov	r2, r3
 8008d64:	2301      	movs	r3, #1
 8008d66:	f000 fb2f 	bl	80093c8 <arm_cfft_f32>
 8008d6a:	4632      	mov	r2, r6
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	4628      	mov	r0, r5
 8008d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d74:	f7ff bf34 	b.w	8008be0 <stage_rfft_f32>

08008d78 <arm_cfft_radix8by2_f32>:
 8008d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7c:	ed2d 8b08 	vpush	{d8-d11}
 8008d80:	f8b0 c000 	ldrh.w	ip, [r0]
 8008d84:	6842      	ldr	r2, [r0, #4]
 8008d86:	4607      	mov	r7, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8008d8e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8008d92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008d96:	b082      	sub	sp, #8
 8008d98:	f000 80b0 	beq.w	8008efc <arm_cfft_radix8by2_f32+0x184>
 8008d9c:	008c      	lsls	r4, r1, #2
 8008d9e:	3410      	adds	r4, #16
 8008da0:	f100 0310 	add.w	r3, r0, #16
 8008da4:	1906      	adds	r6, r0, r4
 8008da6:	3210      	adds	r2, #16
 8008da8:	4444      	add	r4, r8
 8008daa:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8008dae:	f108 0510 	add.w	r5, r8, #16
 8008db2:	ed15 2a04 	vldr	s4, [r5, #-16]
 8008db6:	ed55 2a03 	vldr	s5, [r5, #-12]
 8008dba:	ed54 4a04 	vldr	s9, [r4, #-16]
 8008dbe:	ed14 4a03 	vldr	s8, [r4, #-12]
 8008dc2:	ed14 6a02 	vldr	s12, [r4, #-8]
 8008dc6:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008dca:	ed53 3a04 	vldr	s7, [r3, #-16]
 8008dce:	ed15 0a02 	vldr	s0, [r5, #-8]
 8008dd2:	ed55 0a01 	vldr	s1, [r5, #-4]
 8008dd6:	ed56 6a04 	vldr	s13, [r6, #-16]
 8008dda:	ed16 3a03 	vldr	s6, [r6, #-12]
 8008dde:	ed13 7a03 	vldr	s14, [r3, #-12]
 8008de2:	ed13 5a02 	vldr	s10, [r3, #-8]
 8008de6:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008dea:	ed16 1a02 	vldr	s2, [r6, #-8]
 8008dee:	ed56 1a01 	vldr	s3, [r6, #-4]
 8008df2:	ee73 ba82 	vadd.f32	s23, s7, s4
 8008df6:	ee37 ba22 	vadd.f32	s22, s14, s5
 8008dfa:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8008dfe:	ee33 9a04 	vadd.f32	s18, s6, s8
 8008e02:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8008e06:	ee75 aa00 	vadd.f32	s21, s10, s0
 8008e0a:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8008e0e:	ee71 8a06 	vadd.f32	s17, s2, s12
 8008e12:	ed43 ba04 	vstr	s23, [r3, #-16]
 8008e16:	ed03 ba03 	vstr	s22, [r3, #-12]
 8008e1a:	ed43 aa02 	vstr	s21, [r3, #-8]
 8008e1e:	ed03 aa01 	vstr	s20, [r3, #-4]
 8008e22:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008e26:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008e2a:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008e2e:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008e32:	ee37 7a62 	vsub.f32	s14, s14, s5
 8008e36:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8008e3a:	ee34 4a43 	vsub.f32	s8, s8, s6
 8008e3e:	ed52 6a03 	vldr	s13, [r2, #-12]
 8008e42:	ed12 3a04 	vldr	s6, [r2, #-16]
 8008e46:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8008e4a:	ee27 8a26 	vmul.f32	s16, s14, s13
 8008e4e:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8008e52:	ee23 2a83 	vmul.f32	s4, s7, s6
 8008e56:	ee64 4a83 	vmul.f32	s9, s9, s6
 8008e5a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8008e5e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8008e62:	ee64 6a26 	vmul.f32	s13, s8, s13
 8008e66:	ee24 4a03 	vmul.f32	s8, s8, s6
 8008e6a:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008e6e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008e72:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8008e76:	ee32 3a08 	vadd.f32	s6, s4, s16
 8008e7a:	ed05 7a03 	vstr	s14, [r5, #-12]
 8008e7e:	ed05 3a04 	vstr	s6, [r5, #-16]
 8008e82:	ed04 4a04 	vstr	s8, [r4, #-16]
 8008e86:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008e8a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008e8e:	ee76 6a41 	vsub.f32	s13, s12, s2
 8008e92:	ee35 5a40 	vsub.f32	s10, s10, s0
 8008e96:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8008e9a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008e9e:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008ea2:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008ea6:	ee66 4a87 	vmul.f32	s9, s13, s14
 8008eaa:	ee25 4a25 	vmul.f32	s8, s10, s11
 8008eae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008eb2:	ee25 5a07 	vmul.f32	s10, s10, s14
 8008eb6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008eba:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008ebe:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008ec2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008ec6:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008eca:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8008ece:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008ed2:	3310      	adds	r3, #16
 8008ed4:	4563      	cmp	r3, ip
 8008ed6:	ed45 5a02 	vstr	s11, [r5, #-8]
 8008eda:	f106 0610 	add.w	r6, r6, #16
 8008ede:	ed45 7a01 	vstr	s15, [r5, #-4]
 8008ee2:	f102 0210 	add.w	r2, r2, #16
 8008ee6:	ed04 6a02 	vstr	s12, [r4, #-8]
 8008eea:	ed04 7a01 	vstr	s14, [r4, #-4]
 8008eee:	f105 0510 	add.w	r5, r5, #16
 8008ef2:	f104 0410 	add.w	r4, r4, #16
 8008ef6:	f47f af5c 	bne.w	8008db2 <arm_cfft_radix8by2_f32+0x3a>
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	b289      	uxth	r1, r1
 8008efe:	2302      	movs	r3, #2
 8008f00:	9101      	str	r1, [sp, #4]
 8008f02:	f000 fb4b 	bl	800959c <arm_radix8_butterfly_f32>
 8008f06:	9901      	ldr	r1, [sp, #4]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	b002      	add	sp, #8
 8008f10:	ecbd 8b08 	vpop	{d8-d11}
 8008f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f18:	f000 bb40 	b.w	800959c <arm_radix8_butterfly_f32>

08008f1c <arm_cfft_radix8by4_f32>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	ed2d 8b0a 	vpush	{d8-d12}
 8008f24:	8803      	ldrh	r3, [r0, #0]
 8008f26:	6842      	ldr	r2, [r0, #4]
 8008f28:	b08d      	sub	sp, #52	@ 0x34
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f2e:	4608      	mov	r0, r1
 8008f30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f34:	edd1 5a00 	vldr	s11, [r1]
 8008f38:	edd0 7a00 	vldr	s15, [r0]
 8008f3c:	edd1 3a01 	vldr	s7, [r1, #4]
 8008f40:	ed90 5a01 	vldr	s10, [r0, #4]
 8008f44:	9108      	str	r1, [sp, #32]
 8008f46:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8008f4a:	ed96 7a00 	vldr	s14, [r6]
 8008f4e:	ed96 4a01 	vldr	s8, [r6, #4]
 8008f52:	9607      	str	r6, [sp, #28]
 8008f54:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8008f58:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8008f5c:	edd8 4a00 	vldr	s9, [r8]
 8008f60:	ed98 3a01 	vldr	s6, [r8, #4]
 8008f64:	ee77 6a06 	vadd.f32	s13, s14, s12
 8008f68:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008f6c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008f70:	4604      	mov	r4, r0
 8008f72:	edc0 6a00 	vstr	s13, [r0]
 8008f76:	edd6 5a01 	vldr	s11, [r6, #4]
 8008f7a:	edd8 2a01 	vldr	s5, [r8, #4]
 8008f7e:	ee75 6a23 	vadd.f32	s13, s10, s7
 8008f82:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008f86:	ee36 6a47 	vsub.f32	s12, s12, s14
 8008f8a:	ee74 3a27 	vadd.f32	s7, s8, s15
 8008f8e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8008f92:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008f96:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8008f9a:	3408      	adds	r4, #8
 8008f9c:	ee35 4a47 	vsub.f32	s8, s10, s14
 8008fa0:	460d      	mov	r5, r1
 8008fa2:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008fa6:	4637      	mov	r7, r6
 8008fa8:	9402      	str	r4, [sp, #8]
 8008faa:	3708      	adds	r7, #8
 8008fac:	460c      	mov	r4, r1
 8008fae:	3508      	adds	r5, #8
 8008fb0:	0859      	lsrs	r1, r3, #1
 8008fb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fb4:	9706      	str	r7, [sp, #24]
 8008fb6:	9505      	str	r5, [sp, #20]
 8008fb8:	f102 0708 	add.w	r7, r2, #8
 8008fbc:	ee36 6a64 	vsub.f32	s12, s12, s9
 8008fc0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008fc4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8008fc8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8008fcc:	ee77 7a83 	vadd.f32	s15, s15, s6
 8008fd0:	ee34 5a24 	vadd.f32	s10, s8, s9
 8008fd4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008fd8:	3902      	subs	r1, #2
 8008fda:	4645      	mov	r5, r8
 8008fdc:	9701      	str	r7, [sp, #4]
 8008fde:	f102 0c18 	add.w	ip, r2, #24
 8008fe2:	f102 0710 	add.w	r7, r2, #16
 8008fe6:	3508      	adds	r5, #8
 8008fe8:	0849      	lsrs	r1, r1, #1
 8008fea:	edc0 5a01 	vstr	s11, [r0, #4]
 8008fee:	9703      	str	r7, [sp, #12]
 8008ff0:	edc6 3a00 	vstr	s7, [r6]
 8008ff4:	ed86 5a01 	vstr	s10, [r6, #4]
 8008ff8:	f8cd c000 	str.w	ip, [sp]
 8008ffc:	ed84 6a00 	vstr	s12, [r4]
 8009000:	edc4 6a01 	vstr	s13, [r4, #4]
 8009004:	9504      	str	r5, [sp, #16]
 8009006:	edc8 7a00 	vstr	s15, [r8]
 800900a:	ed88 7a01 	vstr	s14, [r8, #4]
 800900e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009010:	f000 8138 	beq.w	8009284 <arm_cfft_radix8by4_f32+0x368>
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	3b0c      	subs	r3, #12
 8009018:	f1a6 0c0c 	sub.w	ip, r6, #12
 800901c:	f106 0510 	add.w	r5, r6, #16
 8009020:	4626      	mov	r6, r4
 8009022:	46bb      	mov	fp, r7
 8009024:	f102 0a20 	add.w	sl, r2, #32
 8009028:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 800902c:	f106 0710 	add.w	r7, r6, #16
 8009030:	4443      	add	r3, r8
 8009032:	f100 0e10 	add.w	lr, r0, #16
 8009036:	3c0c      	subs	r4, #12
 8009038:	f1a8 060c 	sub.w	r6, r8, #12
 800903c:	f108 0210 	add.w	r2, r8, #16
 8009040:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8009044:	ed57 5a02 	vldr	s11, [r7, #-8]
 8009048:	ed55 7a02 	vldr	s15, [r5, #-8]
 800904c:	ed52 1a02 	vldr	s3, [r2, #-8]
 8009050:	ed57 6a01 	vldr	s13, [r7, #-4]
 8009054:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8009058:	ed12 1a01 	vldr	s2, [r2, #-4]
 800905c:	ed15 8a01 	vldr	s16, [r5, #-4]
 8009060:	ee35 4a25 	vadd.f32	s8, s10, s11
 8009064:	ee30 6a26 	vadd.f32	s12, s0, s13
 8009068:	ee37 7a84 	vadd.f32	s14, s15, s8
 800906c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009070:	ee37 7a21 	vadd.f32	s14, s14, s3
 8009074:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009078:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800907c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8009080:	ed52 6a01 	vldr	s13, [r2, #-4]
 8009084:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009088:	ee78 aa25 	vadd.f32	s21, s16, s11
 800908c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009090:	ee70 3a67 	vsub.f32	s7, s0, s15
 8009094:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8009098:	ed96 7a02 	vldr	s14, [r6, #8]
 800909c:	ed9c 2a02 	vldr	s4, [ip, #8]
 80090a0:	ed94 ba02 	vldr	s22, [r4, #8]
 80090a4:	edd3 9a02 	vldr	s19, [r3, #8]
 80090a8:	edd6 2a01 	vldr	s5, [r6, #4]
 80090ac:	ed9c 9a01 	vldr	s18, [ip, #4]
 80090b0:	ed93 5a01 	vldr	s10, [r3, #4]
 80090b4:	edd4 0a01 	vldr	s1, [r4, #4]
 80090b8:	ee72 6a07 	vadd.f32	s13, s4, s14
 80090bc:	ee32 2a47 	vsub.f32	s4, s4, s14
 80090c0:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80090c4:	ee79 4a22 	vadd.f32	s9, s18, s5
 80090c8:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80090cc:	ee79 2a62 	vsub.f32	s5, s18, s5
 80090d0:	ed8c 7a02 	vstr	s14, [ip, #8]
 80090d4:	ed94 7a01 	vldr	s14, [r4, #4]
 80090d8:	edd3 8a01 	vldr	s17, [r3, #4]
 80090dc:	ee34 7a87 	vadd.f32	s14, s9, s14
 80090e0:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80090e4:	ee37 7a28 	vadd.f32	s14, s14, s17
 80090e8:	ee32 9a60 	vsub.f32	s18, s4, s1
 80090ec:	ed8c 7a01 	vstr	s14, [ip, #4]
 80090f0:	ed1b 7a01 	vldr	s14, [fp, #-4]
 80090f4:	ed1b aa02 	vldr	s20, [fp, #-8]
 80090f8:	ee73 8a22 	vadd.f32	s17, s6, s5
 80090fc:	ee39 9a05 	vadd.f32	s18, s18, s10
 8009100:	ee7a aac1 	vsub.f32	s21, s21, s2
 8009104:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009108:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800910c:	ee69 ba07 	vmul.f32	s23, s18, s14
 8009110:	ee6a aa87 	vmul.f32	s21, s21, s14
 8009114:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8009118:	ee63 ca87 	vmul.f32	s25, s7, s14
 800911c:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8009120:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8009124:	ee68 8a87 	vmul.f32	s17, s17, s14
 8009128:	ee73 3aea 	vsub.f32	s7, s7, s21
 800912c:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009130:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8009134:	ee3b aaca 	vsub.f32	s20, s23, s20
 8009138:	ee34 4a67 	vsub.f32	s8, s8, s15
 800913c:	ee76 6acb 	vsub.f32	s13, s13, s22
 8009140:	ee36 6a48 	vsub.f32	s12, s12, s16
 8009144:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8009148:	ed05 7a02 	vstr	s14, [r5, #-8]
 800914c:	ed45 3a01 	vstr	s7, [r5, #-4]
 8009150:	edc4 8a01 	vstr	s17, [r4, #4]
 8009154:	ed84 aa02 	vstr	s20, [r4, #8]
 8009158:	ed5a 3a04 	vldr	s7, [sl, #-16]
 800915c:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8009160:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8009164:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8009168:	ee34 4a61 	vsub.f32	s8, s8, s3
 800916c:	ee36 6a41 	vsub.f32	s12, s12, s2
 8009170:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8009174:	ee66 9a26 	vmul.f32	s19, s12, s13
 8009178:	ee24 9a23 	vmul.f32	s18, s8, s7
 800917c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8009180:	ee24 4a26 	vmul.f32	s8, s8, s13
 8009184:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009188:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800918c:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8009190:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009194:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009198:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800919c:	ee79 3a29 	vadd.f32	s7, s18, s19
 80091a0:	ee75 6a60 	vsub.f32	s13, s10, s1
 80091a4:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80091a8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80091ac:	ed47 3a02 	vstr	s7, [r7, #-8]
 80091b0:	ed07 6a01 	vstr	s12, [r7, #-4]
 80091b4:	ed86 7a01 	vstr	s14, [r6, #4]
 80091b8:	ed86 4a02 	vstr	s8, [r6, #8]
 80091bc:	ee35 6a81 	vadd.f32	s12, s11, s2
 80091c0:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80091c4:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 80091c8:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 80091cc:	ee33 3a62 	vsub.f32	s6, s6, s5
 80091d0:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80091d4:	ee67 2a26 	vmul.f32	s5, s14, s13
 80091d8:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80091dc:	ee26 5a25 	vmul.f32	s10, s12, s11
 80091e0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80091e4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80091e8:	ee27 7a25 	vmul.f32	s14, s14, s11
 80091ec:	ee63 6a26 	vmul.f32	s13, s6, s13
 80091f0:	ee23 3a25 	vmul.f32	s6, s6, s11
 80091f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80091f8:	ee75 5a24 	vadd.f32	s11, s10, s9
 80091fc:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8009200:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009204:	3901      	subs	r1, #1
 8009206:	ed42 5a02 	vstr	s11, [r2, #-8]
 800920a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800920e:	f10e 0e08 	add.w	lr, lr, #8
 8009212:	ed83 3a02 	vstr	s6, [r3, #8]
 8009216:	ed83 7a01 	vstr	s14, [r3, #4]
 800921a:	f1ac 0c08 	sub.w	ip, ip, #8
 800921e:	f10b 0b08 	add.w	fp, fp, #8
 8009222:	f105 0508 	add.w	r5, r5, #8
 8009226:	f1a4 0408 	sub.w	r4, r4, #8
 800922a:	f10a 0a10 	add.w	sl, sl, #16
 800922e:	f107 0708 	add.w	r7, r7, #8
 8009232:	f1a6 0608 	sub.w	r6, r6, #8
 8009236:	f109 0918 	add.w	r9, r9, #24
 800923a:	f102 0208 	add.w	r2, r2, #8
 800923e:	f1a3 0308 	sub.w	r3, r3, #8
 8009242:	f47f aefd 	bne.w	8009040 <arm_cfft_radix8by4_f32+0x124>
 8009246:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009248:	9902      	ldr	r1, [sp, #8]
 800924a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800924e:	9102      	str	r1, [sp, #8]
 8009250:	9901      	ldr	r1, [sp, #4]
 8009252:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009256:	9101      	str	r1, [sp, #4]
 8009258:	9906      	ldr	r1, [sp, #24]
 800925a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800925e:	9106      	str	r1, [sp, #24]
 8009260:	9903      	ldr	r1, [sp, #12]
 8009262:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8009266:	9103      	str	r1, [sp, #12]
 8009268:	9905      	ldr	r1, [sp, #20]
 800926a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800926e:	9105      	str	r1, [sp, #20]
 8009270:	9904      	ldr	r1, [sp, #16]
 8009272:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8009276:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800927a:	9204      	str	r2, [sp, #16]
 800927c:	9a00      	ldr	r2, [sp, #0]
 800927e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	9902      	ldr	r1, [sp, #8]
 8009286:	9d05      	ldr	r5, [sp, #20]
 8009288:	ed91 4a00 	vldr	s8, [r1]
 800928c:	edd5 6a00 	vldr	s13, [r5]
 8009290:	9b06      	ldr	r3, [sp, #24]
 8009292:	9c04      	ldr	r4, [sp, #16]
 8009294:	edd3 7a00 	vldr	s15, [r3]
 8009298:	ed94 3a00 	vldr	s6, [r4]
 800929c:	edd5 4a01 	vldr	s9, [r5, #4]
 80092a0:	edd1 3a01 	vldr	s7, [r1, #4]
 80092a4:	ed94 2a01 	vldr	s4, [r4, #4]
 80092a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80092ac:	9a01      	ldr	r2, [sp, #4]
 80092ae:	ee34 6a26 	vadd.f32	s12, s8, s13
 80092b2:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80092b6:	ee37 5a86 	vadd.f32	s10, s15, s12
 80092ba:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80092be:	ee35 5a03 	vadd.f32	s10, s10, s6
 80092c2:	ee74 6a66 	vsub.f32	s13, s8, s13
 80092c6:	ed81 5a00 	vstr	s10, [r1]
 80092ca:	ed93 5a01 	vldr	s10, [r3, #4]
 80092ce:	edd4 4a01 	vldr	s9, [r4, #4]
 80092d2:	ee35 5a85 	vadd.f32	s10, s11, s10
 80092d6:	ee37 4a26 	vadd.f32	s8, s14, s13
 80092da:	ee35 5a24 	vadd.f32	s10, s10, s9
 80092de:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80092e2:	ed81 5a01 	vstr	s10, [r1, #4]
 80092e6:	edd2 1a00 	vldr	s3, [r2]
 80092ea:	edd2 2a01 	vldr	s5, [r2, #4]
 80092ee:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80092f2:	ee34 5a83 	vadd.f32	s10, s9, s6
 80092f6:	ee34 4a42 	vsub.f32	s8, s8, s4
 80092fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80092fe:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009302:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009306:	ee65 2a22 	vmul.f32	s5, s10, s5
 800930a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800930e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009312:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009316:	edc3 2a00 	vstr	s5, [r3]
 800931a:	ed83 5a01 	vstr	s10, [r3, #4]
 800931e:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009328:	ed93 4a01 	vldr	s8, [r3, #4]
 800932c:	ed93 5a00 	vldr	s10, [r3]
 8009330:	9b00      	ldr	r3, [sp, #0]
 8009332:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8009336:	ee66 4a05 	vmul.f32	s9, s12, s10
 800933a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800933e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009342:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009346:	ee35 6a46 	vsub.f32	s12, s10, s12
 800934a:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800934e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009352:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009356:	ed85 6a01 	vstr	s12, [r5, #4]
 800935a:	edc5 5a00 	vstr	s11, [r5]
 800935e:	edd3 5a01 	vldr	s11, [r3, #4]
 8009362:	edd3 6a00 	vldr	s13, [r3]
 8009366:	ee37 7a02 	vadd.f32	s14, s14, s4
 800936a:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800936e:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009372:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009376:	ee27 7a25 	vmul.f32	s14, s14, s11
 800937a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800937e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009382:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009386:	ed84 7a01 	vstr	s14, [r4, #4]
 800938a:	edc4 7a00 	vstr	s15, [r4]
 800938e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009390:	9100      	str	r1, [sp, #0]
 8009392:	6862      	ldr	r2, [r4, #4]
 8009394:	2304      	movs	r3, #4
 8009396:	f000 f901 	bl	800959c <arm_radix8_butterfly_f32>
 800939a:	9807      	ldr	r0, [sp, #28]
 800939c:	9900      	ldr	r1, [sp, #0]
 800939e:	6862      	ldr	r2, [r4, #4]
 80093a0:	2304      	movs	r3, #4
 80093a2:	f000 f8fb 	bl	800959c <arm_radix8_butterfly_f32>
 80093a6:	9808      	ldr	r0, [sp, #32]
 80093a8:	9900      	ldr	r1, [sp, #0]
 80093aa:	6862      	ldr	r2, [r4, #4]
 80093ac:	2304      	movs	r3, #4
 80093ae:	f000 f8f5 	bl	800959c <arm_radix8_butterfly_f32>
 80093b2:	9900      	ldr	r1, [sp, #0]
 80093b4:	6862      	ldr	r2, [r4, #4]
 80093b6:	4640      	mov	r0, r8
 80093b8:	2304      	movs	r3, #4
 80093ba:	b00d      	add	sp, #52	@ 0x34
 80093bc:	ecbd 8b0a 	vpop	{d8-d12}
 80093c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	f000 b8ea 	b.w	800959c <arm_radix8_butterfly_f32>

080093c8 <arm_cfft_f32>:
 80093c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093cc:	2a01      	cmp	r2, #1
 80093ce:	8805      	ldrh	r5, [r0, #0]
 80093d0:	4607      	mov	r7, r0
 80093d2:	4690      	mov	r8, r2
 80093d4:	460c      	mov	r4, r1
 80093d6:	4699      	mov	r9, r3
 80093d8:	d05c      	beq.n	8009494 <arm_cfft_f32+0xcc>
 80093da:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80093de:	d054      	beq.n	800948a <arm_cfft_f32+0xc2>
 80093e0:	d810      	bhi.n	8009404 <arm_cfft_f32+0x3c>
 80093e2:	2d40      	cmp	r5, #64	@ 0x40
 80093e4:	d015      	beq.n	8009412 <arm_cfft_f32+0x4a>
 80093e6:	d94c      	bls.n	8009482 <arm_cfft_f32+0xba>
 80093e8:	2d80      	cmp	r5, #128	@ 0x80
 80093ea:	d103      	bne.n	80093f4 <arm_cfft_f32+0x2c>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4638      	mov	r0, r7
 80093f0:	f7ff fcc2 	bl	8008d78 <arm_cfft_radix8by2_f32>
 80093f4:	f1b9 0f00 	cmp.w	r9, #0
 80093f8:	d114      	bne.n	8009424 <arm_cfft_f32+0x5c>
 80093fa:	f1b8 0f01 	cmp.w	r8, #1
 80093fe:	d019      	beq.n	8009434 <arm_cfft_f32+0x6c>
 8009400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009404:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8009408:	d03f      	beq.n	800948a <arm_cfft_f32+0xc2>
 800940a:	d933      	bls.n	8009474 <arm_cfft_f32+0xac>
 800940c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8009410:	d1f0      	bne.n	80093f4 <arm_cfft_f32+0x2c>
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	2301      	movs	r3, #1
 8009416:	4629      	mov	r1, r5
 8009418:	4620      	mov	r0, r4
 800941a:	f000 f8bf 	bl	800959c <arm_radix8_butterfly_f32>
 800941e:	f1b9 0f00 	cmp.w	r9, #0
 8009422:	d0ea      	beq.n	80093fa <arm_cfft_f32+0x32>
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	89b9      	ldrh	r1, [r7, #12]
 8009428:	4620      	mov	r0, r4
 800942a:	f000 f845 	bl	80094b8 <arm_bitreversal_32>
 800942e:	f1b8 0f01 	cmp.w	r8, #1
 8009432:	d1e5      	bne.n	8009400 <arm_cfft_f32+0x38>
 8009434:	ee07 5a90 	vmov	s15, r5
 8009438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009440:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009444:	2d00      	cmp	r5, #0
 8009446:	d0db      	beq.n	8009400 <arm_cfft_f32+0x38>
 8009448:	f104 0108 	add.w	r1, r4, #8
 800944c:	2300      	movs	r3, #0
 800944e:	3301      	adds	r3, #1
 8009450:	429d      	cmp	r5, r3
 8009452:	f101 0108 	add.w	r1, r1, #8
 8009456:	ed11 7a04 	vldr	s14, [r1, #-16]
 800945a:	ed51 7a03 	vldr	s15, [r1, #-12]
 800945e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009462:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009466:	ed01 7a04 	vstr	s14, [r1, #-16]
 800946a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800946e:	d1ee      	bne.n	800944e <arm_cfft_f32+0x86>
 8009470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009474:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009478:	d0cb      	beq.n	8009412 <arm_cfft_f32+0x4a>
 800947a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800947e:	d0b5      	beq.n	80093ec <arm_cfft_f32+0x24>
 8009480:	e7b8      	b.n	80093f4 <arm_cfft_f32+0x2c>
 8009482:	2d10      	cmp	r5, #16
 8009484:	d0b2      	beq.n	80093ec <arm_cfft_f32+0x24>
 8009486:	2d20      	cmp	r5, #32
 8009488:	d1b4      	bne.n	80093f4 <arm_cfft_f32+0x2c>
 800948a:	4621      	mov	r1, r4
 800948c:	4638      	mov	r0, r7
 800948e:	f7ff fd45 	bl	8008f1c <arm_cfft_radix8by4_f32>
 8009492:	e7af      	b.n	80093f4 <arm_cfft_f32+0x2c>
 8009494:	b16d      	cbz	r5, 80094b2 <arm_cfft_f32+0xea>
 8009496:	310c      	adds	r1, #12
 8009498:	2600      	movs	r6, #0
 800949a:	ed51 7a02 	vldr	s15, [r1, #-8]
 800949e:	3601      	adds	r6, #1
 80094a0:	eef1 7a67 	vneg.f32	s15, s15
 80094a4:	42b5      	cmp	r5, r6
 80094a6:	ed41 7a02 	vstr	s15, [r1, #-8]
 80094aa:	f101 0108 	add.w	r1, r1, #8
 80094ae:	d1f4      	bne.n	800949a <arm_cfft_f32+0xd2>
 80094b0:	e793      	b.n	80093da <arm_cfft_f32+0x12>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0a4      	beq.n	8009400 <arm_cfft_f32+0x38>
 80094b6:	e7b5      	b.n	8009424 <arm_cfft_f32+0x5c>

080094b8 <arm_bitreversal_32>:
 80094b8:	b1e9      	cbz	r1, 80094f6 <arm_bitreversal_32+0x3e>
 80094ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094bc:	2500      	movs	r5, #0
 80094be:	f102 0e02 	add.w	lr, r2, #2
 80094c2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80094c6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80094ca:	08a4      	lsrs	r4, r4, #2
 80094cc:	089b      	lsrs	r3, r3, #2
 80094ce:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80094d2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80094d6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80094da:	00a6      	lsls	r6, r4, #2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80094e2:	3304      	adds	r3, #4
 80094e4:	1d34      	adds	r4, r6, #4
 80094e6:	3502      	adds	r5, #2
 80094e8:	58c6      	ldr	r6, [r0, r3]
 80094ea:	5907      	ldr	r7, [r0, r4]
 80094ec:	50c7      	str	r7, [r0, r3]
 80094ee:	428d      	cmp	r5, r1
 80094f0:	5106      	str	r6, [r0, r4]
 80094f2:	d3e6      	bcc.n	80094c2 <arm_bitreversal_32+0xa>
 80094f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094f6:	4770      	bx	lr

080094f8 <arm_cfft_init_f32>:
 80094f8:	4603      	mov	r3, r0
 80094fa:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80094fe:	f04f 0000 	mov.w	r0, #0
 8009502:	b410      	push	{r4}
 8009504:	8019      	strh	r1, [r3, #0]
 8009506:	6058      	str	r0, [r3, #4]
 8009508:	d033      	beq.n	8009572 <arm_cfft_init_f32+0x7a>
 800950a:	d918      	bls.n	800953e <arm_cfft_init_f32+0x46>
 800950c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009510:	d027      	beq.n	8009562 <arm_cfft_init_f32+0x6a>
 8009512:	d90c      	bls.n	800952e <arm_cfft_init_f32+0x36>
 8009514:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009518:	d11e      	bne.n	8009558 <arm_cfft_init_f32+0x60>
 800951a:	4a17      	ldr	r2, [pc, #92]	@ (8009578 <arm_cfft_init_f32+0x80>)
 800951c:	8994      	ldrh	r4, [r2, #12]
 800951e:	819c      	strh	r4, [r3, #12]
 8009520:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8009524:	e9c3 2101 	strd	r2, r1, [r3, #4]
 8009528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009532:	d018      	beq.n	8009566 <arm_cfft_init_f32+0x6e>
 8009534:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009538:	d10e      	bne.n	8009558 <arm_cfft_init_f32+0x60>
 800953a:	4a10      	ldr	r2, [pc, #64]	@ (800957c <arm_cfft_init_f32+0x84>)
 800953c:	e7ee      	b.n	800951c <arm_cfft_init_f32+0x24>
 800953e:	2940      	cmp	r1, #64	@ 0x40
 8009540:	d013      	beq.n	800956a <arm_cfft_init_f32+0x72>
 8009542:	d903      	bls.n	800954c <arm_cfft_init_f32+0x54>
 8009544:	2980      	cmp	r1, #128	@ 0x80
 8009546:	d107      	bne.n	8009558 <arm_cfft_init_f32+0x60>
 8009548:	4a0d      	ldr	r2, [pc, #52]	@ (8009580 <arm_cfft_init_f32+0x88>)
 800954a:	e7e7      	b.n	800951c <arm_cfft_init_f32+0x24>
 800954c:	2910      	cmp	r1, #16
 800954e:	d00e      	beq.n	800956e <arm_cfft_init_f32+0x76>
 8009550:	2920      	cmp	r1, #32
 8009552:	d101      	bne.n	8009558 <arm_cfft_init_f32+0x60>
 8009554:	4a0b      	ldr	r2, [pc, #44]	@ (8009584 <arm_cfft_init_f32+0x8c>)
 8009556:	e7e1      	b.n	800951c <arm_cfft_init_f32+0x24>
 8009558:	f04f 30ff 	mov.w	r0, #4294967295
 800955c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	4a09      	ldr	r2, [pc, #36]	@ (8009588 <arm_cfft_init_f32+0x90>)
 8009564:	e7da      	b.n	800951c <arm_cfft_init_f32+0x24>
 8009566:	4a09      	ldr	r2, [pc, #36]	@ (800958c <arm_cfft_init_f32+0x94>)
 8009568:	e7d8      	b.n	800951c <arm_cfft_init_f32+0x24>
 800956a:	4a09      	ldr	r2, [pc, #36]	@ (8009590 <arm_cfft_init_f32+0x98>)
 800956c:	e7d6      	b.n	800951c <arm_cfft_init_f32+0x24>
 800956e:	4a09      	ldr	r2, [pc, #36]	@ (8009594 <arm_cfft_init_f32+0x9c>)
 8009570:	e7d4      	b.n	800951c <arm_cfft_init_f32+0x24>
 8009572:	4a09      	ldr	r2, [pc, #36]	@ (8009598 <arm_cfft_init_f32+0xa0>)
 8009574:	e7d2      	b.n	800951c <arm_cfft_init_f32+0x24>
 8009576:	bf00      	nop
 8009578:	0802bff0 	.word	0x0802bff0
 800957c:	0802bf90 	.word	0x0802bf90
 8009580:	0802bfa0 	.word	0x0802bfa0
 8009584:	0802bfe0 	.word	0x0802bfe0
 8009588:	0802bfc0 	.word	0x0802bfc0
 800958c:	0802c000 	.word	0x0802c000
 8009590:	0802c010 	.word	0x0802c010
 8009594:	0802bfb0 	.word	0x0802bfb0
 8009598:	0802bfd0 	.word	0x0802bfd0

0800959c <arm_radix8_butterfly_f32>:
 800959c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a0:	ed2d 8b10 	vpush	{d8-d15}
 80095a4:	b093      	sub	sp, #76	@ 0x4c
 80095a6:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 80095aa:	4603      	mov	r3, r0
 80095ac:	3304      	adds	r3, #4
 80095ae:	ed9f bac0 	vldr	s22, [pc, #768]	@ 80098b0 <arm_radix8_butterfly_f32+0x314>
 80095b2:	9010      	str	r0, [sp, #64]	@ 0x40
 80095b4:	468b      	mov	fp, r1
 80095b6:	9311      	str	r3, [sp, #68]	@ 0x44
 80095b8:	4689      	mov	r9, r1
 80095ba:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80095bc:	ea4f 05db 	mov.w	r5, fp, lsr #3
 80095c0:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80095c4:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 80095c8:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 80095cc:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80095d0:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 80095d4:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 80095d8:	9100      	str	r1, [sp, #0]
 80095da:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80095de:	f108 0004 	add.w	r0, r8, #4
 80095e2:	f10e 0104 	add.w	r1, lr, #4
 80095e6:	462e      	mov	r6, r5
 80095e8:	4420      	add	r0, r4
 80095ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095ee:	4421      	add	r1, r4
 80095f0:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 80095f4:	960d      	str	r6, [sp, #52]	@ 0x34
 80095f6:	9402      	str	r4, [sp, #8]
 80095f8:	012c      	lsls	r4, r5, #4
 80095fa:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 80095fe:	9403      	str	r4, [sp, #12]
 8009600:	00ec      	lsls	r4, r5, #3
 8009602:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009604:	9404      	str	r4, [sp, #16]
 8009606:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800960a:	9405      	str	r4, [sp, #20]
 800960c:	016c      	lsls	r4, r5, #5
 800960e:	9401      	str	r4, [sp, #4]
 8009610:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8009612:	9c00      	ldr	r4, [sp, #0]
 8009614:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 8009618:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800961c:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009620:	f04f 0c00 	mov.w	ip, #0
 8009624:	edd6 6a00 	vldr	s13, [r6]
 8009628:	edd7 1a00 	vldr	s3, [r7]
 800962c:	ed15 aa01 	vldr	s20, [r5, #-4]
 8009630:	edd2 5a00 	vldr	s11, [r2]
 8009634:	ed51 9a01 	vldr	s19, [r1, #-4]
 8009638:	ed94 6a00 	vldr	s12, [r4]
 800963c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8009640:	ed93 3a00 	vldr	s6, [r3]
 8009644:	ee39 0a86 	vadd.f32	s0, s19, s12
 8009648:	ee33 2a21 	vadd.f32	s4, s6, s3
 800964c:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009650:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8009654:	ee35 7a02 	vadd.f32	s14, s10, s4
 8009658:	ee34 4a80 	vadd.f32	s8, s9, s0
 800965c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009660:	ee74 6a07 	vadd.f32	s13, s8, s14
 8009664:	ee34 4a47 	vsub.f32	s8, s8, s14
 8009668:	ed45 6a01 	vstr	s13, [r5, #-4]
 800966c:	ed82 4a00 	vstr	s8, [r2]
 8009670:	edd0 6a00 	vldr	s13, [r0]
 8009674:	ed96 9a01 	vldr	s18, [r6, #4]
 8009678:	edd3 2a01 	vldr	s5, [r3, #4]
 800967c:	edd7 8a01 	vldr	s17, [r7, #4]
 8009680:	edd5 0a00 	vldr	s1, [r5]
 8009684:	edd2 3a01 	vldr	s7, [r2, #4]
 8009688:	ed94 8a01 	vldr	s16, [r4, #4]
 800968c:	ed91 7a00 	vldr	s14, [r1]
 8009690:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009694:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8009698:	ee72 aae8 	vsub.f32	s21, s5, s17
 800969c:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80096a0:	ee34 1a2a 	vadd.f32	s2, s8, s21
 80096a4:	ee77 7a83 	vadd.f32	s15, s15, s6
 80096a8:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80096ac:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80096b0:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80096b4:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80096b8:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80096bc:	ee77 0a08 	vadd.f32	s1, s14, s16
 80096c0:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80096c4:	ee37 7a48 	vsub.f32	s14, s14, s16
 80096c8:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80096cc:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80096d0:	ee76 6a89 	vadd.f32	s13, s13, s18
 80096d4:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80096d8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80096dc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80096e0:	ee35 5a42 	vsub.f32	s10, s10, s4
 80096e4:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80096e8:	ee33 2a20 	vadd.f32	s4, s6, s1
 80096ec:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80096f0:	ee33 3a60 	vsub.f32	s6, s6, s1
 80096f4:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80096f8:	ee77 0a01 	vadd.f32	s1, s14, s2
 80096fc:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8009700:	ee37 7a41 	vsub.f32	s14, s14, s2
 8009704:	ee73 1a84 	vadd.f32	s3, s7, s8
 8009708:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800970c:	ee76 3a27 	vadd.f32	s7, s12, s15
 8009710:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009714:	ee32 8a00 	vadd.f32	s16, s4, s0
 8009718:	ee33 1a45 	vsub.f32	s2, s6, s10
 800971c:	ee32 2a40 	vsub.f32	s4, s4, s0
 8009720:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009724:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8009728:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800972c:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009730:	ee34 6a67 	vsub.f32	s12, s8, s15
 8009734:	ee75 4a87 	vadd.f32	s9, s11, s14
 8009738:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800973c:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8009740:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009744:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8009748:	44dc      	add	ip, fp
 800974a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800974e:	45e1      	cmp	r9, ip
 8009750:	ed85 8a00 	vstr	s16, [r5]
 8009754:	ed82 2a01 	vstr	s4, [r2, #4]
 8009758:	4455      	add	r5, sl
 800975a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800975e:	4452      	add	r2, sl
 8009760:	edc4 6a00 	vstr	s13, [r4]
 8009764:	ed81 1a00 	vstr	s2, [r1]
 8009768:	ed84 5a01 	vstr	s10, [r4, #4]
 800976c:	4451      	add	r1, sl
 800976e:	ed00 3a01 	vstr	s6, [r0, #-4]
 8009772:	4454      	add	r4, sl
 8009774:	edc7 2a00 	vstr	s5, [r7]
 8009778:	edc6 4a00 	vstr	s9, [r6]
 800977c:	ed83 7a00 	vstr	s14, [r3]
 8009780:	edc0 5a00 	vstr	s11, [r0]
 8009784:	edc7 3a01 	vstr	s7, [r7, #4]
 8009788:	4450      	add	r0, sl
 800978a:	ed86 6a01 	vstr	s12, [r6, #4]
 800978e:	4457      	add	r7, sl
 8009790:	edc3 7a01 	vstr	s15, [r3, #4]
 8009794:	4456      	add	r6, sl
 8009796:	4453      	add	r3, sl
 8009798:	f63f af44 	bhi.w	8009624 <arm_radix8_butterfly_f32+0x88>
 800979c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800979e:	2b07      	cmp	r3, #7
 80097a0:	f240 81c3 	bls.w	8009b2a <arm_radix8_butterfly_f32+0x58e>
 80097a4:	9805      	ldr	r0, [sp, #20]
 80097a6:	9a01      	ldr	r2, [sp, #4]
 80097a8:	9b03      	ldr	r3, [sp, #12]
 80097aa:	9d04      	ldr	r5, [sp, #16]
 80097ac:	9902      	ldr	r1, [sp, #8]
 80097ae:	f100 0c08 	add.w	ip, r0, #8
 80097b2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80097b4:	3208      	adds	r2, #8
 80097b6:	1882      	adds	r2, r0, r2
 80097b8:	3308      	adds	r3, #8
 80097ba:	920a      	str	r2, [sp, #40]	@ 0x28
 80097bc:	4602      	mov	r2, r0
 80097be:	18d3      	adds	r3, r2, r3
 80097c0:	3108      	adds	r1, #8
 80097c2:	3508      	adds	r5, #8
 80097c4:	1851      	adds	r1, r2, r1
 80097c6:	9307      	str	r3, [sp, #28]
 80097c8:	4613      	mov	r3, r2
 80097ca:	442a      	add	r2, r5
 80097cc:	9206      	str	r2, [sp, #24]
 80097ce:	461a      	mov	r2, r3
 80097d0:	4462      	add	r2, ip
 80097d2:	f10e 0e0c 	add.w	lr, lr, #12
 80097d6:	9205      	str	r2, [sp, #20]
 80097d8:	461a      	mov	r2, r3
 80097da:	4472      	add	r2, lr
 80097dc:	f108 0808 	add.w	r8, r8, #8
 80097e0:	330c      	adds	r3, #12
 80097e2:	4440      	add	r0, r8
 80097e4:	f04f 0e00 	mov.w	lr, #0
 80097e8:	9203      	str	r2, [sp, #12]
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	465a      	mov	r2, fp
 80097ee:	464b      	mov	r3, r9
 80097f0:	46f3      	mov	fp, lr
 80097f2:	46d1      	mov	r9, sl
 80097f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80097f6:	9108      	str	r1, [sp, #32]
 80097f8:	f04f 0801 	mov.w	r8, #1
 80097fc:	469a      	mov	sl, r3
 80097fe:	4696      	mov	lr, r2
 8009800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009802:	449b      	add	fp, r3
 8009804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009806:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800980a:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800980e:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 8009812:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8009816:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 800981a:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 800981e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009820:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 8009824:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 8009828:	920b      	str	r2, [sp, #44]	@ 0x2c
 800982a:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 800982e:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 8009832:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 8009836:	9202      	str	r2, [sp, #8]
 8009838:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	4613      	mov	r3, r2
 8009840:	edd3 da01 	vldr	s27, [r3, #4]
 8009844:	9b01      	ldr	r3, [sp, #4]
 8009846:	edd0 7a00 	vldr	s15, [r0]
 800984a:	ed93 da01 	vldr	s26, [r3, #4]
 800984e:	9b02      	ldr	r3, [sp, #8]
 8009850:	edcd 7a02 	vstr	s15, [sp, #8]
 8009854:	ed93 ca01 	vldr	s24, [r3, #4]
 8009858:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800985a:	eddc ca01 	vldr	s25, [ip, #4]
 800985e:	edd3 7a00 	vldr	s15, [r3]
 8009862:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009864:	edcd 7a01 	vstr	s15, [sp, #4]
 8009868:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800986c:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8009870:	9200      	str	r2, [sp, #0]
 8009872:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 8009876:	edd3 7a00 	vldr	s15, [r3]
 800987a:	ed92 fa01 	vldr	s30, [r2, #4]
 800987e:	9a00      	ldr	r2, [sp, #0]
 8009880:	edd1 ea01 	vldr	s29, [r1, #4]
 8009884:	ed92 ea01 	vldr	s28, [r2, #4]
 8009888:	edd7 ba00 	vldr	s23, [r7]
 800988c:	edd6 aa00 	vldr	s21, [r6]
 8009890:	ed95 aa00 	vldr	s20, [r5]
 8009894:	edd4 9a00 	vldr	s19, [r4]
 8009898:	edcd 7a00 	vstr	s15, [sp]
 800989c:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 80098a0:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 80098a4:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 80098a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 80098ac:	46c4      	mov	ip, r8
 80098ae:	e001      	b.n	80098b4 <arm_radix8_butterfly_f32+0x318>
 80098b0:	3f3504f3 	.word	0x3f3504f3
 80098b4:	ed91 6a00 	vldr	s12, [r1]
 80098b8:	ed93 5a00 	vldr	s10, [r3]
 80098bc:	edd0 fa00 	vldr	s31, [r0]
 80098c0:	edd4 7a00 	vldr	s15, [r4]
 80098c4:	ed95 7a00 	vldr	s14, [r5]
 80098c8:	ed56 3a01 	vldr	s7, [r6, #-4]
 80098cc:	ed17 3a01 	vldr	s6, [r7, #-4]
 80098d0:	ed92 2a00 	vldr	s4, [r2]
 80098d4:	ed96 0a00 	vldr	s0, [r6]
 80098d8:	ee33 8a85 	vadd.f32	s16, s7, s10
 80098dc:	ee32 1a06 	vadd.f32	s2, s4, s12
 80098e0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 80098e4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80098e8:	ee78 1a04 	vadd.f32	s3, s16, s8
 80098ec:	ee71 6a24 	vadd.f32	s13, s2, s9
 80098f0:	ee32 2a46 	vsub.f32	s4, s4, s12
 80098f4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80098f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098fc:	ed06 6a01 	vstr	s12, [r6, #-4]
 8009900:	edd4 8a01 	vldr	s17, [r4, #4]
 8009904:	ed92 9a01 	vldr	s18, [r2, #4]
 8009908:	edd7 0a00 	vldr	s1, [r7]
 800990c:	edd1 2a01 	vldr	s5, [r1, #4]
 8009910:	ed95 7a01 	vldr	s14, [r5, #4]
 8009914:	ed93 6a01 	vldr	s12, [r3, #4]
 8009918:	edd0 5a01 	vldr	s11, [r0, #4]
 800991c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009920:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8009924:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009928:	ee78 fac7 	vsub.f32	s31, s17, s14
 800992c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009930:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009934:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009938:	ee79 2a22 	vadd.f32	s5, s18, s5
 800993c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009940:	ee72 7a67 	vsub.f32	s15, s4, s15
 8009944:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009948:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800994c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009950:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8009954:	ee32 1a08 	vadd.f32	s2, s4, s16
 8009958:	ee72 fa87 	vadd.f32	s31, s5, s14
 800995c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8009960:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8009964:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009968:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800996c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8009970:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009974:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8009978:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800997c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009980:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009984:	ee74 0a22 	vadd.f32	s1, s8, s5
 8009988:	ee36 0a28 	vadd.f32	s0, s12, s17
 800998c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009990:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009994:	ee32 4a64 	vsub.f32	s8, s4, s9
 8009998:	ee73 8a09 	vadd.f32	s17, s6, s18
 800999c:	ee74 4a82 	vadd.f32	s9, s9, s4
 80099a0:	ee33 9a49 	vsub.f32	s18, s6, s18
 80099a4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80099a8:	ee35 3a85 	vadd.f32	s6, s11, s10
 80099ac:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80099b0:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80099b4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80099b8:	ee69 3aa6 	vmul.f32	s7, s19, s13
 80099bc:	ee30 7a68 	vsub.f32	s14, s0, s17
 80099c0:	ee35 8a03 	vadd.f32	s16, s10, s6
 80099c4:	ee38 0a80 	vadd.f32	s0, s17, s0
 80099c8:	ee73 3a82 	vadd.f32	s7, s7, s4
 80099cc:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80099d0:	ed9d 2a00 	vldr	s4, [sp]
 80099d4:	eddd 1a01 	vldr	s3, [sp, #4]
 80099d8:	ee35 5a43 	vsub.f32	s10, s10, s6
 80099dc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80099e0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80099e4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80099e8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80099ec:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80099f0:	ee76 5a49 	vsub.f32	s11, s12, s18
 80099f4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80099f8:	ee39 6a06 	vadd.f32	s12, s18, s12
 80099fc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8009a00:	ee21 4a84 	vmul.f32	s8, s3, s8
 8009a04:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8009a08:	ee22 7a07 	vmul.f32	s14, s4, s14
 8009a0c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8009a10:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009a14:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8009a18:	ee31 1a09 	vadd.f32	s2, s2, s18
 8009a1c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8009a20:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8009a24:	ee74 0a60 	vsub.f32	s1, s8, s1
 8009a28:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009a2c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8009a30:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8009a34:	ee72 1a21 	vadd.f32	s3, s4, s3
 8009a38:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8009a3c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8009a40:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8009a44:	ee38 8a04 	vadd.f32	s16, s16, s8
 8009a48:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8009a4c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8009a50:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8009a54:	eddd 5a02 	vldr	s11, [sp, #8]
 8009a58:	edc6 fa00 	vstr	s31, [r6]
 8009a5c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8009a60:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8009a64:	ee30 0a45 	vsub.f32	s0, s0, s10
 8009a68:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8009a6c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8009a70:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8009a74:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8009a78:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8009a7c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8009a80:	ee74 4a89 	vadd.f32	s9, s9, s18
 8009a84:	ee34 3a43 	vsub.f32	s6, s8, s6
 8009a88:	ee78 8a85 	vadd.f32	s17, s17, s10
 8009a8c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009a90:	44f4      	add	ip, lr
 8009a92:	45e2      	cmp	sl, ip
 8009a94:	edc3 3a00 	vstr	s7, [r3]
 8009a98:	edc3 6a01 	vstr	s13, [r3, #4]
 8009a9c:	444e      	add	r6, r9
 8009a9e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8009aa2:	edc7 0a00 	vstr	s1, [r7]
 8009aa6:	444b      	add	r3, r9
 8009aa8:	ed80 2a00 	vstr	s4, [r0]
 8009aac:	edc0 2a01 	vstr	s5, [r0, #4]
 8009ab0:	444f      	add	r7, r9
 8009ab2:	edc2 1a00 	vstr	s3, [r2]
 8009ab6:	ed82 7a01 	vstr	s14, [r2, #4]
 8009aba:	4448      	add	r0, r9
 8009abc:	ed85 8a00 	vstr	s16, [r5]
 8009ac0:	ed85 0a01 	vstr	s0, [r5, #4]
 8009ac4:	444a      	add	r2, r9
 8009ac6:	edc1 4a00 	vstr	s9, [r1]
 8009aca:	444d      	add	r5, r9
 8009acc:	ed81 3a01 	vstr	s6, [r1, #4]
 8009ad0:	edc4 8a00 	vstr	s17, [r4]
 8009ad4:	ed84 6a01 	vstr	s12, [r4, #4]
 8009ad8:	4449      	add	r1, r9
 8009ada:	444c      	add	r4, r9
 8009adc:	f63f aeea 	bhi.w	80098b4 <arm_radix8_butterfly_f32+0x318>
 8009ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae8:	3308      	adds	r3, #8
 8009aea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aec:	9b08      	ldr	r3, [sp, #32]
 8009aee:	3308      	adds	r3, #8
 8009af0:	9308      	str	r3, [sp, #32]
 8009af2:	9b07      	ldr	r3, [sp, #28]
 8009af4:	3308      	adds	r3, #8
 8009af6:	9307      	str	r3, [sp, #28]
 8009af8:	9b06      	ldr	r3, [sp, #24]
 8009afa:	3308      	adds	r3, #8
 8009afc:	9306      	str	r3, [sp, #24]
 8009afe:	9b05      	ldr	r3, [sp, #20]
 8009b00:	3308      	adds	r3, #8
 8009b02:	9305      	str	r3, [sp, #20]
 8009b04:	9b04      	ldr	r3, [sp, #16]
 8009b06:	3308      	adds	r3, #8
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	9b03      	ldr	r3, [sp, #12]
 8009b0c:	3308      	adds	r3, #8
 8009b0e:	9303      	str	r3, [sp, #12]
 8009b10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b12:	f108 0801 	add.w	r8, r8, #1
 8009b16:	4543      	cmp	r3, r8
 8009b18:	f47f ae72 	bne.w	8009800 <arm_radix8_butterfly_f32+0x264>
 8009b1c:	469b      	mov	fp, r3
 8009b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b20:	00db      	lsls	r3, r3, #3
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	46d1      	mov	r9, sl
 8009b26:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b28:	e547      	b.n	80095ba <arm_radix8_butterfly_f32+0x1e>
 8009b2a:	b013      	add	sp, #76	@ 0x4c
 8009b2c:	ecbd 8b10 	vpop	{d8-d15}
 8009b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b34 <__cvt>:
 8009b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b38:	ec57 6b10 	vmov	r6, r7, d0
 8009b3c:	2f00      	cmp	r7, #0
 8009b3e:	460c      	mov	r4, r1
 8009b40:	4619      	mov	r1, r3
 8009b42:	463b      	mov	r3, r7
 8009b44:	bfbb      	ittet	lt
 8009b46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009b4a:	461f      	movlt	r7, r3
 8009b4c:	2300      	movge	r3, #0
 8009b4e:	232d      	movlt	r3, #45	@ 0x2d
 8009b50:	700b      	strb	r3, [r1, #0]
 8009b52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009b58:	4691      	mov	r9, r2
 8009b5a:	f023 0820 	bic.w	r8, r3, #32
 8009b5e:	bfbc      	itt	lt
 8009b60:	4632      	movlt	r2, r6
 8009b62:	4616      	movlt	r6, r2
 8009b64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b68:	d005      	beq.n	8009b76 <__cvt+0x42>
 8009b6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009b6e:	d100      	bne.n	8009b72 <__cvt+0x3e>
 8009b70:	3401      	adds	r4, #1
 8009b72:	2102      	movs	r1, #2
 8009b74:	e000      	b.n	8009b78 <__cvt+0x44>
 8009b76:	2103      	movs	r1, #3
 8009b78:	ab03      	add	r3, sp, #12
 8009b7a:	9301      	str	r3, [sp, #4]
 8009b7c:	ab02      	add	r3, sp, #8
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	ec47 6b10 	vmov	d0, r6, r7
 8009b84:	4653      	mov	r3, sl
 8009b86:	4622      	mov	r2, r4
 8009b88:	f001 f97a 	bl	800ae80 <_dtoa_r>
 8009b8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009b90:	4605      	mov	r5, r0
 8009b92:	d119      	bne.n	8009bc8 <__cvt+0x94>
 8009b94:	f019 0f01 	tst.w	r9, #1
 8009b98:	d00e      	beq.n	8009bb8 <__cvt+0x84>
 8009b9a:	eb00 0904 	add.w	r9, r0, r4
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	f7f6 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009baa:	b108      	cbz	r0, 8009bb0 <__cvt+0x7c>
 8009bac:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bb0:	2230      	movs	r2, #48	@ 0x30
 8009bb2:	9b03      	ldr	r3, [sp, #12]
 8009bb4:	454b      	cmp	r3, r9
 8009bb6:	d31e      	bcc.n	8009bf6 <__cvt+0xc2>
 8009bb8:	9b03      	ldr	r3, [sp, #12]
 8009bba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bbc:	1b5b      	subs	r3, r3, r5
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	b004      	add	sp, #16
 8009bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009bcc:	eb00 0904 	add.w	r9, r0, r4
 8009bd0:	d1e5      	bne.n	8009b9e <__cvt+0x6a>
 8009bd2:	7803      	ldrb	r3, [r0, #0]
 8009bd4:	2b30      	cmp	r3, #48	@ 0x30
 8009bd6:	d10a      	bne.n	8009bee <__cvt+0xba>
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2300      	movs	r3, #0
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4639      	mov	r1, r7
 8009be0:	f7f6 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 8009be4:	b918      	cbnz	r0, 8009bee <__cvt+0xba>
 8009be6:	f1c4 0401 	rsb	r4, r4, #1
 8009bea:	f8ca 4000 	str.w	r4, [sl]
 8009bee:	f8da 3000 	ldr.w	r3, [sl]
 8009bf2:	4499      	add	r9, r3
 8009bf4:	e7d3      	b.n	8009b9e <__cvt+0x6a>
 8009bf6:	1c59      	adds	r1, r3, #1
 8009bf8:	9103      	str	r1, [sp, #12]
 8009bfa:	701a      	strb	r2, [r3, #0]
 8009bfc:	e7d9      	b.n	8009bb2 <__cvt+0x7e>

08009bfe <__exponent>:
 8009bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c00:	2900      	cmp	r1, #0
 8009c02:	bfba      	itte	lt
 8009c04:	4249      	neglt	r1, r1
 8009c06:	232d      	movlt	r3, #45	@ 0x2d
 8009c08:	232b      	movge	r3, #43	@ 0x2b
 8009c0a:	2909      	cmp	r1, #9
 8009c0c:	7002      	strb	r2, [r0, #0]
 8009c0e:	7043      	strb	r3, [r0, #1]
 8009c10:	dd29      	ble.n	8009c66 <__exponent+0x68>
 8009c12:	f10d 0307 	add.w	r3, sp, #7
 8009c16:	461d      	mov	r5, r3
 8009c18:	270a      	movs	r7, #10
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009c20:	fb07 1416 	mls	r4, r7, r6, r1
 8009c24:	3430      	adds	r4, #48	@ 0x30
 8009c26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	2c63      	cmp	r4, #99	@ 0x63
 8009c2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c32:	4631      	mov	r1, r6
 8009c34:	dcf1      	bgt.n	8009c1a <__exponent+0x1c>
 8009c36:	3130      	adds	r1, #48	@ 0x30
 8009c38:	1e94      	subs	r4, r2, #2
 8009c3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c3e:	1c41      	adds	r1, r0, #1
 8009c40:	4623      	mov	r3, r4
 8009c42:	42ab      	cmp	r3, r5
 8009c44:	d30a      	bcc.n	8009c5c <__exponent+0x5e>
 8009c46:	f10d 0309 	add.w	r3, sp, #9
 8009c4a:	1a9b      	subs	r3, r3, r2
 8009c4c:	42ac      	cmp	r4, r5
 8009c4e:	bf88      	it	hi
 8009c50:	2300      	movhi	r3, #0
 8009c52:	3302      	adds	r3, #2
 8009c54:	4403      	add	r3, r0
 8009c56:	1a18      	subs	r0, r3, r0
 8009c58:	b003      	add	sp, #12
 8009c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009c60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009c64:	e7ed      	b.n	8009c42 <__exponent+0x44>
 8009c66:	2330      	movs	r3, #48	@ 0x30
 8009c68:	3130      	adds	r1, #48	@ 0x30
 8009c6a:	7083      	strb	r3, [r0, #2]
 8009c6c:	70c1      	strb	r1, [r0, #3]
 8009c6e:	1d03      	adds	r3, r0, #4
 8009c70:	e7f1      	b.n	8009c56 <__exponent+0x58>
	...

08009c74 <_printf_float>:
 8009c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c78:	b08d      	sub	sp, #52	@ 0x34
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009c80:	4616      	mov	r6, r2
 8009c82:	461f      	mov	r7, r3
 8009c84:	4605      	mov	r5, r0
 8009c86:	f000 fff3 	bl	800ac70 <_localeconv_r>
 8009c8a:	6803      	ldr	r3, [r0, #0]
 8009c8c:	9304      	str	r3, [sp, #16]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7f6 faee 	bl	8000270 <strlen>
 8009c94:	2300      	movs	r3, #0
 8009c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c98:	f8d8 3000 	ldr.w	r3, [r8]
 8009c9c:	9005      	str	r0, [sp, #20]
 8009c9e:	3307      	adds	r3, #7
 8009ca0:	f023 0307 	bic.w	r3, r3, #7
 8009ca4:	f103 0208 	add.w	r2, r3, #8
 8009ca8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009cac:	f8d4 b000 	ldr.w	fp, [r4]
 8009cb0:	f8c8 2000 	str.w	r2, [r8]
 8009cb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009cbc:	9307      	str	r3, [sp, #28]
 8009cbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8009cc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cca:	4b9c      	ldr	r3, [pc, #624]	@ (8009f3c <_printf_float+0x2c8>)
 8009ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd0:	f7f6 ff2c 	bl	8000b2c <__aeabi_dcmpun>
 8009cd4:	bb70      	cbnz	r0, 8009d34 <_printf_float+0xc0>
 8009cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cda:	4b98      	ldr	r3, [pc, #608]	@ (8009f3c <_printf_float+0x2c8>)
 8009cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce0:	f7f6 ff06 	bl	8000af0 <__aeabi_dcmple>
 8009ce4:	bb30      	cbnz	r0, 8009d34 <_printf_float+0xc0>
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2300      	movs	r3, #0
 8009cea:	4640      	mov	r0, r8
 8009cec:	4649      	mov	r1, r9
 8009cee:	f7f6 fef5 	bl	8000adc <__aeabi_dcmplt>
 8009cf2:	b110      	cbz	r0, 8009cfa <_printf_float+0x86>
 8009cf4:	232d      	movs	r3, #45	@ 0x2d
 8009cf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cfa:	4a91      	ldr	r2, [pc, #580]	@ (8009f40 <_printf_float+0x2cc>)
 8009cfc:	4b91      	ldr	r3, [pc, #580]	@ (8009f44 <_printf_float+0x2d0>)
 8009cfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d02:	bf94      	ite	ls
 8009d04:	4690      	movls	r8, r2
 8009d06:	4698      	movhi	r8, r3
 8009d08:	2303      	movs	r3, #3
 8009d0a:	6123      	str	r3, [r4, #16]
 8009d0c:	f02b 0304 	bic.w	r3, fp, #4
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	f04f 0900 	mov.w	r9, #0
 8009d16:	9700      	str	r7, [sp, #0]
 8009d18:	4633      	mov	r3, r6
 8009d1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f000 f9d2 	bl	800a0c8 <_printf_common>
 8009d24:	3001      	adds	r0, #1
 8009d26:	f040 808d 	bne.w	8009e44 <_printf_float+0x1d0>
 8009d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2e:	b00d      	add	sp, #52	@ 0x34
 8009d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d34:	4642      	mov	r2, r8
 8009d36:	464b      	mov	r3, r9
 8009d38:	4640      	mov	r0, r8
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	f7f6 fef6 	bl	8000b2c <__aeabi_dcmpun>
 8009d40:	b140      	cbz	r0, 8009d54 <_printf_float+0xe0>
 8009d42:	464b      	mov	r3, r9
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	bfbc      	itt	lt
 8009d48:	232d      	movlt	r3, #45	@ 0x2d
 8009d4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8009f48 <_printf_float+0x2d4>)
 8009d50:	4b7e      	ldr	r3, [pc, #504]	@ (8009f4c <_printf_float+0x2d8>)
 8009d52:	e7d4      	b.n	8009cfe <_printf_float+0x8a>
 8009d54:	6863      	ldr	r3, [r4, #4]
 8009d56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009d5a:	9206      	str	r2, [sp, #24]
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	d13b      	bne.n	8009dd8 <_printf_float+0x164>
 8009d60:	2306      	movs	r3, #6
 8009d62:	6063      	str	r3, [r4, #4]
 8009d64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009d68:	2300      	movs	r3, #0
 8009d6a:	6022      	str	r2, [r4, #0]
 8009d6c:	9303      	str	r3, [sp, #12]
 8009d6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009d74:	ab09      	add	r3, sp, #36	@ 0x24
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	6861      	ldr	r1, [r4, #4]
 8009d7a:	ec49 8b10 	vmov	d0, r8, r9
 8009d7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009d82:	4628      	mov	r0, r5
 8009d84:	f7ff fed6 	bl	8009b34 <__cvt>
 8009d88:	9b06      	ldr	r3, [sp, #24]
 8009d8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d8c:	2b47      	cmp	r3, #71	@ 0x47
 8009d8e:	4680      	mov	r8, r0
 8009d90:	d129      	bne.n	8009de6 <_printf_float+0x172>
 8009d92:	1cc8      	adds	r0, r1, #3
 8009d94:	db02      	blt.n	8009d9c <_printf_float+0x128>
 8009d96:	6863      	ldr	r3, [r4, #4]
 8009d98:	4299      	cmp	r1, r3
 8009d9a:	dd41      	ble.n	8009e20 <_printf_float+0x1ac>
 8009d9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009da0:	fa5f fa8a 	uxtb.w	sl, sl
 8009da4:	3901      	subs	r1, #1
 8009da6:	4652      	mov	r2, sl
 8009da8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009dac:	9109      	str	r1, [sp, #36]	@ 0x24
 8009dae:	f7ff ff26 	bl	8009bfe <__exponent>
 8009db2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009db4:	1813      	adds	r3, r2, r0
 8009db6:	2a01      	cmp	r2, #1
 8009db8:	4681      	mov	r9, r0
 8009dba:	6123      	str	r3, [r4, #16]
 8009dbc:	dc02      	bgt.n	8009dc4 <_printf_float+0x150>
 8009dbe:	6822      	ldr	r2, [r4, #0]
 8009dc0:	07d2      	lsls	r2, r2, #31
 8009dc2:	d501      	bpl.n	8009dc8 <_printf_float+0x154>
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	6123      	str	r3, [r4, #16]
 8009dc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d0a2      	beq.n	8009d16 <_printf_float+0xa2>
 8009dd0:	232d      	movs	r3, #45	@ 0x2d
 8009dd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dd6:	e79e      	b.n	8009d16 <_printf_float+0xa2>
 8009dd8:	9a06      	ldr	r2, [sp, #24]
 8009dda:	2a47      	cmp	r2, #71	@ 0x47
 8009ddc:	d1c2      	bne.n	8009d64 <_printf_float+0xf0>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1c0      	bne.n	8009d64 <_printf_float+0xf0>
 8009de2:	2301      	movs	r3, #1
 8009de4:	e7bd      	b.n	8009d62 <_printf_float+0xee>
 8009de6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009dea:	d9db      	bls.n	8009da4 <_printf_float+0x130>
 8009dec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009df0:	d118      	bne.n	8009e24 <_printf_float+0x1b0>
 8009df2:	2900      	cmp	r1, #0
 8009df4:	6863      	ldr	r3, [r4, #4]
 8009df6:	dd0b      	ble.n	8009e10 <_printf_float+0x19c>
 8009df8:	6121      	str	r1, [r4, #16]
 8009dfa:	b913      	cbnz	r3, 8009e02 <_printf_float+0x18e>
 8009dfc:	6822      	ldr	r2, [r4, #0]
 8009dfe:	07d0      	lsls	r0, r2, #31
 8009e00:	d502      	bpl.n	8009e08 <_printf_float+0x194>
 8009e02:	3301      	adds	r3, #1
 8009e04:	440b      	add	r3, r1
 8009e06:	6123      	str	r3, [r4, #16]
 8009e08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e0a:	f04f 0900 	mov.w	r9, #0
 8009e0e:	e7db      	b.n	8009dc8 <_printf_float+0x154>
 8009e10:	b913      	cbnz	r3, 8009e18 <_printf_float+0x1a4>
 8009e12:	6822      	ldr	r2, [r4, #0]
 8009e14:	07d2      	lsls	r2, r2, #31
 8009e16:	d501      	bpl.n	8009e1c <_printf_float+0x1a8>
 8009e18:	3302      	adds	r3, #2
 8009e1a:	e7f4      	b.n	8009e06 <_printf_float+0x192>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e7f2      	b.n	8009e06 <_printf_float+0x192>
 8009e20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e26:	4299      	cmp	r1, r3
 8009e28:	db05      	blt.n	8009e36 <_printf_float+0x1c2>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	6121      	str	r1, [r4, #16]
 8009e2e:	07d8      	lsls	r0, r3, #31
 8009e30:	d5ea      	bpl.n	8009e08 <_printf_float+0x194>
 8009e32:	1c4b      	adds	r3, r1, #1
 8009e34:	e7e7      	b.n	8009e06 <_printf_float+0x192>
 8009e36:	2900      	cmp	r1, #0
 8009e38:	bfd4      	ite	le
 8009e3a:	f1c1 0202 	rsble	r2, r1, #2
 8009e3e:	2201      	movgt	r2, #1
 8009e40:	4413      	add	r3, r2
 8009e42:	e7e0      	b.n	8009e06 <_printf_float+0x192>
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	055a      	lsls	r2, r3, #21
 8009e48:	d407      	bmi.n	8009e5a <_printf_float+0x1e6>
 8009e4a:	6923      	ldr	r3, [r4, #16]
 8009e4c:	4642      	mov	r2, r8
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4628      	mov	r0, r5
 8009e52:	47b8      	blx	r7
 8009e54:	3001      	adds	r0, #1
 8009e56:	d12b      	bne.n	8009eb0 <_printf_float+0x23c>
 8009e58:	e767      	b.n	8009d2a <_printf_float+0xb6>
 8009e5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e5e:	f240 80dd 	bls.w	800a01c <_printf_float+0x3a8>
 8009e62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e66:	2200      	movs	r2, #0
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f7f6 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d033      	beq.n	8009eda <_printf_float+0x266>
 8009e72:	4a37      	ldr	r2, [pc, #220]	@ (8009f50 <_printf_float+0x2dc>)
 8009e74:	2301      	movs	r3, #1
 8009e76:	4631      	mov	r1, r6
 8009e78:	4628      	mov	r0, r5
 8009e7a:	47b8      	blx	r7
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	f43f af54 	beq.w	8009d2a <_printf_float+0xb6>
 8009e82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009e86:	4543      	cmp	r3, r8
 8009e88:	db02      	blt.n	8009e90 <_printf_float+0x21c>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	07d8      	lsls	r0, r3, #31
 8009e8e:	d50f      	bpl.n	8009eb0 <_printf_float+0x23c>
 8009e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e94:	4631      	mov	r1, r6
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	f43f af45 	beq.w	8009d2a <_printf_float+0xb6>
 8009ea0:	f04f 0900 	mov.w	r9, #0
 8009ea4:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ea8:	f104 0a1a 	add.w	sl, r4, #26
 8009eac:	45c8      	cmp	r8, r9
 8009eae:	dc09      	bgt.n	8009ec4 <_printf_float+0x250>
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	079b      	lsls	r3, r3, #30
 8009eb4:	f100 8103 	bmi.w	800a0be <_printf_float+0x44a>
 8009eb8:	68e0      	ldr	r0, [r4, #12]
 8009eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ebc:	4298      	cmp	r0, r3
 8009ebe:	bfb8      	it	lt
 8009ec0:	4618      	movlt	r0, r3
 8009ec2:	e734      	b.n	8009d2e <_printf_float+0xba>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	4652      	mov	r2, sl
 8009ec8:	4631      	mov	r1, r6
 8009eca:	4628      	mov	r0, r5
 8009ecc:	47b8      	blx	r7
 8009ece:	3001      	adds	r0, #1
 8009ed0:	f43f af2b 	beq.w	8009d2a <_printf_float+0xb6>
 8009ed4:	f109 0901 	add.w	r9, r9, #1
 8009ed8:	e7e8      	b.n	8009eac <_printf_float+0x238>
 8009eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dc39      	bgt.n	8009f54 <_printf_float+0x2e0>
 8009ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8009f50 <_printf_float+0x2dc>)
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b8      	blx	r7
 8009eea:	3001      	adds	r0, #1
 8009eec:	f43f af1d 	beq.w	8009d2a <_printf_float+0xb6>
 8009ef0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009ef4:	ea59 0303 	orrs.w	r3, r9, r3
 8009ef8:	d102      	bne.n	8009f00 <_printf_float+0x28c>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	07d9      	lsls	r1, r3, #31
 8009efe:	d5d7      	bpl.n	8009eb0 <_printf_float+0x23c>
 8009f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f04:	4631      	mov	r1, r6
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b8      	blx	r7
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	f43f af0d 	beq.w	8009d2a <_printf_float+0xb6>
 8009f10:	f04f 0a00 	mov.w	sl, #0
 8009f14:	f104 0b1a 	add.w	fp, r4, #26
 8009f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f1a:	425b      	negs	r3, r3
 8009f1c:	4553      	cmp	r3, sl
 8009f1e:	dc01      	bgt.n	8009f24 <_printf_float+0x2b0>
 8009f20:	464b      	mov	r3, r9
 8009f22:	e793      	b.n	8009e4c <_printf_float+0x1d8>
 8009f24:	2301      	movs	r3, #1
 8009f26:	465a      	mov	r2, fp
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b8      	blx	r7
 8009f2e:	3001      	adds	r0, #1
 8009f30:	f43f aefb 	beq.w	8009d2a <_printf_float+0xb6>
 8009f34:	f10a 0a01 	add.w	sl, sl, #1
 8009f38:	e7ee      	b.n	8009f18 <_printf_float+0x2a4>
 8009f3a:	bf00      	nop
 8009f3c:	7fefffff 	.word	0x7fefffff
 8009f40:	0802c020 	.word	0x0802c020
 8009f44:	0802c024 	.word	0x0802c024
 8009f48:	0802c028 	.word	0x0802c028
 8009f4c:	0802c02c 	.word	0x0802c02c
 8009f50:	0802c030 	.word	0x0802c030
 8009f54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f5a:	4553      	cmp	r3, sl
 8009f5c:	bfa8      	it	ge
 8009f5e:	4653      	movge	r3, sl
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	4699      	mov	r9, r3
 8009f64:	dc36      	bgt.n	8009fd4 <_printf_float+0x360>
 8009f66:	f04f 0b00 	mov.w	fp, #0
 8009f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f6e:	f104 021a 	add.w	r2, r4, #26
 8009f72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f74:	9306      	str	r3, [sp, #24]
 8009f76:	eba3 0309 	sub.w	r3, r3, r9
 8009f7a:	455b      	cmp	r3, fp
 8009f7c:	dc31      	bgt.n	8009fe2 <_printf_float+0x36e>
 8009f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f80:	459a      	cmp	sl, r3
 8009f82:	dc3a      	bgt.n	8009ffa <_printf_float+0x386>
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	07da      	lsls	r2, r3, #31
 8009f88:	d437      	bmi.n	8009ffa <_printf_float+0x386>
 8009f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f8c:	ebaa 0903 	sub.w	r9, sl, r3
 8009f90:	9b06      	ldr	r3, [sp, #24]
 8009f92:	ebaa 0303 	sub.w	r3, sl, r3
 8009f96:	4599      	cmp	r9, r3
 8009f98:	bfa8      	it	ge
 8009f9a:	4699      	movge	r9, r3
 8009f9c:	f1b9 0f00 	cmp.w	r9, #0
 8009fa0:	dc33      	bgt.n	800a00a <_printf_float+0x396>
 8009fa2:	f04f 0800 	mov.w	r8, #0
 8009fa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009faa:	f104 0b1a 	add.w	fp, r4, #26
 8009fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb0:	ebaa 0303 	sub.w	r3, sl, r3
 8009fb4:	eba3 0309 	sub.w	r3, r3, r9
 8009fb8:	4543      	cmp	r3, r8
 8009fba:	f77f af79 	ble.w	8009eb0 <_printf_float+0x23c>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	465a      	mov	r2, fp
 8009fc2:	4631      	mov	r1, r6
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	47b8      	blx	r7
 8009fc8:	3001      	adds	r0, #1
 8009fca:	f43f aeae 	beq.w	8009d2a <_printf_float+0xb6>
 8009fce:	f108 0801 	add.w	r8, r8, #1
 8009fd2:	e7ec      	b.n	8009fae <_printf_float+0x33a>
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b8      	blx	r7
 8009fdc:	3001      	adds	r0, #1
 8009fde:	d1c2      	bne.n	8009f66 <_printf_float+0x2f2>
 8009fe0:	e6a3      	b.n	8009d2a <_printf_float+0xb6>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	9206      	str	r2, [sp, #24]
 8009fea:	47b8      	blx	r7
 8009fec:	3001      	adds	r0, #1
 8009fee:	f43f ae9c 	beq.w	8009d2a <_printf_float+0xb6>
 8009ff2:	9a06      	ldr	r2, [sp, #24]
 8009ff4:	f10b 0b01 	add.w	fp, fp, #1
 8009ff8:	e7bb      	b.n	8009f72 <_printf_float+0x2fe>
 8009ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ffe:	4631      	mov	r1, r6
 800a000:	4628      	mov	r0, r5
 800a002:	47b8      	blx	r7
 800a004:	3001      	adds	r0, #1
 800a006:	d1c0      	bne.n	8009f8a <_printf_float+0x316>
 800a008:	e68f      	b.n	8009d2a <_printf_float+0xb6>
 800a00a:	9a06      	ldr	r2, [sp, #24]
 800a00c:	464b      	mov	r3, r9
 800a00e:	4442      	add	r2, r8
 800a010:	4631      	mov	r1, r6
 800a012:	4628      	mov	r0, r5
 800a014:	47b8      	blx	r7
 800a016:	3001      	adds	r0, #1
 800a018:	d1c3      	bne.n	8009fa2 <_printf_float+0x32e>
 800a01a:	e686      	b.n	8009d2a <_printf_float+0xb6>
 800a01c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a020:	f1ba 0f01 	cmp.w	sl, #1
 800a024:	dc01      	bgt.n	800a02a <_printf_float+0x3b6>
 800a026:	07db      	lsls	r3, r3, #31
 800a028:	d536      	bpl.n	800a098 <_printf_float+0x424>
 800a02a:	2301      	movs	r3, #1
 800a02c:	4642      	mov	r2, r8
 800a02e:	4631      	mov	r1, r6
 800a030:	4628      	mov	r0, r5
 800a032:	47b8      	blx	r7
 800a034:	3001      	adds	r0, #1
 800a036:	f43f ae78 	beq.w	8009d2a <_printf_float+0xb6>
 800a03a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a03e:	4631      	mov	r1, r6
 800a040:	4628      	mov	r0, r5
 800a042:	47b8      	blx	r7
 800a044:	3001      	adds	r0, #1
 800a046:	f43f ae70 	beq.w	8009d2a <_printf_float+0xb6>
 800a04a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a04e:	2200      	movs	r2, #0
 800a050:	2300      	movs	r3, #0
 800a052:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a056:	f7f6 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800a05a:	b9c0      	cbnz	r0, 800a08e <_printf_float+0x41a>
 800a05c:	4653      	mov	r3, sl
 800a05e:	f108 0201 	add.w	r2, r8, #1
 800a062:	4631      	mov	r1, r6
 800a064:	4628      	mov	r0, r5
 800a066:	47b8      	blx	r7
 800a068:	3001      	adds	r0, #1
 800a06a:	d10c      	bne.n	800a086 <_printf_float+0x412>
 800a06c:	e65d      	b.n	8009d2a <_printf_float+0xb6>
 800a06e:	2301      	movs	r3, #1
 800a070:	465a      	mov	r2, fp
 800a072:	4631      	mov	r1, r6
 800a074:	4628      	mov	r0, r5
 800a076:	47b8      	blx	r7
 800a078:	3001      	adds	r0, #1
 800a07a:	f43f ae56 	beq.w	8009d2a <_printf_float+0xb6>
 800a07e:	f108 0801 	add.w	r8, r8, #1
 800a082:	45d0      	cmp	r8, sl
 800a084:	dbf3      	blt.n	800a06e <_printf_float+0x3fa>
 800a086:	464b      	mov	r3, r9
 800a088:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a08c:	e6df      	b.n	8009e4e <_printf_float+0x1da>
 800a08e:	f04f 0800 	mov.w	r8, #0
 800a092:	f104 0b1a 	add.w	fp, r4, #26
 800a096:	e7f4      	b.n	800a082 <_printf_float+0x40e>
 800a098:	2301      	movs	r3, #1
 800a09a:	4642      	mov	r2, r8
 800a09c:	e7e1      	b.n	800a062 <_printf_float+0x3ee>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	464a      	mov	r2, r9
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	47b8      	blx	r7
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	f43f ae3e 	beq.w	8009d2a <_printf_float+0xb6>
 800a0ae:	f108 0801 	add.w	r8, r8, #1
 800a0b2:	68e3      	ldr	r3, [r4, #12]
 800a0b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0b6:	1a5b      	subs	r3, r3, r1
 800a0b8:	4543      	cmp	r3, r8
 800a0ba:	dcf0      	bgt.n	800a09e <_printf_float+0x42a>
 800a0bc:	e6fc      	b.n	8009eb8 <_printf_float+0x244>
 800a0be:	f04f 0800 	mov.w	r8, #0
 800a0c2:	f104 0919 	add.w	r9, r4, #25
 800a0c6:	e7f4      	b.n	800a0b2 <_printf_float+0x43e>

0800a0c8 <_printf_common>:
 800a0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0cc:	4616      	mov	r6, r2
 800a0ce:	4698      	mov	r8, r3
 800a0d0:	688a      	ldr	r2, [r1, #8]
 800a0d2:	690b      	ldr	r3, [r1, #16]
 800a0d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	bfb8      	it	lt
 800a0dc:	4613      	movlt	r3, r2
 800a0de:	6033      	str	r3, [r6, #0]
 800a0e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	b10a      	cbz	r2, 800a0ee <_printf_common+0x26>
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	6033      	str	r3, [r6, #0]
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	0699      	lsls	r1, r3, #26
 800a0f2:	bf42      	ittt	mi
 800a0f4:	6833      	ldrmi	r3, [r6, #0]
 800a0f6:	3302      	addmi	r3, #2
 800a0f8:	6033      	strmi	r3, [r6, #0]
 800a0fa:	6825      	ldr	r5, [r4, #0]
 800a0fc:	f015 0506 	ands.w	r5, r5, #6
 800a100:	d106      	bne.n	800a110 <_printf_common+0x48>
 800a102:	f104 0a19 	add.w	sl, r4, #25
 800a106:	68e3      	ldr	r3, [r4, #12]
 800a108:	6832      	ldr	r2, [r6, #0]
 800a10a:	1a9b      	subs	r3, r3, r2
 800a10c:	42ab      	cmp	r3, r5
 800a10e:	dc26      	bgt.n	800a15e <_printf_common+0x96>
 800a110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a114:	6822      	ldr	r2, [r4, #0]
 800a116:	3b00      	subs	r3, #0
 800a118:	bf18      	it	ne
 800a11a:	2301      	movne	r3, #1
 800a11c:	0692      	lsls	r2, r2, #26
 800a11e:	d42b      	bmi.n	800a178 <_printf_common+0xb0>
 800a120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a124:	4641      	mov	r1, r8
 800a126:	4638      	mov	r0, r7
 800a128:	47c8      	blx	r9
 800a12a:	3001      	adds	r0, #1
 800a12c:	d01e      	beq.n	800a16c <_printf_common+0xa4>
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	6922      	ldr	r2, [r4, #16]
 800a132:	f003 0306 	and.w	r3, r3, #6
 800a136:	2b04      	cmp	r3, #4
 800a138:	bf02      	ittt	eq
 800a13a:	68e5      	ldreq	r5, [r4, #12]
 800a13c:	6833      	ldreq	r3, [r6, #0]
 800a13e:	1aed      	subeq	r5, r5, r3
 800a140:	68a3      	ldr	r3, [r4, #8]
 800a142:	bf0c      	ite	eq
 800a144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a148:	2500      	movne	r5, #0
 800a14a:	4293      	cmp	r3, r2
 800a14c:	bfc4      	itt	gt
 800a14e:	1a9b      	subgt	r3, r3, r2
 800a150:	18ed      	addgt	r5, r5, r3
 800a152:	2600      	movs	r6, #0
 800a154:	341a      	adds	r4, #26
 800a156:	42b5      	cmp	r5, r6
 800a158:	d11a      	bne.n	800a190 <_printf_common+0xc8>
 800a15a:	2000      	movs	r0, #0
 800a15c:	e008      	b.n	800a170 <_printf_common+0xa8>
 800a15e:	2301      	movs	r3, #1
 800a160:	4652      	mov	r2, sl
 800a162:	4641      	mov	r1, r8
 800a164:	4638      	mov	r0, r7
 800a166:	47c8      	blx	r9
 800a168:	3001      	adds	r0, #1
 800a16a:	d103      	bne.n	800a174 <_printf_common+0xac>
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295
 800a170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a174:	3501      	adds	r5, #1
 800a176:	e7c6      	b.n	800a106 <_printf_common+0x3e>
 800a178:	18e1      	adds	r1, r4, r3
 800a17a:	1c5a      	adds	r2, r3, #1
 800a17c:	2030      	movs	r0, #48	@ 0x30
 800a17e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a182:	4422      	add	r2, r4
 800a184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a18c:	3302      	adds	r3, #2
 800a18e:	e7c7      	b.n	800a120 <_printf_common+0x58>
 800a190:	2301      	movs	r3, #1
 800a192:	4622      	mov	r2, r4
 800a194:	4641      	mov	r1, r8
 800a196:	4638      	mov	r0, r7
 800a198:	47c8      	blx	r9
 800a19a:	3001      	adds	r0, #1
 800a19c:	d0e6      	beq.n	800a16c <_printf_common+0xa4>
 800a19e:	3601      	adds	r6, #1
 800a1a0:	e7d9      	b.n	800a156 <_printf_common+0x8e>
	...

0800a1a4 <_printf_i>:
 800a1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a8:	7e0f      	ldrb	r7, [r1, #24]
 800a1aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1ac:	2f78      	cmp	r7, #120	@ 0x78
 800a1ae:	4691      	mov	r9, r2
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	469a      	mov	sl, r3
 800a1b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a1ba:	d807      	bhi.n	800a1cc <_printf_i+0x28>
 800a1bc:	2f62      	cmp	r7, #98	@ 0x62
 800a1be:	d80a      	bhi.n	800a1d6 <_printf_i+0x32>
 800a1c0:	2f00      	cmp	r7, #0
 800a1c2:	f000 80d2 	beq.w	800a36a <_printf_i+0x1c6>
 800a1c6:	2f58      	cmp	r7, #88	@ 0x58
 800a1c8:	f000 80b9 	beq.w	800a33e <_printf_i+0x19a>
 800a1cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a1d4:	e03a      	b.n	800a24c <_printf_i+0xa8>
 800a1d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a1da:	2b15      	cmp	r3, #21
 800a1dc:	d8f6      	bhi.n	800a1cc <_printf_i+0x28>
 800a1de:	a101      	add	r1, pc, #4	@ (adr r1, 800a1e4 <_printf_i+0x40>)
 800a1e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1e4:	0800a23d 	.word	0x0800a23d
 800a1e8:	0800a251 	.word	0x0800a251
 800a1ec:	0800a1cd 	.word	0x0800a1cd
 800a1f0:	0800a1cd 	.word	0x0800a1cd
 800a1f4:	0800a1cd 	.word	0x0800a1cd
 800a1f8:	0800a1cd 	.word	0x0800a1cd
 800a1fc:	0800a251 	.word	0x0800a251
 800a200:	0800a1cd 	.word	0x0800a1cd
 800a204:	0800a1cd 	.word	0x0800a1cd
 800a208:	0800a1cd 	.word	0x0800a1cd
 800a20c:	0800a1cd 	.word	0x0800a1cd
 800a210:	0800a351 	.word	0x0800a351
 800a214:	0800a27b 	.word	0x0800a27b
 800a218:	0800a30b 	.word	0x0800a30b
 800a21c:	0800a1cd 	.word	0x0800a1cd
 800a220:	0800a1cd 	.word	0x0800a1cd
 800a224:	0800a373 	.word	0x0800a373
 800a228:	0800a1cd 	.word	0x0800a1cd
 800a22c:	0800a27b 	.word	0x0800a27b
 800a230:	0800a1cd 	.word	0x0800a1cd
 800a234:	0800a1cd 	.word	0x0800a1cd
 800a238:	0800a313 	.word	0x0800a313
 800a23c:	6833      	ldr	r3, [r6, #0]
 800a23e:	1d1a      	adds	r2, r3, #4
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6032      	str	r2, [r6, #0]
 800a244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a24c:	2301      	movs	r3, #1
 800a24e:	e09d      	b.n	800a38c <_printf_i+0x1e8>
 800a250:	6833      	ldr	r3, [r6, #0]
 800a252:	6820      	ldr	r0, [r4, #0]
 800a254:	1d19      	adds	r1, r3, #4
 800a256:	6031      	str	r1, [r6, #0]
 800a258:	0606      	lsls	r6, r0, #24
 800a25a:	d501      	bpl.n	800a260 <_printf_i+0xbc>
 800a25c:	681d      	ldr	r5, [r3, #0]
 800a25e:	e003      	b.n	800a268 <_printf_i+0xc4>
 800a260:	0645      	lsls	r5, r0, #25
 800a262:	d5fb      	bpl.n	800a25c <_printf_i+0xb8>
 800a264:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a268:	2d00      	cmp	r5, #0
 800a26a:	da03      	bge.n	800a274 <_printf_i+0xd0>
 800a26c:	232d      	movs	r3, #45	@ 0x2d
 800a26e:	426d      	negs	r5, r5
 800a270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a274:	4859      	ldr	r0, [pc, #356]	@ (800a3dc <_printf_i+0x238>)
 800a276:	230a      	movs	r3, #10
 800a278:	e011      	b.n	800a29e <_printf_i+0xfa>
 800a27a:	6821      	ldr	r1, [r4, #0]
 800a27c:	6833      	ldr	r3, [r6, #0]
 800a27e:	0608      	lsls	r0, r1, #24
 800a280:	f853 5b04 	ldr.w	r5, [r3], #4
 800a284:	d402      	bmi.n	800a28c <_printf_i+0xe8>
 800a286:	0649      	lsls	r1, r1, #25
 800a288:	bf48      	it	mi
 800a28a:	b2ad      	uxthmi	r5, r5
 800a28c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a28e:	4853      	ldr	r0, [pc, #332]	@ (800a3dc <_printf_i+0x238>)
 800a290:	6033      	str	r3, [r6, #0]
 800a292:	bf14      	ite	ne
 800a294:	230a      	movne	r3, #10
 800a296:	2308      	moveq	r3, #8
 800a298:	2100      	movs	r1, #0
 800a29a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a29e:	6866      	ldr	r6, [r4, #4]
 800a2a0:	60a6      	str	r6, [r4, #8]
 800a2a2:	2e00      	cmp	r6, #0
 800a2a4:	bfa2      	ittt	ge
 800a2a6:	6821      	ldrge	r1, [r4, #0]
 800a2a8:	f021 0104 	bicge.w	r1, r1, #4
 800a2ac:	6021      	strge	r1, [r4, #0]
 800a2ae:	b90d      	cbnz	r5, 800a2b4 <_printf_i+0x110>
 800a2b0:	2e00      	cmp	r6, #0
 800a2b2:	d04b      	beq.n	800a34c <_printf_i+0x1a8>
 800a2b4:	4616      	mov	r6, r2
 800a2b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2ba:	fb03 5711 	mls	r7, r3, r1, r5
 800a2be:	5dc7      	ldrb	r7, [r0, r7]
 800a2c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2c4:	462f      	mov	r7, r5
 800a2c6:	42bb      	cmp	r3, r7
 800a2c8:	460d      	mov	r5, r1
 800a2ca:	d9f4      	bls.n	800a2b6 <_printf_i+0x112>
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d10b      	bne.n	800a2e8 <_printf_i+0x144>
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	07df      	lsls	r7, r3, #31
 800a2d4:	d508      	bpl.n	800a2e8 <_printf_i+0x144>
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	6861      	ldr	r1, [r4, #4]
 800a2da:	4299      	cmp	r1, r3
 800a2dc:	bfde      	ittt	le
 800a2de:	2330      	movle	r3, #48	@ 0x30
 800a2e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2e8:	1b92      	subs	r2, r2, r6
 800a2ea:	6122      	str	r2, [r4, #16]
 800a2ec:	f8cd a000 	str.w	sl, [sp]
 800a2f0:	464b      	mov	r3, r9
 800a2f2:	aa03      	add	r2, sp, #12
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4640      	mov	r0, r8
 800a2f8:	f7ff fee6 	bl	800a0c8 <_printf_common>
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d14a      	bne.n	800a396 <_printf_i+0x1f2>
 800a300:	f04f 30ff 	mov.w	r0, #4294967295
 800a304:	b004      	add	sp, #16
 800a306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	f043 0320 	orr.w	r3, r3, #32
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	4833      	ldr	r0, [pc, #204]	@ (800a3e0 <_printf_i+0x23c>)
 800a314:	2778      	movs	r7, #120	@ 0x78
 800a316:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	6831      	ldr	r1, [r6, #0]
 800a31e:	061f      	lsls	r7, r3, #24
 800a320:	f851 5b04 	ldr.w	r5, [r1], #4
 800a324:	d402      	bmi.n	800a32c <_printf_i+0x188>
 800a326:	065f      	lsls	r7, r3, #25
 800a328:	bf48      	it	mi
 800a32a:	b2ad      	uxthmi	r5, r5
 800a32c:	6031      	str	r1, [r6, #0]
 800a32e:	07d9      	lsls	r1, r3, #31
 800a330:	bf44      	itt	mi
 800a332:	f043 0320 	orrmi.w	r3, r3, #32
 800a336:	6023      	strmi	r3, [r4, #0]
 800a338:	b11d      	cbz	r5, 800a342 <_printf_i+0x19e>
 800a33a:	2310      	movs	r3, #16
 800a33c:	e7ac      	b.n	800a298 <_printf_i+0xf4>
 800a33e:	4827      	ldr	r0, [pc, #156]	@ (800a3dc <_printf_i+0x238>)
 800a340:	e7e9      	b.n	800a316 <_printf_i+0x172>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	f023 0320 	bic.w	r3, r3, #32
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	e7f6      	b.n	800a33a <_printf_i+0x196>
 800a34c:	4616      	mov	r6, r2
 800a34e:	e7bd      	b.n	800a2cc <_printf_i+0x128>
 800a350:	6833      	ldr	r3, [r6, #0]
 800a352:	6825      	ldr	r5, [r4, #0]
 800a354:	6961      	ldr	r1, [r4, #20]
 800a356:	1d18      	adds	r0, r3, #4
 800a358:	6030      	str	r0, [r6, #0]
 800a35a:	062e      	lsls	r6, r5, #24
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	d501      	bpl.n	800a364 <_printf_i+0x1c0>
 800a360:	6019      	str	r1, [r3, #0]
 800a362:	e002      	b.n	800a36a <_printf_i+0x1c6>
 800a364:	0668      	lsls	r0, r5, #25
 800a366:	d5fb      	bpl.n	800a360 <_printf_i+0x1bc>
 800a368:	8019      	strh	r1, [r3, #0]
 800a36a:	2300      	movs	r3, #0
 800a36c:	6123      	str	r3, [r4, #16]
 800a36e:	4616      	mov	r6, r2
 800a370:	e7bc      	b.n	800a2ec <_printf_i+0x148>
 800a372:	6833      	ldr	r3, [r6, #0]
 800a374:	1d1a      	adds	r2, r3, #4
 800a376:	6032      	str	r2, [r6, #0]
 800a378:	681e      	ldr	r6, [r3, #0]
 800a37a:	6862      	ldr	r2, [r4, #4]
 800a37c:	2100      	movs	r1, #0
 800a37e:	4630      	mov	r0, r6
 800a380:	f7f5 ff26 	bl	80001d0 <memchr>
 800a384:	b108      	cbz	r0, 800a38a <_printf_i+0x1e6>
 800a386:	1b80      	subs	r0, r0, r6
 800a388:	6060      	str	r0, [r4, #4]
 800a38a:	6863      	ldr	r3, [r4, #4]
 800a38c:	6123      	str	r3, [r4, #16]
 800a38e:	2300      	movs	r3, #0
 800a390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a394:	e7aa      	b.n	800a2ec <_printf_i+0x148>
 800a396:	6923      	ldr	r3, [r4, #16]
 800a398:	4632      	mov	r2, r6
 800a39a:	4649      	mov	r1, r9
 800a39c:	4640      	mov	r0, r8
 800a39e:	47d0      	blx	sl
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d0ad      	beq.n	800a300 <_printf_i+0x15c>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	079b      	lsls	r3, r3, #30
 800a3a8:	d413      	bmi.n	800a3d2 <_printf_i+0x22e>
 800a3aa:	68e0      	ldr	r0, [r4, #12]
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	4298      	cmp	r0, r3
 800a3b0:	bfb8      	it	lt
 800a3b2:	4618      	movlt	r0, r3
 800a3b4:	e7a6      	b.n	800a304 <_printf_i+0x160>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4632      	mov	r2, r6
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	4640      	mov	r0, r8
 800a3be:	47d0      	blx	sl
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d09d      	beq.n	800a300 <_printf_i+0x15c>
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	68e3      	ldr	r3, [r4, #12]
 800a3c8:	9903      	ldr	r1, [sp, #12]
 800a3ca:	1a5b      	subs	r3, r3, r1
 800a3cc:	42ab      	cmp	r3, r5
 800a3ce:	dcf2      	bgt.n	800a3b6 <_printf_i+0x212>
 800a3d0:	e7eb      	b.n	800a3aa <_printf_i+0x206>
 800a3d2:	2500      	movs	r5, #0
 800a3d4:	f104 0619 	add.w	r6, r4, #25
 800a3d8:	e7f5      	b.n	800a3c6 <_printf_i+0x222>
 800a3da:	bf00      	nop
 800a3dc:	0802c032 	.word	0x0802c032
 800a3e0:	0802c043 	.word	0x0802c043

0800a3e4 <_scanf_float>:
 800a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	b087      	sub	sp, #28
 800a3ea:	4617      	mov	r7, r2
 800a3ec:	9303      	str	r3, [sp, #12]
 800a3ee:	688b      	ldr	r3, [r1, #8]
 800a3f0:	1e5a      	subs	r2, r3, #1
 800a3f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a3f6:	bf81      	itttt	hi
 800a3f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a3fc:	eb03 0b05 	addhi.w	fp, r3, r5
 800a400:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a404:	608b      	strhi	r3, [r1, #8]
 800a406:	680b      	ldr	r3, [r1, #0]
 800a408:	460a      	mov	r2, r1
 800a40a:	f04f 0500 	mov.w	r5, #0
 800a40e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a412:	f842 3b1c 	str.w	r3, [r2], #28
 800a416:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a41a:	4680      	mov	r8, r0
 800a41c:	460c      	mov	r4, r1
 800a41e:	bf98      	it	ls
 800a420:	f04f 0b00 	movls.w	fp, #0
 800a424:	9201      	str	r2, [sp, #4]
 800a426:	4616      	mov	r6, r2
 800a428:	46aa      	mov	sl, r5
 800a42a:	46a9      	mov	r9, r5
 800a42c:	9502      	str	r5, [sp, #8]
 800a42e:	68a2      	ldr	r2, [r4, #8]
 800a430:	b152      	cbz	r2, 800a448 <_scanf_float+0x64>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	2b4e      	cmp	r3, #78	@ 0x4e
 800a438:	d864      	bhi.n	800a504 <_scanf_float+0x120>
 800a43a:	2b40      	cmp	r3, #64	@ 0x40
 800a43c:	d83c      	bhi.n	800a4b8 <_scanf_float+0xd4>
 800a43e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a442:	b2c8      	uxtb	r0, r1
 800a444:	280e      	cmp	r0, #14
 800a446:	d93a      	bls.n	800a4be <_scanf_float+0xda>
 800a448:	f1b9 0f00 	cmp.w	r9, #0
 800a44c:	d003      	beq.n	800a456 <_scanf_float+0x72>
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a45a:	f1ba 0f01 	cmp.w	sl, #1
 800a45e:	f200 8117 	bhi.w	800a690 <_scanf_float+0x2ac>
 800a462:	9b01      	ldr	r3, [sp, #4]
 800a464:	429e      	cmp	r6, r3
 800a466:	f200 8108 	bhi.w	800a67a <_scanf_float+0x296>
 800a46a:	2001      	movs	r0, #1
 800a46c:	b007      	add	sp, #28
 800a46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a472:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a476:	2a0d      	cmp	r2, #13
 800a478:	d8e6      	bhi.n	800a448 <_scanf_float+0x64>
 800a47a:	a101      	add	r1, pc, #4	@ (adr r1, 800a480 <_scanf_float+0x9c>)
 800a47c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a480:	0800a5c7 	.word	0x0800a5c7
 800a484:	0800a449 	.word	0x0800a449
 800a488:	0800a449 	.word	0x0800a449
 800a48c:	0800a449 	.word	0x0800a449
 800a490:	0800a627 	.word	0x0800a627
 800a494:	0800a5ff 	.word	0x0800a5ff
 800a498:	0800a449 	.word	0x0800a449
 800a49c:	0800a449 	.word	0x0800a449
 800a4a0:	0800a5d5 	.word	0x0800a5d5
 800a4a4:	0800a449 	.word	0x0800a449
 800a4a8:	0800a449 	.word	0x0800a449
 800a4ac:	0800a449 	.word	0x0800a449
 800a4b0:	0800a449 	.word	0x0800a449
 800a4b4:	0800a58d 	.word	0x0800a58d
 800a4b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a4bc:	e7db      	b.n	800a476 <_scanf_float+0x92>
 800a4be:	290e      	cmp	r1, #14
 800a4c0:	d8c2      	bhi.n	800a448 <_scanf_float+0x64>
 800a4c2:	a001      	add	r0, pc, #4	@ (adr r0, 800a4c8 <_scanf_float+0xe4>)
 800a4c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a4c8:	0800a57d 	.word	0x0800a57d
 800a4cc:	0800a449 	.word	0x0800a449
 800a4d0:	0800a57d 	.word	0x0800a57d
 800a4d4:	0800a613 	.word	0x0800a613
 800a4d8:	0800a449 	.word	0x0800a449
 800a4dc:	0800a525 	.word	0x0800a525
 800a4e0:	0800a563 	.word	0x0800a563
 800a4e4:	0800a563 	.word	0x0800a563
 800a4e8:	0800a563 	.word	0x0800a563
 800a4ec:	0800a563 	.word	0x0800a563
 800a4f0:	0800a563 	.word	0x0800a563
 800a4f4:	0800a563 	.word	0x0800a563
 800a4f8:	0800a563 	.word	0x0800a563
 800a4fc:	0800a563 	.word	0x0800a563
 800a500:	0800a563 	.word	0x0800a563
 800a504:	2b6e      	cmp	r3, #110	@ 0x6e
 800a506:	d809      	bhi.n	800a51c <_scanf_float+0x138>
 800a508:	2b60      	cmp	r3, #96	@ 0x60
 800a50a:	d8b2      	bhi.n	800a472 <_scanf_float+0x8e>
 800a50c:	2b54      	cmp	r3, #84	@ 0x54
 800a50e:	d07b      	beq.n	800a608 <_scanf_float+0x224>
 800a510:	2b59      	cmp	r3, #89	@ 0x59
 800a512:	d199      	bne.n	800a448 <_scanf_float+0x64>
 800a514:	2d07      	cmp	r5, #7
 800a516:	d197      	bne.n	800a448 <_scanf_float+0x64>
 800a518:	2508      	movs	r5, #8
 800a51a:	e02c      	b.n	800a576 <_scanf_float+0x192>
 800a51c:	2b74      	cmp	r3, #116	@ 0x74
 800a51e:	d073      	beq.n	800a608 <_scanf_float+0x224>
 800a520:	2b79      	cmp	r3, #121	@ 0x79
 800a522:	e7f6      	b.n	800a512 <_scanf_float+0x12e>
 800a524:	6821      	ldr	r1, [r4, #0]
 800a526:	05c8      	lsls	r0, r1, #23
 800a528:	d51b      	bpl.n	800a562 <_scanf_float+0x17e>
 800a52a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a52e:	6021      	str	r1, [r4, #0]
 800a530:	f109 0901 	add.w	r9, r9, #1
 800a534:	f1bb 0f00 	cmp.w	fp, #0
 800a538:	d003      	beq.n	800a542 <_scanf_float+0x15e>
 800a53a:	3201      	adds	r2, #1
 800a53c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a540:	60a2      	str	r2, [r4, #8]
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	3b01      	subs	r3, #1
 800a546:	60a3      	str	r3, [r4, #8]
 800a548:	6923      	ldr	r3, [r4, #16]
 800a54a:	3301      	adds	r3, #1
 800a54c:	6123      	str	r3, [r4, #16]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3b01      	subs	r3, #1
 800a552:	2b00      	cmp	r3, #0
 800a554:	607b      	str	r3, [r7, #4]
 800a556:	f340 8087 	ble.w	800a668 <_scanf_float+0x284>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	3301      	adds	r3, #1
 800a55e:	603b      	str	r3, [r7, #0]
 800a560:	e765      	b.n	800a42e <_scanf_float+0x4a>
 800a562:	eb1a 0105 	adds.w	r1, sl, r5
 800a566:	f47f af6f 	bne.w	800a448 <_scanf_float+0x64>
 800a56a:	6822      	ldr	r2, [r4, #0]
 800a56c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a570:	6022      	str	r2, [r4, #0]
 800a572:	460d      	mov	r5, r1
 800a574:	468a      	mov	sl, r1
 800a576:	f806 3b01 	strb.w	r3, [r6], #1
 800a57a:	e7e2      	b.n	800a542 <_scanf_float+0x15e>
 800a57c:	6822      	ldr	r2, [r4, #0]
 800a57e:	0610      	lsls	r0, r2, #24
 800a580:	f57f af62 	bpl.w	800a448 <_scanf_float+0x64>
 800a584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a588:	6022      	str	r2, [r4, #0]
 800a58a:	e7f4      	b.n	800a576 <_scanf_float+0x192>
 800a58c:	f1ba 0f00 	cmp.w	sl, #0
 800a590:	d10e      	bne.n	800a5b0 <_scanf_float+0x1cc>
 800a592:	f1b9 0f00 	cmp.w	r9, #0
 800a596:	d10e      	bne.n	800a5b6 <_scanf_float+0x1d2>
 800a598:	6822      	ldr	r2, [r4, #0]
 800a59a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a59e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a5a2:	d108      	bne.n	800a5b6 <_scanf_float+0x1d2>
 800a5a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a5a8:	6022      	str	r2, [r4, #0]
 800a5aa:	f04f 0a01 	mov.w	sl, #1
 800a5ae:	e7e2      	b.n	800a576 <_scanf_float+0x192>
 800a5b0:	f1ba 0f02 	cmp.w	sl, #2
 800a5b4:	d055      	beq.n	800a662 <_scanf_float+0x27e>
 800a5b6:	2d01      	cmp	r5, #1
 800a5b8:	d002      	beq.n	800a5c0 <_scanf_float+0x1dc>
 800a5ba:	2d04      	cmp	r5, #4
 800a5bc:	f47f af44 	bne.w	800a448 <_scanf_float+0x64>
 800a5c0:	3501      	adds	r5, #1
 800a5c2:	b2ed      	uxtb	r5, r5
 800a5c4:	e7d7      	b.n	800a576 <_scanf_float+0x192>
 800a5c6:	f1ba 0f01 	cmp.w	sl, #1
 800a5ca:	f47f af3d 	bne.w	800a448 <_scanf_float+0x64>
 800a5ce:	f04f 0a02 	mov.w	sl, #2
 800a5d2:	e7d0      	b.n	800a576 <_scanf_float+0x192>
 800a5d4:	b97d      	cbnz	r5, 800a5f6 <_scanf_float+0x212>
 800a5d6:	f1b9 0f00 	cmp.w	r9, #0
 800a5da:	f47f af38 	bne.w	800a44e <_scanf_float+0x6a>
 800a5de:	6822      	ldr	r2, [r4, #0]
 800a5e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a5e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a5e8:	f040 8108 	bne.w	800a7fc <_scanf_float+0x418>
 800a5ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a5f0:	6022      	str	r2, [r4, #0]
 800a5f2:	2501      	movs	r5, #1
 800a5f4:	e7bf      	b.n	800a576 <_scanf_float+0x192>
 800a5f6:	2d03      	cmp	r5, #3
 800a5f8:	d0e2      	beq.n	800a5c0 <_scanf_float+0x1dc>
 800a5fa:	2d05      	cmp	r5, #5
 800a5fc:	e7de      	b.n	800a5bc <_scanf_float+0x1d8>
 800a5fe:	2d02      	cmp	r5, #2
 800a600:	f47f af22 	bne.w	800a448 <_scanf_float+0x64>
 800a604:	2503      	movs	r5, #3
 800a606:	e7b6      	b.n	800a576 <_scanf_float+0x192>
 800a608:	2d06      	cmp	r5, #6
 800a60a:	f47f af1d 	bne.w	800a448 <_scanf_float+0x64>
 800a60e:	2507      	movs	r5, #7
 800a610:	e7b1      	b.n	800a576 <_scanf_float+0x192>
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	0591      	lsls	r1, r2, #22
 800a616:	f57f af17 	bpl.w	800a448 <_scanf_float+0x64>
 800a61a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a61e:	6022      	str	r2, [r4, #0]
 800a620:	f8cd 9008 	str.w	r9, [sp, #8]
 800a624:	e7a7      	b.n	800a576 <_scanf_float+0x192>
 800a626:	6822      	ldr	r2, [r4, #0]
 800a628:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a62c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a630:	d006      	beq.n	800a640 <_scanf_float+0x25c>
 800a632:	0550      	lsls	r0, r2, #21
 800a634:	f57f af08 	bpl.w	800a448 <_scanf_float+0x64>
 800a638:	f1b9 0f00 	cmp.w	r9, #0
 800a63c:	f000 80de 	beq.w	800a7fc <_scanf_float+0x418>
 800a640:	0591      	lsls	r1, r2, #22
 800a642:	bf58      	it	pl
 800a644:	9902      	ldrpl	r1, [sp, #8]
 800a646:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a64a:	bf58      	it	pl
 800a64c:	eba9 0101 	subpl.w	r1, r9, r1
 800a650:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a654:	bf58      	it	pl
 800a656:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a65a:	6022      	str	r2, [r4, #0]
 800a65c:	f04f 0900 	mov.w	r9, #0
 800a660:	e789      	b.n	800a576 <_scanf_float+0x192>
 800a662:	f04f 0a03 	mov.w	sl, #3
 800a666:	e786      	b.n	800a576 <_scanf_float+0x192>
 800a668:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a66c:	4639      	mov	r1, r7
 800a66e:	4640      	mov	r0, r8
 800a670:	4798      	blx	r3
 800a672:	2800      	cmp	r0, #0
 800a674:	f43f aedb 	beq.w	800a42e <_scanf_float+0x4a>
 800a678:	e6e6      	b.n	800a448 <_scanf_float+0x64>
 800a67a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a67e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a682:	463a      	mov	r2, r7
 800a684:	4640      	mov	r0, r8
 800a686:	4798      	blx	r3
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	6123      	str	r3, [r4, #16]
 800a68e:	e6e8      	b.n	800a462 <_scanf_float+0x7e>
 800a690:	1e6b      	subs	r3, r5, #1
 800a692:	2b06      	cmp	r3, #6
 800a694:	d824      	bhi.n	800a6e0 <_scanf_float+0x2fc>
 800a696:	2d02      	cmp	r5, #2
 800a698:	d836      	bhi.n	800a708 <_scanf_float+0x324>
 800a69a:	9b01      	ldr	r3, [sp, #4]
 800a69c:	429e      	cmp	r6, r3
 800a69e:	f67f aee4 	bls.w	800a46a <_scanf_float+0x86>
 800a6a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6aa:	463a      	mov	r2, r7
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	4798      	blx	r3
 800a6b0:	6923      	ldr	r3, [r4, #16]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	6123      	str	r3, [r4, #16]
 800a6b6:	e7f0      	b.n	800a69a <_scanf_float+0x2b6>
 800a6b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a6c0:	463a      	mov	r2, r7
 800a6c2:	4640      	mov	r0, r8
 800a6c4:	4798      	blx	r3
 800a6c6:	6923      	ldr	r3, [r4, #16]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	6123      	str	r3, [r4, #16]
 800a6cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6d0:	fa5f fa8a 	uxtb.w	sl, sl
 800a6d4:	f1ba 0f02 	cmp.w	sl, #2
 800a6d8:	d1ee      	bne.n	800a6b8 <_scanf_float+0x2d4>
 800a6da:	3d03      	subs	r5, #3
 800a6dc:	b2ed      	uxtb	r5, r5
 800a6de:	1b76      	subs	r6, r6, r5
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	05da      	lsls	r2, r3, #23
 800a6e4:	d530      	bpl.n	800a748 <_scanf_float+0x364>
 800a6e6:	055b      	lsls	r3, r3, #21
 800a6e8:	d511      	bpl.n	800a70e <_scanf_float+0x32a>
 800a6ea:	9b01      	ldr	r3, [sp, #4]
 800a6ec:	429e      	cmp	r6, r3
 800a6ee:	f67f aebc 	bls.w	800a46a <_scanf_float+0x86>
 800a6f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6fa:	463a      	mov	r2, r7
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	4798      	blx	r3
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	3b01      	subs	r3, #1
 800a704:	6123      	str	r3, [r4, #16]
 800a706:	e7f0      	b.n	800a6ea <_scanf_float+0x306>
 800a708:	46aa      	mov	sl, r5
 800a70a:	46b3      	mov	fp, r6
 800a70c:	e7de      	b.n	800a6cc <_scanf_float+0x2e8>
 800a70e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a712:	6923      	ldr	r3, [r4, #16]
 800a714:	2965      	cmp	r1, #101	@ 0x65
 800a716:	f103 33ff 	add.w	r3, r3, #4294967295
 800a71a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a71e:	6123      	str	r3, [r4, #16]
 800a720:	d00c      	beq.n	800a73c <_scanf_float+0x358>
 800a722:	2945      	cmp	r1, #69	@ 0x45
 800a724:	d00a      	beq.n	800a73c <_scanf_float+0x358>
 800a726:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a72a:	463a      	mov	r2, r7
 800a72c:	4640      	mov	r0, r8
 800a72e:	4798      	blx	r3
 800a730:	6923      	ldr	r3, [r4, #16]
 800a732:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a736:	3b01      	subs	r3, #1
 800a738:	1eb5      	subs	r5, r6, #2
 800a73a:	6123      	str	r3, [r4, #16]
 800a73c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a740:	463a      	mov	r2, r7
 800a742:	4640      	mov	r0, r8
 800a744:	4798      	blx	r3
 800a746:	462e      	mov	r6, r5
 800a748:	6822      	ldr	r2, [r4, #0]
 800a74a:	f012 0210 	ands.w	r2, r2, #16
 800a74e:	d001      	beq.n	800a754 <_scanf_float+0x370>
 800a750:	2000      	movs	r0, #0
 800a752:	e68b      	b.n	800a46c <_scanf_float+0x88>
 800a754:	7032      	strb	r2, [r6, #0]
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a75c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a760:	d11c      	bne.n	800a79c <_scanf_float+0x3b8>
 800a762:	9b02      	ldr	r3, [sp, #8]
 800a764:	454b      	cmp	r3, r9
 800a766:	eba3 0209 	sub.w	r2, r3, r9
 800a76a:	d123      	bne.n	800a7b4 <_scanf_float+0x3d0>
 800a76c:	9901      	ldr	r1, [sp, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	4640      	mov	r0, r8
 800a772:	f002 fcfd 	bl	800d170 <_strtod_r>
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	6821      	ldr	r1, [r4, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f011 0f02 	tst.w	r1, #2
 800a780:	ec57 6b10 	vmov	r6, r7, d0
 800a784:	f103 0204 	add.w	r2, r3, #4
 800a788:	d01f      	beq.n	800a7ca <_scanf_float+0x3e6>
 800a78a:	9903      	ldr	r1, [sp, #12]
 800a78c:	600a      	str	r2, [r1, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	e9c3 6700 	strd	r6, r7, [r3]
 800a794:	68e3      	ldr	r3, [r4, #12]
 800a796:	3301      	adds	r3, #1
 800a798:	60e3      	str	r3, [r4, #12]
 800a79a:	e7d9      	b.n	800a750 <_scanf_float+0x36c>
 800a79c:	9b04      	ldr	r3, [sp, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d0e4      	beq.n	800a76c <_scanf_float+0x388>
 800a7a2:	9905      	ldr	r1, [sp, #20]
 800a7a4:	230a      	movs	r3, #10
 800a7a6:	3101      	adds	r1, #1
 800a7a8:	4640      	mov	r0, r8
 800a7aa:	f002 fd61 	bl	800d270 <_strtol_r>
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	9e05      	ldr	r6, [sp, #20]
 800a7b2:	1ac2      	subs	r2, r0, r3
 800a7b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a7b8:	429e      	cmp	r6, r3
 800a7ba:	bf28      	it	cs
 800a7bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a7c0:	4910      	ldr	r1, [pc, #64]	@ (800a804 <_scanf_float+0x420>)
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f000 f954 	bl	800aa70 <siprintf>
 800a7c8:	e7d0      	b.n	800a76c <_scanf_float+0x388>
 800a7ca:	f011 0f04 	tst.w	r1, #4
 800a7ce:	9903      	ldr	r1, [sp, #12]
 800a7d0:	600a      	str	r2, [r1, #0]
 800a7d2:	d1dc      	bne.n	800a78e <_scanf_float+0x3aa>
 800a7d4:	681d      	ldr	r5, [r3, #0]
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	463b      	mov	r3, r7
 800a7da:	4630      	mov	r0, r6
 800a7dc:	4639      	mov	r1, r7
 800a7de:	f7f6 f9a5 	bl	8000b2c <__aeabi_dcmpun>
 800a7e2:	b128      	cbz	r0, 800a7f0 <_scanf_float+0x40c>
 800a7e4:	4808      	ldr	r0, [pc, #32]	@ (800a808 <_scanf_float+0x424>)
 800a7e6:	f000 fabb 	bl	800ad60 <nanf>
 800a7ea:	ed85 0a00 	vstr	s0, [r5]
 800a7ee:	e7d1      	b.n	800a794 <_scanf_float+0x3b0>
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	f7f6 f9f8 	bl	8000be8 <__aeabi_d2f>
 800a7f8:	6028      	str	r0, [r5, #0]
 800a7fa:	e7cb      	b.n	800a794 <_scanf_float+0x3b0>
 800a7fc:	f04f 0900 	mov.w	r9, #0
 800a800:	e629      	b.n	800a456 <_scanf_float+0x72>
 800a802:	bf00      	nop
 800a804:	0802c054 	.word	0x0802c054
 800a808:	0802c3ed 	.word	0x0802c3ed

0800a80c <std>:
 800a80c:	2300      	movs	r3, #0
 800a80e:	b510      	push	{r4, lr}
 800a810:	4604      	mov	r4, r0
 800a812:	e9c0 3300 	strd	r3, r3, [r0]
 800a816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a81a:	6083      	str	r3, [r0, #8]
 800a81c:	8181      	strh	r1, [r0, #12]
 800a81e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a820:	81c2      	strh	r2, [r0, #14]
 800a822:	6183      	str	r3, [r0, #24]
 800a824:	4619      	mov	r1, r3
 800a826:	2208      	movs	r2, #8
 800a828:	305c      	adds	r0, #92	@ 0x5c
 800a82a:	f000 fa19 	bl	800ac60 <memset>
 800a82e:	4b0d      	ldr	r3, [pc, #52]	@ (800a864 <std+0x58>)
 800a830:	6263      	str	r3, [r4, #36]	@ 0x24
 800a832:	4b0d      	ldr	r3, [pc, #52]	@ (800a868 <std+0x5c>)
 800a834:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a836:	4b0d      	ldr	r3, [pc, #52]	@ (800a86c <std+0x60>)
 800a838:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a83a:	4b0d      	ldr	r3, [pc, #52]	@ (800a870 <std+0x64>)
 800a83c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a83e:	4b0d      	ldr	r3, [pc, #52]	@ (800a874 <std+0x68>)
 800a840:	6224      	str	r4, [r4, #32]
 800a842:	429c      	cmp	r4, r3
 800a844:	d006      	beq.n	800a854 <std+0x48>
 800a846:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a84a:	4294      	cmp	r4, r2
 800a84c:	d002      	beq.n	800a854 <std+0x48>
 800a84e:	33d0      	adds	r3, #208	@ 0xd0
 800a850:	429c      	cmp	r4, r3
 800a852:	d105      	bne.n	800a860 <std+0x54>
 800a854:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a85c:	f000 ba7c 	b.w	800ad58 <__retarget_lock_init_recursive>
 800a860:	bd10      	pop	{r4, pc}
 800a862:	bf00      	nop
 800a864:	0800aab1 	.word	0x0800aab1
 800a868:	0800aad3 	.word	0x0800aad3
 800a86c:	0800ab0b 	.word	0x0800ab0b
 800a870:	0800ab2f 	.word	0x0800ab2f
 800a874:	20000f8c 	.word	0x20000f8c

0800a878 <stdio_exit_handler>:
 800a878:	4a02      	ldr	r2, [pc, #8]	@ (800a884 <stdio_exit_handler+0xc>)
 800a87a:	4903      	ldr	r1, [pc, #12]	@ (800a888 <stdio_exit_handler+0x10>)
 800a87c:	4803      	ldr	r0, [pc, #12]	@ (800a88c <stdio_exit_handler+0x14>)
 800a87e:	f000 b869 	b.w	800a954 <_fwalk_sglue>
 800a882:	bf00      	nop
 800a884:	20000444 	.word	0x20000444
 800a888:	0800d8b1 	.word	0x0800d8b1
 800a88c:	20000454 	.word	0x20000454

0800a890 <cleanup_stdio>:
 800a890:	6841      	ldr	r1, [r0, #4]
 800a892:	4b0c      	ldr	r3, [pc, #48]	@ (800a8c4 <cleanup_stdio+0x34>)
 800a894:	4299      	cmp	r1, r3
 800a896:	b510      	push	{r4, lr}
 800a898:	4604      	mov	r4, r0
 800a89a:	d001      	beq.n	800a8a0 <cleanup_stdio+0x10>
 800a89c:	f003 f808 	bl	800d8b0 <_fflush_r>
 800a8a0:	68a1      	ldr	r1, [r4, #8]
 800a8a2:	4b09      	ldr	r3, [pc, #36]	@ (800a8c8 <cleanup_stdio+0x38>)
 800a8a4:	4299      	cmp	r1, r3
 800a8a6:	d002      	beq.n	800a8ae <cleanup_stdio+0x1e>
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f003 f801 	bl	800d8b0 <_fflush_r>
 800a8ae:	68e1      	ldr	r1, [r4, #12]
 800a8b0:	4b06      	ldr	r3, [pc, #24]	@ (800a8cc <cleanup_stdio+0x3c>)
 800a8b2:	4299      	cmp	r1, r3
 800a8b4:	d004      	beq.n	800a8c0 <cleanup_stdio+0x30>
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8bc:	f002 bff8 	b.w	800d8b0 <_fflush_r>
 800a8c0:	bd10      	pop	{r4, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20000f8c 	.word	0x20000f8c
 800a8c8:	20000ff4 	.word	0x20000ff4
 800a8cc:	2000105c 	.word	0x2000105c

0800a8d0 <global_stdio_init.part.0>:
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a900 <global_stdio_init.part.0+0x30>)
 800a8d4:	4c0b      	ldr	r4, [pc, #44]	@ (800a904 <global_stdio_init.part.0+0x34>)
 800a8d6:	4a0c      	ldr	r2, [pc, #48]	@ (800a908 <global_stdio_init.part.0+0x38>)
 800a8d8:	601a      	str	r2, [r3, #0]
 800a8da:	4620      	mov	r0, r4
 800a8dc:	2200      	movs	r2, #0
 800a8de:	2104      	movs	r1, #4
 800a8e0:	f7ff ff94 	bl	800a80c <std>
 800a8e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	2109      	movs	r1, #9
 800a8ec:	f7ff ff8e 	bl	800a80c <std>
 800a8f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8fa:	2112      	movs	r1, #18
 800a8fc:	f7ff bf86 	b.w	800a80c <std>
 800a900:	200010c4 	.word	0x200010c4
 800a904:	20000f8c 	.word	0x20000f8c
 800a908:	0800a879 	.word	0x0800a879

0800a90c <__sfp_lock_acquire>:
 800a90c:	4801      	ldr	r0, [pc, #4]	@ (800a914 <__sfp_lock_acquire+0x8>)
 800a90e:	f000 ba24 	b.w	800ad5a <__retarget_lock_acquire_recursive>
 800a912:	bf00      	nop
 800a914:	200010cd 	.word	0x200010cd

0800a918 <__sfp_lock_release>:
 800a918:	4801      	ldr	r0, [pc, #4]	@ (800a920 <__sfp_lock_release+0x8>)
 800a91a:	f000 ba1f 	b.w	800ad5c <__retarget_lock_release_recursive>
 800a91e:	bf00      	nop
 800a920:	200010cd 	.word	0x200010cd

0800a924 <__sinit>:
 800a924:	b510      	push	{r4, lr}
 800a926:	4604      	mov	r4, r0
 800a928:	f7ff fff0 	bl	800a90c <__sfp_lock_acquire>
 800a92c:	6a23      	ldr	r3, [r4, #32]
 800a92e:	b11b      	cbz	r3, 800a938 <__sinit+0x14>
 800a930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a934:	f7ff bff0 	b.w	800a918 <__sfp_lock_release>
 800a938:	4b04      	ldr	r3, [pc, #16]	@ (800a94c <__sinit+0x28>)
 800a93a:	6223      	str	r3, [r4, #32]
 800a93c:	4b04      	ldr	r3, [pc, #16]	@ (800a950 <__sinit+0x2c>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1f5      	bne.n	800a930 <__sinit+0xc>
 800a944:	f7ff ffc4 	bl	800a8d0 <global_stdio_init.part.0>
 800a948:	e7f2      	b.n	800a930 <__sinit+0xc>
 800a94a:	bf00      	nop
 800a94c:	0800a891 	.word	0x0800a891
 800a950:	200010c4 	.word	0x200010c4

0800a954 <_fwalk_sglue>:
 800a954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a958:	4607      	mov	r7, r0
 800a95a:	4688      	mov	r8, r1
 800a95c:	4614      	mov	r4, r2
 800a95e:	2600      	movs	r6, #0
 800a960:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a964:	f1b9 0901 	subs.w	r9, r9, #1
 800a968:	d505      	bpl.n	800a976 <_fwalk_sglue+0x22>
 800a96a:	6824      	ldr	r4, [r4, #0]
 800a96c:	2c00      	cmp	r4, #0
 800a96e:	d1f7      	bne.n	800a960 <_fwalk_sglue+0xc>
 800a970:	4630      	mov	r0, r6
 800a972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a976:	89ab      	ldrh	r3, [r5, #12]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d907      	bls.n	800a98c <_fwalk_sglue+0x38>
 800a97c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a980:	3301      	adds	r3, #1
 800a982:	d003      	beq.n	800a98c <_fwalk_sglue+0x38>
 800a984:	4629      	mov	r1, r5
 800a986:	4638      	mov	r0, r7
 800a988:	47c0      	blx	r8
 800a98a:	4306      	orrs	r6, r0
 800a98c:	3568      	adds	r5, #104	@ 0x68
 800a98e:	e7e9      	b.n	800a964 <_fwalk_sglue+0x10>

0800a990 <iprintf>:
 800a990:	b40f      	push	{r0, r1, r2, r3}
 800a992:	b507      	push	{r0, r1, r2, lr}
 800a994:	4906      	ldr	r1, [pc, #24]	@ (800a9b0 <iprintf+0x20>)
 800a996:	ab04      	add	r3, sp, #16
 800a998:	6808      	ldr	r0, [r1, #0]
 800a99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a99e:	6881      	ldr	r1, [r0, #8]
 800a9a0:	9301      	str	r3, [sp, #4]
 800a9a2:	f002 fde9 	bl	800d578 <_vfiprintf_r>
 800a9a6:	b003      	add	sp, #12
 800a9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9ac:	b004      	add	sp, #16
 800a9ae:	4770      	bx	lr
 800a9b0:	20000450 	.word	0x20000450

0800a9b4 <_puts_r>:
 800a9b4:	6a03      	ldr	r3, [r0, #32]
 800a9b6:	b570      	push	{r4, r5, r6, lr}
 800a9b8:	6884      	ldr	r4, [r0, #8]
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	460e      	mov	r6, r1
 800a9be:	b90b      	cbnz	r3, 800a9c4 <_puts_r+0x10>
 800a9c0:	f7ff ffb0 	bl	800a924 <__sinit>
 800a9c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9c6:	07db      	lsls	r3, r3, #31
 800a9c8:	d405      	bmi.n	800a9d6 <_puts_r+0x22>
 800a9ca:	89a3      	ldrh	r3, [r4, #12]
 800a9cc:	0598      	lsls	r0, r3, #22
 800a9ce:	d402      	bmi.n	800a9d6 <_puts_r+0x22>
 800a9d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9d2:	f000 f9c2 	bl	800ad5a <__retarget_lock_acquire_recursive>
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	0719      	lsls	r1, r3, #28
 800a9da:	d502      	bpl.n	800a9e2 <_puts_r+0x2e>
 800a9dc:	6923      	ldr	r3, [r4, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d135      	bne.n	800aa4e <_puts_r+0x9a>
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	f000 f8e5 	bl	800abb4 <__swsetup_r>
 800a9ea:	b380      	cbz	r0, 800aa4e <_puts_r+0x9a>
 800a9ec:	f04f 35ff 	mov.w	r5, #4294967295
 800a9f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9f2:	07da      	lsls	r2, r3, #31
 800a9f4:	d405      	bmi.n	800aa02 <_puts_r+0x4e>
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	059b      	lsls	r3, r3, #22
 800a9fa:	d402      	bmi.n	800aa02 <_puts_r+0x4e>
 800a9fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9fe:	f000 f9ad 	bl	800ad5c <__retarget_lock_release_recursive>
 800aa02:	4628      	mov	r0, r5
 800aa04:	bd70      	pop	{r4, r5, r6, pc}
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	da04      	bge.n	800aa14 <_puts_r+0x60>
 800aa0a:	69a2      	ldr	r2, [r4, #24]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	dc17      	bgt.n	800aa40 <_puts_r+0x8c>
 800aa10:	290a      	cmp	r1, #10
 800aa12:	d015      	beq.n	800aa40 <_puts_r+0x8c>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	6022      	str	r2, [r4, #0]
 800aa1a:	7019      	strb	r1, [r3, #0]
 800aa1c:	68a3      	ldr	r3, [r4, #8]
 800aa1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa22:	3b01      	subs	r3, #1
 800aa24:	60a3      	str	r3, [r4, #8]
 800aa26:	2900      	cmp	r1, #0
 800aa28:	d1ed      	bne.n	800aa06 <_puts_r+0x52>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	da11      	bge.n	800aa52 <_puts_r+0x9e>
 800aa2e:	4622      	mov	r2, r4
 800aa30:	210a      	movs	r1, #10
 800aa32:	4628      	mov	r0, r5
 800aa34:	f000 f87f 	bl	800ab36 <__swbuf_r>
 800aa38:	3001      	adds	r0, #1
 800aa3a:	d0d7      	beq.n	800a9ec <_puts_r+0x38>
 800aa3c:	250a      	movs	r5, #10
 800aa3e:	e7d7      	b.n	800a9f0 <_puts_r+0x3c>
 800aa40:	4622      	mov	r2, r4
 800aa42:	4628      	mov	r0, r5
 800aa44:	f000 f877 	bl	800ab36 <__swbuf_r>
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d1e7      	bne.n	800aa1c <_puts_r+0x68>
 800aa4c:	e7ce      	b.n	800a9ec <_puts_r+0x38>
 800aa4e:	3e01      	subs	r6, #1
 800aa50:	e7e4      	b.n	800aa1c <_puts_r+0x68>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	1c5a      	adds	r2, r3, #1
 800aa56:	6022      	str	r2, [r4, #0]
 800aa58:	220a      	movs	r2, #10
 800aa5a:	701a      	strb	r2, [r3, #0]
 800aa5c:	e7ee      	b.n	800aa3c <_puts_r+0x88>
	...

0800aa60 <puts>:
 800aa60:	4b02      	ldr	r3, [pc, #8]	@ (800aa6c <puts+0xc>)
 800aa62:	4601      	mov	r1, r0
 800aa64:	6818      	ldr	r0, [r3, #0]
 800aa66:	f7ff bfa5 	b.w	800a9b4 <_puts_r>
 800aa6a:	bf00      	nop
 800aa6c:	20000450 	.word	0x20000450

0800aa70 <siprintf>:
 800aa70:	b40e      	push	{r1, r2, r3}
 800aa72:	b500      	push	{lr}
 800aa74:	b09c      	sub	sp, #112	@ 0x70
 800aa76:	ab1d      	add	r3, sp, #116	@ 0x74
 800aa78:	9002      	str	r0, [sp, #8]
 800aa7a:	9006      	str	r0, [sp, #24]
 800aa7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aa80:	4809      	ldr	r0, [pc, #36]	@ (800aaa8 <siprintf+0x38>)
 800aa82:	9107      	str	r1, [sp, #28]
 800aa84:	9104      	str	r1, [sp, #16]
 800aa86:	4909      	ldr	r1, [pc, #36]	@ (800aaac <siprintf+0x3c>)
 800aa88:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa8c:	9105      	str	r1, [sp, #20]
 800aa8e:	6800      	ldr	r0, [r0, #0]
 800aa90:	9301      	str	r3, [sp, #4]
 800aa92:	a902      	add	r1, sp, #8
 800aa94:	f002 fc4a 	bl	800d32c <_svfiprintf_r>
 800aa98:	9b02      	ldr	r3, [sp, #8]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	701a      	strb	r2, [r3, #0]
 800aa9e:	b01c      	add	sp, #112	@ 0x70
 800aaa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaa4:	b003      	add	sp, #12
 800aaa6:	4770      	bx	lr
 800aaa8:	20000450 	.word	0x20000450
 800aaac:	ffff0208 	.word	0xffff0208

0800aab0 <__sread>:
 800aab0:	b510      	push	{r4, lr}
 800aab2:	460c      	mov	r4, r1
 800aab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab8:	f000 f900 	bl	800acbc <_read_r>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	bfab      	itete	ge
 800aac0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aac2:	89a3      	ldrhlt	r3, [r4, #12]
 800aac4:	181b      	addge	r3, r3, r0
 800aac6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aaca:	bfac      	ite	ge
 800aacc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aace:	81a3      	strhlt	r3, [r4, #12]
 800aad0:	bd10      	pop	{r4, pc}

0800aad2 <__swrite>:
 800aad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad6:	461f      	mov	r7, r3
 800aad8:	898b      	ldrh	r3, [r1, #12]
 800aada:	05db      	lsls	r3, r3, #23
 800aadc:	4605      	mov	r5, r0
 800aade:	460c      	mov	r4, r1
 800aae0:	4616      	mov	r6, r2
 800aae2:	d505      	bpl.n	800aaf0 <__swrite+0x1e>
 800aae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae8:	2302      	movs	r3, #2
 800aaea:	2200      	movs	r2, #0
 800aaec:	f000 f8d4 	bl	800ac98 <_lseek_r>
 800aaf0:	89a3      	ldrh	r3, [r4, #12]
 800aaf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aafa:	81a3      	strh	r3, [r4, #12]
 800aafc:	4632      	mov	r2, r6
 800aafe:	463b      	mov	r3, r7
 800ab00:	4628      	mov	r0, r5
 800ab02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab06:	f000 b8eb 	b.w	800ace0 <_write_r>

0800ab0a <__sseek>:
 800ab0a:	b510      	push	{r4, lr}
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab12:	f000 f8c1 	bl	800ac98 <_lseek_r>
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	bf15      	itete	ne
 800ab1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab26:	81a3      	strheq	r3, [r4, #12]
 800ab28:	bf18      	it	ne
 800ab2a:	81a3      	strhne	r3, [r4, #12]
 800ab2c:	bd10      	pop	{r4, pc}

0800ab2e <__sclose>:
 800ab2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab32:	f000 b8a1 	b.w	800ac78 <_close_r>

0800ab36 <__swbuf_r>:
 800ab36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab38:	460e      	mov	r6, r1
 800ab3a:	4614      	mov	r4, r2
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	b118      	cbz	r0, 800ab48 <__swbuf_r+0x12>
 800ab40:	6a03      	ldr	r3, [r0, #32]
 800ab42:	b90b      	cbnz	r3, 800ab48 <__swbuf_r+0x12>
 800ab44:	f7ff feee 	bl	800a924 <__sinit>
 800ab48:	69a3      	ldr	r3, [r4, #24]
 800ab4a:	60a3      	str	r3, [r4, #8]
 800ab4c:	89a3      	ldrh	r3, [r4, #12]
 800ab4e:	071a      	lsls	r2, r3, #28
 800ab50:	d501      	bpl.n	800ab56 <__swbuf_r+0x20>
 800ab52:	6923      	ldr	r3, [r4, #16]
 800ab54:	b943      	cbnz	r3, 800ab68 <__swbuf_r+0x32>
 800ab56:	4621      	mov	r1, r4
 800ab58:	4628      	mov	r0, r5
 800ab5a:	f000 f82b 	bl	800abb4 <__swsetup_r>
 800ab5e:	b118      	cbz	r0, 800ab68 <__swbuf_r+0x32>
 800ab60:	f04f 37ff 	mov.w	r7, #4294967295
 800ab64:	4638      	mov	r0, r7
 800ab66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	6922      	ldr	r2, [r4, #16]
 800ab6c:	1a98      	subs	r0, r3, r2
 800ab6e:	6963      	ldr	r3, [r4, #20]
 800ab70:	b2f6      	uxtb	r6, r6
 800ab72:	4283      	cmp	r3, r0
 800ab74:	4637      	mov	r7, r6
 800ab76:	dc05      	bgt.n	800ab84 <__swbuf_r+0x4e>
 800ab78:	4621      	mov	r1, r4
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	f002 fe98 	bl	800d8b0 <_fflush_r>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d1ed      	bne.n	800ab60 <__swbuf_r+0x2a>
 800ab84:	68a3      	ldr	r3, [r4, #8]
 800ab86:	3b01      	subs	r3, #1
 800ab88:	60a3      	str	r3, [r4, #8]
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	6022      	str	r2, [r4, #0]
 800ab90:	701e      	strb	r6, [r3, #0]
 800ab92:	6962      	ldr	r2, [r4, #20]
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d004      	beq.n	800aba4 <__swbuf_r+0x6e>
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	07db      	lsls	r3, r3, #31
 800ab9e:	d5e1      	bpl.n	800ab64 <__swbuf_r+0x2e>
 800aba0:	2e0a      	cmp	r6, #10
 800aba2:	d1df      	bne.n	800ab64 <__swbuf_r+0x2e>
 800aba4:	4621      	mov	r1, r4
 800aba6:	4628      	mov	r0, r5
 800aba8:	f002 fe82 	bl	800d8b0 <_fflush_r>
 800abac:	2800      	cmp	r0, #0
 800abae:	d0d9      	beq.n	800ab64 <__swbuf_r+0x2e>
 800abb0:	e7d6      	b.n	800ab60 <__swbuf_r+0x2a>
	...

0800abb4 <__swsetup_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4b29      	ldr	r3, [pc, #164]	@ (800ac5c <__swsetup_r+0xa8>)
 800abb8:	4605      	mov	r5, r0
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	460c      	mov	r4, r1
 800abbe:	b118      	cbz	r0, 800abc8 <__swsetup_r+0x14>
 800abc0:	6a03      	ldr	r3, [r0, #32]
 800abc2:	b90b      	cbnz	r3, 800abc8 <__swsetup_r+0x14>
 800abc4:	f7ff feae 	bl	800a924 <__sinit>
 800abc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abcc:	0719      	lsls	r1, r3, #28
 800abce:	d422      	bmi.n	800ac16 <__swsetup_r+0x62>
 800abd0:	06da      	lsls	r2, r3, #27
 800abd2:	d407      	bmi.n	800abe4 <__swsetup_r+0x30>
 800abd4:	2209      	movs	r2, #9
 800abd6:	602a      	str	r2, [r5, #0]
 800abd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abdc:	81a3      	strh	r3, [r4, #12]
 800abde:	f04f 30ff 	mov.w	r0, #4294967295
 800abe2:	e033      	b.n	800ac4c <__swsetup_r+0x98>
 800abe4:	0758      	lsls	r0, r3, #29
 800abe6:	d512      	bpl.n	800ac0e <__swsetup_r+0x5a>
 800abe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abea:	b141      	cbz	r1, 800abfe <__swsetup_r+0x4a>
 800abec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abf0:	4299      	cmp	r1, r3
 800abf2:	d002      	beq.n	800abfa <__swsetup_r+0x46>
 800abf4:	4628      	mov	r0, r5
 800abf6:	f000 ff07 	bl	800ba08 <_free_r>
 800abfa:	2300      	movs	r3, #0
 800abfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800abfe:	89a3      	ldrh	r3, [r4, #12]
 800ac00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac04:	81a3      	strh	r3, [r4, #12]
 800ac06:	2300      	movs	r3, #0
 800ac08:	6063      	str	r3, [r4, #4]
 800ac0a:	6923      	ldr	r3, [r4, #16]
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	f043 0308 	orr.w	r3, r3, #8
 800ac14:	81a3      	strh	r3, [r4, #12]
 800ac16:	6923      	ldr	r3, [r4, #16]
 800ac18:	b94b      	cbnz	r3, 800ac2e <__swsetup_r+0x7a>
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac24:	d003      	beq.n	800ac2e <__swsetup_r+0x7a>
 800ac26:	4621      	mov	r1, r4
 800ac28:	4628      	mov	r0, r5
 800ac2a:	f002 fe8f 	bl	800d94c <__smakebuf_r>
 800ac2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac32:	f013 0201 	ands.w	r2, r3, #1
 800ac36:	d00a      	beq.n	800ac4e <__swsetup_r+0x9a>
 800ac38:	2200      	movs	r2, #0
 800ac3a:	60a2      	str	r2, [r4, #8]
 800ac3c:	6962      	ldr	r2, [r4, #20]
 800ac3e:	4252      	negs	r2, r2
 800ac40:	61a2      	str	r2, [r4, #24]
 800ac42:	6922      	ldr	r2, [r4, #16]
 800ac44:	b942      	cbnz	r2, 800ac58 <__swsetup_r+0xa4>
 800ac46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac4a:	d1c5      	bne.n	800abd8 <__swsetup_r+0x24>
 800ac4c:	bd38      	pop	{r3, r4, r5, pc}
 800ac4e:	0799      	lsls	r1, r3, #30
 800ac50:	bf58      	it	pl
 800ac52:	6962      	ldrpl	r2, [r4, #20]
 800ac54:	60a2      	str	r2, [r4, #8]
 800ac56:	e7f4      	b.n	800ac42 <__swsetup_r+0x8e>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	e7f7      	b.n	800ac4c <__swsetup_r+0x98>
 800ac5c:	20000450 	.word	0x20000450

0800ac60 <memset>:
 800ac60:	4402      	add	r2, r0
 800ac62:	4603      	mov	r3, r0
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d100      	bne.n	800ac6a <memset+0xa>
 800ac68:	4770      	bx	lr
 800ac6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac6e:	e7f9      	b.n	800ac64 <memset+0x4>

0800ac70 <_localeconv_r>:
 800ac70:	4800      	ldr	r0, [pc, #0]	@ (800ac74 <_localeconv_r+0x4>)
 800ac72:	4770      	bx	lr
 800ac74:	20000590 	.word	0x20000590

0800ac78 <_close_r>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4d06      	ldr	r5, [pc, #24]	@ (800ac94 <_close_r+0x1c>)
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4604      	mov	r4, r0
 800ac80:	4608      	mov	r0, r1
 800ac82:	602b      	str	r3, [r5, #0]
 800ac84:	f7f7 fe52 	bl	800292c <_close>
 800ac88:	1c43      	adds	r3, r0, #1
 800ac8a:	d102      	bne.n	800ac92 <_close_r+0x1a>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	b103      	cbz	r3, 800ac92 <_close_r+0x1a>
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	bd38      	pop	{r3, r4, r5, pc}
 800ac94:	200010c8 	.word	0x200010c8

0800ac98 <_lseek_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4d07      	ldr	r5, [pc, #28]	@ (800acb8 <_lseek_r+0x20>)
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	4608      	mov	r0, r1
 800aca0:	4611      	mov	r1, r2
 800aca2:	2200      	movs	r2, #0
 800aca4:	602a      	str	r2, [r5, #0]
 800aca6:	461a      	mov	r2, r3
 800aca8:	f7f7 fe67 	bl	800297a <_lseek>
 800acac:	1c43      	adds	r3, r0, #1
 800acae:	d102      	bne.n	800acb6 <_lseek_r+0x1e>
 800acb0:	682b      	ldr	r3, [r5, #0]
 800acb2:	b103      	cbz	r3, 800acb6 <_lseek_r+0x1e>
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	bd38      	pop	{r3, r4, r5, pc}
 800acb8:	200010c8 	.word	0x200010c8

0800acbc <_read_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4d07      	ldr	r5, [pc, #28]	@ (800acdc <_read_r+0x20>)
 800acc0:	4604      	mov	r4, r0
 800acc2:	4608      	mov	r0, r1
 800acc4:	4611      	mov	r1, r2
 800acc6:	2200      	movs	r2, #0
 800acc8:	602a      	str	r2, [r5, #0]
 800acca:	461a      	mov	r2, r3
 800accc:	f7f7 fdf5 	bl	80028ba <_read>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	d102      	bne.n	800acda <_read_r+0x1e>
 800acd4:	682b      	ldr	r3, [r5, #0]
 800acd6:	b103      	cbz	r3, 800acda <_read_r+0x1e>
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	bd38      	pop	{r3, r4, r5, pc}
 800acdc:	200010c8 	.word	0x200010c8

0800ace0 <_write_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4d07      	ldr	r5, [pc, #28]	@ (800ad00 <_write_r+0x20>)
 800ace4:	4604      	mov	r4, r0
 800ace6:	4608      	mov	r0, r1
 800ace8:	4611      	mov	r1, r2
 800acea:	2200      	movs	r2, #0
 800acec:	602a      	str	r2, [r5, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	f7f7 fe00 	bl	80028f4 <_write>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d102      	bne.n	800acfe <_write_r+0x1e>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	b103      	cbz	r3, 800acfe <_write_r+0x1e>
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	200010c8 	.word	0x200010c8

0800ad04 <__errno>:
 800ad04:	4b01      	ldr	r3, [pc, #4]	@ (800ad0c <__errno+0x8>)
 800ad06:	6818      	ldr	r0, [r3, #0]
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	20000450 	.word	0x20000450

0800ad10 <__libc_init_array>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	4d0d      	ldr	r5, [pc, #52]	@ (800ad48 <__libc_init_array+0x38>)
 800ad14:	4c0d      	ldr	r4, [pc, #52]	@ (800ad4c <__libc_init_array+0x3c>)
 800ad16:	1b64      	subs	r4, r4, r5
 800ad18:	10a4      	asrs	r4, r4, #2
 800ad1a:	2600      	movs	r6, #0
 800ad1c:	42a6      	cmp	r6, r4
 800ad1e:	d109      	bne.n	800ad34 <__libc_init_array+0x24>
 800ad20:	4d0b      	ldr	r5, [pc, #44]	@ (800ad50 <__libc_init_array+0x40>)
 800ad22:	4c0c      	ldr	r4, [pc, #48]	@ (800ad54 <__libc_init_array+0x44>)
 800ad24:	f003 feee 	bl	800eb04 <_init>
 800ad28:	1b64      	subs	r4, r4, r5
 800ad2a:	10a4      	asrs	r4, r4, #2
 800ad2c:	2600      	movs	r6, #0
 800ad2e:	42a6      	cmp	r6, r4
 800ad30:	d105      	bne.n	800ad3e <__libc_init_array+0x2e>
 800ad32:	bd70      	pop	{r4, r5, r6, pc}
 800ad34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad38:	4798      	blx	r3
 800ad3a:	3601      	adds	r6, #1
 800ad3c:	e7ee      	b.n	800ad1c <__libc_init_array+0xc>
 800ad3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad42:	4798      	blx	r3
 800ad44:	3601      	adds	r6, #1
 800ad46:	e7f2      	b.n	800ad2e <__libc_init_array+0x1e>
 800ad48:	0802c470 	.word	0x0802c470
 800ad4c:	0802c470 	.word	0x0802c470
 800ad50:	0802c470 	.word	0x0802c470
 800ad54:	0802c474 	.word	0x0802c474

0800ad58 <__retarget_lock_init_recursive>:
 800ad58:	4770      	bx	lr

0800ad5a <__retarget_lock_acquire_recursive>:
 800ad5a:	4770      	bx	lr

0800ad5c <__retarget_lock_release_recursive>:
 800ad5c:	4770      	bx	lr
	...

0800ad60 <nanf>:
 800ad60:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ad68 <nanf+0x8>
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	7fc00000 	.word	0x7fc00000

0800ad6c <quorem>:
 800ad6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	6903      	ldr	r3, [r0, #16]
 800ad72:	690c      	ldr	r4, [r1, #16]
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	4607      	mov	r7, r0
 800ad78:	db7e      	blt.n	800ae78 <quorem+0x10c>
 800ad7a:	3c01      	subs	r4, #1
 800ad7c:	f101 0814 	add.w	r8, r1, #20
 800ad80:	00a3      	lsls	r3, r4, #2
 800ad82:	f100 0514 	add.w	r5, r0, #20
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad8c:	9301      	str	r3, [sp, #4]
 800ad8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad96:	3301      	adds	r3, #1
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ada2:	d32e      	bcc.n	800ae02 <quorem+0x96>
 800ada4:	f04f 0a00 	mov.w	sl, #0
 800ada8:	46c4      	mov	ip, r8
 800adaa:	46ae      	mov	lr, r5
 800adac:	46d3      	mov	fp, sl
 800adae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800adb2:	b298      	uxth	r0, r3
 800adb4:	fb06 a000 	mla	r0, r6, r0, sl
 800adb8:	0c02      	lsrs	r2, r0, #16
 800adba:	0c1b      	lsrs	r3, r3, #16
 800adbc:	fb06 2303 	mla	r3, r6, r3, r2
 800adc0:	f8de 2000 	ldr.w	r2, [lr]
 800adc4:	b280      	uxth	r0, r0
 800adc6:	b292      	uxth	r2, r2
 800adc8:	1a12      	subs	r2, r2, r0
 800adca:	445a      	add	r2, fp
 800adcc:	f8de 0000 	ldr.w	r0, [lr]
 800add0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800add4:	b29b      	uxth	r3, r3
 800add6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800adda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800adde:	b292      	uxth	r2, r2
 800ade0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ade4:	45e1      	cmp	r9, ip
 800ade6:	f84e 2b04 	str.w	r2, [lr], #4
 800adea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800adee:	d2de      	bcs.n	800adae <quorem+0x42>
 800adf0:	9b00      	ldr	r3, [sp, #0]
 800adf2:	58eb      	ldr	r3, [r5, r3]
 800adf4:	b92b      	cbnz	r3, 800ae02 <quorem+0x96>
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	3b04      	subs	r3, #4
 800adfa:	429d      	cmp	r5, r3
 800adfc:	461a      	mov	r2, r3
 800adfe:	d32f      	bcc.n	800ae60 <quorem+0xf4>
 800ae00:	613c      	str	r4, [r7, #16]
 800ae02:	4638      	mov	r0, r7
 800ae04:	f001 f9c4 	bl	800c190 <__mcmp>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	db25      	blt.n	800ae58 <quorem+0xec>
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	2000      	movs	r0, #0
 800ae10:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae14:	f8d1 c000 	ldr.w	ip, [r1]
 800ae18:	fa1f fe82 	uxth.w	lr, r2
 800ae1c:	fa1f f38c 	uxth.w	r3, ip
 800ae20:	eba3 030e 	sub.w	r3, r3, lr
 800ae24:	4403      	add	r3, r0
 800ae26:	0c12      	lsrs	r2, r2, #16
 800ae28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ae2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae36:	45c1      	cmp	r9, r8
 800ae38:	f841 3b04 	str.w	r3, [r1], #4
 800ae3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae40:	d2e6      	bcs.n	800ae10 <quorem+0xa4>
 800ae42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae4a:	b922      	cbnz	r2, 800ae56 <quorem+0xea>
 800ae4c:	3b04      	subs	r3, #4
 800ae4e:	429d      	cmp	r5, r3
 800ae50:	461a      	mov	r2, r3
 800ae52:	d30b      	bcc.n	800ae6c <quorem+0x100>
 800ae54:	613c      	str	r4, [r7, #16]
 800ae56:	3601      	adds	r6, #1
 800ae58:	4630      	mov	r0, r6
 800ae5a:	b003      	add	sp, #12
 800ae5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae60:	6812      	ldr	r2, [r2, #0]
 800ae62:	3b04      	subs	r3, #4
 800ae64:	2a00      	cmp	r2, #0
 800ae66:	d1cb      	bne.n	800ae00 <quorem+0x94>
 800ae68:	3c01      	subs	r4, #1
 800ae6a:	e7c6      	b.n	800adfa <quorem+0x8e>
 800ae6c:	6812      	ldr	r2, [r2, #0]
 800ae6e:	3b04      	subs	r3, #4
 800ae70:	2a00      	cmp	r2, #0
 800ae72:	d1ef      	bne.n	800ae54 <quorem+0xe8>
 800ae74:	3c01      	subs	r4, #1
 800ae76:	e7ea      	b.n	800ae4e <quorem+0xe2>
 800ae78:	2000      	movs	r0, #0
 800ae7a:	e7ee      	b.n	800ae5a <quorem+0xee>
 800ae7c:	0000      	movs	r0, r0
	...

0800ae80 <_dtoa_r>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	69c7      	ldr	r7, [r0, #28]
 800ae86:	b099      	sub	sp, #100	@ 0x64
 800ae88:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae8c:	ec55 4b10 	vmov	r4, r5, d0
 800ae90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ae92:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae94:	4683      	mov	fp, r0
 800ae96:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae9a:	b97f      	cbnz	r7, 800aebc <_dtoa_r+0x3c>
 800ae9c:	2010      	movs	r0, #16
 800ae9e:	f000 fdfd 	bl	800ba9c <malloc>
 800aea2:	4602      	mov	r2, r0
 800aea4:	f8cb 001c 	str.w	r0, [fp, #28]
 800aea8:	b920      	cbnz	r0, 800aeb4 <_dtoa_r+0x34>
 800aeaa:	4ba7      	ldr	r3, [pc, #668]	@ (800b148 <_dtoa_r+0x2c8>)
 800aeac:	21ef      	movs	r1, #239	@ 0xef
 800aeae:	48a7      	ldr	r0, [pc, #668]	@ (800b14c <_dtoa_r+0x2cc>)
 800aeb0:	f002 fdfe 	bl	800dab0 <__assert_func>
 800aeb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aeb8:	6007      	str	r7, [r0, #0]
 800aeba:	60c7      	str	r7, [r0, #12]
 800aebc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aec0:	6819      	ldr	r1, [r3, #0]
 800aec2:	b159      	cbz	r1, 800aedc <_dtoa_r+0x5c>
 800aec4:	685a      	ldr	r2, [r3, #4]
 800aec6:	604a      	str	r2, [r1, #4]
 800aec8:	2301      	movs	r3, #1
 800aeca:	4093      	lsls	r3, r2
 800aecc:	608b      	str	r3, [r1, #8]
 800aece:	4658      	mov	r0, fp
 800aed0:	f000 feda 	bl	800bc88 <_Bfree>
 800aed4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aed8:	2200      	movs	r2, #0
 800aeda:	601a      	str	r2, [r3, #0]
 800aedc:	1e2b      	subs	r3, r5, #0
 800aede:	bfb9      	ittee	lt
 800aee0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aee4:	9303      	strlt	r3, [sp, #12]
 800aee6:	2300      	movge	r3, #0
 800aee8:	6033      	strge	r3, [r6, #0]
 800aeea:	9f03      	ldr	r7, [sp, #12]
 800aeec:	4b98      	ldr	r3, [pc, #608]	@ (800b150 <_dtoa_r+0x2d0>)
 800aeee:	bfbc      	itt	lt
 800aef0:	2201      	movlt	r2, #1
 800aef2:	6032      	strlt	r2, [r6, #0]
 800aef4:	43bb      	bics	r3, r7
 800aef6:	d112      	bne.n	800af1e <_dtoa_r+0x9e>
 800aef8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aefa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aefe:	6013      	str	r3, [r2, #0]
 800af00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800af04:	4323      	orrs	r3, r4
 800af06:	f000 854d 	beq.w	800b9a4 <_dtoa_r+0xb24>
 800af0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b164 <_dtoa_r+0x2e4>
 800af10:	2b00      	cmp	r3, #0
 800af12:	f000 854f 	beq.w	800b9b4 <_dtoa_r+0xb34>
 800af16:	f10a 0303 	add.w	r3, sl, #3
 800af1a:	f000 bd49 	b.w	800b9b0 <_dtoa_r+0xb30>
 800af1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af22:	2200      	movs	r2, #0
 800af24:	ec51 0b17 	vmov	r0, r1, d7
 800af28:	2300      	movs	r3, #0
 800af2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800af2e:	f7f5 fdcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800af32:	4680      	mov	r8, r0
 800af34:	b158      	cbz	r0, 800af4e <_dtoa_r+0xce>
 800af36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800af38:	2301      	movs	r3, #1
 800af3a:	6013      	str	r3, [r2, #0]
 800af3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af3e:	b113      	cbz	r3, 800af46 <_dtoa_r+0xc6>
 800af40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800af42:	4b84      	ldr	r3, [pc, #528]	@ (800b154 <_dtoa_r+0x2d4>)
 800af44:	6013      	str	r3, [r2, #0]
 800af46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b168 <_dtoa_r+0x2e8>
 800af4a:	f000 bd33 	b.w	800b9b4 <_dtoa_r+0xb34>
 800af4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800af52:	aa16      	add	r2, sp, #88	@ 0x58
 800af54:	a917      	add	r1, sp, #92	@ 0x5c
 800af56:	4658      	mov	r0, fp
 800af58:	f001 fa3a 	bl	800c3d0 <__d2b>
 800af5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800af60:	4681      	mov	r9, r0
 800af62:	2e00      	cmp	r6, #0
 800af64:	d077      	beq.n	800b056 <_dtoa_r+0x1d6>
 800af66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800af6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af80:	4619      	mov	r1, r3
 800af82:	2200      	movs	r2, #0
 800af84:	4b74      	ldr	r3, [pc, #464]	@ (800b158 <_dtoa_r+0x2d8>)
 800af86:	f7f5 f97f 	bl	8000288 <__aeabi_dsub>
 800af8a:	a369      	add	r3, pc, #420	@ (adr r3, 800b130 <_dtoa_r+0x2b0>)
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	f7f5 fb32 	bl	80005f8 <__aeabi_dmul>
 800af94:	a368      	add	r3, pc, #416	@ (adr r3, 800b138 <_dtoa_r+0x2b8>)
 800af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9a:	f7f5 f977 	bl	800028c <__adddf3>
 800af9e:	4604      	mov	r4, r0
 800afa0:	4630      	mov	r0, r6
 800afa2:	460d      	mov	r5, r1
 800afa4:	f7f5 fabe 	bl	8000524 <__aeabi_i2d>
 800afa8:	a365      	add	r3, pc, #404	@ (adr r3, 800b140 <_dtoa_r+0x2c0>)
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	f7f5 fb23 	bl	80005f8 <__aeabi_dmul>
 800afb2:	4602      	mov	r2, r0
 800afb4:	460b      	mov	r3, r1
 800afb6:	4620      	mov	r0, r4
 800afb8:	4629      	mov	r1, r5
 800afba:	f7f5 f967 	bl	800028c <__adddf3>
 800afbe:	4604      	mov	r4, r0
 800afc0:	460d      	mov	r5, r1
 800afc2:	f7f5 fdc9 	bl	8000b58 <__aeabi_d2iz>
 800afc6:	2200      	movs	r2, #0
 800afc8:	4607      	mov	r7, r0
 800afca:	2300      	movs	r3, #0
 800afcc:	4620      	mov	r0, r4
 800afce:	4629      	mov	r1, r5
 800afd0:	f7f5 fd84 	bl	8000adc <__aeabi_dcmplt>
 800afd4:	b140      	cbz	r0, 800afe8 <_dtoa_r+0x168>
 800afd6:	4638      	mov	r0, r7
 800afd8:	f7f5 faa4 	bl	8000524 <__aeabi_i2d>
 800afdc:	4622      	mov	r2, r4
 800afde:	462b      	mov	r3, r5
 800afe0:	f7f5 fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 800afe4:	b900      	cbnz	r0, 800afe8 <_dtoa_r+0x168>
 800afe6:	3f01      	subs	r7, #1
 800afe8:	2f16      	cmp	r7, #22
 800afea:	d851      	bhi.n	800b090 <_dtoa_r+0x210>
 800afec:	4b5b      	ldr	r3, [pc, #364]	@ (800b15c <_dtoa_r+0x2dc>)
 800afee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800affa:	f7f5 fd6f 	bl	8000adc <__aeabi_dcmplt>
 800affe:	2800      	cmp	r0, #0
 800b000:	d048      	beq.n	800b094 <_dtoa_r+0x214>
 800b002:	3f01      	subs	r7, #1
 800b004:	2300      	movs	r3, #0
 800b006:	9312      	str	r3, [sp, #72]	@ 0x48
 800b008:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b00a:	1b9b      	subs	r3, r3, r6
 800b00c:	1e5a      	subs	r2, r3, #1
 800b00e:	bf44      	itt	mi
 800b010:	f1c3 0801 	rsbmi	r8, r3, #1
 800b014:	2300      	movmi	r3, #0
 800b016:	9208      	str	r2, [sp, #32]
 800b018:	bf54      	ite	pl
 800b01a:	f04f 0800 	movpl.w	r8, #0
 800b01e:	9308      	strmi	r3, [sp, #32]
 800b020:	2f00      	cmp	r7, #0
 800b022:	db39      	blt.n	800b098 <_dtoa_r+0x218>
 800b024:	9b08      	ldr	r3, [sp, #32]
 800b026:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b028:	443b      	add	r3, r7
 800b02a:	9308      	str	r3, [sp, #32]
 800b02c:	2300      	movs	r3, #0
 800b02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b032:	2b09      	cmp	r3, #9
 800b034:	d864      	bhi.n	800b100 <_dtoa_r+0x280>
 800b036:	2b05      	cmp	r3, #5
 800b038:	bfc4      	itt	gt
 800b03a:	3b04      	subgt	r3, #4
 800b03c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b040:	f1a3 0302 	sub.w	r3, r3, #2
 800b044:	bfcc      	ite	gt
 800b046:	2400      	movgt	r4, #0
 800b048:	2401      	movle	r4, #1
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d863      	bhi.n	800b116 <_dtoa_r+0x296>
 800b04e:	e8df f003 	tbb	[pc, r3]
 800b052:	372a      	.short	0x372a
 800b054:	5535      	.short	0x5535
 800b056:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b05a:	441e      	add	r6, r3
 800b05c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b060:	2b20      	cmp	r3, #32
 800b062:	bfc1      	itttt	gt
 800b064:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b068:	409f      	lslgt	r7, r3
 800b06a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b06e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b072:	bfd6      	itet	le
 800b074:	f1c3 0320 	rsble	r3, r3, #32
 800b078:	ea47 0003 	orrgt.w	r0, r7, r3
 800b07c:	fa04 f003 	lslle.w	r0, r4, r3
 800b080:	f7f5 fa40 	bl	8000504 <__aeabi_ui2d>
 800b084:	2201      	movs	r2, #1
 800b086:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b08a:	3e01      	subs	r6, #1
 800b08c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b08e:	e777      	b.n	800af80 <_dtoa_r+0x100>
 800b090:	2301      	movs	r3, #1
 800b092:	e7b8      	b.n	800b006 <_dtoa_r+0x186>
 800b094:	9012      	str	r0, [sp, #72]	@ 0x48
 800b096:	e7b7      	b.n	800b008 <_dtoa_r+0x188>
 800b098:	427b      	negs	r3, r7
 800b09a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b09c:	2300      	movs	r3, #0
 800b09e:	eba8 0807 	sub.w	r8, r8, r7
 800b0a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b0a4:	e7c4      	b.n	800b030 <_dtoa_r+0x1b0>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	dc35      	bgt.n	800b11c <_dtoa_r+0x29c>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	9307      	str	r3, [sp, #28]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0ba:	e00b      	b.n	800b0d4 <_dtoa_r+0x254>
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e7f3      	b.n	800b0a8 <_dtoa_r+0x228>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0c6:	18fb      	adds	r3, r7, r3
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	9307      	str	r3, [sp, #28]
 800b0d0:	bfb8      	it	lt
 800b0d2:	2301      	movlt	r3, #1
 800b0d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b0d8:	2100      	movs	r1, #0
 800b0da:	2204      	movs	r2, #4
 800b0dc:	f102 0514 	add.w	r5, r2, #20
 800b0e0:	429d      	cmp	r5, r3
 800b0e2:	d91f      	bls.n	800b124 <_dtoa_r+0x2a4>
 800b0e4:	6041      	str	r1, [r0, #4]
 800b0e6:	4658      	mov	r0, fp
 800b0e8:	f000 fd8e 	bl	800bc08 <_Balloc>
 800b0ec:	4682      	mov	sl, r0
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d13c      	bne.n	800b16c <_dtoa_r+0x2ec>
 800b0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b160 <_dtoa_r+0x2e0>)
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b0fa:	e6d8      	b.n	800aeae <_dtoa_r+0x2e>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e7e0      	b.n	800b0c2 <_dtoa_r+0x242>
 800b100:	2401      	movs	r4, #1
 800b102:	2300      	movs	r3, #0
 800b104:	9309      	str	r3, [sp, #36]	@ 0x24
 800b106:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b108:	f04f 33ff 	mov.w	r3, #4294967295
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	9307      	str	r3, [sp, #28]
 800b110:	2200      	movs	r2, #0
 800b112:	2312      	movs	r3, #18
 800b114:	e7d0      	b.n	800b0b8 <_dtoa_r+0x238>
 800b116:	2301      	movs	r3, #1
 800b118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b11a:	e7f5      	b.n	800b108 <_dtoa_r+0x288>
 800b11c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	9307      	str	r3, [sp, #28]
 800b122:	e7d7      	b.n	800b0d4 <_dtoa_r+0x254>
 800b124:	3101      	adds	r1, #1
 800b126:	0052      	lsls	r2, r2, #1
 800b128:	e7d8      	b.n	800b0dc <_dtoa_r+0x25c>
 800b12a:	bf00      	nop
 800b12c:	f3af 8000 	nop.w
 800b130:	636f4361 	.word	0x636f4361
 800b134:	3fd287a7 	.word	0x3fd287a7
 800b138:	8b60c8b3 	.word	0x8b60c8b3
 800b13c:	3fc68a28 	.word	0x3fc68a28
 800b140:	509f79fb 	.word	0x509f79fb
 800b144:	3fd34413 	.word	0x3fd34413
 800b148:	0802c066 	.word	0x0802c066
 800b14c:	0802c07d 	.word	0x0802c07d
 800b150:	7ff00000 	.word	0x7ff00000
 800b154:	0802c031 	.word	0x0802c031
 800b158:	3ff80000 	.word	0x3ff80000
 800b15c:	0802c178 	.word	0x0802c178
 800b160:	0802c0d5 	.word	0x0802c0d5
 800b164:	0802c062 	.word	0x0802c062
 800b168:	0802c030 	.word	0x0802c030
 800b16c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b170:	6018      	str	r0, [r3, #0]
 800b172:	9b07      	ldr	r3, [sp, #28]
 800b174:	2b0e      	cmp	r3, #14
 800b176:	f200 80a4 	bhi.w	800b2c2 <_dtoa_r+0x442>
 800b17a:	2c00      	cmp	r4, #0
 800b17c:	f000 80a1 	beq.w	800b2c2 <_dtoa_r+0x442>
 800b180:	2f00      	cmp	r7, #0
 800b182:	dd33      	ble.n	800b1ec <_dtoa_r+0x36c>
 800b184:	4bad      	ldr	r3, [pc, #692]	@ (800b43c <_dtoa_r+0x5bc>)
 800b186:	f007 020f 	and.w	r2, r7, #15
 800b18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b18e:	ed93 7b00 	vldr	d7, [r3]
 800b192:	05f8      	lsls	r0, r7, #23
 800b194:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b198:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b19c:	d516      	bpl.n	800b1cc <_dtoa_r+0x34c>
 800b19e:	4ba8      	ldr	r3, [pc, #672]	@ (800b440 <_dtoa_r+0x5c0>)
 800b1a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1a8:	f7f5 fb50 	bl	800084c <__aeabi_ddiv>
 800b1ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1b0:	f004 040f 	and.w	r4, r4, #15
 800b1b4:	2603      	movs	r6, #3
 800b1b6:	4da2      	ldr	r5, [pc, #648]	@ (800b440 <_dtoa_r+0x5c0>)
 800b1b8:	b954      	cbnz	r4, 800b1d0 <_dtoa_r+0x350>
 800b1ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1c2:	f7f5 fb43 	bl	800084c <__aeabi_ddiv>
 800b1c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1ca:	e028      	b.n	800b21e <_dtoa_r+0x39e>
 800b1cc:	2602      	movs	r6, #2
 800b1ce:	e7f2      	b.n	800b1b6 <_dtoa_r+0x336>
 800b1d0:	07e1      	lsls	r1, r4, #31
 800b1d2:	d508      	bpl.n	800b1e6 <_dtoa_r+0x366>
 800b1d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1dc:	f7f5 fa0c 	bl	80005f8 <__aeabi_dmul>
 800b1e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1e4:	3601      	adds	r6, #1
 800b1e6:	1064      	asrs	r4, r4, #1
 800b1e8:	3508      	adds	r5, #8
 800b1ea:	e7e5      	b.n	800b1b8 <_dtoa_r+0x338>
 800b1ec:	f000 80d2 	beq.w	800b394 <_dtoa_r+0x514>
 800b1f0:	427c      	negs	r4, r7
 800b1f2:	4b92      	ldr	r3, [pc, #584]	@ (800b43c <_dtoa_r+0x5bc>)
 800b1f4:	4d92      	ldr	r5, [pc, #584]	@ (800b440 <_dtoa_r+0x5c0>)
 800b1f6:	f004 020f 	and.w	r2, r4, #15
 800b1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b202:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b206:	f7f5 f9f7 	bl	80005f8 <__aeabi_dmul>
 800b20a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b20e:	1124      	asrs	r4, r4, #4
 800b210:	2300      	movs	r3, #0
 800b212:	2602      	movs	r6, #2
 800b214:	2c00      	cmp	r4, #0
 800b216:	f040 80b2 	bne.w	800b37e <_dtoa_r+0x4fe>
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1d3      	bne.n	800b1c6 <_dtoa_r+0x346>
 800b21e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b220:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 80b7 	beq.w	800b398 <_dtoa_r+0x518>
 800b22a:	4b86      	ldr	r3, [pc, #536]	@ (800b444 <_dtoa_r+0x5c4>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	4620      	mov	r0, r4
 800b230:	4629      	mov	r1, r5
 800b232:	f7f5 fc53 	bl	8000adc <__aeabi_dcmplt>
 800b236:	2800      	cmp	r0, #0
 800b238:	f000 80ae 	beq.w	800b398 <_dtoa_r+0x518>
 800b23c:	9b07      	ldr	r3, [sp, #28]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f000 80aa 	beq.w	800b398 <_dtoa_r+0x518>
 800b244:	9b00      	ldr	r3, [sp, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	dd37      	ble.n	800b2ba <_dtoa_r+0x43a>
 800b24a:	1e7b      	subs	r3, r7, #1
 800b24c:	9304      	str	r3, [sp, #16]
 800b24e:	4620      	mov	r0, r4
 800b250:	4b7d      	ldr	r3, [pc, #500]	@ (800b448 <_dtoa_r+0x5c8>)
 800b252:	2200      	movs	r2, #0
 800b254:	4629      	mov	r1, r5
 800b256:	f7f5 f9cf 	bl	80005f8 <__aeabi_dmul>
 800b25a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b25e:	9c00      	ldr	r4, [sp, #0]
 800b260:	3601      	adds	r6, #1
 800b262:	4630      	mov	r0, r6
 800b264:	f7f5 f95e 	bl	8000524 <__aeabi_i2d>
 800b268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b26c:	f7f5 f9c4 	bl	80005f8 <__aeabi_dmul>
 800b270:	4b76      	ldr	r3, [pc, #472]	@ (800b44c <_dtoa_r+0x5cc>)
 800b272:	2200      	movs	r2, #0
 800b274:	f7f5 f80a 	bl	800028c <__adddf3>
 800b278:	4605      	mov	r5, r0
 800b27a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b27e:	2c00      	cmp	r4, #0
 800b280:	f040 808d 	bne.w	800b39e <_dtoa_r+0x51e>
 800b284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b288:	4b71      	ldr	r3, [pc, #452]	@ (800b450 <_dtoa_r+0x5d0>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	f7f4 fffc 	bl	8000288 <__aeabi_dsub>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b298:	462a      	mov	r2, r5
 800b29a:	4633      	mov	r3, r6
 800b29c:	f7f5 fc3c 	bl	8000b18 <__aeabi_dcmpgt>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	f040 828b 	bne.w	800b7bc <_dtoa_r+0x93c>
 800b2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2aa:	462a      	mov	r2, r5
 800b2ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b2b0:	f7f5 fc14 	bl	8000adc <__aeabi_dcmplt>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	f040 8128 	bne.w	800b50a <_dtoa_r+0x68a>
 800b2ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b2be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b2c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f2c0 815a 	blt.w	800b57e <_dtoa_r+0x6fe>
 800b2ca:	2f0e      	cmp	r7, #14
 800b2cc:	f300 8157 	bgt.w	800b57e <_dtoa_r+0x6fe>
 800b2d0:	4b5a      	ldr	r3, [pc, #360]	@ (800b43c <_dtoa_r+0x5bc>)
 800b2d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2d6:	ed93 7b00 	vldr	d7, [r3]
 800b2da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	ed8d 7b00 	vstr	d7, [sp]
 800b2e2:	da03      	bge.n	800b2ec <_dtoa_r+0x46c>
 800b2e4:	9b07      	ldr	r3, [sp, #28]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f340 8101 	ble.w	800b4ee <_dtoa_r+0x66e>
 800b2ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2f0:	4656      	mov	r6, sl
 800b2f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	f7f5 faa7 	bl	800084c <__aeabi_ddiv>
 800b2fe:	f7f5 fc2b 	bl	8000b58 <__aeabi_d2iz>
 800b302:	4680      	mov	r8, r0
 800b304:	f7f5 f90e 	bl	8000524 <__aeabi_i2d>
 800b308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b30c:	f7f5 f974 	bl	80005f8 <__aeabi_dmul>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	4620      	mov	r0, r4
 800b316:	4629      	mov	r1, r5
 800b318:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b31c:	f7f4 ffb4 	bl	8000288 <__aeabi_dsub>
 800b320:	f806 4b01 	strb.w	r4, [r6], #1
 800b324:	9d07      	ldr	r5, [sp, #28]
 800b326:	eba6 040a 	sub.w	r4, r6, sl
 800b32a:	42a5      	cmp	r5, r4
 800b32c:	4602      	mov	r2, r0
 800b32e:	460b      	mov	r3, r1
 800b330:	f040 8117 	bne.w	800b562 <_dtoa_r+0x6e2>
 800b334:	f7f4 ffaa 	bl	800028c <__adddf3>
 800b338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b33c:	4604      	mov	r4, r0
 800b33e:	460d      	mov	r5, r1
 800b340:	f7f5 fbea 	bl	8000b18 <__aeabi_dcmpgt>
 800b344:	2800      	cmp	r0, #0
 800b346:	f040 80f9 	bne.w	800b53c <_dtoa_r+0x6bc>
 800b34a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b34e:	4620      	mov	r0, r4
 800b350:	4629      	mov	r1, r5
 800b352:	f7f5 fbb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b356:	b118      	cbz	r0, 800b360 <_dtoa_r+0x4e0>
 800b358:	f018 0f01 	tst.w	r8, #1
 800b35c:	f040 80ee 	bne.w	800b53c <_dtoa_r+0x6bc>
 800b360:	4649      	mov	r1, r9
 800b362:	4658      	mov	r0, fp
 800b364:	f000 fc90 	bl	800bc88 <_Bfree>
 800b368:	2300      	movs	r3, #0
 800b36a:	7033      	strb	r3, [r6, #0]
 800b36c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b36e:	3701      	adds	r7, #1
 800b370:	601f      	str	r7, [r3, #0]
 800b372:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b374:	2b00      	cmp	r3, #0
 800b376:	f000 831d 	beq.w	800b9b4 <_dtoa_r+0xb34>
 800b37a:	601e      	str	r6, [r3, #0]
 800b37c:	e31a      	b.n	800b9b4 <_dtoa_r+0xb34>
 800b37e:	07e2      	lsls	r2, r4, #31
 800b380:	d505      	bpl.n	800b38e <_dtoa_r+0x50e>
 800b382:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b386:	f7f5 f937 	bl	80005f8 <__aeabi_dmul>
 800b38a:	3601      	adds	r6, #1
 800b38c:	2301      	movs	r3, #1
 800b38e:	1064      	asrs	r4, r4, #1
 800b390:	3508      	adds	r5, #8
 800b392:	e73f      	b.n	800b214 <_dtoa_r+0x394>
 800b394:	2602      	movs	r6, #2
 800b396:	e742      	b.n	800b21e <_dtoa_r+0x39e>
 800b398:	9c07      	ldr	r4, [sp, #28]
 800b39a:	9704      	str	r7, [sp, #16]
 800b39c:	e761      	b.n	800b262 <_dtoa_r+0x3e2>
 800b39e:	4b27      	ldr	r3, [pc, #156]	@ (800b43c <_dtoa_r+0x5bc>)
 800b3a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b3a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b3a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3aa:	4454      	add	r4, sl
 800b3ac:	2900      	cmp	r1, #0
 800b3ae:	d053      	beq.n	800b458 <_dtoa_r+0x5d8>
 800b3b0:	4928      	ldr	r1, [pc, #160]	@ (800b454 <_dtoa_r+0x5d4>)
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	f7f5 fa4a 	bl	800084c <__aeabi_ddiv>
 800b3b8:	4633      	mov	r3, r6
 800b3ba:	462a      	mov	r2, r5
 800b3bc:	f7f4 ff64 	bl	8000288 <__aeabi_dsub>
 800b3c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3c4:	4656      	mov	r6, sl
 800b3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ca:	f7f5 fbc5 	bl	8000b58 <__aeabi_d2iz>
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	f7f5 f8a8 	bl	8000524 <__aeabi_i2d>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3dc:	f7f4 ff54 	bl	8000288 <__aeabi_dsub>
 800b3e0:	3530      	adds	r5, #48	@ 0x30
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3ea:	f806 5b01 	strb.w	r5, [r6], #1
 800b3ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3f2:	f7f5 fb73 	bl	8000adc <__aeabi_dcmplt>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d171      	bne.n	800b4de <_dtoa_r+0x65e>
 800b3fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3fe:	4911      	ldr	r1, [pc, #68]	@ (800b444 <_dtoa_r+0x5c4>)
 800b400:	2000      	movs	r0, #0
 800b402:	f7f4 ff41 	bl	8000288 <__aeabi_dsub>
 800b406:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b40a:	f7f5 fb67 	bl	8000adc <__aeabi_dcmplt>
 800b40e:	2800      	cmp	r0, #0
 800b410:	f040 8095 	bne.w	800b53e <_dtoa_r+0x6be>
 800b414:	42a6      	cmp	r6, r4
 800b416:	f43f af50 	beq.w	800b2ba <_dtoa_r+0x43a>
 800b41a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b41e:	4b0a      	ldr	r3, [pc, #40]	@ (800b448 <_dtoa_r+0x5c8>)
 800b420:	2200      	movs	r2, #0
 800b422:	f7f5 f8e9 	bl	80005f8 <__aeabi_dmul>
 800b426:	4b08      	ldr	r3, [pc, #32]	@ (800b448 <_dtoa_r+0x5c8>)
 800b428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b42c:	2200      	movs	r2, #0
 800b42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b432:	f7f5 f8e1 	bl	80005f8 <__aeabi_dmul>
 800b436:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b43a:	e7c4      	b.n	800b3c6 <_dtoa_r+0x546>
 800b43c:	0802c178 	.word	0x0802c178
 800b440:	0802c150 	.word	0x0802c150
 800b444:	3ff00000 	.word	0x3ff00000
 800b448:	40240000 	.word	0x40240000
 800b44c:	401c0000 	.word	0x401c0000
 800b450:	40140000 	.word	0x40140000
 800b454:	3fe00000 	.word	0x3fe00000
 800b458:	4631      	mov	r1, r6
 800b45a:	4628      	mov	r0, r5
 800b45c:	f7f5 f8cc 	bl	80005f8 <__aeabi_dmul>
 800b460:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b464:	9415      	str	r4, [sp, #84]	@ 0x54
 800b466:	4656      	mov	r6, sl
 800b468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b46c:	f7f5 fb74 	bl	8000b58 <__aeabi_d2iz>
 800b470:	4605      	mov	r5, r0
 800b472:	f7f5 f857 	bl	8000524 <__aeabi_i2d>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b47e:	f7f4 ff03 	bl	8000288 <__aeabi_dsub>
 800b482:	3530      	adds	r5, #48	@ 0x30
 800b484:	f806 5b01 	strb.w	r5, [r6], #1
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	42a6      	cmp	r6, r4
 800b48e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b492:	f04f 0200 	mov.w	r2, #0
 800b496:	d124      	bne.n	800b4e2 <_dtoa_r+0x662>
 800b498:	4bac      	ldr	r3, [pc, #688]	@ (800b74c <_dtoa_r+0x8cc>)
 800b49a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b49e:	f7f4 fef5 	bl	800028c <__adddf3>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4aa:	f7f5 fb35 	bl	8000b18 <__aeabi_dcmpgt>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d145      	bne.n	800b53e <_dtoa_r+0x6be>
 800b4b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4b6:	49a5      	ldr	r1, [pc, #660]	@ (800b74c <_dtoa_r+0x8cc>)
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	f7f4 fee5 	bl	8000288 <__aeabi_dsub>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4c6:	f7f5 fb09 	bl	8000adc <__aeabi_dcmplt>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	f43f aef5 	beq.w	800b2ba <_dtoa_r+0x43a>
 800b4d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b4d2:	1e73      	subs	r3, r6, #1
 800b4d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4da:	2b30      	cmp	r3, #48	@ 0x30
 800b4dc:	d0f8      	beq.n	800b4d0 <_dtoa_r+0x650>
 800b4de:	9f04      	ldr	r7, [sp, #16]
 800b4e0:	e73e      	b.n	800b360 <_dtoa_r+0x4e0>
 800b4e2:	4b9b      	ldr	r3, [pc, #620]	@ (800b750 <_dtoa_r+0x8d0>)
 800b4e4:	f7f5 f888 	bl	80005f8 <__aeabi_dmul>
 800b4e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4ec:	e7bc      	b.n	800b468 <_dtoa_r+0x5e8>
 800b4ee:	d10c      	bne.n	800b50a <_dtoa_r+0x68a>
 800b4f0:	4b98      	ldr	r3, [pc, #608]	@ (800b754 <_dtoa_r+0x8d4>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4f8:	f7f5 f87e 	bl	80005f8 <__aeabi_dmul>
 800b4fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b500:	f7f5 fb00 	bl	8000b04 <__aeabi_dcmpge>
 800b504:	2800      	cmp	r0, #0
 800b506:	f000 8157 	beq.w	800b7b8 <_dtoa_r+0x938>
 800b50a:	2400      	movs	r4, #0
 800b50c:	4625      	mov	r5, r4
 800b50e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b510:	43db      	mvns	r3, r3
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	4656      	mov	r6, sl
 800b516:	2700      	movs	r7, #0
 800b518:	4621      	mov	r1, r4
 800b51a:	4658      	mov	r0, fp
 800b51c:	f000 fbb4 	bl	800bc88 <_Bfree>
 800b520:	2d00      	cmp	r5, #0
 800b522:	d0dc      	beq.n	800b4de <_dtoa_r+0x65e>
 800b524:	b12f      	cbz	r7, 800b532 <_dtoa_r+0x6b2>
 800b526:	42af      	cmp	r7, r5
 800b528:	d003      	beq.n	800b532 <_dtoa_r+0x6b2>
 800b52a:	4639      	mov	r1, r7
 800b52c:	4658      	mov	r0, fp
 800b52e:	f000 fbab 	bl	800bc88 <_Bfree>
 800b532:	4629      	mov	r1, r5
 800b534:	4658      	mov	r0, fp
 800b536:	f000 fba7 	bl	800bc88 <_Bfree>
 800b53a:	e7d0      	b.n	800b4de <_dtoa_r+0x65e>
 800b53c:	9704      	str	r7, [sp, #16]
 800b53e:	4633      	mov	r3, r6
 800b540:	461e      	mov	r6, r3
 800b542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b546:	2a39      	cmp	r2, #57	@ 0x39
 800b548:	d107      	bne.n	800b55a <_dtoa_r+0x6da>
 800b54a:	459a      	cmp	sl, r3
 800b54c:	d1f8      	bne.n	800b540 <_dtoa_r+0x6c0>
 800b54e:	9a04      	ldr	r2, [sp, #16]
 800b550:	3201      	adds	r2, #1
 800b552:	9204      	str	r2, [sp, #16]
 800b554:	2230      	movs	r2, #48	@ 0x30
 800b556:	f88a 2000 	strb.w	r2, [sl]
 800b55a:	781a      	ldrb	r2, [r3, #0]
 800b55c:	3201      	adds	r2, #1
 800b55e:	701a      	strb	r2, [r3, #0]
 800b560:	e7bd      	b.n	800b4de <_dtoa_r+0x65e>
 800b562:	4b7b      	ldr	r3, [pc, #492]	@ (800b750 <_dtoa_r+0x8d0>)
 800b564:	2200      	movs	r2, #0
 800b566:	f7f5 f847 	bl	80005f8 <__aeabi_dmul>
 800b56a:	2200      	movs	r2, #0
 800b56c:	2300      	movs	r3, #0
 800b56e:	4604      	mov	r4, r0
 800b570:	460d      	mov	r5, r1
 800b572:	f7f5 faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b576:	2800      	cmp	r0, #0
 800b578:	f43f aebb 	beq.w	800b2f2 <_dtoa_r+0x472>
 800b57c:	e6f0      	b.n	800b360 <_dtoa_r+0x4e0>
 800b57e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b580:	2a00      	cmp	r2, #0
 800b582:	f000 80db 	beq.w	800b73c <_dtoa_r+0x8bc>
 800b586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b588:	2a01      	cmp	r2, #1
 800b58a:	f300 80bf 	bgt.w	800b70c <_dtoa_r+0x88c>
 800b58e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b590:	2a00      	cmp	r2, #0
 800b592:	f000 80b7 	beq.w	800b704 <_dtoa_r+0x884>
 800b596:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b59a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b59c:	4646      	mov	r6, r8
 800b59e:	9a08      	ldr	r2, [sp, #32]
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	441a      	add	r2, r3
 800b5a4:	4658      	mov	r0, fp
 800b5a6:	4498      	add	r8, r3
 800b5a8:	9208      	str	r2, [sp, #32]
 800b5aa:	f000 fc6b 	bl	800be84 <__i2b>
 800b5ae:	4605      	mov	r5, r0
 800b5b0:	b15e      	cbz	r6, 800b5ca <_dtoa_r+0x74a>
 800b5b2:	9b08      	ldr	r3, [sp, #32]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	dd08      	ble.n	800b5ca <_dtoa_r+0x74a>
 800b5b8:	42b3      	cmp	r3, r6
 800b5ba:	9a08      	ldr	r2, [sp, #32]
 800b5bc:	bfa8      	it	ge
 800b5be:	4633      	movge	r3, r6
 800b5c0:	eba8 0803 	sub.w	r8, r8, r3
 800b5c4:	1af6      	subs	r6, r6, r3
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	9308      	str	r3, [sp, #32]
 800b5ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5cc:	b1f3      	cbz	r3, 800b60c <_dtoa_r+0x78c>
 800b5ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f000 80b7 	beq.w	800b744 <_dtoa_r+0x8c4>
 800b5d6:	b18c      	cbz	r4, 800b5fc <_dtoa_r+0x77c>
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4622      	mov	r2, r4
 800b5dc:	4658      	mov	r0, fp
 800b5de:	f000 fd11 	bl	800c004 <__pow5mult>
 800b5e2:	464a      	mov	r2, r9
 800b5e4:	4601      	mov	r1, r0
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	4658      	mov	r0, fp
 800b5ea:	f000 fc61 	bl	800beb0 <__multiply>
 800b5ee:	4649      	mov	r1, r9
 800b5f0:	9004      	str	r0, [sp, #16]
 800b5f2:	4658      	mov	r0, fp
 800b5f4:	f000 fb48 	bl	800bc88 <_Bfree>
 800b5f8:	9b04      	ldr	r3, [sp, #16]
 800b5fa:	4699      	mov	r9, r3
 800b5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5fe:	1b1a      	subs	r2, r3, r4
 800b600:	d004      	beq.n	800b60c <_dtoa_r+0x78c>
 800b602:	4649      	mov	r1, r9
 800b604:	4658      	mov	r0, fp
 800b606:	f000 fcfd 	bl	800c004 <__pow5mult>
 800b60a:	4681      	mov	r9, r0
 800b60c:	2101      	movs	r1, #1
 800b60e:	4658      	mov	r0, fp
 800b610:	f000 fc38 	bl	800be84 <__i2b>
 800b614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b616:	4604      	mov	r4, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 81cf 	beq.w	800b9bc <_dtoa_r+0xb3c>
 800b61e:	461a      	mov	r2, r3
 800b620:	4601      	mov	r1, r0
 800b622:	4658      	mov	r0, fp
 800b624:	f000 fcee 	bl	800c004 <__pow5mult>
 800b628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	4604      	mov	r4, r0
 800b62e:	f300 8095 	bgt.w	800b75c <_dtoa_r+0x8dc>
 800b632:	9b02      	ldr	r3, [sp, #8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	f040 8087 	bne.w	800b748 <_dtoa_r+0x8c8>
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b640:	2b00      	cmp	r3, #0
 800b642:	f040 8089 	bne.w	800b758 <_dtoa_r+0x8d8>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b64c:	0d1b      	lsrs	r3, r3, #20
 800b64e:	051b      	lsls	r3, r3, #20
 800b650:	b12b      	cbz	r3, 800b65e <_dtoa_r+0x7de>
 800b652:	9b08      	ldr	r3, [sp, #32]
 800b654:	3301      	adds	r3, #1
 800b656:	9308      	str	r3, [sp, #32]
 800b658:	f108 0801 	add.w	r8, r8, #1
 800b65c:	2301      	movs	r3, #1
 800b65e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 81b0 	beq.w	800b9c8 <_dtoa_r+0xb48>
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b66e:	6918      	ldr	r0, [r3, #16]
 800b670:	f000 fbbc 	bl	800bdec <__hi0bits>
 800b674:	f1c0 0020 	rsb	r0, r0, #32
 800b678:	9b08      	ldr	r3, [sp, #32]
 800b67a:	4418      	add	r0, r3
 800b67c:	f010 001f 	ands.w	r0, r0, #31
 800b680:	d077      	beq.n	800b772 <_dtoa_r+0x8f2>
 800b682:	f1c0 0320 	rsb	r3, r0, #32
 800b686:	2b04      	cmp	r3, #4
 800b688:	dd6b      	ble.n	800b762 <_dtoa_r+0x8e2>
 800b68a:	9b08      	ldr	r3, [sp, #32]
 800b68c:	f1c0 001c 	rsb	r0, r0, #28
 800b690:	4403      	add	r3, r0
 800b692:	4480      	add	r8, r0
 800b694:	4406      	add	r6, r0
 800b696:	9308      	str	r3, [sp, #32]
 800b698:	f1b8 0f00 	cmp.w	r8, #0
 800b69c:	dd05      	ble.n	800b6aa <_dtoa_r+0x82a>
 800b69e:	4649      	mov	r1, r9
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	4658      	mov	r0, fp
 800b6a4:	f000 fd08 	bl	800c0b8 <__lshift>
 800b6a8:	4681      	mov	r9, r0
 800b6aa:	9b08      	ldr	r3, [sp, #32]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	dd05      	ble.n	800b6bc <_dtoa_r+0x83c>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	4658      	mov	r0, fp
 800b6b6:	f000 fcff 	bl	800c0b8 <__lshift>
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d059      	beq.n	800b776 <_dtoa_r+0x8f6>
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	4648      	mov	r0, r9
 800b6c6:	f000 fd63 	bl	800c190 <__mcmp>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	da53      	bge.n	800b776 <_dtoa_r+0x8f6>
 800b6ce:	1e7b      	subs	r3, r7, #1
 800b6d0:	9304      	str	r3, [sp, #16]
 800b6d2:	4649      	mov	r1, r9
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	220a      	movs	r2, #10
 800b6d8:	4658      	mov	r0, fp
 800b6da:	f000 faf7 	bl	800bccc <__multadd>
 800b6de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6e0:	4681      	mov	r9, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 8172 	beq.w	800b9cc <_dtoa_r+0xb4c>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4629      	mov	r1, r5
 800b6ec:	220a      	movs	r2, #10
 800b6ee:	4658      	mov	r0, fp
 800b6f0:	f000 faec 	bl	800bccc <__multadd>
 800b6f4:	9b00      	ldr	r3, [sp, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	4605      	mov	r5, r0
 800b6fa:	dc67      	bgt.n	800b7cc <_dtoa_r+0x94c>
 800b6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	dc41      	bgt.n	800b786 <_dtoa_r+0x906>
 800b702:	e063      	b.n	800b7cc <_dtoa_r+0x94c>
 800b704:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b706:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b70a:	e746      	b.n	800b59a <_dtoa_r+0x71a>
 800b70c:	9b07      	ldr	r3, [sp, #28]
 800b70e:	1e5c      	subs	r4, r3, #1
 800b710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b712:	42a3      	cmp	r3, r4
 800b714:	bfbf      	itttt	lt
 800b716:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b718:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b71a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b71c:	1ae3      	sublt	r3, r4, r3
 800b71e:	bfb4      	ite	lt
 800b720:	18d2      	addlt	r2, r2, r3
 800b722:	1b1c      	subge	r4, r3, r4
 800b724:	9b07      	ldr	r3, [sp, #28]
 800b726:	bfbc      	itt	lt
 800b728:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b72a:	2400      	movlt	r4, #0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	bfb5      	itete	lt
 800b730:	eba8 0603 	sublt.w	r6, r8, r3
 800b734:	9b07      	ldrge	r3, [sp, #28]
 800b736:	2300      	movlt	r3, #0
 800b738:	4646      	movge	r6, r8
 800b73a:	e730      	b.n	800b59e <_dtoa_r+0x71e>
 800b73c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b73e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b740:	4646      	mov	r6, r8
 800b742:	e735      	b.n	800b5b0 <_dtoa_r+0x730>
 800b744:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b746:	e75c      	b.n	800b602 <_dtoa_r+0x782>
 800b748:	2300      	movs	r3, #0
 800b74a:	e788      	b.n	800b65e <_dtoa_r+0x7de>
 800b74c:	3fe00000 	.word	0x3fe00000
 800b750:	40240000 	.word	0x40240000
 800b754:	40140000 	.word	0x40140000
 800b758:	9b02      	ldr	r3, [sp, #8]
 800b75a:	e780      	b.n	800b65e <_dtoa_r+0x7de>
 800b75c:	2300      	movs	r3, #0
 800b75e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b760:	e782      	b.n	800b668 <_dtoa_r+0x7e8>
 800b762:	d099      	beq.n	800b698 <_dtoa_r+0x818>
 800b764:	9a08      	ldr	r2, [sp, #32]
 800b766:	331c      	adds	r3, #28
 800b768:	441a      	add	r2, r3
 800b76a:	4498      	add	r8, r3
 800b76c:	441e      	add	r6, r3
 800b76e:	9208      	str	r2, [sp, #32]
 800b770:	e792      	b.n	800b698 <_dtoa_r+0x818>
 800b772:	4603      	mov	r3, r0
 800b774:	e7f6      	b.n	800b764 <_dtoa_r+0x8e4>
 800b776:	9b07      	ldr	r3, [sp, #28]
 800b778:	9704      	str	r7, [sp, #16]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	dc20      	bgt.n	800b7c0 <_dtoa_r+0x940>
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b782:	2b02      	cmp	r3, #2
 800b784:	dd1e      	ble.n	800b7c4 <_dtoa_r+0x944>
 800b786:	9b00      	ldr	r3, [sp, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f47f aec0 	bne.w	800b50e <_dtoa_r+0x68e>
 800b78e:	4621      	mov	r1, r4
 800b790:	2205      	movs	r2, #5
 800b792:	4658      	mov	r0, fp
 800b794:	f000 fa9a 	bl	800bccc <__multadd>
 800b798:	4601      	mov	r1, r0
 800b79a:	4604      	mov	r4, r0
 800b79c:	4648      	mov	r0, r9
 800b79e:	f000 fcf7 	bl	800c190 <__mcmp>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	f77f aeb3 	ble.w	800b50e <_dtoa_r+0x68e>
 800b7a8:	4656      	mov	r6, sl
 800b7aa:	2331      	movs	r3, #49	@ 0x31
 800b7ac:	f806 3b01 	strb.w	r3, [r6], #1
 800b7b0:	9b04      	ldr	r3, [sp, #16]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	e6ae      	b.n	800b516 <_dtoa_r+0x696>
 800b7b8:	9c07      	ldr	r4, [sp, #28]
 800b7ba:	9704      	str	r7, [sp, #16]
 800b7bc:	4625      	mov	r5, r4
 800b7be:	e7f3      	b.n	800b7a8 <_dtoa_r+0x928>
 800b7c0:	9b07      	ldr	r3, [sp, #28]
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 8104 	beq.w	800b9d4 <_dtoa_r+0xb54>
 800b7cc:	2e00      	cmp	r6, #0
 800b7ce:	dd05      	ble.n	800b7dc <_dtoa_r+0x95c>
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	4632      	mov	r2, r6
 800b7d4:	4658      	mov	r0, fp
 800b7d6:	f000 fc6f 	bl	800c0b8 <__lshift>
 800b7da:	4605      	mov	r5, r0
 800b7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d05a      	beq.n	800b898 <_dtoa_r+0xa18>
 800b7e2:	6869      	ldr	r1, [r5, #4]
 800b7e4:	4658      	mov	r0, fp
 800b7e6:	f000 fa0f 	bl	800bc08 <_Balloc>
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	b928      	cbnz	r0, 800b7fa <_dtoa_r+0x97a>
 800b7ee:	4b84      	ldr	r3, [pc, #528]	@ (800ba00 <_dtoa_r+0xb80>)
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b7f6:	f7ff bb5a 	b.w	800aeae <_dtoa_r+0x2e>
 800b7fa:	692a      	ldr	r2, [r5, #16]
 800b7fc:	3202      	adds	r2, #2
 800b7fe:	0092      	lsls	r2, r2, #2
 800b800:	f105 010c 	add.w	r1, r5, #12
 800b804:	300c      	adds	r0, #12
 800b806:	f002 f93b 	bl	800da80 <memcpy>
 800b80a:	2201      	movs	r2, #1
 800b80c:	4631      	mov	r1, r6
 800b80e:	4658      	mov	r0, fp
 800b810:	f000 fc52 	bl	800c0b8 <__lshift>
 800b814:	f10a 0301 	add.w	r3, sl, #1
 800b818:	9307      	str	r3, [sp, #28]
 800b81a:	9b00      	ldr	r3, [sp, #0]
 800b81c:	4453      	add	r3, sl
 800b81e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b820:	9b02      	ldr	r3, [sp, #8]
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	462f      	mov	r7, r5
 800b828:	930a      	str	r3, [sp, #40]	@ 0x28
 800b82a:	4605      	mov	r5, r0
 800b82c:	9b07      	ldr	r3, [sp, #28]
 800b82e:	4621      	mov	r1, r4
 800b830:	3b01      	subs	r3, #1
 800b832:	4648      	mov	r0, r9
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	f7ff fa99 	bl	800ad6c <quorem>
 800b83a:	4639      	mov	r1, r7
 800b83c:	9002      	str	r0, [sp, #8]
 800b83e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b842:	4648      	mov	r0, r9
 800b844:	f000 fca4 	bl	800c190 <__mcmp>
 800b848:	462a      	mov	r2, r5
 800b84a:	9008      	str	r0, [sp, #32]
 800b84c:	4621      	mov	r1, r4
 800b84e:	4658      	mov	r0, fp
 800b850:	f000 fcba 	bl	800c1c8 <__mdiff>
 800b854:	68c2      	ldr	r2, [r0, #12]
 800b856:	4606      	mov	r6, r0
 800b858:	bb02      	cbnz	r2, 800b89c <_dtoa_r+0xa1c>
 800b85a:	4601      	mov	r1, r0
 800b85c:	4648      	mov	r0, r9
 800b85e:	f000 fc97 	bl	800c190 <__mcmp>
 800b862:	4602      	mov	r2, r0
 800b864:	4631      	mov	r1, r6
 800b866:	4658      	mov	r0, fp
 800b868:	920e      	str	r2, [sp, #56]	@ 0x38
 800b86a:	f000 fa0d 	bl	800bc88 <_Bfree>
 800b86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b872:	9e07      	ldr	r6, [sp, #28]
 800b874:	ea43 0102 	orr.w	r1, r3, r2
 800b878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b87a:	4319      	orrs	r1, r3
 800b87c:	d110      	bne.n	800b8a0 <_dtoa_r+0xa20>
 800b87e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b882:	d029      	beq.n	800b8d8 <_dtoa_r+0xa58>
 800b884:	9b08      	ldr	r3, [sp, #32]
 800b886:	2b00      	cmp	r3, #0
 800b888:	dd02      	ble.n	800b890 <_dtoa_r+0xa10>
 800b88a:	9b02      	ldr	r3, [sp, #8]
 800b88c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b890:	9b00      	ldr	r3, [sp, #0]
 800b892:	f883 8000 	strb.w	r8, [r3]
 800b896:	e63f      	b.n	800b518 <_dtoa_r+0x698>
 800b898:	4628      	mov	r0, r5
 800b89a:	e7bb      	b.n	800b814 <_dtoa_r+0x994>
 800b89c:	2201      	movs	r2, #1
 800b89e:	e7e1      	b.n	800b864 <_dtoa_r+0x9e4>
 800b8a0:	9b08      	ldr	r3, [sp, #32]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	db04      	blt.n	800b8b0 <_dtoa_r+0xa30>
 800b8a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8a8:	430b      	orrs	r3, r1
 800b8aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8ac:	430b      	orrs	r3, r1
 800b8ae:	d120      	bne.n	800b8f2 <_dtoa_r+0xa72>
 800b8b0:	2a00      	cmp	r2, #0
 800b8b2:	dded      	ble.n	800b890 <_dtoa_r+0xa10>
 800b8b4:	4649      	mov	r1, r9
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	4658      	mov	r0, fp
 800b8ba:	f000 fbfd 	bl	800c0b8 <__lshift>
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4681      	mov	r9, r0
 800b8c2:	f000 fc65 	bl	800c190 <__mcmp>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	dc03      	bgt.n	800b8d2 <_dtoa_r+0xa52>
 800b8ca:	d1e1      	bne.n	800b890 <_dtoa_r+0xa10>
 800b8cc:	f018 0f01 	tst.w	r8, #1
 800b8d0:	d0de      	beq.n	800b890 <_dtoa_r+0xa10>
 800b8d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8d6:	d1d8      	bne.n	800b88a <_dtoa_r+0xa0a>
 800b8d8:	9a00      	ldr	r2, [sp, #0]
 800b8da:	2339      	movs	r3, #57	@ 0x39
 800b8dc:	7013      	strb	r3, [r2, #0]
 800b8de:	4633      	mov	r3, r6
 800b8e0:	461e      	mov	r6, r3
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b8e8:	2a39      	cmp	r2, #57	@ 0x39
 800b8ea:	d052      	beq.n	800b992 <_dtoa_r+0xb12>
 800b8ec:	3201      	adds	r2, #1
 800b8ee:	701a      	strb	r2, [r3, #0]
 800b8f0:	e612      	b.n	800b518 <_dtoa_r+0x698>
 800b8f2:	2a00      	cmp	r2, #0
 800b8f4:	dd07      	ble.n	800b906 <_dtoa_r+0xa86>
 800b8f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8fa:	d0ed      	beq.n	800b8d8 <_dtoa_r+0xa58>
 800b8fc:	9a00      	ldr	r2, [sp, #0]
 800b8fe:	f108 0301 	add.w	r3, r8, #1
 800b902:	7013      	strb	r3, [r2, #0]
 800b904:	e608      	b.n	800b518 <_dtoa_r+0x698>
 800b906:	9b07      	ldr	r3, [sp, #28]
 800b908:	9a07      	ldr	r2, [sp, #28]
 800b90a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b90e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b910:	4293      	cmp	r3, r2
 800b912:	d028      	beq.n	800b966 <_dtoa_r+0xae6>
 800b914:	4649      	mov	r1, r9
 800b916:	2300      	movs	r3, #0
 800b918:	220a      	movs	r2, #10
 800b91a:	4658      	mov	r0, fp
 800b91c:	f000 f9d6 	bl	800bccc <__multadd>
 800b920:	42af      	cmp	r7, r5
 800b922:	4681      	mov	r9, r0
 800b924:	f04f 0300 	mov.w	r3, #0
 800b928:	f04f 020a 	mov.w	r2, #10
 800b92c:	4639      	mov	r1, r7
 800b92e:	4658      	mov	r0, fp
 800b930:	d107      	bne.n	800b942 <_dtoa_r+0xac2>
 800b932:	f000 f9cb 	bl	800bccc <__multadd>
 800b936:	4607      	mov	r7, r0
 800b938:	4605      	mov	r5, r0
 800b93a:	9b07      	ldr	r3, [sp, #28]
 800b93c:	3301      	adds	r3, #1
 800b93e:	9307      	str	r3, [sp, #28]
 800b940:	e774      	b.n	800b82c <_dtoa_r+0x9ac>
 800b942:	f000 f9c3 	bl	800bccc <__multadd>
 800b946:	4629      	mov	r1, r5
 800b948:	4607      	mov	r7, r0
 800b94a:	2300      	movs	r3, #0
 800b94c:	220a      	movs	r2, #10
 800b94e:	4658      	mov	r0, fp
 800b950:	f000 f9bc 	bl	800bccc <__multadd>
 800b954:	4605      	mov	r5, r0
 800b956:	e7f0      	b.n	800b93a <_dtoa_r+0xaba>
 800b958:	9b00      	ldr	r3, [sp, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	bfcc      	ite	gt
 800b95e:	461e      	movgt	r6, r3
 800b960:	2601      	movle	r6, #1
 800b962:	4456      	add	r6, sl
 800b964:	2700      	movs	r7, #0
 800b966:	4649      	mov	r1, r9
 800b968:	2201      	movs	r2, #1
 800b96a:	4658      	mov	r0, fp
 800b96c:	f000 fba4 	bl	800c0b8 <__lshift>
 800b970:	4621      	mov	r1, r4
 800b972:	4681      	mov	r9, r0
 800b974:	f000 fc0c 	bl	800c190 <__mcmp>
 800b978:	2800      	cmp	r0, #0
 800b97a:	dcb0      	bgt.n	800b8de <_dtoa_r+0xa5e>
 800b97c:	d102      	bne.n	800b984 <_dtoa_r+0xb04>
 800b97e:	f018 0f01 	tst.w	r8, #1
 800b982:	d1ac      	bne.n	800b8de <_dtoa_r+0xa5e>
 800b984:	4633      	mov	r3, r6
 800b986:	461e      	mov	r6, r3
 800b988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b98c:	2a30      	cmp	r2, #48	@ 0x30
 800b98e:	d0fa      	beq.n	800b986 <_dtoa_r+0xb06>
 800b990:	e5c2      	b.n	800b518 <_dtoa_r+0x698>
 800b992:	459a      	cmp	sl, r3
 800b994:	d1a4      	bne.n	800b8e0 <_dtoa_r+0xa60>
 800b996:	9b04      	ldr	r3, [sp, #16]
 800b998:	3301      	adds	r3, #1
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	2331      	movs	r3, #49	@ 0x31
 800b99e:	f88a 3000 	strb.w	r3, [sl]
 800b9a2:	e5b9      	b.n	800b518 <_dtoa_r+0x698>
 800b9a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b9a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ba04 <_dtoa_r+0xb84>
 800b9aa:	b11b      	cbz	r3, 800b9b4 <_dtoa_r+0xb34>
 800b9ac:	f10a 0308 	add.w	r3, sl, #8
 800b9b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b9b2:	6013      	str	r3, [r2, #0]
 800b9b4:	4650      	mov	r0, sl
 800b9b6:	b019      	add	sp, #100	@ 0x64
 800b9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	f77f ae37 	ble.w	800b632 <_dtoa_r+0x7b2>
 800b9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9c8:	2001      	movs	r0, #1
 800b9ca:	e655      	b.n	800b678 <_dtoa_r+0x7f8>
 800b9cc:	9b00      	ldr	r3, [sp, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f77f aed6 	ble.w	800b780 <_dtoa_r+0x900>
 800b9d4:	4656      	mov	r6, sl
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	4648      	mov	r0, r9
 800b9da:	f7ff f9c7 	bl	800ad6c <quorem>
 800b9de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b9e2:	f806 8b01 	strb.w	r8, [r6], #1
 800b9e6:	9b00      	ldr	r3, [sp, #0]
 800b9e8:	eba6 020a 	sub.w	r2, r6, sl
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	ddb3      	ble.n	800b958 <_dtoa_r+0xad8>
 800b9f0:	4649      	mov	r1, r9
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	220a      	movs	r2, #10
 800b9f6:	4658      	mov	r0, fp
 800b9f8:	f000 f968 	bl	800bccc <__multadd>
 800b9fc:	4681      	mov	r9, r0
 800b9fe:	e7ea      	b.n	800b9d6 <_dtoa_r+0xb56>
 800ba00:	0802c0d5 	.word	0x0802c0d5
 800ba04:	0802c059 	.word	0x0802c059

0800ba08 <_free_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	2900      	cmp	r1, #0
 800ba0e:	d041      	beq.n	800ba94 <_free_r+0x8c>
 800ba10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba14:	1f0c      	subs	r4, r1, #4
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	bfb8      	it	lt
 800ba1a:	18e4      	addlt	r4, r4, r3
 800ba1c:	f000 f8e8 	bl	800bbf0 <__malloc_lock>
 800ba20:	4a1d      	ldr	r2, [pc, #116]	@ (800ba98 <_free_r+0x90>)
 800ba22:	6813      	ldr	r3, [r2, #0]
 800ba24:	b933      	cbnz	r3, 800ba34 <_free_r+0x2c>
 800ba26:	6063      	str	r3, [r4, #4]
 800ba28:	6014      	str	r4, [r2, #0]
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba30:	f000 b8e4 	b.w	800bbfc <__malloc_unlock>
 800ba34:	42a3      	cmp	r3, r4
 800ba36:	d908      	bls.n	800ba4a <_free_r+0x42>
 800ba38:	6820      	ldr	r0, [r4, #0]
 800ba3a:	1821      	adds	r1, r4, r0
 800ba3c:	428b      	cmp	r3, r1
 800ba3e:	bf01      	itttt	eq
 800ba40:	6819      	ldreq	r1, [r3, #0]
 800ba42:	685b      	ldreq	r3, [r3, #4]
 800ba44:	1809      	addeq	r1, r1, r0
 800ba46:	6021      	streq	r1, [r4, #0]
 800ba48:	e7ed      	b.n	800ba26 <_free_r+0x1e>
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	b10b      	cbz	r3, 800ba54 <_free_r+0x4c>
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	d9fa      	bls.n	800ba4a <_free_r+0x42>
 800ba54:	6811      	ldr	r1, [r2, #0]
 800ba56:	1850      	adds	r0, r2, r1
 800ba58:	42a0      	cmp	r0, r4
 800ba5a:	d10b      	bne.n	800ba74 <_free_r+0x6c>
 800ba5c:	6820      	ldr	r0, [r4, #0]
 800ba5e:	4401      	add	r1, r0
 800ba60:	1850      	adds	r0, r2, r1
 800ba62:	4283      	cmp	r3, r0
 800ba64:	6011      	str	r1, [r2, #0]
 800ba66:	d1e0      	bne.n	800ba2a <_free_r+0x22>
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	6053      	str	r3, [r2, #4]
 800ba6e:	4408      	add	r0, r1
 800ba70:	6010      	str	r0, [r2, #0]
 800ba72:	e7da      	b.n	800ba2a <_free_r+0x22>
 800ba74:	d902      	bls.n	800ba7c <_free_r+0x74>
 800ba76:	230c      	movs	r3, #12
 800ba78:	602b      	str	r3, [r5, #0]
 800ba7a:	e7d6      	b.n	800ba2a <_free_r+0x22>
 800ba7c:	6820      	ldr	r0, [r4, #0]
 800ba7e:	1821      	adds	r1, r4, r0
 800ba80:	428b      	cmp	r3, r1
 800ba82:	bf04      	itt	eq
 800ba84:	6819      	ldreq	r1, [r3, #0]
 800ba86:	685b      	ldreq	r3, [r3, #4]
 800ba88:	6063      	str	r3, [r4, #4]
 800ba8a:	bf04      	itt	eq
 800ba8c:	1809      	addeq	r1, r1, r0
 800ba8e:	6021      	streq	r1, [r4, #0]
 800ba90:	6054      	str	r4, [r2, #4]
 800ba92:	e7ca      	b.n	800ba2a <_free_r+0x22>
 800ba94:	bd38      	pop	{r3, r4, r5, pc}
 800ba96:	bf00      	nop
 800ba98:	200010d4 	.word	0x200010d4

0800ba9c <malloc>:
 800ba9c:	4b02      	ldr	r3, [pc, #8]	@ (800baa8 <malloc+0xc>)
 800ba9e:	4601      	mov	r1, r0
 800baa0:	6818      	ldr	r0, [r3, #0]
 800baa2:	f000 b825 	b.w	800baf0 <_malloc_r>
 800baa6:	bf00      	nop
 800baa8:	20000450 	.word	0x20000450

0800baac <sbrk_aligned>:
 800baac:	b570      	push	{r4, r5, r6, lr}
 800baae:	4e0f      	ldr	r6, [pc, #60]	@ (800baec <sbrk_aligned+0x40>)
 800bab0:	460c      	mov	r4, r1
 800bab2:	6831      	ldr	r1, [r6, #0]
 800bab4:	4605      	mov	r5, r0
 800bab6:	b911      	cbnz	r1, 800babe <sbrk_aligned+0x12>
 800bab8:	f001 ffd2 	bl	800da60 <_sbrk_r>
 800babc:	6030      	str	r0, [r6, #0]
 800babe:	4621      	mov	r1, r4
 800bac0:	4628      	mov	r0, r5
 800bac2:	f001 ffcd 	bl	800da60 <_sbrk_r>
 800bac6:	1c43      	adds	r3, r0, #1
 800bac8:	d103      	bne.n	800bad2 <sbrk_aligned+0x26>
 800baca:	f04f 34ff 	mov.w	r4, #4294967295
 800bace:	4620      	mov	r0, r4
 800bad0:	bd70      	pop	{r4, r5, r6, pc}
 800bad2:	1cc4      	adds	r4, r0, #3
 800bad4:	f024 0403 	bic.w	r4, r4, #3
 800bad8:	42a0      	cmp	r0, r4
 800bada:	d0f8      	beq.n	800bace <sbrk_aligned+0x22>
 800badc:	1a21      	subs	r1, r4, r0
 800bade:	4628      	mov	r0, r5
 800bae0:	f001 ffbe 	bl	800da60 <_sbrk_r>
 800bae4:	3001      	adds	r0, #1
 800bae6:	d1f2      	bne.n	800bace <sbrk_aligned+0x22>
 800bae8:	e7ef      	b.n	800baca <sbrk_aligned+0x1e>
 800baea:	bf00      	nop
 800baec:	200010d0 	.word	0x200010d0

0800baf0 <_malloc_r>:
 800baf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baf4:	1ccd      	adds	r5, r1, #3
 800baf6:	f025 0503 	bic.w	r5, r5, #3
 800bafa:	3508      	adds	r5, #8
 800bafc:	2d0c      	cmp	r5, #12
 800bafe:	bf38      	it	cc
 800bb00:	250c      	movcc	r5, #12
 800bb02:	2d00      	cmp	r5, #0
 800bb04:	4606      	mov	r6, r0
 800bb06:	db01      	blt.n	800bb0c <_malloc_r+0x1c>
 800bb08:	42a9      	cmp	r1, r5
 800bb0a:	d904      	bls.n	800bb16 <_malloc_r+0x26>
 800bb0c:	230c      	movs	r3, #12
 800bb0e:	6033      	str	r3, [r6, #0]
 800bb10:	2000      	movs	r0, #0
 800bb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbec <_malloc_r+0xfc>
 800bb1a:	f000 f869 	bl	800bbf0 <__malloc_lock>
 800bb1e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb22:	461c      	mov	r4, r3
 800bb24:	bb44      	cbnz	r4, 800bb78 <_malloc_r+0x88>
 800bb26:	4629      	mov	r1, r5
 800bb28:	4630      	mov	r0, r6
 800bb2a:	f7ff ffbf 	bl	800baac <sbrk_aligned>
 800bb2e:	1c43      	adds	r3, r0, #1
 800bb30:	4604      	mov	r4, r0
 800bb32:	d158      	bne.n	800bbe6 <_malloc_r+0xf6>
 800bb34:	f8d8 4000 	ldr.w	r4, [r8]
 800bb38:	4627      	mov	r7, r4
 800bb3a:	2f00      	cmp	r7, #0
 800bb3c:	d143      	bne.n	800bbc6 <_malloc_r+0xd6>
 800bb3e:	2c00      	cmp	r4, #0
 800bb40:	d04b      	beq.n	800bbda <_malloc_r+0xea>
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	4639      	mov	r1, r7
 800bb46:	4630      	mov	r0, r6
 800bb48:	eb04 0903 	add.w	r9, r4, r3
 800bb4c:	f001 ff88 	bl	800da60 <_sbrk_r>
 800bb50:	4581      	cmp	r9, r0
 800bb52:	d142      	bne.n	800bbda <_malloc_r+0xea>
 800bb54:	6821      	ldr	r1, [r4, #0]
 800bb56:	1a6d      	subs	r5, r5, r1
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7ff ffa6 	bl	800baac <sbrk_aligned>
 800bb60:	3001      	adds	r0, #1
 800bb62:	d03a      	beq.n	800bbda <_malloc_r+0xea>
 800bb64:	6823      	ldr	r3, [r4, #0]
 800bb66:	442b      	add	r3, r5
 800bb68:	6023      	str	r3, [r4, #0]
 800bb6a:	f8d8 3000 	ldr.w	r3, [r8]
 800bb6e:	685a      	ldr	r2, [r3, #4]
 800bb70:	bb62      	cbnz	r2, 800bbcc <_malloc_r+0xdc>
 800bb72:	f8c8 7000 	str.w	r7, [r8]
 800bb76:	e00f      	b.n	800bb98 <_malloc_r+0xa8>
 800bb78:	6822      	ldr	r2, [r4, #0]
 800bb7a:	1b52      	subs	r2, r2, r5
 800bb7c:	d420      	bmi.n	800bbc0 <_malloc_r+0xd0>
 800bb7e:	2a0b      	cmp	r2, #11
 800bb80:	d917      	bls.n	800bbb2 <_malloc_r+0xc2>
 800bb82:	1961      	adds	r1, r4, r5
 800bb84:	42a3      	cmp	r3, r4
 800bb86:	6025      	str	r5, [r4, #0]
 800bb88:	bf18      	it	ne
 800bb8a:	6059      	strne	r1, [r3, #4]
 800bb8c:	6863      	ldr	r3, [r4, #4]
 800bb8e:	bf08      	it	eq
 800bb90:	f8c8 1000 	streq.w	r1, [r8]
 800bb94:	5162      	str	r2, [r4, r5]
 800bb96:	604b      	str	r3, [r1, #4]
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f000 f82f 	bl	800bbfc <__malloc_unlock>
 800bb9e:	f104 000b 	add.w	r0, r4, #11
 800bba2:	1d23      	adds	r3, r4, #4
 800bba4:	f020 0007 	bic.w	r0, r0, #7
 800bba8:	1ac2      	subs	r2, r0, r3
 800bbaa:	bf1c      	itt	ne
 800bbac:	1a1b      	subne	r3, r3, r0
 800bbae:	50a3      	strne	r3, [r4, r2]
 800bbb0:	e7af      	b.n	800bb12 <_malloc_r+0x22>
 800bbb2:	6862      	ldr	r2, [r4, #4]
 800bbb4:	42a3      	cmp	r3, r4
 800bbb6:	bf0c      	ite	eq
 800bbb8:	f8c8 2000 	streq.w	r2, [r8]
 800bbbc:	605a      	strne	r2, [r3, #4]
 800bbbe:	e7eb      	b.n	800bb98 <_malloc_r+0xa8>
 800bbc0:	4623      	mov	r3, r4
 800bbc2:	6864      	ldr	r4, [r4, #4]
 800bbc4:	e7ae      	b.n	800bb24 <_malloc_r+0x34>
 800bbc6:	463c      	mov	r4, r7
 800bbc8:	687f      	ldr	r7, [r7, #4]
 800bbca:	e7b6      	b.n	800bb3a <_malloc_r+0x4a>
 800bbcc:	461a      	mov	r2, r3
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	d1fb      	bne.n	800bbcc <_malloc_r+0xdc>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	6053      	str	r3, [r2, #4]
 800bbd8:	e7de      	b.n	800bb98 <_malloc_r+0xa8>
 800bbda:	230c      	movs	r3, #12
 800bbdc:	6033      	str	r3, [r6, #0]
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f000 f80c 	bl	800bbfc <__malloc_unlock>
 800bbe4:	e794      	b.n	800bb10 <_malloc_r+0x20>
 800bbe6:	6005      	str	r5, [r0, #0]
 800bbe8:	e7d6      	b.n	800bb98 <_malloc_r+0xa8>
 800bbea:	bf00      	nop
 800bbec:	200010d4 	.word	0x200010d4

0800bbf0 <__malloc_lock>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	@ (800bbf8 <__malloc_lock+0x8>)
 800bbf2:	f7ff b8b2 	b.w	800ad5a <__retarget_lock_acquire_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	200010cc 	.word	0x200010cc

0800bbfc <__malloc_unlock>:
 800bbfc:	4801      	ldr	r0, [pc, #4]	@ (800bc04 <__malloc_unlock+0x8>)
 800bbfe:	f7ff b8ad 	b.w	800ad5c <__retarget_lock_release_recursive>
 800bc02:	bf00      	nop
 800bc04:	200010cc 	.word	0x200010cc

0800bc08 <_Balloc>:
 800bc08:	b570      	push	{r4, r5, r6, lr}
 800bc0a:	69c6      	ldr	r6, [r0, #28]
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	460d      	mov	r5, r1
 800bc10:	b976      	cbnz	r6, 800bc30 <_Balloc+0x28>
 800bc12:	2010      	movs	r0, #16
 800bc14:	f7ff ff42 	bl	800ba9c <malloc>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	61e0      	str	r0, [r4, #28]
 800bc1c:	b920      	cbnz	r0, 800bc28 <_Balloc+0x20>
 800bc1e:	4b18      	ldr	r3, [pc, #96]	@ (800bc80 <_Balloc+0x78>)
 800bc20:	4818      	ldr	r0, [pc, #96]	@ (800bc84 <_Balloc+0x7c>)
 800bc22:	216b      	movs	r1, #107	@ 0x6b
 800bc24:	f001 ff44 	bl	800dab0 <__assert_func>
 800bc28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc2c:	6006      	str	r6, [r0, #0]
 800bc2e:	60c6      	str	r6, [r0, #12]
 800bc30:	69e6      	ldr	r6, [r4, #28]
 800bc32:	68f3      	ldr	r3, [r6, #12]
 800bc34:	b183      	cbz	r3, 800bc58 <_Balloc+0x50>
 800bc36:	69e3      	ldr	r3, [r4, #28]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc3e:	b9b8      	cbnz	r0, 800bc70 <_Balloc+0x68>
 800bc40:	2101      	movs	r1, #1
 800bc42:	fa01 f605 	lsl.w	r6, r1, r5
 800bc46:	1d72      	adds	r2, r6, #5
 800bc48:	0092      	lsls	r2, r2, #2
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f001 ff4e 	bl	800daec <_calloc_r>
 800bc50:	b160      	cbz	r0, 800bc6c <_Balloc+0x64>
 800bc52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc56:	e00e      	b.n	800bc76 <_Balloc+0x6e>
 800bc58:	2221      	movs	r2, #33	@ 0x21
 800bc5a:	2104      	movs	r1, #4
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f001 ff45 	bl	800daec <_calloc_r>
 800bc62:	69e3      	ldr	r3, [r4, #28]
 800bc64:	60f0      	str	r0, [r6, #12]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1e4      	bne.n	800bc36 <_Balloc+0x2e>
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	6802      	ldr	r2, [r0, #0]
 800bc72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc76:	2300      	movs	r3, #0
 800bc78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc7c:	e7f7      	b.n	800bc6e <_Balloc+0x66>
 800bc7e:	bf00      	nop
 800bc80:	0802c066 	.word	0x0802c066
 800bc84:	0802c0e6 	.word	0x0802c0e6

0800bc88 <_Bfree>:
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	69c6      	ldr	r6, [r0, #28]
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	460c      	mov	r4, r1
 800bc90:	b976      	cbnz	r6, 800bcb0 <_Bfree+0x28>
 800bc92:	2010      	movs	r0, #16
 800bc94:	f7ff ff02 	bl	800ba9c <malloc>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	61e8      	str	r0, [r5, #28]
 800bc9c:	b920      	cbnz	r0, 800bca8 <_Bfree+0x20>
 800bc9e:	4b09      	ldr	r3, [pc, #36]	@ (800bcc4 <_Bfree+0x3c>)
 800bca0:	4809      	ldr	r0, [pc, #36]	@ (800bcc8 <_Bfree+0x40>)
 800bca2:	218f      	movs	r1, #143	@ 0x8f
 800bca4:	f001 ff04 	bl	800dab0 <__assert_func>
 800bca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcac:	6006      	str	r6, [r0, #0]
 800bcae:	60c6      	str	r6, [r0, #12]
 800bcb0:	b13c      	cbz	r4, 800bcc2 <_Bfree+0x3a>
 800bcb2:	69eb      	ldr	r3, [r5, #28]
 800bcb4:	6862      	ldr	r2, [r4, #4]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcbc:	6021      	str	r1, [r4, #0]
 800bcbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcc2:	bd70      	pop	{r4, r5, r6, pc}
 800bcc4:	0802c066 	.word	0x0802c066
 800bcc8:	0802c0e6 	.word	0x0802c0e6

0800bccc <__multadd>:
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd0:	690d      	ldr	r5, [r1, #16]
 800bcd2:	4607      	mov	r7, r0
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	461e      	mov	r6, r3
 800bcd8:	f101 0c14 	add.w	ip, r1, #20
 800bcdc:	2000      	movs	r0, #0
 800bcde:	f8dc 3000 	ldr.w	r3, [ip]
 800bce2:	b299      	uxth	r1, r3
 800bce4:	fb02 6101 	mla	r1, r2, r1, r6
 800bce8:	0c1e      	lsrs	r6, r3, #16
 800bcea:	0c0b      	lsrs	r3, r1, #16
 800bcec:	fb02 3306 	mla	r3, r2, r6, r3
 800bcf0:	b289      	uxth	r1, r1
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcf8:	4285      	cmp	r5, r0
 800bcfa:	f84c 1b04 	str.w	r1, [ip], #4
 800bcfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd02:	dcec      	bgt.n	800bcde <__multadd+0x12>
 800bd04:	b30e      	cbz	r6, 800bd4a <__multadd+0x7e>
 800bd06:	68a3      	ldr	r3, [r4, #8]
 800bd08:	42ab      	cmp	r3, r5
 800bd0a:	dc19      	bgt.n	800bd40 <__multadd+0x74>
 800bd0c:	6861      	ldr	r1, [r4, #4]
 800bd0e:	4638      	mov	r0, r7
 800bd10:	3101      	adds	r1, #1
 800bd12:	f7ff ff79 	bl	800bc08 <_Balloc>
 800bd16:	4680      	mov	r8, r0
 800bd18:	b928      	cbnz	r0, 800bd26 <__multadd+0x5a>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd50 <__multadd+0x84>)
 800bd1e:	480d      	ldr	r0, [pc, #52]	@ (800bd54 <__multadd+0x88>)
 800bd20:	21ba      	movs	r1, #186	@ 0xba
 800bd22:	f001 fec5 	bl	800dab0 <__assert_func>
 800bd26:	6922      	ldr	r2, [r4, #16]
 800bd28:	3202      	adds	r2, #2
 800bd2a:	f104 010c 	add.w	r1, r4, #12
 800bd2e:	0092      	lsls	r2, r2, #2
 800bd30:	300c      	adds	r0, #12
 800bd32:	f001 fea5 	bl	800da80 <memcpy>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7ff ffa5 	bl	800bc88 <_Bfree>
 800bd3e:	4644      	mov	r4, r8
 800bd40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd44:	3501      	adds	r5, #1
 800bd46:	615e      	str	r6, [r3, #20]
 800bd48:	6125      	str	r5, [r4, #16]
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	0802c0d5 	.word	0x0802c0d5
 800bd54:	0802c0e6 	.word	0x0802c0e6

0800bd58 <__s2b>:
 800bd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	4615      	mov	r5, r2
 800bd60:	461f      	mov	r7, r3
 800bd62:	2209      	movs	r2, #9
 800bd64:	3308      	adds	r3, #8
 800bd66:	4606      	mov	r6, r0
 800bd68:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	2201      	movs	r2, #1
 800bd70:	429a      	cmp	r2, r3
 800bd72:	db09      	blt.n	800bd88 <__s2b+0x30>
 800bd74:	4630      	mov	r0, r6
 800bd76:	f7ff ff47 	bl	800bc08 <_Balloc>
 800bd7a:	b940      	cbnz	r0, 800bd8e <__s2b+0x36>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	4b19      	ldr	r3, [pc, #100]	@ (800bde4 <__s2b+0x8c>)
 800bd80:	4819      	ldr	r0, [pc, #100]	@ (800bde8 <__s2b+0x90>)
 800bd82:	21d3      	movs	r1, #211	@ 0xd3
 800bd84:	f001 fe94 	bl	800dab0 <__assert_func>
 800bd88:	0052      	lsls	r2, r2, #1
 800bd8a:	3101      	adds	r1, #1
 800bd8c:	e7f0      	b.n	800bd70 <__s2b+0x18>
 800bd8e:	9b08      	ldr	r3, [sp, #32]
 800bd90:	6143      	str	r3, [r0, #20]
 800bd92:	2d09      	cmp	r5, #9
 800bd94:	f04f 0301 	mov.w	r3, #1
 800bd98:	6103      	str	r3, [r0, #16]
 800bd9a:	dd16      	ble.n	800bdca <__s2b+0x72>
 800bd9c:	f104 0909 	add.w	r9, r4, #9
 800bda0:	46c8      	mov	r8, r9
 800bda2:	442c      	add	r4, r5
 800bda4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bda8:	4601      	mov	r1, r0
 800bdaa:	3b30      	subs	r3, #48	@ 0x30
 800bdac:	220a      	movs	r2, #10
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f7ff ff8c 	bl	800bccc <__multadd>
 800bdb4:	45a0      	cmp	r8, r4
 800bdb6:	d1f5      	bne.n	800bda4 <__s2b+0x4c>
 800bdb8:	f1a5 0408 	sub.w	r4, r5, #8
 800bdbc:	444c      	add	r4, r9
 800bdbe:	1b2d      	subs	r5, r5, r4
 800bdc0:	1963      	adds	r3, r4, r5
 800bdc2:	42bb      	cmp	r3, r7
 800bdc4:	db04      	blt.n	800bdd0 <__s2b+0x78>
 800bdc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdca:	340a      	adds	r4, #10
 800bdcc:	2509      	movs	r5, #9
 800bdce:	e7f6      	b.n	800bdbe <__s2b+0x66>
 800bdd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bdd4:	4601      	mov	r1, r0
 800bdd6:	3b30      	subs	r3, #48	@ 0x30
 800bdd8:	220a      	movs	r2, #10
 800bdda:	4630      	mov	r0, r6
 800bddc:	f7ff ff76 	bl	800bccc <__multadd>
 800bde0:	e7ee      	b.n	800bdc0 <__s2b+0x68>
 800bde2:	bf00      	nop
 800bde4:	0802c0d5 	.word	0x0802c0d5
 800bde8:	0802c0e6 	.word	0x0802c0e6

0800bdec <__hi0bits>:
 800bdec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	bf36      	itet	cc
 800bdf4:	0403      	lslcc	r3, r0, #16
 800bdf6:	2000      	movcs	r0, #0
 800bdf8:	2010      	movcc	r0, #16
 800bdfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bdfe:	bf3c      	itt	cc
 800be00:	021b      	lslcc	r3, r3, #8
 800be02:	3008      	addcc	r0, #8
 800be04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be08:	bf3c      	itt	cc
 800be0a:	011b      	lslcc	r3, r3, #4
 800be0c:	3004      	addcc	r0, #4
 800be0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be12:	bf3c      	itt	cc
 800be14:	009b      	lslcc	r3, r3, #2
 800be16:	3002      	addcc	r0, #2
 800be18:	2b00      	cmp	r3, #0
 800be1a:	db05      	blt.n	800be28 <__hi0bits+0x3c>
 800be1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800be20:	f100 0001 	add.w	r0, r0, #1
 800be24:	bf08      	it	eq
 800be26:	2020      	moveq	r0, #32
 800be28:	4770      	bx	lr

0800be2a <__lo0bits>:
 800be2a:	6803      	ldr	r3, [r0, #0]
 800be2c:	4602      	mov	r2, r0
 800be2e:	f013 0007 	ands.w	r0, r3, #7
 800be32:	d00b      	beq.n	800be4c <__lo0bits+0x22>
 800be34:	07d9      	lsls	r1, r3, #31
 800be36:	d421      	bmi.n	800be7c <__lo0bits+0x52>
 800be38:	0798      	lsls	r0, r3, #30
 800be3a:	bf49      	itett	mi
 800be3c:	085b      	lsrmi	r3, r3, #1
 800be3e:	089b      	lsrpl	r3, r3, #2
 800be40:	2001      	movmi	r0, #1
 800be42:	6013      	strmi	r3, [r2, #0]
 800be44:	bf5c      	itt	pl
 800be46:	6013      	strpl	r3, [r2, #0]
 800be48:	2002      	movpl	r0, #2
 800be4a:	4770      	bx	lr
 800be4c:	b299      	uxth	r1, r3
 800be4e:	b909      	cbnz	r1, 800be54 <__lo0bits+0x2a>
 800be50:	0c1b      	lsrs	r3, r3, #16
 800be52:	2010      	movs	r0, #16
 800be54:	b2d9      	uxtb	r1, r3
 800be56:	b909      	cbnz	r1, 800be5c <__lo0bits+0x32>
 800be58:	3008      	adds	r0, #8
 800be5a:	0a1b      	lsrs	r3, r3, #8
 800be5c:	0719      	lsls	r1, r3, #28
 800be5e:	bf04      	itt	eq
 800be60:	091b      	lsreq	r3, r3, #4
 800be62:	3004      	addeq	r0, #4
 800be64:	0799      	lsls	r1, r3, #30
 800be66:	bf04      	itt	eq
 800be68:	089b      	lsreq	r3, r3, #2
 800be6a:	3002      	addeq	r0, #2
 800be6c:	07d9      	lsls	r1, r3, #31
 800be6e:	d403      	bmi.n	800be78 <__lo0bits+0x4e>
 800be70:	085b      	lsrs	r3, r3, #1
 800be72:	f100 0001 	add.w	r0, r0, #1
 800be76:	d003      	beq.n	800be80 <__lo0bits+0x56>
 800be78:	6013      	str	r3, [r2, #0]
 800be7a:	4770      	bx	lr
 800be7c:	2000      	movs	r0, #0
 800be7e:	4770      	bx	lr
 800be80:	2020      	movs	r0, #32
 800be82:	4770      	bx	lr

0800be84 <__i2b>:
 800be84:	b510      	push	{r4, lr}
 800be86:	460c      	mov	r4, r1
 800be88:	2101      	movs	r1, #1
 800be8a:	f7ff febd 	bl	800bc08 <_Balloc>
 800be8e:	4602      	mov	r2, r0
 800be90:	b928      	cbnz	r0, 800be9e <__i2b+0x1a>
 800be92:	4b05      	ldr	r3, [pc, #20]	@ (800bea8 <__i2b+0x24>)
 800be94:	4805      	ldr	r0, [pc, #20]	@ (800beac <__i2b+0x28>)
 800be96:	f240 1145 	movw	r1, #325	@ 0x145
 800be9a:	f001 fe09 	bl	800dab0 <__assert_func>
 800be9e:	2301      	movs	r3, #1
 800bea0:	6144      	str	r4, [r0, #20]
 800bea2:	6103      	str	r3, [r0, #16]
 800bea4:	bd10      	pop	{r4, pc}
 800bea6:	bf00      	nop
 800bea8:	0802c0d5 	.word	0x0802c0d5
 800beac:	0802c0e6 	.word	0x0802c0e6

0800beb0 <__multiply>:
 800beb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	4614      	mov	r4, r2
 800beb6:	690a      	ldr	r2, [r1, #16]
 800beb8:	6923      	ldr	r3, [r4, #16]
 800beba:	429a      	cmp	r2, r3
 800bebc:	bfa8      	it	ge
 800bebe:	4623      	movge	r3, r4
 800bec0:	460f      	mov	r7, r1
 800bec2:	bfa4      	itt	ge
 800bec4:	460c      	movge	r4, r1
 800bec6:	461f      	movge	r7, r3
 800bec8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800becc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bed0:	68a3      	ldr	r3, [r4, #8]
 800bed2:	6861      	ldr	r1, [r4, #4]
 800bed4:	eb0a 0609 	add.w	r6, sl, r9
 800bed8:	42b3      	cmp	r3, r6
 800beda:	b085      	sub	sp, #20
 800bedc:	bfb8      	it	lt
 800bede:	3101      	addlt	r1, #1
 800bee0:	f7ff fe92 	bl	800bc08 <_Balloc>
 800bee4:	b930      	cbnz	r0, 800bef4 <__multiply+0x44>
 800bee6:	4602      	mov	r2, r0
 800bee8:	4b44      	ldr	r3, [pc, #272]	@ (800bffc <__multiply+0x14c>)
 800beea:	4845      	ldr	r0, [pc, #276]	@ (800c000 <__multiply+0x150>)
 800beec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bef0:	f001 fdde 	bl	800dab0 <__assert_func>
 800bef4:	f100 0514 	add.w	r5, r0, #20
 800bef8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800befc:	462b      	mov	r3, r5
 800befe:	2200      	movs	r2, #0
 800bf00:	4543      	cmp	r3, r8
 800bf02:	d321      	bcc.n	800bf48 <__multiply+0x98>
 800bf04:	f107 0114 	add.w	r1, r7, #20
 800bf08:	f104 0214 	add.w	r2, r4, #20
 800bf0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bf10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bf14:	9302      	str	r3, [sp, #8]
 800bf16:	1b13      	subs	r3, r2, r4
 800bf18:	3b15      	subs	r3, #21
 800bf1a:	f023 0303 	bic.w	r3, r3, #3
 800bf1e:	3304      	adds	r3, #4
 800bf20:	f104 0715 	add.w	r7, r4, #21
 800bf24:	42ba      	cmp	r2, r7
 800bf26:	bf38      	it	cc
 800bf28:	2304      	movcc	r3, #4
 800bf2a:	9301      	str	r3, [sp, #4]
 800bf2c:	9b02      	ldr	r3, [sp, #8]
 800bf2e:	9103      	str	r1, [sp, #12]
 800bf30:	428b      	cmp	r3, r1
 800bf32:	d80c      	bhi.n	800bf4e <__multiply+0x9e>
 800bf34:	2e00      	cmp	r6, #0
 800bf36:	dd03      	ble.n	800bf40 <__multiply+0x90>
 800bf38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d05b      	beq.n	800bff8 <__multiply+0x148>
 800bf40:	6106      	str	r6, [r0, #16]
 800bf42:	b005      	add	sp, #20
 800bf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf48:	f843 2b04 	str.w	r2, [r3], #4
 800bf4c:	e7d8      	b.n	800bf00 <__multiply+0x50>
 800bf4e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bf52:	f1ba 0f00 	cmp.w	sl, #0
 800bf56:	d024      	beq.n	800bfa2 <__multiply+0xf2>
 800bf58:	f104 0e14 	add.w	lr, r4, #20
 800bf5c:	46a9      	mov	r9, r5
 800bf5e:	f04f 0c00 	mov.w	ip, #0
 800bf62:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf66:	f8d9 3000 	ldr.w	r3, [r9]
 800bf6a:	fa1f fb87 	uxth.w	fp, r7
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	fb0a 330b 	mla	r3, sl, fp, r3
 800bf74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bf78:	f8d9 7000 	ldr.w	r7, [r9]
 800bf7c:	4463      	add	r3, ip
 800bf7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf82:	fb0a c70b 	mla	r7, sl, fp, ip
 800bf86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf90:	4572      	cmp	r2, lr
 800bf92:	f849 3b04 	str.w	r3, [r9], #4
 800bf96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf9a:	d8e2      	bhi.n	800bf62 <__multiply+0xb2>
 800bf9c:	9b01      	ldr	r3, [sp, #4]
 800bf9e:	f845 c003 	str.w	ip, [r5, r3]
 800bfa2:	9b03      	ldr	r3, [sp, #12]
 800bfa4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bfa8:	3104      	adds	r1, #4
 800bfaa:	f1b9 0f00 	cmp.w	r9, #0
 800bfae:	d021      	beq.n	800bff4 <__multiply+0x144>
 800bfb0:	682b      	ldr	r3, [r5, #0]
 800bfb2:	f104 0c14 	add.w	ip, r4, #20
 800bfb6:	46ae      	mov	lr, r5
 800bfb8:	f04f 0a00 	mov.w	sl, #0
 800bfbc:	f8bc b000 	ldrh.w	fp, [ip]
 800bfc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bfc4:	fb09 770b 	mla	r7, r9, fp, r7
 800bfc8:	4457      	add	r7, sl
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bfd0:	f84e 3b04 	str.w	r3, [lr], #4
 800bfd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bfd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfdc:	f8be 3000 	ldrh.w	r3, [lr]
 800bfe0:	fb09 330a 	mla	r3, r9, sl, r3
 800bfe4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bfe8:	4562      	cmp	r2, ip
 800bfea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfee:	d8e5      	bhi.n	800bfbc <__multiply+0x10c>
 800bff0:	9f01      	ldr	r7, [sp, #4]
 800bff2:	51eb      	str	r3, [r5, r7]
 800bff4:	3504      	adds	r5, #4
 800bff6:	e799      	b.n	800bf2c <__multiply+0x7c>
 800bff8:	3e01      	subs	r6, #1
 800bffa:	e79b      	b.n	800bf34 <__multiply+0x84>
 800bffc:	0802c0d5 	.word	0x0802c0d5
 800c000:	0802c0e6 	.word	0x0802c0e6

0800c004 <__pow5mult>:
 800c004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c008:	4615      	mov	r5, r2
 800c00a:	f012 0203 	ands.w	r2, r2, #3
 800c00e:	4607      	mov	r7, r0
 800c010:	460e      	mov	r6, r1
 800c012:	d007      	beq.n	800c024 <__pow5mult+0x20>
 800c014:	4c25      	ldr	r4, [pc, #148]	@ (800c0ac <__pow5mult+0xa8>)
 800c016:	3a01      	subs	r2, #1
 800c018:	2300      	movs	r3, #0
 800c01a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c01e:	f7ff fe55 	bl	800bccc <__multadd>
 800c022:	4606      	mov	r6, r0
 800c024:	10ad      	asrs	r5, r5, #2
 800c026:	d03d      	beq.n	800c0a4 <__pow5mult+0xa0>
 800c028:	69fc      	ldr	r4, [r7, #28]
 800c02a:	b97c      	cbnz	r4, 800c04c <__pow5mult+0x48>
 800c02c:	2010      	movs	r0, #16
 800c02e:	f7ff fd35 	bl	800ba9c <malloc>
 800c032:	4602      	mov	r2, r0
 800c034:	61f8      	str	r0, [r7, #28]
 800c036:	b928      	cbnz	r0, 800c044 <__pow5mult+0x40>
 800c038:	4b1d      	ldr	r3, [pc, #116]	@ (800c0b0 <__pow5mult+0xac>)
 800c03a:	481e      	ldr	r0, [pc, #120]	@ (800c0b4 <__pow5mult+0xb0>)
 800c03c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c040:	f001 fd36 	bl	800dab0 <__assert_func>
 800c044:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c048:	6004      	str	r4, [r0, #0]
 800c04a:	60c4      	str	r4, [r0, #12]
 800c04c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c050:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c054:	b94c      	cbnz	r4, 800c06a <__pow5mult+0x66>
 800c056:	f240 2171 	movw	r1, #625	@ 0x271
 800c05a:	4638      	mov	r0, r7
 800c05c:	f7ff ff12 	bl	800be84 <__i2b>
 800c060:	2300      	movs	r3, #0
 800c062:	f8c8 0008 	str.w	r0, [r8, #8]
 800c066:	4604      	mov	r4, r0
 800c068:	6003      	str	r3, [r0, #0]
 800c06a:	f04f 0900 	mov.w	r9, #0
 800c06e:	07eb      	lsls	r3, r5, #31
 800c070:	d50a      	bpl.n	800c088 <__pow5mult+0x84>
 800c072:	4631      	mov	r1, r6
 800c074:	4622      	mov	r2, r4
 800c076:	4638      	mov	r0, r7
 800c078:	f7ff ff1a 	bl	800beb0 <__multiply>
 800c07c:	4631      	mov	r1, r6
 800c07e:	4680      	mov	r8, r0
 800c080:	4638      	mov	r0, r7
 800c082:	f7ff fe01 	bl	800bc88 <_Bfree>
 800c086:	4646      	mov	r6, r8
 800c088:	106d      	asrs	r5, r5, #1
 800c08a:	d00b      	beq.n	800c0a4 <__pow5mult+0xa0>
 800c08c:	6820      	ldr	r0, [r4, #0]
 800c08e:	b938      	cbnz	r0, 800c0a0 <__pow5mult+0x9c>
 800c090:	4622      	mov	r2, r4
 800c092:	4621      	mov	r1, r4
 800c094:	4638      	mov	r0, r7
 800c096:	f7ff ff0b 	bl	800beb0 <__multiply>
 800c09a:	6020      	str	r0, [r4, #0]
 800c09c:	f8c0 9000 	str.w	r9, [r0]
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	e7e4      	b.n	800c06e <__pow5mult+0x6a>
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0aa:	bf00      	nop
 800c0ac:	0802c140 	.word	0x0802c140
 800c0b0:	0802c066 	.word	0x0802c066
 800c0b4:	0802c0e6 	.word	0x0802c0e6

0800c0b8 <__lshift>:
 800c0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0bc:	460c      	mov	r4, r1
 800c0be:	6849      	ldr	r1, [r1, #4]
 800c0c0:	6923      	ldr	r3, [r4, #16]
 800c0c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c0c6:	68a3      	ldr	r3, [r4, #8]
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	4691      	mov	r9, r2
 800c0cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0d0:	f108 0601 	add.w	r6, r8, #1
 800c0d4:	42b3      	cmp	r3, r6
 800c0d6:	db0b      	blt.n	800c0f0 <__lshift+0x38>
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f7ff fd95 	bl	800bc08 <_Balloc>
 800c0de:	4605      	mov	r5, r0
 800c0e0:	b948      	cbnz	r0, 800c0f6 <__lshift+0x3e>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	4b28      	ldr	r3, [pc, #160]	@ (800c188 <__lshift+0xd0>)
 800c0e6:	4829      	ldr	r0, [pc, #164]	@ (800c18c <__lshift+0xd4>)
 800c0e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c0ec:	f001 fce0 	bl	800dab0 <__assert_func>
 800c0f0:	3101      	adds	r1, #1
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	e7ee      	b.n	800c0d4 <__lshift+0x1c>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f100 0114 	add.w	r1, r0, #20
 800c0fc:	f100 0210 	add.w	r2, r0, #16
 800c100:	4618      	mov	r0, r3
 800c102:	4553      	cmp	r3, sl
 800c104:	db33      	blt.n	800c16e <__lshift+0xb6>
 800c106:	6920      	ldr	r0, [r4, #16]
 800c108:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c10c:	f104 0314 	add.w	r3, r4, #20
 800c110:	f019 091f 	ands.w	r9, r9, #31
 800c114:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c118:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c11c:	d02b      	beq.n	800c176 <__lshift+0xbe>
 800c11e:	f1c9 0e20 	rsb	lr, r9, #32
 800c122:	468a      	mov	sl, r1
 800c124:	2200      	movs	r2, #0
 800c126:	6818      	ldr	r0, [r3, #0]
 800c128:	fa00 f009 	lsl.w	r0, r0, r9
 800c12c:	4310      	orrs	r0, r2
 800c12e:	f84a 0b04 	str.w	r0, [sl], #4
 800c132:	f853 2b04 	ldr.w	r2, [r3], #4
 800c136:	459c      	cmp	ip, r3
 800c138:	fa22 f20e 	lsr.w	r2, r2, lr
 800c13c:	d8f3      	bhi.n	800c126 <__lshift+0x6e>
 800c13e:	ebac 0304 	sub.w	r3, ip, r4
 800c142:	3b15      	subs	r3, #21
 800c144:	f023 0303 	bic.w	r3, r3, #3
 800c148:	3304      	adds	r3, #4
 800c14a:	f104 0015 	add.w	r0, r4, #21
 800c14e:	4584      	cmp	ip, r0
 800c150:	bf38      	it	cc
 800c152:	2304      	movcc	r3, #4
 800c154:	50ca      	str	r2, [r1, r3]
 800c156:	b10a      	cbz	r2, 800c15c <__lshift+0xa4>
 800c158:	f108 0602 	add.w	r6, r8, #2
 800c15c:	3e01      	subs	r6, #1
 800c15e:	4638      	mov	r0, r7
 800c160:	612e      	str	r6, [r5, #16]
 800c162:	4621      	mov	r1, r4
 800c164:	f7ff fd90 	bl	800bc88 <_Bfree>
 800c168:	4628      	mov	r0, r5
 800c16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c16e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c172:	3301      	adds	r3, #1
 800c174:	e7c5      	b.n	800c102 <__lshift+0x4a>
 800c176:	3904      	subs	r1, #4
 800c178:	f853 2b04 	ldr.w	r2, [r3], #4
 800c17c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c180:	459c      	cmp	ip, r3
 800c182:	d8f9      	bhi.n	800c178 <__lshift+0xc0>
 800c184:	e7ea      	b.n	800c15c <__lshift+0xa4>
 800c186:	bf00      	nop
 800c188:	0802c0d5 	.word	0x0802c0d5
 800c18c:	0802c0e6 	.word	0x0802c0e6

0800c190 <__mcmp>:
 800c190:	690a      	ldr	r2, [r1, #16]
 800c192:	4603      	mov	r3, r0
 800c194:	6900      	ldr	r0, [r0, #16]
 800c196:	1a80      	subs	r0, r0, r2
 800c198:	b530      	push	{r4, r5, lr}
 800c19a:	d10e      	bne.n	800c1ba <__mcmp+0x2a>
 800c19c:	3314      	adds	r3, #20
 800c19e:	3114      	adds	r1, #20
 800c1a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c1a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c1a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c1ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c1b0:	4295      	cmp	r5, r2
 800c1b2:	d003      	beq.n	800c1bc <__mcmp+0x2c>
 800c1b4:	d205      	bcs.n	800c1c2 <__mcmp+0x32>
 800c1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ba:	bd30      	pop	{r4, r5, pc}
 800c1bc:	42a3      	cmp	r3, r4
 800c1be:	d3f3      	bcc.n	800c1a8 <__mcmp+0x18>
 800c1c0:	e7fb      	b.n	800c1ba <__mcmp+0x2a>
 800c1c2:	2001      	movs	r0, #1
 800c1c4:	e7f9      	b.n	800c1ba <__mcmp+0x2a>
	...

0800c1c8 <__mdiff>:
 800c1c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	4689      	mov	r9, r1
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	4648      	mov	r0, r9
 800c1d4:	4614      	mov	r4, r2
 800c1d6:	f7ff ffdb 	bl	800c190 <__mcmp>
 800c1da:	1e05      	subs	r5, r0, #0
 800c1dc:	d112      	bne.n	800c204 <__mdiff+0x3c>
 800c1de:	4629      	mov	r1, r5
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	f7ff fd11 	bl	800bc08 <_Balloc>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	b928      	cbnz	r0, 800c1f6 <__mdiff+0x2e>
 800c1ea:	4b3f      	ldr	r3, [pc, #252]	@ (800c2e8 <__mdiff+0x120>)
 800c1ec:	f240 2137 	movw	r1, #567	@ 0x237
 800c1f0:	483e      	ldr	r0, [pc, #248]	@ (800c2ec <__mdiff+0x124>)
 800c1f2:	f001 fc5d 	bl	800dab0 <__assert_func>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	b003      	add	sp, #12
 800c200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c204:	bfbc      	itt	lt
 800c206:	464b      	movlt	r3, r9
 800c208:	46a1      	movlt	r9, r4
 800c20a:	4630      	mov	r0, r6
 800c20c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c210:	bfba      	itte	lt
 800c212:	461c      	movlt	r4, r3
 800c214:	2501      	movlt	r5, #1
 800c216:	2500      	movge	r5, #0
 800c218:	f7ff fcf6 	bl	800bc08 <_Balloc>
 800c21c:	4602      	mov	r2, r0
 800c21e:	b918      	cbnz	r0, 800c228 <__mdiff+0x60>
 800c220:	4b31      	ldr	r3, [pc, #196]	@ (800c2e8 <__mdiff+0x120>)
 800c222:	f240 2145 	movw	r1, #581	@ 0x245
 800c226:	e7e3      	b.n	800c1f0 <__mdiff+0x28>
 800c228:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c22c:	6926      	ldr	r6, [r4, #16]
 800c22e:	60c5      	str	r5, [r0, #12]
 800c230:	f109 0310 	add.w	r3, r9, #16
 800c234:	f109 0514 	add.w	r5, r9, #20
 800c238:	f104 0e14 	add.w	lr, r4, #20
 800c23c:	f100 0b14 	add.w	fp, r0, #20
 800c240:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c244:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	46d9      	mov	r9, fp
 800c24c:	f04f 0c00 	mov.w	ip, #0
 800c250:	9b01      	ldr	r3, [sp, #4]
 800c252:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c256:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c25a:	9301      	str	r3, [sp, #4]
 800c25c:	fa1f f38a 	uxth.w	r3, sl
 800c260:	4619      	mov	r1, r3
 800c262:	b283      	uxth	r3, r0
 800c264:	1acb      	subs	r3, r1, r3
 800c266:	0c00      	lsrs	r0, r0, #16
 800c268:	4463      	add	r3, ip
 800c26a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c26e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c272:	b29b      	uxth	r3, r3
 800c274:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c278:	4576      	cmp	r6, lr
 800c27a:	f849 3b04 	str.w	r3, [r9], #4
 800c27e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c282:	d8e5      	bhi.n	800c250 <__mdiff+0x88>
 800c284:	1b33      	subs	r3, r6, r4
 800c286:	3b15      	subs	r3, #21
 800c288:	f023 0303 	bic.w	r3, r3, #3
 800c28c:	3415      	adds	r4, #21
 800c28e:	3304      	adds	r3, #4
 800c290:	42a6      	cmp	r6, r4
 800c292:	bf38      	it	cc
 800c294:	2304      	movcc	r3, #4
 800c296:	441d      	add	r5, r3
 800c298:	445b      	add	r3, fp
 800c29a:	461e      	mov	r6, r3
 800c29c:	462c      	mov	r4, r5
 800c29e:	4544      	cmp	r4, r8
 800c2a0:	d30e      	bcc.n	800c2c0 <__mdiff+0xf8>
 800c2a2:	f108 0103 	add.w	r1, r8, #3
 800c2a6:	1b49      	subs	r1, r1, r5
 800c2a8:	f021 0103 	bic.w	r1, r1, #3
 800c2ac:	3d03      	subs	r5, #3
 800c2ae:	45a8      	cmp	r8, r5
 800c2b0:	bf38      	it	cc
 800c2b2:	2100      	movcc	r1, #0
 800c2b4:	440b      	add	r3, r1
 800c2b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c2ba:	b191      	cbz	r1, 800c2e2 <__mdiff+0x11a>
 800c2bc:	6117      	str	r7, [r2, #16]
 800c2be:	e79d      	b.n	800c1fc <__mdiff+0x34>
 800c2c0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c2c4:	46e6      	mov	lr, ip
 800c2c6:	0c08      	lsrs	r0, r1, #16
 800c2c8:	fa1c fc81 	uxtah	ip, ip, r1
 800c2cc:	4471      	add	r1, lr
 800c2ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c2d2:	b289      	uxth	r1, r1
 800c2d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c2d8:	f846 1b04 	str.w	r1, [r6], #4
 800c2dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2e0:	e7dd      	b.n	800c29e <__mdiff+0xd6>
 800c2e2:	3f01      	subs	r7, #1
 800c2e4:	e7e7      	b.n	800c2b6 <__mdiff+0xee>
 800c2e6:	bf00      	nop
 800c2e8:	0802c0d5 	.word	0x0802c0d5
 800c2ec:	0802c0e6 	.word	0x0802c0e6

0800c2f0 <__ulp>:
 800c2f0:	b082      	sub	sp, #8
 800c2f2:	ed8d 0b00 	vstr	d0, [sp]
 800c2f6:	9a01      	ldr	r2, [sp, #4]
 800c2f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c338 <__ulp+0x48>)
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c300:	2b00      	cmp	r3, #0
 800c302:	dc08      	bgt.n	800c316 <__ulp+0x26>
 800c304:	425b      	negs	r3, r3
 800c306:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c30a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c30e:	da04      	bge.n	800c31a <__ulp+0x2a>
 800c310:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c314:	4113      	asrs	r3, r2
 800c316:	2200      	movs	r2, #0
 800c318:	e008      	b.n	800c32c <__ulp+0x3c>
 800c31a:	f1a2 0314 	sub.w	r3, r2, #20
 800c31e:	2b1e      	cmp	r3, #30
 800c320:	bfda      	itte	le
 800c322:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c326:	40da      	lsrle	r2, r3
 800c328:	2201      	movgt	r2, #1
 800c32a:	2300      	movs	r3, #0
 800c32c:	4619      	mov	r1, r3
 800c32e:	4610      	mov	r0, r2
 800c330:	ec41 0b10 	vmov	d0, r0, r1
 800c334:	b002      	add	sp, #8
 800c336:	4770      	bx	lr
 800c338:	7ff00000 	.word	0x7ff00000

0800c33c <__b2d>:
 800c33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c340:	6906      	ldr	r6, [r0, #16]
 800c342:	f100 0814 	add.w	r8, r0, #20
 800c346:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c34a:	1f37      	subs	r7, r6, #4
 800c34c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c350:	4610      	mov	r0, r2
 800c352:	f7ff fd4b 	bl	800bdec <__hi0bits>
 800c356:	f1c0 0320 	rsb	r3, r0, #32
 800c35a:	280a      	cmp	r0, #10
 800c35c:	600b      	str	r3, [r1, #0]
 800c35e:	491b      	ldr	r1, [pc, #108]	@ (800c3cc <__b2d+0x90>)
 800c360:	dc15      	bgt.n	800c38e <__b2d+0x52>
 800c362:	f1c0 0c0b 	rsb	ip, r0, #11
 800c366:	fa22 f30c 	lsr.w	r3, r2, ip
 800c36a:	45b8      	cmp	r8, r7
 800c36c:	ea43 0501 	orr.w	r5, r3, r1
 800c370:	bf34      	ite	cc
 800c372:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c376:	2300      	movcs	r3, #0
 800c378:	3015      	adds	r0, #21
 800c37a:	fa02 f000 	lsl.w	r0, r2, r0
 800c37e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c382:	4303      	orrs	r3, r0
 800c384:	461c      	mov	r4, r3
 800c386:	ec45 4b10 	vmov	d0, r4, r5
 800c38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c38e:	45b8      	cmp	r8, r7
 800c390:	bf3a      	itte	cc
 800c392:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c396:	f1a6 0708 	subcc.w	r7, r6, #8
 800c39a:	2300      	movcs	r3, #0
 800c39c:	380b      	subs	r0, #11
 800c39e:	d012      	beq.n	800c3c6 <__b2d+0x8a>
 800c3a0:	f1c0 0120 	rsb	r1, r0, #32
 800c3a4:	fa23 f401 	lsr.w	r4, r3, r1
 800c3a8:	4082      	lsls	r2, r0
 800c3aa:	4322      	orrs	r2, r4
 800c3ac:	4547      	cmp	r7, r8
 800c3ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c3b2:	bf8c      	ite	hi
 800c3b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c3b8:	2200      	movls	r2, #0
 800c3ba:	4083      	lsls	r3, r0
 800c3bc:	40ca      	lsrs	r2, r1
 800c3be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	e7de      	b.n	800c384 <__b2d+0x48>
 800c3c6:	ea42 0501 	orr.w	r5, r2, r1
 800c3ca:	e7db      	b.n	800c384 <__b2d+0x48>
 800c3cc:	3ff00000 	.word	0x3ff00000

0800c3d0 <__d2b>:
 800c3d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	2101      	movs	r1, #1
 800c3d8:	ec59 8b10 	vmov	r8, r9, d0
 800c3dc:	4616      	mov	r6, r2
 800c3de:	f7ff fc13 	bl	800bc08 <_Balloc>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	b930      	cbnz	r0, 800c3f4 <__d2b+0x24>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	4b23      	ldr	r3, [pc, #140]	@ (800c478 <__d2b+0xa8>)
 800c3ea:	4824      	ldr	r0, [pc, #144]	@ (800c47c <__d2b+0xac>)
 800c3ec:	f240 310f 	movw	r1, #783	@ 0x30f
 800c3f0:	f001 fb5e 	bl	800dab0 <__assert_func>
 800c3f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c3f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3fc:	b10d      	cbz	r5, 800c402 <__d2b+0x32>
 800c3fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	f1b8 0300 	subs.w	r3, r8, #0
 800c408:	d023      	beq.n	800c452 <__d2b+0x82>
 800c40a:	4668      	mov	r0, sp
 800c40c:	9300      	str	r3, [sp, #0]
 800c40e:	f7ff fd0c 	bl	800be2a <__lo0bits>
 800c412:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c416:	b1d0      	cbz	r0, 800c44e <__d2b+0x7e>
 800c418:	f1c0 0320 	rsb	r3, r0, #32
 800c41c:	fa02 f303 	lsl.w	r3, r2, r3
 800c420:	430b      	orrs	r3, r1
 800c422:	40c2      	lsrs	r2, r0
 800c424:	6163      	str	r3, [r4, #20]
 800c426:	9201      	str	r2, [sp, #4]
 800c428:	9b01      	ldr	r3, [sp, #4]
 800c42a:	61a3      	str	r3, [r4, #24]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	bf0c      	ite	eq
 800c430:	2201      	moveq	r2, #1
 800c432:	2202      	movne	r2, #2
 800c434:	6122      	str	r2, [r4, #16]
 800c436:	b1a5      	cbz	r5, 800c462 <__d2b+0x92>
 800c438:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c43c:	4405      	add	r5, r0
 800c43e:	603d      	str	r5, [r7, #0]
 800c440:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c444:	6030      	str	r0, [r6, #0]
 800c446:	4620      	mov	r0, r4
 800c448:	b003      	add	sp, #12
 800c44a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c44e:	6161      	str	r1, [r4, #20]
 800c450:	e7ea      	b.n	800c428 <__d2b+0x58>
 800c452:	a801      	add	r0, sp, #4
 800c454:	f7ff fce9 	bl	800be2a <__lo0bits>
 800c458:	9b01      	ldr	r3, [sp, #4]
 800c45a:	6163      	str	r3, [r4, #20]
 800c45c:	3020      	adds	r0, #32
 800c45e:	2201      	movs	r2, #1
 800c460:	e7e8      	b.n	800c434 <__d2b+0x64>
 800c462:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c466:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c46a:	6038      	str	r0, [r7, #0]
 800c46c:	6918      	ldr	r0, [r3, #16]
 800c46e:	f7ff fcbd 	bl	800bdec <__hi0bits>
 800c472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c476:	e7e5      	b.n	800c444 <__d2b+0x74>
 800c478:	0802c0d5 	.word	0x0802c0d5
 800c47c:	0802c0e6 	.word	0x0802c0e6

0800c480 <__ratio>:
 800c480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c484:	b085      	sub	sp, #20
 800c486:	e9cd 1000 	strd	r1, r0, [sp]
 800c48a:	a902      	add	r1, sp, #8
 800c48c:	f7ff ff56 	bl	800c33c <__b2d>
 800c490:	9800      	ldr	r0, [sp, #0]
 800c492:	a903      	add	r1, sp, #12
 800c494:	ec55 4b10 	vmov	r4, r5, d0
 800c498:	f7ff ff50 	bl	800c33c <__b2d>
 800c49c:	9b01      	ldr	r3, [sp, #4]
 800c49e:	6919      	ldr	r1, [r3, #16]
 800c4a0:	9b00      	ldr	r3, [sp, #0]
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	1ac9      	subs	r1, r1, r3
 800c4a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c4aa:	1a9b      	subs	r3, r3, r2
 800c4ac:	ec5b ab10 	vmov	sl, fp, d0
 800c4b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	bfce      	itee	gt
 800c4b8:	462a      	movgt	r2, r5
 800c4ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c4be:	465a      	movle	r2, fp
 800c4c0:	462f      	mov	r7, r5
 800c4c2:	46d9      	mov	r9, fp
 800c4c4:	bfcc      	ite	gt
 800c4c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c4ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c4ce:	464b      	mov	r3, r9
 800c4d0:	4652      	mov	r2, sl
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	4639      	mov	r1, r7
 800c4d6:	f7f4 f9b9 	bl	800084c <__aeabi_ddiv>
 800c4da:	ec41 0b10 	vmov	d0, r0, r1
 800c4de:	b005      	add	sp, #20
 800c4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4e4 <__copybits>:
 800c4e4:	3901      	subs	r1, #1
 800c4e6:	b570      	push	{r4, r5, r6, lr}
 800c4e8:	1149      	asrs	r1, r1, #5
 800c4ea:	6914      	ldr	r4, [r2, #16]
 800c4ec:	3101      	adds	r1, #1
 800c4ee:	f102 0314 	add.w	r3, r2, #20
 800c4f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c4f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c4fa:	1f05      	subs	r5, r0, #4
 800c4fc:	42a3      	cmp	r3, r4
 800c4fe:	d30c      	bcc.n	800c51a <__copybits+0x36>
 800c500:	1aa3      	subs	r3, r4, r2
 800c502:	3b11      	subs	r3, #17
 800c504:	f023 0303 	bic.w	r3, r3, #3
 800c508:	3211      	adds	r2, #17
 800c50a:	42a2      	cmp	r2, r4
 800c50c:	bf88      	it	hi
 800c50e:	2300      	movhi	r3, #0
 800c510:	4418      	add	r0, r3
 800c512:	2300      	movs	r3, #0
 800c514:	4288      	cmp	r0, r1
 800c516:	d305      	bcc.n	800c524 <__copybits+0x40>
 800c518:	bd70      	pop	{r4, r5, r6, pc}
 800c51a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c51e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c522:	e7eb      	b.n	800c4fc <__copybits+0x18>
 800c524:	f840 3b04 	str.w	r3, [r0], #4
 800c528:	e7f4      	b.n	800c514 <__copybits+0x30>

0800c52a <__any_on>:
 800c52a:	f100 0214 	add.w	r2, r0, #20
 800c52e:	6900      	ldr	r0, [r0, #16]
 800c530:	114b      	asrs	r3, r1, #5
 800c532:	4298      	cmp	r0, r3
 800c534:	b510      	push	{r4, lr}
 800c536:	db11      	blt.n	800c55c <__any_on+0x32>
 800c538:	dd0a      	ble.n	800c550 <__any_on+0x26>
 800c53a:	f011 011f 	ands.w	r1, r1, #31
 800c53e:	d007      	beq.n	800c550 <__any_on+0x26>
 800c540:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c544:	fa24 f001 	lsr.w	r0, r4, r1
 800c548:	fa00 f101 	lsl.w	r1, r0, r1
 800c54c:	428c      	cmp	r4, r1
 800c54e:	d10b      	bne.n	800c568 <__any_on+0x3e>
 800c550:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c554:	4293      	cmp	r3, r2
 800c556:	d803      	bhi.n	800c560 <__any_on+0x36>
 800c558:	2000      	movs	r0, #0
 800c55a:	bd10      	pop	{r4, pc}
 800c55c:	4603      	mov	r3, r0
 800c55e:	e7f7      	b.n	800c550 <__any_on+0x26>
 800c560:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c564:	2900      	cmp	r1, #0
 800c566:	d0f5      	beq.n	800c554 <__any_on+0x2a>
 800c568:	2001      	movs	r0, #1
 800c56a:	e7f6      	b.n	800c55a <__any_on+0x30>

0800c56c <sulp>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	4604      	mov	r4, r0
 800c570:	460d      	mov	r5, r1
 800c572:	ec45 4b10 	vmov	d0, r4, r5
 800c576:	4616      	mov	r6, r2
 800c578:	f7ff feba 	bl	800c2f0 <__ulp>
 800c57c:	ec51 0b10 	vmov	r0, r1, d0
 800c580:	b17e      	cbz	r6, 800c5a2 <sulp+0x36>
 800c582:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c586:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	dd09      	ble.n	800c5a2 <sulp+0x36>
 800c58e:	051b      	lsls	r3, r3, #20
 800c590:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c594:	2400      	movs	r4, #0
 800c596:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c59a:	4622      	mov	r2, r4
 800c59c:	462b      	mov	r3, r5
 800c59e:	f7f4 f82b 	bl	80005f8 <__aeabi_dmul>
 800c5a2:	ec41 0b10 	vmov	d0, r0, r1
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}

0800c5a8 <_strtod_l>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	b09f      	sub	sp, #124	@ 0x7c
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	921a      	str	r2, [sp, #104]	@ 0x68
 800c5b6:	9005      	str	r0, [sp, #20]
 800c5b8:	f04f 0a00 	mov.w	sl, #0
 800c5bc:	f04f 0b00 	mov.w	fp, #0
 800c5c0:	460a      	mov	r2, r1
 800c5c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5c4:	7811      	ldrb	r1, [r2, #0]
 800c5c6:	292b      	cmp	r1, #43	@ 0x2b
 800c5c8:	d04a      	beq.n	800c660 <_strtod_l+0xb8>
 800c5ca:	d838      	bhi.n	800c63e <_strtod_l+0x96>
 800c5cc:	290d      	cmp	r1, #13
 800c5ce:	d832      	bhi.n	800c636 <_strtod_l+0x8e>
 800c5d0:	2908      	cmp	r1, #8
 800c5d2:	d832      	bhi.n	800c63a <_strtod_l+0x92>
 800c5d4:	2900      	cmp	r1, #0
 800c5d6:	d03b      	beq.n	800c650 <_strtod_l+0xa8>
 800c5d8:	2200      	movs	r2, #0
 800c5da:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c5dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c5de:	782a      	ldrb	r2, [r5, #0]
 800c5e0:	2a30      	cmp	r2, #48	@ 0x30
 800c5e2:	f040 80b3 	bne.w	800c74c <_strtod_l+0x1a4>
 800c5e6:	786a      	ldrb	r2, [r5, #1]
 800c5e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c5ec:	2a58      	cmp	r2, #88	@ 0x58
 800c5ee:	d16e      	bne.n	800c6ce <_strtod_l+0x126>
 800c5f0:	9302      	str	r3, [sp, #8]
 800c5f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5f4:	9301      	str	r3, [sp, #4]
 800c5f6:	ab1a      	add	r3, sp, #104	@ 0x68
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	4a8e      	ldr	r2, [pc, #568]	@ (800c834 <_strtod_l+0x28c>)
 800c5fc:	9805      	ldr	r0, [sp, #20]
 800c5fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c600:	a919      	add	r1, sp, #100	@ 0x64
 800c602:	f001 faef 	bl	800dbe4 <__gethex>
 800c606:	f010 060f 	ands.w	r6, r0, #15
 800c60a:	4604      	mov	r4, r0
 800c60c:	d005      	beq.n	800c61a <_strtod_l+0x72>
 800c60e:	2e06      	cmp	r6, #6
 800c610:	d128      	bne.n	800c664 <_strtod_l+0xbc>
 800c612:	3501      	adds	r5, #1
 800c614:	2300      	movs	r3, #0
 800c616:	9519      	str	r5, [sp, #100]	@ 0x64
 800c618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c61a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f040 858e 	bne.w	800d13e <_strtod_l+0xb96>
 800c622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c624:	b1cb      	cbz	r3, 800c65a <_strtod_l+0xb2>
 800c626:	4652      	mov	r2, sl
 800c628:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c62c:	ec43 2b10 	vmov	d0, r2, r3
 800c630:	b01f      	add	sp, #124	@ 0x7c
 800c632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c636:	2920      	cmp	r1, #32
 800c638:	d1ce      	bne.n	800c5d8 <_strtod_l+0x30>
 800c63a:	3201      	adds	r2, #1
 800c63c:	e7c1      	b.n	800c5c2 <_strtod_l+0x1a>
 800c63e:	292d      	cmp	r1, #45	@ 0x2d
 800c640:	d1ca      	bne.n	800c5d8 <_strtod_l+0x30>
 800c642:	2101      	movs	r1, #1
 800c644:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c646:	1c51      	adds	r1, r2, #1
 800c648:	9119      	str	r1, [sp, #100]	@ 0x64
 800c64a:	7852      	ldrb	r2, [r2, #1]
 800c64c:	2a00      	cmp	r2, #0
 800c64e:	d1c5      	bne.n	800c5dc <_strtod_l+0x34>
 800c650:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c652:	9419      	str	r4, [sp, #100]	@ 0x64
 800c654:	2b00      	cmp	r3, #0
 800c656:	f040 8570 	bne.w	800d13a <_strtod_l+0xb92>
 800c65a:	4652      	mov	r2, sl
 800c65c:	465b      	mov	r3, fp
 800c65e:	e7e5      	b.n	800c62c <_strtod_l+0x84>
 800c660:	2100      	movs	r1, #0
 800c662:	e7ef      	b.n	800c644 <_strtod_l+0x9c>
 800c664:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c666:	b13a      	cbz	r2, 800c678 <_strtod_l+0xd0>
 800c668:	2135      	movs	r1, #53	@ 0x35
 800c66a:	a81c      	add	r0, sp, #112	@ 0x70
 800c66c:	f7ff ff3a 	bl	800c4e4 <__copybits>
 800c670:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c672:	9805      	ldr	r0, [sp, #20]
 800c674:	f7ff fb08 	bl	800bc88 <_Bfree>
 800c678:	3e01      	subs	r6, #1
 800c67a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c67c:	2e04      	cmp	r6, #4
 800c67e:	d806      	bhi.n	800c68e <_strtod_l+0xe6>
 800c680:	e8df f006 	tbb	[pc, r6]
 800c684:	201d0314 	.word	0x201d0314
 800c688:	14          	.byte	0x14
 800c689:	00          	.byte	0x00
 800c68a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c68e:	05e1      	lsls	r1, r4, #23
 800c690:	bf48      	it	mi
 800c692:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c696:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c69a:	0d1b      	lsrs	r3, r3, #20
 800c69c:	051b      	lsls	r3, r3, #20
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1bb      	bne.n	800c61a <_strtod_l+0x72>
 800c6a2:	f7fe fb2f 	bl	800ad04 <__errno>
 800c6a6:	2322      	movs	r3, #34	@ 0x22
 800c6a8:	6003      	str	r3, [r0, #0]
 800c6aa:	e7b6      	b.n	800c61a <_strtod_l+0x72>
 800c6ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c6b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c6b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c6b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c6bc:	e7e7      	b.n	800c68e <_strtod_l+0xe6>
 800c6be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c83c <_strtod_l+0x294>
 800c6c2:	e7e4      	b.n	800c68e <_strtod_l+0xe6>
 800c6c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c6c8:	f04f 3aff 	mov.w	sl, #4294967295
 800c6cc:	e7df      	b.n	800c68e <_strtod_l+0xe6>
 800c6ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6d0:	1c5a      	adds	r2, r3, #1
 800c6d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6d4:	785b      	ldrb	r3, [r3, #1]
 800c6d6:	2b30      	cmp	r3, #48	@ 0x30
 800c6d8:	d0f9      	beq.n	800c6ce <_strtod_l+0x126>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d09d      	beq.n	800c61a <_strtod_l+0x72>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	9308      	str	r3, [sp, #32]
 800c6ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6ec:	461f      	mov	r7, r3
 800c6ee:	220a      	movs	r2, #10
 800c6f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c6f2:	7805      	ldrb	r5, [r0, #0]
 800c6f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c6f8:	b2d9      	uxtb	r1, r3
 800c6fa:	2909      	cmp	r1, #9
 800c6fc:	d928      	bls.n	800c750 <_strtod_l+0x1a8>
 800c6fe:	494e      	ldr	r1, [pc, #312]	@ (800c838 <_strtod_l+0x290>)
 800c700:	2201      	movs	r2, #1
 800c702:	f001 f979 	bl	800d9f8 <strncmp>
 800c706:	2800      	cmp	r0, #0
 800c708:	d032      	beq.n	800c770 <_strtod_l+0x1c8>
 800c70a:	2000      	movs	r0, #0
 800c70c:	462a      	mov	r2, r5
 800c70e:	4681      	mov	r9, r0
 800c710:	463d      	mov	r5, r7
 800c712:	4603      	mov	r3, r0
 800c714:	2a65      	cmp	r2, #101	@ 0x65
 800c716:	d001      	beq.n	800c71c <_strtod_l+0x174>
 800c718:	2a45      	cmp	r2, #69	@ 0x45
 800c71a:	d114      	bne.n	800c746 <_strtod_l+0x19e>
 800c71c:	b91d      	cbnz	r5, 800c726 <_strtod_l+0x17e>
 800c71e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c720:	4302      	orrs	r2, r0
 800c722:	d095      	beq.n	800c650 <_strtod_l+0xa8>
 800c724:	2500      	movs	r5, #0
 800c726:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c728:	1c62      	adds	r2, r4, #1
 800c72a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c72c:	7862      	ldrb	r2, [r4, #1]
 800c72e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c730:	d077      	beq.n	800c822 <_strtod_l+0x27a>
 800c732:	2a2d      	cmp	r2, #45	@ 0x2d
 800c734:	d07b      	beq.n	800c82e <_strtod_l+0x286>
 800c736:	f04f 0c00 	mov.w	ip, #0
 800c73a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c73e:	2909      	cmp	r1, #9
 800c740:	f240 8082 	bls.w	800c848 <_strtod_l+0x2a0>
 800c744:	9419      	str	r4, [sp, #100]	@ 0x64
 800c746:	f04f 0800 	mov.w	r8, #0
 800c74a:	e0a2      	b.n	800c892 <_strtod_l+0x2ea>
 800c74c:	2300      	movs	r3, #0
 800c74e:	e7c7      	b.n	800c6e0 <_strtod_l+0x138>
 800c750:	2f08      	cmp	r7, #8
 800c752:	bfd5      	itete	le
 800c754:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c756:	9908      	ldrgt	r1, [sp, #32]
 800c758:	fb02 3301 	mlale	r3, r2, r1, r3
 800c75c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c760:	f100 0001 	add.w	r0, r0, #1
 800c764:	bfd4      	ite	le
 800c766:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c768:	9308      	strgt	r3, [sp, #32]
 800c76a:	3701      	adds	r7, #1
 800c76c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c76e:	e7bf      	b.n	800c6f0 <_strtod_l+0x148>
 800c770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	9219      	str	r2, [sp, #100]	@ 0x64
 800c776:	785a      	ldrb	r2, [r3, #1]
 800c778:	b37f      	cbz	r7, 800c7da <_strtod_l+0x232>
 800c77a:	4681      	mov	r9, r0
 800c77c:	463d      	mov	r5, r7
 800c77e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c782:	2b09      	cmp	r3, #9
 800c784:	d912      	bls.n	800c7ac <_strtod_l+0x204>
 800c786:	2301      	movs	r3, #1
 800c788:	e7c4      	b.n	800c714 <_strtod_l+0x16c>
 800c78a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c78c:	1c5a      	adds	r2, r3, #1
 800c78e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c790:	785a      	ldrb	r2, [r3, #1]
 800c792:	3001      	adds	r0, #1
 800c794:	2a30      	cmp	r2, #48	@ 0x30
 800c796:	d0f8      	beq.n	800c78a <_strtod_l+0x1e2>
 800c798:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c79c:	2b08      	cmp	r3, #8
 800c79e:	f200 84d3 	bhi.w	800d148 <_strtod_l+0xba0>
 800c7a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c7a6:	4681      	mov	r9, r0
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	3a30      	subs	r2, #48	@ 0x30
 800c7ae:	f100 0301 	add.w	r3, r0, #1
 800c7b2:	d02a      	beq.n	800c80a <_strtod_l+0x262>
 800c7b4:	4499      	add	r9, r3
 800c7b6:	eb00 0c05 	add.w	ip, r0, r5
 800c7ba:	462b      	mov	r3, r5
 800c7bc:	210a      	movs	r1, #10
 800c7be:	4563      	cmp	r3, ip
 800c7c0:	d10d      	bne.n	800c7de <_strtod_l+0x236>
 800c7c2:	1c69      	adds	r1, r5, #1
 800c7c4:	4401      	add	r1, r0
 800c7c6:	4428      	add	r0, r5
 800c7c8:	2808      	cmp	r0, #8
 800c7ca:	dc16      	bgt.n	800c7fa <_strtod_l+0x252>
 800c7cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c7ce:	230a      	movs	r3, #10
 800c7d0:	fb03 2300 	mla	r3, r3, r0, r2
 800c7d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	e018      	b.n	800c80c <_strtod_l+0x264>
 800c7da:	4638      	mov	r0, r7
 800c7dc:	e7da      	b.n	800c794 <_strtod_l+0x1ec>
 800c7de:	2b08      	cmp	r3, #8
 800c7e0:	f103 0301 	add.w	r3, r3, #1
 800c7e4:	dc03      	bgt.n	800c7ee <_strtod_l+0x246>
 800c7e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c7e8:	434e      	muls	r6, r1
 800c7ea:	960a      	str	r6, [sp, #40]	@ 0x28
 800c7ec:	e7e7      	b.n	800c7be <_strtod_l+0x216>
 800c7ee:	2b10      	cmp	r3, #16
 800c7f0:	bfde      	ittt	le
 800c7f2:	9e08      	ldrle	r6, [sp, #32]
 800c7f4:	434e      	mulle	r6, r1
 800c7f6:	9608      	strle	r6, [sp, #32]
 800c7f8:	e7e1      	b.n	800c7be <_strtod_l+0x216>
 800c7fa:	280f      	cmp	r0, #15
 800c7fc:	dceb      	bgt.n	800c7d6 <_strtod_l+0x22e>
 800c7fe:	9808      	ldr	r0, [sp, #32]
 800c800:	230a      	movs	r3, #10
 800c802:	fb03 2300 	mla	r3, r3, r0, r2
 800c806:	9308      	str	r3, [sp, #32]
 800c808:	e7e5      	b.n	800c7d6 <_strtod_l+0x22e>
 800c80a:	4629      	mov	r1, r5
 800c80c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c80e:	1c50      	adds	r0, r2, #1
 800c810:	9019      	str	r0, [sp, #100]	@ 0x64
 800c812:	7852      	ldrb	r2, [r2, #1]
 800c814:	4618      	mov	r0, r3
 800c816:	460d      	mov	r5, r1
 800c818:	e7b1      	b.n	800c77e <_strtod_l+0x1d6>
 800c81a:	f04f 0900 	mov.w	r9, #0
 800c81e:	2301      	movs	r3, #1
 800c820:	e77d      	b.n	800c71e <_strtod_l+0x176>
 800c822:	f04f 0c00 	mov.w	ip, #0
 800c826:	1ca2      	adds	r2, r4, #2
 800c828:	9219      	str	r2, [sp, #100]	@ 0x64
 800c82a:	78a2      	ldrb	r2, [r4, #2]
 800c82c:	e785      	b.n	800c73a <_strtod_l+0x192>
 800c82e:	f04f 0c01 	mov.w	ip, #1
 800c832:	e7f8      	b.n	800c826 <_strtod_l+0x27e>
 800c834:	0802c258 	.word	0x0802c258
 800c838:	0802c240 	.word	0x0802c240
 800c83c:	7ff00000 	.word	0x7ff00000
 800c840:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c842:	1c51      	adds	r1, r2, #1
 800c844:	9119      	str	r1, [sp, #100]	@ 0x64
 800c846:	7852      	ldrb	r2, [r2, #1]
 800c848:	2a30      	cmp	r2, #48	@ 0x30
 800c84a:	d0f9      	beq.n	800c840 <_strtod_l+0x298>
 800c84c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c850:	2908      	cmp	r1, #8
 800c852:	f63f af78 	bhi.w	800c746 <_strtod_l+0x19e>
 800c856:	3a30      	subs	r2, #48	@ 0x30
 800c858:	920e      	str	r2, [sp, #56]	@ 0x38
 800c85a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c85c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c85e:	f04f 080a 	mov.w	r8, #10
 800c862:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c864:	1c56      	adds	r6, r2, #1
 800c866:	9619      	str	r6, [sp, #100]	@ 0x64
 800c868:	7852      	ldrb	r2, [r2, #1]
 800c86a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c86e:	f1be 0f09 	cmp.w	lr, #9
 800c872:	d939      	bls.n	800c8e8 <_strtod_l+0x340>
 800c874:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c876:	1a76      	subs	r6, r6, r1
 800c878:	2e08      	cmp	r6, #8
 800c87a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c87e:	dc03      	bgt.n	800c888 <_strtod_l+0x2e0>
 800c880:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c882:	4588      	cmp	r8, r1
 800c884:	bfa8      	it	ge
 800c886:	4688      	movge	r8, r1
 800c888:	f1bc 0f00 	cmp.w	ip, #0
 800c88c:	d001      	beq.n	800c892 <_strtod_l+0x2ea>
 800c88e:	f1c8 0800 	rsb	r8, r8, #0
 800c892:	2d00      	cmp	r5, #0
 800c894:	d14e      	bne.n	800c934 <_strtod_l+0x38c>
 800c896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c898:	4308      	orrs	r0, r1
 800c89a:	f47f aebe 	bne.w	800c61a <_strtod_l+0x72>
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f47f aed6 	bne.w	800c650 <_strtod_l+0xa8>
 800c8a4:	2a69      	cmp	r2, #105	@ 0x69
 800c8a6:	d028      	beq.n	800c8fa <_strtod_l+0x352>
 800c8a8:	dc25      	bgt.n	800c8f6 <_strtod_l+0x34e>
 800c8aa:	2a49      	cmp	r2, #73	@ 0x49
 800c8ac:	d025      	beq.n	800c8fa <_strtod_l+0x352>
 800c8ae:	2a4e      	cmp	r2, #78	@ 0x4e
 800c8b0:	f47f aece 	bne.w	800c650 <_strtod_l+0xa8>
 800c8b4:	499b      	ldr	r1, [pc, #620]	@ (800cb24 <_strtod_l+0x57c>)
 800c8b6:	a819      	add	r0, sp, #100	@ 0x64
 800c8b8:	f001 fbb6 	bl	800e028 <__match>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	f43f aec7 	beq.w	800c650 <_strtod_l+0xa8>
 800c8c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	2b28      	cmp	r3, #40	@ 0x28
 800c8c8:	d12e      	bne.n	800c928 <_strtod_l+0x380>
 800c8ca:	4997      	ldr	r1, [pc, #604]	@ (800cb28 <_strtod_l+0x580>)
 800c8cc:	aa1c      	add	r2, sp, #112	@ 0x70
 800c8ce:	a819      	add	r0, sp, #100	@ 0x64
 800c8d0:	f001 fbbe 	bl	800e050 <__hexnan>
 800c8d4:	2805      	cmp	r0, #5
 800c8d6:	d127      	bne.n	800c928 <_strtod_l+0x380>
 800c8d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c8da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c8de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c8e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c8e6:	e698      	b.n	800c61a <_strtod_l+0x72>
 800c8e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c8ea:	fb08 2101 	mla	r1, r8, r1, r2
 800c8ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c8f2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c8f4:	e7b5      	b.n	800c862 <_strtod_l+0x2ba>
 800c8f6:	2a6e      	cmp	r2, #110	@ 0x6e
 800c8f8:	e7da      	b.n	800c8b0 <_strtod_l+0x308>
 800c8fa:	498c      	ldr	r1, [pc, #560]	@ (800cb2c <_strtod_l+0x584>)
 800c8fc:	a819      	add	r0, sp, #100	@ 0x64
 800c8fe:	f001 fb93 	bl	800e028 <__match>
 800c902:	2800      	cmp	r0, #0
 800c904:	f43f aea4 	beq.w	800c650 <_strtod_l+0xa8>
 800c908:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c90a:	4989      	ldr	r1, [pc, #548]	@ (800cb30 <_strtod_l+0x588>)
 800c90c:	3b01      	subs	r3, #1
 800c90e:	a819      	add	r0, sp, #100	@ 0x64
 800c910:	9319      	str	r3, [sp, #100]	@ 0x64
 800c912:	f001 fb89 	bl	800e028 <__match>
 800c916:	b910      	cbnz	r0, 800c91e <_strtod_l+0x376>
 800c918:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c91a:	3301      	adds	r3, #1
 800c91c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c91e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cb40 <_strtod_l+0x598>
 800c922:	f04f 0a00 	mov.w	sl, #0
 800c926:	e678      	b.n	800c61a <_strtod_l+0x72>
 800c928:	4882      	ldr	r0, [pc, #520]	@ (800cb34 <_strtod_l+0x58c>)
 800c92a:	f001 f8b9 	bl	800daa0 <nan>
 800c92e:	ec5b ab10 	vmov	sl, fp, d0
 800c932:	e672      	b.n	800c61a <_strtod_l+0x72>
 800c934:	eba8 0309 	sub.w	r3, r8, r9
 800c938:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c93a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c93c:	2f00      	cmp	r7, #0
 800c93e:	bf08      	it	eq
 800c940:	462f      	moveq	r7, r5
 800c942:	2d10      	cmp	r5, #16
 800c944:	462c      	mov	r4, r5
 800c946:	bfa8      	it	ge
 800c948:	2410      	movge	r4, #16
 800c94a:	f7f3 fddb 	bl	8000504 <__aeabi_ui2d>
 800c94e:	2d09      	cmp	r5, #9
 800c950:	4682      	mov	sl, r0
 800c952:	468b      	mov	fp, r1
 800c954:	dc13      	bgt.n	800c97e <_strtod_l+0x3d6>
 800c956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f43f ae5e 	beq.w	800c61a <_strtod_l+0x72>
 800c95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c960:	dd78      	ble.n	800ca54 <_strtod_l+0x4ac>
 800c962:	2b16      	cmp	r3, #22
 800c964:	dc5f      	bgt.n	800ca26 <_strtod_l+0x47e>
 800c966:	4974      	ldr	r1, [pc, #464]	@ (800cb38 <_strtod_l+0x590>)
 800c968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c96c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c970:	4652      	mov	r2, sl
 800c972:	465b      	mov	r3, fp
 800c974:	f7f3 fe40 	bl	80005f8 <__aeabi_dmul>
 800c978:	4682      	mov	sl, r0
 800c97a:	468b      	mov	fp, r1
 800c97c:	e64d      	b.n	800c61a <_strtod_l+0x72>
 800c97e:	4b6e      	ldr	r3, [pc, #440]	@ (800cb38 <_strtod_l+0x590>)
 800c980:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c984:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c988:	f7f3 fe36 	bl	80005f8 <__aeabi_dmul>
 800c98c:	4682      	mov	sl, r0
 800c98e:	9808      	ldr	r0, [sp, #32]
 800c990:	468b      	mov	fp, r1
 800c992:	f7f3 fdb7 	bl	8000504 <__aeabi_ui2d>
 800c996:	4602      	mov	r2, r0
 800c998:	460b      	mov	r3, r1
 800c99a:	4650      	mov	r0, sl
 800c99c:	4659      	mov	r1, fp
 800c99e:	f7f3 fc75 	bl	800028c <__adddf3>
 800c9a2:	2d0f      	cmp	r5, #15
 800c9a4:	4682      	mov	sl, r0
 800c9a6:	468b      	mov	fp, r1
 800c9a8:	ddd5      	ble.n	800c956 <_strtod_l+0x3ae>
 800c9aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9ac:	1b2c      	subs	r4, r5, r4
 800c9ae:	441c      	add	r4, r3
 800c9b0:	2c00      	cmp	r4, #0
 800c9b2:	f340 8096 	ble.w	800cae2 <_strtod_l+0x53a>
 800c9b6:	f014 030f 	ands.w	r3, r4, #15
 800c9ba:	d00a      	beq.n	800c9d2 <_strtod_l+0x42a>
 800c9bc:	495e      	ldr	r1, [pc, #376]	@ (800cb38 <_strtod_l+0x590>)
 800c9be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c9c2:	4652      	mov	r2, sl
 800c9c4:	465b      	mov	r3, fp
 800c9c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ca:	f7f3 fe15 	bl	80005f8 <__aeabi_dmul>
 800c9ce:	4682      	mov	sl, r0
 800c9d0:	468b      	mov	fp, r1
 800c9d2:	f034 040f 	bics.w	r4, r4, #15
 800c9d6:	d073      	beq.n	800cac0 <_strtod_l+0x518>
 800c9d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c9dc:	dd48      	ble.n	800ca70 <_strtod_l+0x4c8>
 800c9de:	2400      	movs	r4, #0
 800c9e0:	46a0      	mov	r8, r4
 800c9e2:	940a      	str	r4, [sp, #40]	@ 0x28
 800c9e4:	46a1      	mov	r9, r4
 800c9e6:	9a05      	ldr	r2, [sp, #20]
 800c9e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cb40 <_strtod_l+0x598>
 800c9ec:	2322      	movs	r3, #34	@ 0x22
 800c9ee:	6013      	str	r3, [r2, #0]
 800c9f0:	f04f 0a00 	mov.w	sl, #0
 800c9f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f43f ae0f 	beq.w	800c61a <_strtod_l+0x72>
 800c9fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9fe:	9805      	ldr	r0, [sp, #20]
 800ca00:	f7ff f942 	bl	800bc88 <_Bfree>
 800ca04:	9805      	ldr	r0, [sp, #20]
 800ca06:	4649      	mov	r1, r9
 800ca08:	f7ff f93e 	bl	800bc88 <_Bfree>
 800ca0c:	9805      	ldr	r0, [sp, #20]
 800ca0e:	4641      	mov	r1, r8
 800ca10:	f7ff f93a 	bl	800bc88 <_Bfree>
 800ca14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ca16:	9805      	ldr	r0, [sp, #20]
 800ca18:	f7ff f936 	bl	800bc88 <_Bfree>
 800ca1c:	9805      	ldr	r0, [sp, #20]
 800ca1e:	4621      	mov	r1, r4
 800ca20:	f7ff f932 	bl	800bc88 <_Bfree>
 800ca24:	e5f9      	b.n	800c61a <_strtod_l+0x72>
 800ca26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	dbbc      	blt.n	800c9aa <_strtod_l+0x402>
 800ca30:	4c41      	ldr	r4, [pc, #260]	@ (800cb38 <_strtod_l+0x590>)
 800ca32:	f1c5 050f 	rsb	r5, r5, #15
 800ca36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ca3a:	4652      	mov	r2, sl
 800ca3c:	465b      	mov	r3, fp
 800ca3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca42:	f7f3 fdd9 	bl	80005f8 <__aeabi_dmul>
 800ca46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca48:	1b5d      	subs	r5, r3, r5
 800ca4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ca4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ca52:	e78f      	b.n	800c974 <_strtod_l+0x3cc>
 800ca54:	3316      	adds	r3, #22
 800ca56:	dba8      	blt.n	800c9aa <_strtod_l+0x402>
 800ca58:	4b37      	ldr	r3, [pc, #220]	@ (800cb38 <_strtod_l+0x590>)
 800ca5a:	eba9 0808 	sub.w	r8, r9, r8
 800ca5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ca62:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ca66:	4650      	mov	r0, sl
 800ca68:	4659      	mov	r1, fp
 800ca6a:	f7f3 feef 	bl	800084c <__aeabi_ddiv>
 800ca6e:	e783      	b.n	800c978 <_strtod_l+0x3d0>
 800ca70:	4b32      	ldr	r3, [pc, #200]	@ (800cb3c <_strtod_l+0x594>)
 800ca72:	9308      	str	r3, [sp, #32]
 800ca74:	2300      	movs	r3, #0
 800ca76:	1124      	asrs	r4, r4, #4
 800ca78:	4650      	mov	r0, sl
 800ca7a:	4659      	mov	r1, fp
 800ca7c:	461e      	mov	r6, r3
 800ca7e:	2c01      	cmp	r4, #1
 800ca80:	dc21      	bgt.n	800cac6 <_strtod_l+0x51e>
 800ca82:	b10b      	cbz	r3, 800ca88 <_strtod_l+0x4e0>
 800ca84:	4682      	mov	sl, r0
 800ca86:	468b      	mov	fp, r1
 800ca88:	492c      	ldr	r1, [pc, #176]	@ (800cb3c <_strtod_l+0x594>)
 800ca8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ca8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ca92:	4652      	mov	r2, sl
 800ca94:	465b      	mov	r3, fp
 800ca96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca9a:	f7f3 fdad 	bl	80005f8 <__aeabi_dmul>
 800ca9e:	4b28      	ldr	r3, [pc, #160]	@ (800cb40 <_strtod_l+0x598>)
 800caa0:	460a      	mov	r2, r1
 800caa2:	400b      	ands	r3, r1
 800caa4:	4927      	ldr	r1, [pc, #156]	@ (800cb44 <_strtod_l+0x59c>)
 800caa6:	428b      	cmp	r3, r1
 800caa8:	4682      	mov	sl, r0
 800caaa:	d898      	bhi.n	800c9de <_strtod_l+0x436>
 800caac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cab0:	428b      	cmp	r3, r1
 800cab2:	bf86      	itte	hi
 800cab4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cb48 <_strtod_l+0x5a0>
 800cab8:	f04f 3aff 	movhi.w	sl, #4294967295
 800cabc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cac0:	2300      	movs	r3, #0
 800cac2:	9308      	str	r3, [sp, #32]
 800cac4:	e07a      	b.n	800cbbc <_strtod_l+0x614>
 800cac6:	07e2      	lsls	r2, r4, #31
 800cac8:	d505      	bpl.n	800cad6 <_strtod_l+0x52e>
 800caca:	9b08      	ldr	r3, [sp, #32]
 800cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad0:	f7f3 fd92 	bl	80005f8 <__aeabi_dmul>
 800cad4:	2301      	movs	r3, #1
 800cad6:	9a08      	ldr	r2, [sp, #32]
 800cad8:	3208      	adds	r2, #8
 800cada:	3601      	adds	r6, #1
 800cadc:	1064      	asrs	r4, r4, #1
 800cade:	9208      	str	r2, [sp, #32]
 800cae0:	e7cd      	b.n	800ca7e <_strtod_l+0x4d6>
 800cae2:	d0ed      	beq.n	800cac0 <_strtod_l+0x518>
 800cae4:	4264      	negs	r4, r4
 800cae6:	f014 020f 	ands.w	r2, r4, #15
 800caea:	d00a      	beq.n	800cb02 <_strtod_l+0x55a>
 800caec:	4b12      	ldr	r3, [pc, #72]	@ (800cb38 <_strtod_l+0x590>)
 800caee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800caf2:	4650      	mov	r0, sl
 800caf4:	4659      	mov	r1, fp
 800caf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafa:	f7f3 fea7 	bl	800084c <__aeabi_ddiv>
 800cafe:	4682      	mov	sl, r0
 800cb00:	468b      	mov	fp, r1
 800cb02:	1124      	asrs	r4, r4, #4
 800cb04:	d0dc      	beq.n	800cac0 <_strtod_l+0x518>
 800cb06:	2c1f      	cmp	r4, #31
 800cb08:	dd20      	ble.n	800cb4c <_strtod_l+0x5a4>
 800cb0a:	2400      	movs	r4, #0
 800cb0c:	46a0      	mov	r8, r4
 800cb0e:	940a      	str	r4, [sp, #40]	@ 0x28
 800cb10:	46a1      	mov	r9, r4
 800cb12:	9a05      	ldr	r2, [sp, #20]
 800cb14:	2322      	movs	r3, #34	@ 0x22
 800cb16:	f04f 0a00 	mov.w	sl, #0
 800cb1a:	f04f 0b00 	mov.w	fp, #0
 800cb1e:	6013      	str	r3, [r2, #0]
 800cb20:	e768      	b.n	800c9f4 <_strtod_l+0x44c>
 800cb22:	bf00      	nop
 800cb24:	0802c02d 	.word	0x0802c02d
 800cb28:	0802c244 	.word	0x0802c244
 800cb2c:	0802c025 	.word	0x0802c025
 800cb30:	0802c05c 	.word	0x0802c05c
 800cb34:	0802c3ed 	.word	0x0802c3ed
 800cb38:	0802c178 	.word	0x0802c178
 800cb3c:	0802c150 	.word	0x0802c150
 800cb40:	7ff00000 	.word	0x7ff00000
 800cb44:	7ca00000 	.word	0x7ca00000
 800cb48:	7fefffff 	.word	0x7fefffff
 800cb4c:	f014 0310 	ands.w	r3, r4, #16
 800cb50:	bf18      	it	ne
 800cb52:	236a      	movne	r3, #106	@ 0x6a
 800cb54:	4ea9      	ldr	r6, [pc, #676]	@ (800cdfc <_strtod_l+0x854>)
 800cb56:	9308      	str	r3, [sp, #32]
 800cb58:	4650      	mov	r0, sl
 800cb5a:	4659      	mov	r1, fp
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	07e2      	lsls	r2, r4, #31
 800cb60:	d504      	bpl.n	800cb6c <_strtod_l+0x5c4>
 800cb62:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb66:	f7f3 fd47 	bl	80005f8 <__aeabi_dmul>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	1064      	asrs	r4, r4, #1
 800cb6e:	f106 0608 	add.w	r6, r6, #8
 800cb72:	d1f4      	bne.n	800cb5e <_strtod_l+0x5b6>
 800cb74:	b10b      	cbz	r3, 800cb7a <_strtod_l+0x5d2>
 800cb76:	4682      	mov	sl, r0
 800cb78:	468b      	mov	fp, r1
 800cb7a:	9b08      	ldr	r3, [sp, #32]
 800cb7c:	b1b3      	cbz	r3, 800cbac <_strtod_l+0x604>
 800cb7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cb82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	4659      	mov	r1, fp
 800cb8a:	dd0f      	ble.n	800cbac <_strtod_l+0x604>
 800cb8c:	2b1f      	cmp	r3, #31
 800cb8e:	dd55      	ble.n	800cc3c <_strtod_l+0x694>
 800cb90:	2b34      	cmp	r3, #52	@ 0x34
 800cb92:	bfde      	ittt	le
 800cb94:	f04f 33ff 	movle.w	r3, #4294967295
 800cb98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cb9c:	4093      	lslle	r3, r2
 800cb9e:	f04f 0a00 	mov.w	sl, #0
 800cba2:	bfcc      	ite	gt
 800cba4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cba8:	ea03 0b01 	andle.w	fp, r3, r1
 800cbac:	2200      	movs	r2, #0
 800cbae:	2300      	movs	r3, #0
 800cbb0:	4650      	mov	r0, sl
 800cbb2:	4659      	mov	r1, fp
 800cbb4:	f7f3 ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	d1a6      	bne.n	800cb0a <_strtod_l+0x562>
 800cbbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cbc2:	9805      	ldr	r0, [sp, #20]
 800cbc4:	462b      	mov	r3, r5
 800cbc6:	463a      	mov	r2, r7
 800cbc8:	f7ff f8c6 	bl	800bd58 <__s2b>
 800cbcc:	900a      	str	r0, [sp, #40]	@ 0x28
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	f43f af05 	beq.w	800c9de <_strtod_l+0x436>
 800cbd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbd6:	2a00      	cmp	r2, #0
 800cbd8:	eba9 0308 	sub.w	r3, r9, r8
 800cbdc:	bfa8      	it	ge
 800cbde:	2300      	movge	r3, #0
 800cbe0:	9312      	str	r3, [sp, #72]	@ 0x48
 800cbe2:	2400      	movs	r4, #0
 800cbe4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cbe8:	9316      	str	r3, [sp, #88]	@ 0x58
 800cbea:	46a0      	mov	r8, r4
 800cbec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbee:	9805      	ldr	r0, [sp, #20]
 800cbf0:	6859      	ldr	r1, [r3, #4]
 800cbf2:	f7ff f809 	bl	800bc08 <_Balloc>
 800cbf6:	4681      	mov	r9, r0
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	f43f aef4 	beq.w	800c9e6 <_strtod_l+0x43e>
 800cbfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc00:	691a      	ldr	r2, [r3, #16]
 800cc02:	3202      	adds	r2, #2
 800cc04:	f103 010c 	add.w	r1, r3, #12
 800cc08:	0092      	lsls	r2, r2, #2
 800cc0a:	300c      	adds	r0, #12
 800cc0c:	f000 ff38 	bl	800da80 <memcpy>
 800cc10:	ec4b ab10 	vmov	d0, sl, fp
 800cc14:	9805      	ldr	r0, [sp, #20]
 800cc16:	aa1c      	add	r2, sp, #112	@ 0x70
 800cc18:	a91b      	add	r1, sp, #108	@ 0x6c
 800cc1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cc1e:	f7ff fbd7 	bl	800c3d0 <__d2b>
 800cc22:	901a      	str	r0, [sp, #104]	@ 0x68
 800cc24:	2800      	cmp	r0, #0
 800cc26:	f43f aede 	beq.w	800c9e6 <_strtod_l+0x43e>
 800cc2a:	9805      	ldr	r0, [sp, #20]
 800cc2c:	2101      	movs	r1, #1
 800cc2e:	f7ff f929 	bl	800be84 <__i2b>
 800cc32:	4680      	mov	r8, r0
 800cc34:	b948      	cbnz	r0, 800cc4a <_strtod_l+0x6a2>
 800cc36:	f04f 0800 	mov.w	r8, #0
 800cc3a:	e6d4      	b.n	800c9e6 <_strtod_l+0x43e>
 800cc3c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc40:	fa02 f303 	lsl.w	r3, r2, r3
 800cc44:	ea03 0a0a 	and.w	sl, r3, sl
 800cc48:	e7b0      	b.n	800cbac <_strtod_l+0x604>
 800cc4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cc4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cc4e:	2d00      	cmp	r5, #0
 800cc50:	bfab      	itete	ge
 800cc52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cc54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cc56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cc58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cc5a:	bfac      	ite	ge
 800cc5c:	18ef      	addge	r7, r5, r3
 800cc5e:	1b5e      	sublt	r6, r3, r5
 800cc60:	9b08      	ldr	r3, [sp, #32]
 800cc62:	1aed      	subs	r5, r5, r3
 800cc64:	4415      	add	r5, r2
 800cc66:	4b66      	ldr	r3, [pc, #408]	@ (800ce00 <_strtod_l+0x858>)
 800cc68:	3d01      	subs	r5, #1
 800cc6a:	429d      	cmp	r5, r3
 800cc6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cc70:	da50      	bge.n	800cd14 <_strtod_l+0x76c>
 800cc72:	1b5b      	subs	r3, r3, r5
 800cc74:	2b1f      	cmp	r3, #31
 800cc76:	eba2 0203 	sub.w	r2, r2, r3
 800cc7a:	f04f 0101 	mov.w	r1, #1
 800cc7e:	dc3d      	bgt.n	800ccfc <_strtod_l+0x754>
 800cc80:	fa01 f303 	lsl.w	r3, r1, r3
 800cc84:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc86:	2300      	movs	r3, #0
 800cc88:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc8a:	18bd      	adds	r5, r7, r2
 800cc8c:	9b08      	ldr	r3, [sp, #32]
 800cc8e:	42af      	cmp	r7, r5
 800cc90:	4416      	add	r6, r2
 800cc92:	441e      	add	r6, r3
 800cc94:	463b      	mov	r3, r7
 800cc96:	bfa8      	it	ge
 800cc98:	462b      	movge	r3, r5
 800cc9a:	42b3      	cmp	r3, r6
 800cc9c:	bfa8      	it	ge
 800cc9e:	4633      	movge	r3, r6
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	bfc2      	ittt	gt
 800cca4:	1aed      	subgt	r5, r5, r3
 800cca6:	1af6      	subgt	r6, r6, r3
 800cca8:	1aff      	subgt	r7, r7, r3
 800ccaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	dd16      	ble.n	800ccde <_strtod_l+0x736>
 800ccb0:	4641      	mov	r1, r8
 800ccb2:	9805      	ldr	r0, [sp, #20]
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	f7ff f9a5 	bl	800c004 <__pow5mult>
 800ccba:	4680      	mov	r8, r0
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	d0ba      	beq.n	800cc36 <_strtod_l+0x68e>
 800ccc0:	4601      	mov	r1, r0
 800ccc2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ccc4:	9805      	ldr	r0, [sp, #20]
 800ccc6:	f7ff f8f3 	bl	800beb0 <__multiply>
 800ccca:	900e      	str	r0, [sp, #56]	@ 0x38
 800cccc:	2800      	cmp	r0, #0
 800ccce:	f43f ae8a 	beq.w	800c9e6 <_strtod_l+0x43e>
 800ccd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccd4:	9805      	ldr	r0, [sp, #20]
 800ccd6:	f7fe ffd7 	bl	800bc88 <_Bfree>
 800ccda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccdc:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccde:	2d00      	cmp	r5, #0
 800cce0:	dc1d      	bgt.n	800cd1e <_strtod_l+0x776>
 800cce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	dd23      	ble.n	800cd30 <_strtod_l+0x788>
 800cce8:	4649      	mov	r1, r9
 800ccea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ccec:	9805      	ldr	r0, [sp, #20]
 800ccee:	f7ff f989 	bl	800c004 <__pow5mult>
 800ccf2:	4681      	mov	r9, r0
 800ccf4:	b9e0      	cbnz	r0, 800cd30 <_strtod_l+0x788>
 800ccf6:	f04f 0900 	mov.w	r9, #0
 800ccfa:	e674      	b.n	800c9e6 <_strtod_l+0x43e>
 800ccfc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cd00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cd04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cd08:	35e2      	adds	r5, #226	@ 0xe2
 800cd0a:	fa01 f305 	lsl.w	r3, r1, r5
 800cd0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cd10:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cd12:	e7ba      	b.n	800cc8a <_strtod_l+0x6e2>
 800cd14:	2300      	movs	r3, #0
 800cd16:	9310      	str	r3, [sp, #64]	@ 0x40
 800cd18:	2301      	movs	r3, #1
 800cd1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd1c:	e7b5      	b.n	800cc8a <_strtod_l+0x6e2>
 800cd1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd20:	9805      	ldr	r0, [sp, #20]
 800cd22:	462a      	mov	r2, r5
 800cd24:	f7ff f9c8 	bl	800c0b8 <__lshift>
 800cd28:	901a      	str	r0, [sp, #104]	@ 0x68
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	d1d9      	bne.n	800cce2 <_strtod_l+0x73a>
 800cd2e:	e65a      	b.n	800c9e6 <_strtod_l+0x43e>
 800cd30:	2e00      	cmp	r6, #0
 800cd32:	dd07      	ble.n	800cd44 <_strtod_l+0x79c>
 800cd34:	4649      	mov	r1, r9
 800cd36:	9805      	ldr	r0, [sp, #20]
 800cd38:	4632      	mov	r2, r6
 800cd3a:	f7ff f9bd 	bl	800c0b8 <__lshift>
 800cd3e:	4681      	mov	r9, r0
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d0d8      	beq.n	800ccf6 <_strtod_l+0x74e>
 800cd44:	2f00      	cmp	r7, #0
 800cd46:	dd08      	ble.n	800cd5a <_strtod_l+0x7b2>
 800cd48:	4641      	mov	r1, r8
 800cd4a:	9805      	ldr	r0, [sp, #20]
 800cd4c:	463a      	mov	r2, r7
 800cd4e:	f7ff f9b3 	bl	800c0b8 <__lshift>
 800cd52:	4680      	mov	r8, r0
 800cd54:	2800      	cmp	r0, #0
 800cd56:	f43f ae46 	beq.w	800c9e6 <_strtod_l+0x43e>
 800cd5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd5c:	9805      	ldr	r0, [sp, #20]
 800cd5e:	464a      	mov	r2, r9
 800cd60:	f7ff fa32 	bl	800c1c8 <__mdiff>
 800cd64:	4604      	mov	r4, r0
 800cd66:	2800      	cmp	r0, #0
 800cd68:	f43f ae3d 	beq.w	800c9e6 <_strtod_l+0x43e>
 800cd6c:	68c3      	ldr	r3, [r0, #12]
 800cd6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd70:	2300      	movs	r3, #0
 800cd72:	60c3      	str	r3, [r0, #12]
 800cd74:	4641      	mov	r1, r8
 800cd76:	f7ff fa0b 	bl	800c190 <__mcmp>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	da46      	bge.n	800ce0c <_strtod_l+0x864>
 800cd7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd80:	ea53 030a 	orrs.w	r3, r3, sl
 800cd84:	d16c      	bne.n	800ce60 <_strtod_l+0x8b8>
 800cd86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d168      	bne.n	800ce60 <_strtod_l+0x8b8>
 800cd8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd92:	0d1b      	lsrs	r3, r3, #20
 800cd94:	051b      	lsls	r3, r3, #20
 800cd96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cd9a:	d961      	bls.n	800ce60 <_strtod_l+0x8b8>
 800cd9c:	6963      	ldr	r3, [r4, #20]
 800cd9e:	b913      	cbnz	r3, 800cda6 <_strtod_l+0x7fe>
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	dd5c      	ble.n	800ce60 <_strtod_l+0x8b8>
 800cda6:	4621      	mov	r1, r4
 800cda8:	2201      	movs	r2, #1
 800cdaa:	9805      	ldr	r0, [sp, #20]
 800cdac:	f7ff f984 	bl	800c0b8 <__lshift>
 800cdb0:	4641      	mov	r1, r8
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	f7ff f9ec 	bl	800c190 <__mcmp>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	dd51      	ble.n	800ce60 <_strtod_l+0x8b8>
 800cdbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cdc0:	9a08      	ldr	r2, [sp, #32]
 800cdc2:	0d1b      	lsrs	r3, r3, #20
 800cdc4:	051b      	lsls	r3, r3, #20
 800cdc6:	2a00      	cmp	r2, #0
 800cdc8:	d06b      	beq.n	800cea2 <_strtod_l+0x8fa>
 800cdca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cdce:	d868      	bhi.n	800cea2 <_strtod_l+0x8fa>
 800cdd0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cdd4:	f67f ae9d 	bls.w	800cb12 <_strtod_l+0x56a>
 800cdd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ce04 <_strtod_l+0x85c>)
 800cdda:	4650      	mov	r0, sl
 800cddc:	4659      	mov	r1, fp
 800cdde:	2200      	movs	r2, #0
 800cde0:	f7f3 fc0a 	bl	80005f8 <__aeabi_dmul>
 800cde4:	4b08      	ldr	r3, [pc, #32]	@ (800ce08 <_strtod_l+0x860>)
 800cde6:	400b      	ands	r3, r1
 800cde8:	4682      	mov	sl, r0
 800cdea:	468b      	mov	fp, r1
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f47f ae05 	bne.w	800c9fc <_strtod_l+0x454>
 800cdf2:	9a05      	ldr	r2, [sp, #20]
 800cdf4:	2322      	movs	r3, #34	@ 0x22
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	e600      	b.n	800c9fc <_strtod_l+0x454>
 800cdfa:	bf00      	nop
 800cdfc:	0802c270 	.word	0x0802c270
 800ce00:	fffffc02 	.word	0xfffffc02
 800ce04:	39500000 	.word	0x39500000
 800ce08:	7ff00000 	.word	0x7ff00000
 800ce0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ce10:	d165      	bne.n	800cede <_strtod_l+0x936>
 800ce12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ce14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce18:	b35a      	cbz	r2, 800ce72 <_strtod_l+0x8ca>
 800ce1a:	4a9f      	ldr	r2, [pc, #636]	@ (800d098 <_strtod_l+0xaf0>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d12b      	bne.n	800ce78 <_strtod_l+0x8d0>
 800ce20:	9b08      	ldr	r3, [sp, #32]
 800ce22:	4651      	mov	r1, sl
 800ce24:	b303      	cbz	r3, 800ce68 <_strtod_l+0x8c0>
 800ce26:	4b9d      	ldr	r3, [pc, #628]	@ (800d09c <_strtod_l+0xaf4>)
 800ce28:	465a      	mov	r2, fp
 800ce2a:	4013      	ands	r3, r2
 800ce2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ce30:	f04f 32ff 	mov.w	r2, #4294967295
 800ce34:	d81b      	bhi.n	800ce6e <_strtod_l+0x8c6>
 800ce36:	0d1b      	lsrs	r3, r3, #20
 800ce38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ce3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce40:	4299      	cmp	r1, r3
 800ce42:	d119      	bne.n	800ce78 <_strtod_l+0x8d0>
 800ce44:	4b96      	ldr	r3, [pc, #600]	@ (800d0a0 <_strtod_l+0xaf8>)
 800ce46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d102      	bne.n	800ce52 <_strtod_l+0x8aa>
 800ce4c:	3101      	adds	r1, #1
 800ce4e:	f43f adca 	beq.w	800c9e6 <_strtod_l+0x43e>
 800ce52:	4b92      	ldr	r3, [pc, #584]	@ (800d09c <_strtod_l+0xaf4>)
 800ce54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce56:	401a      	ands	r2, r3
 800ce58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ce5c:	f04f 0a00 	mov.w	sl, #0
 800ce60:	9b08      	ldr	r3, [sp, #32]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d1b8      	bne.n	800cdd8 <_strtod_l+0x830>
 800ce66:	e5c9      	b.n	800c9fc <_strtod_l+0x454>
 800ce68:	f04f 33ff 	mov.w	r3, #4294967295
 800ce6c:	e7e8      	b.n	800ce40 <_strtod_l+0x898>
 800ce6e:	4613      	mov	r3, r2
 800ce70:	e7e6      	b.n	800ce40 <_strtod_l+0x898>
 800ce72:	ea53 030a 	orrs.w	r3, r3, sl
 800ce76:	d0a1      	beq.n	800cdbc <_strtod_l+0x814>
 800ce78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce7a:	b1db      	cbz	r3, 800ceb4 <_strtod_l+0x90c>
 800ce7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce7e:	4213      	tst	r3, r2
 800ce80:	d0ee      	beq.n	800ce60 <_strtod_l+0x8b8>
 800ce82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce84:	9a08      	ldr	r2, [sp, #32]
 800ce86:	4650      	mov	r0, sl
 800ce88:	4659      	mov	r1, fp
 800ce8a:	b1bb      	cbz	r3, 800cebc <_strtod_l+0x914>
 800ce8c:	f7ff fb6e 	bl	800c56c <sulp>
 800ce90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce94:	ec53 2b10 	vmov	r2, r3, d0
 800ce98:	f7f3 f9f8 	bl	800028c <__adddf3>
 800ce9c:	4682      	mov	sl, r0
 800ce9e:	468b      	mov	fp, r1
 800cea0:	e7de      	b.n	800ce60 <_strtod_l+0x8b8>
 800cea2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cea6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ceaa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ceae:	f04f 3aff 	mov.w	sl, #4294967295
 800ceb2:	e7d5      	b.n	800ce60 <_strtod_l+0x8b8>
 800ceb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ceb6:	ea13 0f0a 	tst.w	r3, sl
 800ceba:	e7e1      	b.n	800ce80 <_strtod_l+0x8d8>
 800cebc:	f7ff fb56 	bl	800c56c <sulp>
 800cec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cec4:	ec53 2b10 	vmov	r2, r3, d0
 800cec8:	f7f3 f9de 	bl	8000288 <__aeabi_dsub>
 800cecc:	2200      	movs	r2, #0
 800cece:	2300      	movs	r3, #0
 800ced0:	4682      	mov	sl, r0
 800ced2:	468b      	mov	fp, r1
 800ced4:	f7f3 fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800ced8:	2800      	cmp	r0, #0
 800ceda:	d0c1      	beq.n	800ce60 <_strtod_l+0x8b8>
 800cedc:	e619      	b.n	800cb12 <_strtod_l+0x56a>
 800cede:	4641      	mov	r1, r8
 800cee0:	4620      	mov	r0, r4
 800cee2:	f7ff facd 	bl	800c480 <__ratio>
 800cee6:	ec57 6b10 	vmov	r6, r7, d0
 800ceea:	2200      	movs	r2, #0
 800ceec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cef0:	4630      	mov	r0, r6
 800cef2:	4639      	mov	r1, r7
 800cef4:	f7f3 fdfc 	bl	8000af0 <__aeabi_dcmple>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d06f      	beq.n	800cfdc <_strtod_l+0xa34>
 800cefc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d17a      	bne.n	800cff8 <_strtod_l+0xa50>
 800cf02:	f1ba 0f00 	cmp.w	sl, #0
 800cf06:	d158      	bne.n	800cfba <_strtod_l+0xa12>
 800cf08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d15a      	bne.n	800cfc8 <_strtod_l+0xa20>
 800cf12:	4b64      	ldr	r3, [pc, #400]	@ (800d0a4 <_strtod_l+0xafc>)
 800cf14:	2200      	movs	r2, #0
 800cf16:	4630      	mov	r0, r6
 800cf18:	4639      	mov	r1, r7
 800cf1a:	f7f3 fddf 	bl	8000adc <__aeabi_dcmplt>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d159      	bne.n	800cfd6 <_strtod_l+0xa2e>
 800cf22:	4630      	mov	r0, r6
 800cf24:	4639      	mov	r1, r7
 800cf26:	4b60      	ldr	r3, [pc, #384]	@ (800d0a8 <_strtod_l+0xb00>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f7f3 fb65 	bl	80005f8 <__aeabi_dmul>
 800cf2e:	4606      	mov	r6, r0
 800cf30:	460f      	mov	r7, r1
 800cf32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cf36:	9606      	str	r6, [sp, #24]
 800cf38:	9307      	str	r3, [sp, #28]
 800cf3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf3e:	4d57      	ldr	r5, [pc, #348]	@ (800d09c <_strtod_l+0xaf4>)
 800cf40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cf44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf46:	401d      	ands	r5, r3
 800cf48:	4b58      	ldr	r3, [pc, #352]	@ (800d0ac <_strtod_l+0xb04>)
 800cf4a:	429d      	cmp	r5, r3
 800cf4c:	f040 80b2 	bne.w	800d0b4 <_strtod_l+0xb0c>
 800cf50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cf56:	ec4b ab10 	vmov	d0, sl, fp
 800cf5a:	f7ff f9c9 	bl	800c2f0 <__ulp>
 800cf5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf62:	ec51 0b10 	vmov	r0, r1, d0
 800cf66:	f7f3 fb47 	bl	80005f8 <__aeabi_dmul>
 800cf6a:	4652      	mov	r2, sl
 800cf6c:	465b      	mov	r3, fp
 800cf6e:	f7f3 f98d 	bl	800028c <__adddf3>
 800cf72:	460b      	mov	r3, r1
 800cf74:	4949      	ldr	r1, [pc, #292]	@ (800d09c <_strtod_l+0xaf4>)
 800cf76:	4a4e      	ldr	r2, [pc, #312]	@ (800d0b0 <_strtod_l+0xb08>)
 800cf78:	4019      	ands	r1, r3
 800cf7a:	4291      	cmp	r1, r2
 800cf7c:	4682      	mov	sl, r0
 800cf7e:	d942      	bls.n	800d006 <_strtod_l+0xa5e>
 800cf80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf82:	4b47      	ldr	r3, [pc, #284]	@ (800d0a0 <_strtod_l+0xaf8>)
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d103      	bne.n	800cf90 <_strtod_l+0x9e8>
 800cf88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	f43f ad2b 	beq.w	800c9e6 <_strtod_l+0x43e>
 800cf90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d0a0 <_strtod_l+0xaf8>
 800cf94:	f04f 3aff 	mov.w	sl, #4294967295
 800cf98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf9a:	9805      	ldr	r0, [sp, #20]
 800cf9c:	f7fe fe74 	bl	800bc88 <_Bfree>
 800cfa0:	9805      	ldr	r0, [sp, #20]
 800cfa2:	4649      	mov	r1, r9
 800cfa4:	f7fe fe70 	bl	800bc88 <_Bfree>
 800cfa8:	9805      	ldr	r0, [sp, #20]
 800cfaa:	4641      	mov	r1, r8
 800cfac:	f7fe fe6c 	bl	800bc88 <_Bfree>
 800cfb0:	9805      	ldr	r0, [sp, #20]
 800cfb2:	4621      	mov	r1, r4
 800cfb4:	f7fe fe68 	bl	800bc88 <_Bfree>
 800cfb8:	e618      	b.n	800cbec <_strtod_l+0x644>
 800cfba:	f1ba 0f01 	cmp.w	sl, #1
 800cfbe:	d103      	bne.n	800cfc8 <_strtod_l+0xa20>
 800cfc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f43f ada5 	beq.w	800cb12 <_strtod_l+0x56a>
 800cfc8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d078 <_strtod_l+0xad0>
 800cfcc:	4f35      	ldr	r7, [pc, #212]	@ (800d0a4 <_strtod_l+0xafc>)
 800cfce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cfd2:	2600      	movs	r6, #0
 800cfd4:	e7b1      	b.n	800cf3a <_strtod_l+0x992>
 800cfd6:	4f34      	ldr	r7, [pc, #208]	@ (800d0a8 <_strtod_l+0xb00>)
 800cfd8:	2600      	movs	r6, #0
 800cfda:	e7aa      	b.n	800cf32 <_strtod_l+0x98a>
 800cfdc:	4b32      	ldr	r3, [pc, #200]	@ (800d0a8 <_strtod_l+0xb00>)
 800cfde:	4630      	mov	r0, r6
 800cfe0:	4639      	mov	r1, r7
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f7f3 fb08 	bl	80005f8 <__aeabi_dmul>
 800cfe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfea:	4606      	mov	r6, r0
 800cfec:	460f      	mov	r7, r1
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d09f      	beq.n	800cf32 <_strtod_l+0x98a>
 800cff2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cff6:	e7a0      	b.n	800cf3a <_strtod_l+0x992>
 800cff8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d080 <_strtod_l+0xad8>
 800cffc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d000:	ec57 6b17 	vmov	r6, r7, d7
 800d004:	e799      	b.n	800cf3a <_strtod_l+0x992>
 800d006:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d00a:	9b08      	ldr	r3, [sp, #32]
 800d00c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1c1      	bne.n	800cf98 <_strtod_l+0x9f0>
 800d014:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d018:	0d1b      	lsrs	r3, r3, #20
 800d01a:	051b      	lsls	r3, r3, #20
 800d01c:	429d      	cmp	r5, r3
 800d01e:	d1bb      	bne.n	800cf98 <_strtod_l+0x9f0>
 800d020:	4630      	mov	r0, r6
 800d022:	4639      	mov	r1, r7
 800d024:	f7f3 fe48 	bl	8000cb8 <__aeabi_d2lz>
 800d028:	f7f3 fab8 	bl	800059c <__aeabi_l2d>
 800d02c:	4602      	mov	r2, r0
 800d02e:	460b      	mov	r3, r1
 800d030:	4630      	mov	r0, r6
 800d032:	4639      	mov	r1, r7
 800d034:	f7f3 f928 	bl	8000288 <__aeabi_dsub>
 800d038:	460b      	mov	r3, r1
 800d03a:	4602      	mov	r2, r0
 800d03c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d040:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d046:	ea46 060a 	orr.w	r6, r6, sl
 800d04a:	431e      	orrs	r6, r3
 800d04c:	d06f      	beq.n	800d12e <_strtod_l+0xb86>
 800d04e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d088 <_strtod_l+0xae0>)
 800d050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d054:	f7f3 fd42 	bl	8000adc <__aeabi_dcmplt>
 800d058:	2800      	cmp	r0, #0
 800d05a:	f47f accf 	bne.w	800c9fc <_strtod_l+0x454>
 800d05e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d090 <_strtod_l+0xae8>)
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d068:	f7f3 fd56 	bl	8000b18 <__aeabi_dcmpgt>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d093      	beq.n	800cf98 <_strtod_l+0x9f0>
 800d070:	e4c4      	b.n	800c9fc <_strtod_l+0x454>
 800d072:	bf00      	nop
 800d074:	f3af 8000 	nop.w
 800d078:	00000000 	.word	0x00000000
 800d07c:	bff00000 	.word	0xbff00000
 800d080:	00000000 	.word	0x00000000
 800d084:	3ff00000 	.word	0x3ff00000
 800d088:	94a03595 	.word	0x94a03595
 800d08c:	3fdfffff 	.word	0x3fdfffff
 800d090:	35afe535 	.word	0x35afe535
 800d094:	3fe00000 	.word	0x3fe00000
 800d098:	000fffff 	.word	0x000fffff
 800d09c:	7ff00000 	.word	0x7ff00000
 800d0a0:	7fefffff 	.word	0x7fefffff
 800d0a4:	3ff00000 	.word	0x3ff00000
 800d0a8:	3fe00000 	.word	0x3fe00000
 800d0ac:	7fe00000 	.word	0x7fe00000
 800d0b0:	7c9fffff 	.word	0x7c9fffff
 800d0b4:	9b08      	ldr	r3, [sp, #32]
 800d0b6:	b323      	cbz	r3, 800d102 <_strtod_l+0xb5a>
 800d0b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d0bc:	d821      	bhi.n	800d102 <_strtod_l+0xb5a>
 800d0be:	a328      	add	r3, pc, #160	@ (adr r3, 800d160 <_strtod_l+0xbb8>)
 800d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	4639      	mov	r1, r7
 800d0c8:	f7f3 fd12 	bl	8000af0 <__aeabi_dcmple>
 800d0cc:	b1a0      	cbz	r0, 800d0f8 <_strtod_l+0xb50>
 800d0ce:	4639      	mov	r1, r7
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f7f3 fd69 	bl	8000ba8 <__aeabi_d2uiz>
 800d0d6:	2801      	cmp	r0, #1
 800d0d8:	bf38      	it	cc
 800d0da:	2001      	movcc	r0, #1
 800d0dc:	f7f3 fa12 	bl	8000504 <__aeabi_ui2d>
 800d0e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0e2:	4606      	mov	r6, r0
 800d0e4:	460f      	mov	r7, r1
 800d0e6:	b9fb      	cbnz	r3, 800d128 <_strtod_l+0xb80>
 800d0e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d0ec:	9014      	str	r0, [sp, #80]	@ 0x50
 800d0ee:	9315      	str	r3, [sp, #84]	@ 0x54
 800d0f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d0f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d0f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d0fe:	1b5b      	subs	r3, r3, r5
 800d100:	9311      	str	r3, [sp, #68]	@ 0x44
 800d102:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d106:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d10a:	f7ff f8f1 	bl	800c2f0 <__ulp>
 800d10e:	4650      	mov	r0, sl
 800d110:	ec53 2b10 	vmov	r2, r3, d0
 800d114:	4659      	mov	r1, fp
 800d116:	f7f3 fa6f 	bl	80005f8 <__aeabi_dmul>
 800d11a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d11e:	f7f3 f8b5 	bl	800028c <__adddf3>
 800d122:	4682      	mov	sl, r0
 800d124:	468b      	mov	fp, r1
 800d126:	e770      	b.n	800d00a <_strtod_l+0xa62>
 800d128:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d12c:	e7e0      	b.n	800d0f0 <_strtod_l+0xb48>
 800d12e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d168 <_strtod_l+0xbc0>)
 800d130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d134:	f7f3 fcd2 	bl	8000adc <__aeabi_dcmplt>
 800d138:	e798      	b.n	800d06c <_strtod_l+0xac4>
 800d13a:	2300      	movs	r3, #0
 800d13c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d13e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d140:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d142:	6013      	str	r3, [r2, #0]
 800d144:	f7ff ba6d 	b.w	800c622 <_strtod_l+0x7a>
 800d148:	2a65      	cmp	r2, #101	@ 0x65
 800d14a:	f43f ab66 	beq.w	800c81a <_strtod_l+0x272>
 800d14e:	2a45      	cmp	r2, #69	@ 0x45
 800d150:	f43f ab63 	beq.w	800c81a <_strtod_l+0x272>
 800d154:	2301      	movs	r3, #1
 800d156:	f7ff bb9e 	b.w	800c896 <_strtod_l+0x2ee>
 800d15a:	bf00      	nop
 800d15c:	f3af 8000 	nop.w
 800d160:	ffc00000 	.word	0xffc00000
 800d164:	41dfffff 	.word	0x41dfffff
 800d168:	94a03595 	.word	0x94a03595
 800d16c:	3fcfffff 	.word	0x3fcfffff

0800d170 <_strtod_r>:
 800d170:	4b01      	ldr	r3, [pc, #4]	@ (800d178 <_strtod_r+0x8>)
 800d172:	f7ff ba19 	b.w	800c5a8 <_strtod_l>
 800d176:	bf00      	nop
 800d178:	200004a0 	.word	0x200004a0

0800d17c <_strtol_l.constprop.0>:
 800d17c:	2b24      	cmp	r3, #36	@ 0x24
 800d17e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d182:	4686      	mov	lr, r0
 800d184:	4690      	mov	r8, r2
 800d186:	d801      	bhi.n	800d18c <_strtol_l.constprop.0+0x10>
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d106      	bne.n	800d19a <_strtol_l.constprop.0+0x1e>
 800d18c:	f7fd fdba 	bl	800ad04 <__errno>
 800d190:	2316      	movs	r3, #22
 800d192:	6003      	str	r3, [r0, #0]
 800d194:	2000      	movs	r0, #0
 800d196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d19a:	4834      	ldr	r0, [pc, #208]	@ (800d26c <_strtol_l.constprop.0+0xf0>)
 800d19c:	460d      	mov	r5, r1
 800d19e:	462a      	mov	r2, r5
 800d1a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1a4:	5d06      	ldrb	r6, [r0, r4]
 800d1a6:	f016 0608 	ands.w	r6, r6, #8
 800d1aa:	d1f8      	bne.n	800d19e <_strtol_l.constprop.0+0x22>
 800d1ac:	2c2d      	cmp	r4, #45	@ 0x2d
 800d1ae:	d12d      	bne.n	800d20c <_strtol_l.constprop.0+0x90>
 800d1b0:	782c      	ldrb	r4, [r5, #0]
 800d1b2:	2601      	movs	r6, #1
 800d1b4:	1c95      	adds	r5, r2, #2
 800d1b6:	f033 0210 	bics.w	r2, r3, #16
 800d1ba:	d109      	bne.n	800d1d0 <_strtol_l.constprop.0+0x54>
 800d1bc:	2c30      	cmp	r4, #48	@ 0x30
 800d1be:	d12a      	bne.n	800d216 <_strtol_l.constprop.0+0x9a>
 800d1c0:	782a      	ldrb	r2, [r5, #0]
 800d1c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d1c6:	2a58      	cmp	r2, #88	@ 0x58
 800d1c8:	d125      	bne.n	800d216 <_strtol_l.constprop.0+0x9a>
 800d1ca:	786c      	ldrb	r4, [r5, #1]
 800d1cc:	2310      	movs	r3, #16
 800d1ce:	3502      	adds	r5, #2
 800d1d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d1d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d1d8:	2200      	movs	r2, #0
 800d1da:	fbbc f9f3 	udiv	r9, ip, r3
 800d1de:	4610      	mov	r0, r2
 800d1e0:	fb03 ca19 	mls	sl, r3, r9, ip
 800d1e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d1e8:	2f09      	cmp	r7, #9
 800d1ea:	d81b      	bhi.n	800d224 <_strtol_l.constprop.0+0xa8>
 800d1ec:	463c      	mov	r4, r7
 800d1ee:	42a3      	cmp	r3, r4
 800d1f0:	dd27      	ble.n	800d242 <_strtol_l.constprop.0+0xc6>
 800d1f2:	1c57      	adds	r7, r2, #1
 800d1f4:	d007      	beq.n	800d206 <_strtol_l.constprop.0+0x8a>
 800d1f6:	4581      	cmp	r9, r0
 800d1f8:	d320      	bcc.n	800d23c <_strtol_l.constprop.0+0xc0>
 800d1fa:	d101      	bne.n	800d200 <_strtol_l.constprop.0+0x84>
 800d1fc:	45a2      	cmp	sl, r4
 800d1fe:	db1d      	blt.n	800d23c <_strtol_l.constprop.0+0xc0>
 800d200:	fb00 4003 	mla	r0, r0, r3, r4
 800d204:	2201      	movs	r2, #1
 800d206:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d20a:	e7eb      	b.n	800d1e4 <_strtol_l.constprop.0+0x68>
 800d20c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d20e:	bf04      	itt	eq
 800d210:	782c      	ldrbeq	r4, [r5, #0]
 800d212:	1c95      	addeq	r5, r2, #2
 800d214:	e7cf      	b.n	800d1b6 <_strtol_l.constprop.0+0x3a>
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1da      	bne.n	800d1d0 <_strtol_l.constprop.0+0x54>
 800d21a:	2c30      	cmp	r4, #48	@ 0x30
 800d21c:	bf0c      	ite	eq
 800d21e:	2308      	moveq	r3, #8
 800d220:	230a      	movne	r3, #10
 800d222:	e7d5      	b.n	800d1d0 <_strtol_l.constprop.0+0x54>
 800d224:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d228:	2f19      	cmp	r7, #25
 800d22a:	d801      	bhi.n	800d230 <_strtol_l.constprop.0+0xb4>
 800d22c:	3c37      	subs	r4, #55	@ 0x37
 800d22e:	e7de      	b.n	800d1ee <_strtol_l.constprop.0+0x72>
 800d230:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d234:	2f19      	cmp	r7, #25
 800d236:	d804      	bhi.n	800d242 <_strtol_l.constprop.0+0xc6>
 800d238:	3c57      	subs	r4, #87	@ 0x57
 800d23a:	e7d8      	b.n	800d1ee <_strtol_l.constprop.0+0x72>
 800d23c:	f04f 32ff 	mov.w	r2, #4294967295
 800d240:	e7e1      	b.n	800d206 <_strtol_l.constprop.0+0x8a>
 800d242:	1c53      	adds	r3, r2, #1
 800d244:	d108      	bne.n	800d258 <_strtol_l.constprop.0+0xdc>
 800d246:	2322      	movs	r3, #34	@ 0x22
 800d248:	f8ce 3000 	str.w	r3, [lr]
 800d24c:	4660      	mov	r0, ip
 800d24e:	f1b8 0f00 	cmp.w	r8, #0
 800d252:	d0a0      	beq.n	800d196 <_strtol_l.constprop.0+0x1a>
 800d254:	1e69      	subs	r1, r5, #1
 800d256:	e006      	b.n	800d266 <_strtol_l.constprop.0+0xea>
 800d258:	b106      	cbz	r6, 800d25c <_strtol_l.constprop.0+0xe0>
 800d25a:	4240      	negs	r0, r0
 800d25c:	f1b8 0f00 	cmp.w	r8, #0
 800d260:	d099      	beq.n	800d196 <_strtol_l.constprop.0+0x1a>
 800d262:	2a00      	cmp	r2, #0
 800d264:	d1f6      	bne.n	800d254 <_strtol_l.constprop.0+0xd8>
 800d266:	f8c8 1000 	str.w	r1, [r8]
 800d26a:	e794      	b.n	800d196 <_strtol_l.constprop.0+0x1a>
 800d26c:	0802c299 	.word	0x0802c299

0800d270 <_strtol_r>:
 800d270:	f7ff bf84 	b.w	800d17c <_strtol_l.constprop.0>

0800d274 <__ssputs_r>:
 800d274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d278:	688e      	ldr	r6, [r1, #8]
 800d27a:	461f      	mov	r7, r3
 800d27c:	42be      	cmp	r6, r7
 800d27e:	680b      	ldr	r3, [r1, #0]
 800d280:	4682      	mov	sl, r0
 800d282:	460c      	mov	r4, r1
 800d284:	4690      	mov	r8, r2
 800d286:	d82d      	bhi.n	800d2e4 <__ssputs_r+0x70>
 800d288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d28c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d290:	d026      	beq.n	800d2e0 <__ssputs_r+0x6c>
 800d292:	6965      	ldr	r5, [r4, #20]
 800d294:	6909      	ldr	r1, [r1, #16]
 800d296:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d29a:	eba3 0901 	sub.w	r9, r3, r1
 800d29e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2a2:	1c7b      	adds	r3, r7, #1
 800d2a4:	444b      	add	r3, r9
 800d2a6:	106d      	asrs	r5, r5, #1
 800d2a8:	429d      	cmp	r5, r3
 800d2aa:	bf38      	it	cc
 800d2ac:	461d      	movcc	r5, r3
 800d2ae:	0553      	lsls	r3, r2, #21
 800d2b0:	d527      	bpl.n	800d302 <__ssputs_r+0x8e>
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	f7fe fc1c 	bl	800baf0 <_malloc_r>
 800d2b8:	4606      	mov	r6, r0
 800d2ba:	b360      	cbz	r0, 800d316 <__ssputs_r+0xa2>
 800d2bc:	6921      	ldr	r1, [r4, #16]
 800d2be:	464a      	mov	r2, r9
 800d2c0:	f000 fbde 	bl	800da80 <memcpy>
 800d2c4:	89a3      	ldrh	r3, [r4, #12]
 800d2c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d2ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2ce:	81a3      	strh	r3, [r4, #12]
 800d2d0:	6126      	str	r6, [r4, #16]
 800d2d2:	6165      	str	r5, [r4, #20]
 800d2d4:	444e      	add	r6, r9
 800d2d6:	eba5 0509 	sub.w	r5, r5, r9
 800d2da:	6026      	str	r6, [r4, #0]
 800d2dc:	60a5      	str	r5, [r4, #8]
 800d2de:	463e      	mov	r6, r7
 800d2e0:	42be      	cmp	r6, r7
 800d2e2:	d900      	bls.n	800d2e6 <__ssputs_r+0x72>
 800d2e4:	463e      	mov	r6, r7
 800d2e6:	6820      	ldr	r0, [r4, #0]
 800d2e8:	4632      	mov	r2, r6
 800d2ea:	4641      	mov	r1, r8
 800d2ec:	f000 fb6a 	bl	800d9c4 <memmove>
 800d2f0:	68a3      	ldr	r3, [r4, #8]
 800d2f2:	1b9b      	subs	r3, r3, r6
 800d2f4:	60a3      	str	r3, [r4, #8]
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	4433      	add	r3, r6
 800d2fa:	6023      	str	r3, [r4, #0]
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d302:	462a      	mov	r2, r5
 800d304:	f000 ff51 	bl	800e1aa <_realloc_r>
 800d308:	4606      	mov	r6, r0
 800d30a:	2800      	cmp	r0, #0
 800d30c:	d1e0      	bne.n	800d2d0 <__ssputs_r+0x5c>
 800d30e:	6921      	ldr	r1, [r4, #16]
 800d310:	4650      	mov	r0, sl
 800d312:	f7fe fb79 	bl	800ba08 <_free_r>
 800d316:	230c      	movs	r3, #12
 800d318:	f8ca 3000 	str.w	r3, [sl]
 800d31c:	89a3      	ldrh	r3, [r4, #12]
 800d31e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d322:	81a3      	strh	r3, [r4, #12]
 800d324:	f04f 30ff 	mov.w	r0, #4294967295
 800d328:	e7e9      	b.n	800d2fe <__ssputs_r+0x8a>
	...

0800d32c <_svfiprintf_r>:
 800d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d330:	4698      	mov	r8, r3
 800d332:	898b      	ldrh	r3, [r1, #12]
 800d334:	061b      	lsls	r3, r3, #24
 800d336:	b09d      	sub	sp, #116	@ 0x74
 800d338:	4607      	mov	r7, r0
 800d33a:	460d      	mov	r5, r1
 800d33c:	4614      	mov	r4, r2
 800d33e:	d510      	bpl.n	800d362 <_svfiprintf_r+0x36>
 800d340:	690b      	ldr	r3, [r1, #16]
 800d342:	b973      	cbnz	r3, 800d362 <_svfiprintf_r+0x36>
 800d344:	2140      	movs	r1, #64	@ 0x40
 800d346:	f7fe fbd3 	bl	800baf0 <_malloc_r>
 800d34a:	6028      	str	r0, [r5, #0]
 800d34c:	6128      	str	r0, [r5, #16]
 800d34e:	b930      	cbnz	r0, 800d35e <_svfiprintf_r+0x32>
 800d350:	230c      	movs	r3, #12
 800d352:	603b      	str	r3, [r7, #0]
 800d354:	f04f 30ff 	mov.w	r0, #4294967295
 800d358:	b01d      	add	sp, #116	@ 0x74
 800d35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d35e:	2340      	movs	r3, #64	@ 0x40
 800d360:	616b      	str	r3, [r5, #20]
 800d362:	2300      	movs	r3, #0
 800d364:	9309      	str	r3, [sp, #36]	@ 0x24
 800d366:	2320      	movs	r3, #32
 800d368:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d36c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d370:	2330      	movs	r3, #48	@ 0x30
 800d372:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d510 <_svfiprintf_r+0x1e4>
 800d376:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d37a:	f04f 0901 	mov.w	r9, #1
 800d37e:	4623      	mov	r3, r4
 800d380:	469a      	mov	sl, r3
 800d382:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d386:	b10a      	cbz	r2, 800d38c <_svfiprintf_r+0x60>
 800d388:	2a25      	cmp	r2, #37	@ 0x25
 800d38a:	d1f9      	bne.n	800d380 <_svfiprintf_r+0x54>
 800d38c:	ebba 0b04 	subs.w	fp, sl, r4
 800d390:	d00b      	beq.n	800d3aa <_svfiprintf_r+0x7e>
 800d392:	465b      	mov	r3, fp
 800d394:	4622      	mov	r2, r4
 800d396:	4629      	mov	r1, r5
 800d398:	4638      	mov	r0, r7
 800d39a:	f7ff ff6b 	bl	800d274 <__ssputs_r>
 800d39e:	3001      	adds	r0, #1
 800d3a0:	f000 80a7 	beq.w	800d4f2 <_svfiprintf_r+0x1c6>
 800d3a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3a6:	445a      	add	r2, fp
 800d3a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f000 809f 	beq.w	800d4f2 <_svfiprintf_r+0x1c6>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3be:	f10a 0a01 	add.w	sl, sl, #1
 800d3c2:	9304      	str	r3, [sp, #16]
 800d3c4:	9307      	str	r3, [sp, #28]
 800d3c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3cc:	4654      	mov	r4, sl
 800d3ce:	2205      	movs	r2, #5
 800d3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3d4:	484e      	ldr	r0, [pc, #312]	@ (800d510 <_svfiprintf_r+0x1e4>)
 800d3d6:	f7f2 fefb 	bl	80001d0 <memchr>
 800d3da:	9a04      	ldr	r2, [sp, #16]
 800d3dc:	b9d8      	cbnz	r0, 800d416 <_svfiprintf_r+0xea>
 800d3de:	06d0      	lsls	r0, r2, #27
 800d3e0:	bf44      	itt	mi
 800d3e2:	2320      	movmi	r3, #32
 800d3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3e8:	0711      	lsls	r1, r2, #28
 800d3ea:	bf44      	itt	mi
 800d3ec:	232b      	movmi	r3, #43	@ 0x2b
 800d3ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d3f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3f8:	d015      	beq.n	800d426 <_svfiprintf_r+0xfa>
 800d3fa:	9a07      	ldr	r2, [sp, #28]
 800d3fc:	4654      	mov	r4, sl
 800d3fe:	2000      	movs	r0, #0
 800d400:	f04f 0c0a 	mov.w	ip, #10
 800d404:	4621      	mov	r1, r4
 800d406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d40a:	3b30      	subs	r3, #48	@ 0x30
 800d40c:	2b09      	cmp	r3, #9
 800d40e:	d94b      	bls.n	800d4a8 <_svfiprintf_r+0x17c>
 800d410:	b1b0      	cbz	r0, 800d440 <_svfiprintf_r+0x114>
 800d412:	9207      	str	r2, [sp, #28]
 800d414:	e014      	b.n	800d440 <_svfiprintf_r+0x114>
 800d416:	eba0 0308 	sub.w	r3, r0, r8
 800d41a:	fa09 f303 	lsl.w	r3, r9, r3
 800d41e:	4313      	orrs	r3, r2
 800d420:	9304      	str	r3, [sp, #16]
 800d422:	46a2      	mov	sl, r4
 800d424:	e7d2      	b.n	800d3cc <_svfiprintf_r+0xa0>
 800d426:	9b03      	ldr	r3, [sp, #12]
 800d428:	1d19      	adds	r1, r3, #4
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	9103      	str	r1, [sp, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	bfbb      	ittet	lt
 800d432:	425b      	neglt	r3, r3
 800d434:	f042 0202 	orrlt.w	r2, r2, #2
 800d438:	9307      	strge	r3, [sp, #28]
 800d43a:	9307      	strlt	r3, [sp, #28]
 800d43c:	bfb8      	it	lt
 800d43e:	9204      	strlt	r2, [sp, #16]
 800d440:	7823      	ldrb	r3, [r4, #0]
 800d442:	2b2e      	cmp	r3, #46	@ 0x2e
 800d444:	d10a      	bne.n	800d45c <_svfiprintf_r+0x130>
 800d446:	7863      	ldrb	r3, [r4, #1]
 800d448:	2b2a      	cmp	r3, #42	@ 0x2a
 800d44a:	d132      	bne.n	800d4b2 <_svfiprintf_r+0x186>
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	1d1a      	adds	r2, r3, #4
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	9203      	str	r2, [sp, #12]
 800d454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d458:	3402      	adds	r4, #2
 800d45a:	9305      	str	r3, [sp, #20]
 800d45c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d520 <_svfiprintf_r+0x1f4>
 800d460:	7821      	ldrb	r1, [r4, #0]
 800d462:	2203      	movs	r2, #3
 800d464:	4650      	mov	r0, sl
 800d466:	f7f2 feb3 	bl	80001d0 <memchr>
 800d46a:	b138      	cbz	r0, 800d47c <_svfiprintf_r+0x150>
 800d46c:	9b04      	ldr	r3, [sp, #16]
 800d46e:	eba0 000a 	sub.w	r0, r0, sl
 800d472:	2240      	movs	r2, #64	@ 0x40
 800d474:	4082      	lsls	r2, r0
 800d476:	4313      	orrs	r3, r2
 800d478:	3401      	adds	r4, #1
 800d47a:	9304      	str	r3, [sp, #16]
 800d47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d480:	4824      	ldr	r0, [pc, #144]	@ (800d514 <_svfiprintf_r+0x1e8>)
 800d482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d486:	2206      	movs	r2, #6
 800d488:	f7f2 fea2 	bl	80001d0 <memchr>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d036      	beq.n	800d4fe <_svfiprintf_r+0x1d2>
 800d490:	4b21      	ldr	r3, [pc, #132]	@ (800d518 <_svfiprintf_r+0x1ec>)
 800d492:	bb1b      	cbnz	r3, 800d4dc <_svfiprintf_r+0x1b0>
 800d494:	9b03      	ldr	r3, [sp, #12]
 800d496:	3307      	adds	r3, #7
 800d498:	f023 0307 	bic.w	r3, r3, #7
 800d49c:	3308      	adds	r3, #8
 800d49e:	9303      	str	r3, [sp, #12]
 800d4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4a2:	4433      	add	r3, r6
 800d4a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4a6:	e76a      	b.n	800d37e <_svfiprintf_r+0x52>
 800d4a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4ac:	460c      	mov	r4, r1
 800d4ae:	2001      	movs	r0, #1
 800d4b0:	e7a8      	b.n	800d404 <_svfiprintf_r+0xd8>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	3401      	adds	r4, #1
 800d4b6:	9305      	str	r3, [sp, #20]
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	f04f 0c0a 	mov.w	ip, #10
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c4:	3a30      	subs	r2, #48	@ 0x30
 800d4c6:	2a09      	cmp	r2, #9
 800d4c8:	d903      	bls.n	800d4d2 <_svfiprintf_r+0x1a6>
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d0c6      	beq.n	800d45c <_svfiprintf_r+0x130>
 800d4ce:	9105      	str	r1, [sp, #20]
 800d4d0:	e7c4      	b.n	800d45c <_svfiprintf_r+0x130>
 800d4d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e7f0      	b.n	800d4be <_svfiprintf_r+0x192>
 800d4dc:	ab03      	add	r3, sp, #12
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	462a      	mov	r2, r5
 800d4e2:	4b0e      	ldr	r3, [pc, #56]	@ (800d51c <_svfiprintf_r+0x1f0>)
 800d4e4:	a904      	add	r1, sp, #16
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	f7fc fbc4 	bl	8009c74 <_printf_float>
 800d4ec:	1c42      	adds	r2, r0, #1
 800d4ee:	4606      	mov	r6, r0
 800d4f0:	d1d6      	bne.n	800d4a0 <_svfiprintf_r+0x174>
 800d4f2:	89ab      	ldrh	r3, [r5, #12]
 800d4f4:	065b      	lsls	r3, r3, #25
 800d4f6:	f53f af2d 	bmi.w	800d354 <_svfiprintf_r+0x28>
 800d4fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4fc:	e72c      	b.n	800d358 <_svfiprintf_r+0x2c>
 800d4fe:	ab03      	add	r3, sp, #12
 800d500:	9300      	str	r3, [sp, #0]
 800d502:	462a      	mov	r2, r5
 800d504:	4b05      	ldr	r3, [pc, #20]	@ (800d51c <_svfiprintf_r+0x1f0>)
 800d506:	a904      	add	r1, sp, #16
 800d508:	4638      	mov	r0, r7
 800d50a:	f7fc fe4b 	bl	800a1a4 <_printf_i>
 800d50e:	e7ed      	b.n	800d4ec <_svfiprintf_r+0x1c0>
 800d510:	0802c399 	.word	0x0802c399
 800d514:	0802c3a3 	.word	0x0802c3a3
 800d518:	08009c75 	.word	0x08009c75
 800d51c:	0800d275 	.word	0x0800d275
 800d520:	0802c39f 	.word	0x0802c39f

0800d524 <__sfputc_r>:
 800d524:	6893      	ldr	r3, [r2, #8]
 800d526:	3b01      	subs	r3, #1
 800d528:	2b00      	cmp	r3, #0
 800d52a:	b410      	push	{r4}
 800d52c:	6093      	str	r3, [r2, #8]
 800d52e:	da08      	bge.n	800d542 <__sfputc_r+0x1e>
 800d530:	6994      	ldr	r4, [r2, #24]
 800d532:	42a3      	cmp	r3, r4
 800d534:	db01      	blt.n	800d53a <__sfputc_r+0x16>
 800d536:	290a      	cmp	r1, #10
 800d538:	d103      	bne.n	800d542 <__sfputc_r+0x1e>
 800d53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d53e:	f7fd bafa 	b.w	800ab36 <__swbuf_r>
 800d542:	6813      	ldr	r3, [r2, #0]
 800d544:	1c58      	adds	r0, r3, #1
 800d546:	6010      	str	r0, [r2, #0]
 800d548:	7019      	strb	r1, [r3, #0]
 800d54a:	4608      	mov	r0, r1
 800d54c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <__sfputs_r>:
 800d552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d554:	4606      	mov	r6, r0
 800d556:	460f      	mov	r7, r1
 800d558:	4614      	mov	r4, r2
 800d55a:	18d5      	adds	r5, r2, r3
 800d55c:	42ac      	cmp	r4, r5
 800d55e:	d101      	bne.n	800d564 <__sfputs_r+0x12>
 800d560:	2000      	movs	r0, #0
 800d562:	e007      	b.n	800d574 <__sfputs_r+0x22>
 800d564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d568:	463a      	mov	r2, r7
 800d56a:	4630      	mov	r0, r6
 800d56c:	f7ff ffda 	bl	800d524 <__sfputc_r>
 800d570:	1c43      	adds	r3, r0, #1
 800d572:	d1f3      	bne.n	800d55c <__sfputs_r+0xa>
 800d574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d578 <_vfiprintf_r>:
 800d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57c:	460d      	mov	r5, r1
 800d57e:	b09d      	sub	sp, #116	@ 0x74
 800d580:	4614      	mov	r4, r2
 800d582:	4698      	mov	r8, r3
 800d584:	4606      	mov	r6, r0
 800d586:	b118      	cbz	r0, 800d590 <_vfiprintf_r+0x18>
 800d588:	6a03      	ldr	r3, [r0, #32]
 800d58a:	b90b      	cbnz	r3, 800d590 <_vfiprintf_r+0x18>
 800d58c:	f7fd f9ca 	bl	800a924 <__sinit>
 800d590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d592:	07d9      	lsls	r1, r3, #31
 800d594:	d405      	bmi.n	800d5a2 <_vfiprintf_r+0x2a>
 800d596:	89ab      	ldrh	r3, [r5, #12]
 800d598:	059a      	lsls	r2, r3, #22
 800d59a:	d402      	bmi.n	800d5a2 <_vfiprintf_r+0x2a>
 800d59c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d59e:	f7fd fbdc 	bl	800ad5a <__retarget_lock_acquire_recursive>
 800d5a2:	89ab      	ldrh	r3, [r5, #12]
 800d5a4:	071b      	lsls	r3, r3, #28
 800d5a6:	d501      	bpl.n	800d5ac <_vfiprintf_r+0x34>
 800d5a8:	692b      	ldr	r3, [r5, #16]
 800d5aa:	b99b      	cbnz	r3, 800d5d4 <_vfiprintf_r+0x5c>
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	f7fd fb00 	bl	800abb4 <__swsetup_r>
 800d5b4:	b170      	cbz	r0, 800d5d4 <_vfiprintf_r+0x5c>
 800d5b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5b8:	07dc      	lsls	r4, r3, #31
 800d5ba:	d504      	bpl.n	800d5c6 <_vfiprintf_r+0x4e>
 800d5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c0:	b01d      	add	sp, #116	@ 0x74
 800d5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c6:	89ab      	ldrh	r3, [r5, #12]
 800d5c8:	0598      	lsls	r0, r3, #22
 800d5ca:	d4f7      	bmi.n	800d5bc <_vfiprintf_r+0x44>
 800d5cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5ce:	f7fd fbc5 	bl	800ad5c <__retarget_lock_release_recursive>
 800d5d2:	e7f3      	b.n	800d5bc <_vfiprintf_r+0x44>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5d8:	2320      	movs	r3, #32
 800d5da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5e2:	2330      	movs	r3, #48	@ 0x30
 800d5e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d794 <_vfiprintf_r+0x21c>
 800d5e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5ec:	f04f 0901 	mov.w	r9, #1
 800d5f0:	4623      	mov	r3, r4
 800d5f2:	469a      	mov	sl, r3
 800d5f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5f8:	b10a      	cbz	r2, 800d5fe <_vfiprintf_r+0x86>
 800d5fa:	2a25      	cmp	r2, #37	@ 0x25
 800d5fc:	d1f9      	bne.n	800d5f2 <_vfiprintf_r+0x7a>
 800d5fe:	ebba 0b04 	subs.w	fp, sl, r4
 800d602:	d00b      	beq.n	800d61c <_vfiprintf_r+0xa4>
 800d604:	465b      	mov	r3, fp
 800d606:	4622      	mov	r2, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	4630      	mov	r0, r6
 800d60c:	f7ff ffa1 	bl	800d552 <__sfputs_r>
 800d610:	3001      	adds	r0, #1
 800d612:	f000 80a7 	beq.w	800d764 <_vfiprintf_r+0x1ec>
 800d616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d618:	445a      	add	r2, fp
 800d61a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d61c:	f89a 3000 	ldrb.w	r3, [sl]
 800d620:	2b00      	cmp	r3, #0
 800d622:	f000 809f 	beq.w	800d764 <_vfiprintf_r+0x1ec>
 800d626:	2300      	movs	r3, #0
 800d628:	f04f 32ff 	mov.w	r2, #4294967295
 800d62c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d630:	f10a 0a01 	add.w	sl, sl, #1
 800d634:	9304      	str	r3, [sp, #16]
 800d636:	9307      	str	r3, [sp, #28]
 800d638:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d63c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d63e:	4654      	mov	r4, sl
 800d640:	2205      	movs	r2, #5
 800d642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d646:	4853      	ldr	r0, [pc, #332]	@ (800d794 <_vfiprintf_r+0x21c>)
 800d648:	f7f2 fdc2 	bl	80001d0 <memchr>
 800d64c:	9a04      	ldr	r2, [sp, #16]
 800d64e:	b9d8      	cbnz	r0, 800d688 <_vfiprintf_r+0x110>
 800d650:	06d1      	lsls	r1, r2, #27
 800d652:	bf44      	itt	mi
 800d654:	2320      	movmi	r3, #32
 800d656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d65a:	0713      	lsls	r3, r2, #28
 800d65c:	bf44      	itt	mi
 800d65e:	232b      	movmi	r3, #43	@ 0x2b
 800d660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d664:	f89a 3000 	ldrb.w	r3, [sl]
 800d668:	2b2a      	cmp	r3, #42	@ 0x2a
 800d66a:	d015      	beq.n	800d698 <_vfiprintf_r+0x120>
 800d66c:	9a07      	ldr	r2, [sp, #28]
 800d66e:	4654      	mov	r4, sl
 800d670:	2000      	movs	r0, #0
 800d672:	f04f 0c0a 	mov.w	ip, #10
 800d676:	4621      	mov	r1, r4
 800d678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d67c:	3b30      	subs	r3, #48	@ 0x30
 800d67e:	2b09      	cmp	r3, #9
 800d680:	d94b      	bls.n	800d71a <_vfiprintf_r+0x1a2>
 800d682:	b1b0      	cbz	r0, 800d6b2 <_vfiprintf_r+0x13a>
 800d684:	9207      	str	r2, [sp, #28]
 800d686:	e014      	b.n	800d6b2 <_vfiprintf_r+0x13a>
 800d688:	eba0 0308 	sub.w	r3, r0, r8
 800d68c:	fa09 f303 	lsl.w	r3, r9, r3
 800d690:	4313      	orrs	r3, r2
 800d692:	9304      	str	r3, [sp, #16]
 800d694:	46a2      	mov	sl, r4
 800d696:	e7d2      	b.n	800d63e <_vfiprintf_r+0xc6>
 800d698:	9b03      	ldr	r3, [sp, #12]
 800d69a:	1d19      	adds	r1, r3, #4
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	9103      	str	r1, [sp, #12]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	bfbb      	ittet	lt
 800d6a4:	425b      	neglt	r3, r3
 800d6a6:	f042 0202 	orrlt.w	r2, r2, #2
 800d6aa:	9307      	strge	r3, [sp, #28]
 800d6ac:	9307      	strlt	r3, [sp, #28]
 800d6ae:	bfb8      	it	lt
 800d6b0:	9204      	strlt	r2, [sp, #16]
 800d6b2:	7823      	ldrb	r3, [r4, #0]
 800d6b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6b6:	d10a      	bne.n	800d6ce <_vfiprintf_r+0x156>
 800d6b8:	7863      	ldrb	r3, [r4, #1]
 800d6ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6bc:	d132      	bne.n	800d724 <_vfiprintf_r+0x1ac>
 800d6be:	9b03      	ldr	r3, [sp, #12]
 800d6c0:	1d1a      	adds	r2, r3, #4
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	9203      	str	r2, [sp, #12]
 800d6c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6ca:	3402      	adds	r4, #2
 800d6cc:	9305      	str	r3, [sp, #20]
 800d6ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d7a4 <_vfiprintf_r+0x22c>
 800d6d2:	7821      	ldrb	r1, [r4, #0]
 800d6d4:	2203      	movs	r2, #3
 800d6d6:	4650      	mov	r0, sl
 800d6d8:	f7f2 fd7a 	bl	80001d0 <memchr>
 800d6dc:	b138      	cbz	r0, 800d6ee <_vfiprintf_r+0x176>
 800d6de:	9b04      	ldr	r3, [sp, #16]
 800d6e0:	eba0 000a 	sub.w	r0, r0, sl
 800d6e4:	2240      	movs	r2, #64	@ 0x40
 800d6e6:	4082      	lsls	r2, r0
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	3401      	adds	r4, #1
 800d6ec:	9304      	str	r3, [sp, #16]
 800d6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f2:	4829      	ldr	r0, [pc, #164]	@ (800d798 <_vfiprintf_r+0x220>)
 800d6f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6f8:	2206      	movs	r2, #6
 800d6fa:	f7f2 fd69 	bl	80001d0 <memchr>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d03f      	beq.n	800d782 <_vfiprintf_r+0x20a>
 800d702:	4b26      	ldr	r3, [pc, #152]	@ (800d79c <_vfiprintf_r+0x224>)
 800d704:	bb1b      	cbnz	r3, 800d74e <_vfiprintf_r+0x1d6>
 800d706:	9b03      	ldr	r3, [sp, #12]
 800d708:	3307      	adds	r3, #7
 800d70a:	f023 0307 	bic.w	r3, r3, #7
 800d70e:	3308      	adds	r3, #8
 800d710:	9303      	str	r3, [sp, #12]
 800d712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d714:	443b      	add	r3, r7
 800d716:	9309      	str	r3, [sp, #36]	@ 0x24
 800d718:	e76a      	b.n	800d5f0 <_vfiprintf_r+0x78>
 800d71a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d71e:	460c      	mov	r4, r1
 800d720:	2001      	movs	r0, #1
 800d722:	e7a8      	b.n	800d676 <_vfiprintf_r+0xfe>
 800d724:	2300      	movs	r3, #0
 800d726:	3401      	adds	r4, #1
 800d728:	9305      	str	r3, [sp, #20]
 800d72a:	4619      	mov	r1, r3
 800d72c:	f04f 0c0a 	mov.w	ip, #10
 800d730:	4620      	mov	r0, r4
 800d732:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d736:	3a30      	subs	r2, #48	@ 0x30
 800d738:	2a09      	cmp	r2, #9
 800d73a:	d903      	bls.n	800d744 <_vfiprintf_r+0x1cc>
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d0c6      	beq.n	800d6ce <_vfiprintf_r+0x156>
 800d740:	9105      	str	r1, [sp, #20]
 800d742:	e7c4      	b.n	800d6ce <_vfiprintf_r+0x156>
 800d744:	fb0c 2101 	mla	r1, ip, r1, r2
 800d748:	4604      	mov	r4, r0
 800d74a:	2301      	movs	r3, #1
 800d74c:	e7f0      	b.n	800d730 <_vfiprintf_r+0x1b8>
 800d74e:	ab03      	add	r3, sp, #12
 800d750:	9300      	str	r3, [sp, #0]
 800d752:	462a      	mov	r2, r5
 800d754:	4b12      	ldr	r3, [pc, #72]	@ (800d7a0 <_vfiprintf_r+0x228>)
 800d756:	a904      	add	r1, sp, #16
 800d758:	4630      	mov	r0, r6
 800d75a:	f7fc fa8b 	bl	8009c74 <_printf_float>
 800d75e:	4607      	mov	r7, r0
 800d760:	1c78      	adds	r0, r7, #1
 800d762:	d1d6      	bne.n	800d712 <_vfiprintf_r+0x19a>
 800d764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d766:	07d9      	lsls	r1, r3, #31
 800d768:	d405      	bmi.n	800d776 <_vfiprintf_r+0x1fe>
 800d76a:	89ab      	ldrh	r3, [r5, #12]
 800d76c:	059a      	lsls	r2, r3, #22
 800d76e:	d402      	bmi.n	800d776 <_vfiprintf_r+0x1fe>
 800d770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d772:	f7fd faf3 	bl	800ad5c <__retarget_lock_release_recursive>
 800d776:	89ab      	ldrh	r3, [r5, #12]
 800d778:	065b      	lsls	r3, r3, #25
 800d77a:	f53f af1f 	bmi.w	800d5bc <_vfiprintf_r+0x44>
 800d77e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d780:	e71e      	b.n	800d5c0 <_vfiprintf_r+0x48>
 800d782:	ab03      	add	r3, sp, #12
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	462a      	mov	r2, r5
 800d788:	4b05      	ldr	r3, [pc, #20]	@ (800d7a0 <_vfiprintf_r+0x228>)
 800d78a:	a904      	add	r1, sp, #16
 800d78c:	4630      	mov	r0, r6
 800d78e:	f7fc fd09 	bl	800a1a4 <_printf_i>
 800d792:	e7e4      	b.n	800d75e <_vfiprintf_r+0x1e6>
 800d794:	0802c399 	.word	0x0802c399
 800d798:	0802c3a3 	.word	0x0802c3a3
 800d79c:	08009c75 	.word	0x08009c75
 800d7a0:	0800d553 	.word	0x0800d553
 800d7a4:	0802c39f 	.word	0x0802c39f

0800d7a8 <__sflush_r>:
 800d7a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b0:	0716      	lsls	r6, r2, #28
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	d454      	bmi.n	800d862 <__sflush_r+0xba>
 800d7b8:	684b      	ldr	r3, [r1, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	dc02      	bgt.n	800d7c4 <__sflush_r+0x1c>
 800d7be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	dd48      	ble.n	800d856 <__sflush_r+0xae>
 800d7c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7c6:	2e00      	cmp	r6, #0
 800d7c8:	d045      	beq.n	800d856 <__sflush_r+0xae>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7d0:	682f      	ldr	r7, [r5, #0]
 800d7d2:	6a21      	ldr	r1, [r4, #32]
 800d7d4:	602b      	str	r3, [r5, #0]
 800d7d6:	d030      	beq.n	800d83a <__sflush_r+0x92>
 800d7d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7da:	89a3      	ldrh	r3, [r4, #12]
 800d7dc:	0759      	lsls	r1, r3, #29
 800d7de:	d505      	bpl.n	800d7ec <__sflush_r+0x44>
 800d7e0:	6863      	ldr	r3, [r4, #4]
 800d7e2:	1ad2      	subs	r2, r2, r3
 800d7e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7e6:	b10b      	cbz	r3, 800d7ec <__sflush_r+0x44>
 800d7e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7ea:	1ad2      	subs	r2, r2, r3
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7f0:	6a21      	ldr	r1, [r4, #32]
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	47b0      	blx	r6
 800d7f6:	1c43      	adds	r3, r0, #1
 800d7f8:	89a3      	ldrh	r3, [r4, #12]
 800d7fa:	d106      	bne.n	800d80a <__sflush_r+0x62>
 800d7fc:	6829      	ldr	r1, [r5, #0]
 800d7fe:	291d      	cmp	r1, #29
 800d800:	d82b      	bhi.n	800d85a <__sflush_r+0xb2>
 800d802:	4a2a      	ldr	r2, [pc, #168]	@ (800d8ac <__sflush_r+0x104>)
 800d804:	410a      	asrs	r2, r1
 800d806:	07d6      	lsls	r6, r2, #31
 800d808:	d427      	bmi.n	800d85a <__sflush_r+0xb2>
 800d80a:	2200      	movs	r2, #0
 800d80c:	6062      	str	r2, [r4, #4]
 800d80e:	04d9      	lsls	r1, r3, #19
 800d810:	6922      	ldr	r2, [r4, #16]
 800d812:	6022      	str	r2, [r4, #0]
 800d814:	d504      	bpl.n	800d820 <__sflush_r+0x78>
 800d816:	1c42      	adds	r2, r0, #1
 800d818:	d101      	bne.n	800d81e <__sflush_r+0x76>
 800d81a:	682b      	ldr	r3, [r5, #0]
 800d81c:	b903      	cbnz	r3, 800d820 <__sflush_r+0x78>
 800d81e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d822:	602f      	str	r7, [r5, #0]
 800d824:	b1b9      	cbz	r1, 800d856 <__sflush_r+0xae>
 800d826:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d82a:	4299      	cmp	r1, r3
 800d82c:	d002      	beq.n	800d834 <__sflush_r+0x8c>
 800d82e:	4628      	mov	r0, r5
 800d830:	f7fe f8ea 	bl	800ba08 <_free_r>
 800d834:	2300      	movs	r3, #0
 800d836:	6363      	str	r3, [r4, #52]	@ 0x34
 800d838:	e00d      	b.n	800d856 <__sflush_r+0xae>
 800d83a:	2301      	movs	r3, #1
 800d83c:	4628      	mov	r0, r5
 800d83e:	47b0      	blx	r6
 800d840:	4602      	mov	r2, r0
 800d842:	1c50      	adds	r0, r2, #1
 800d844:	d1c9      	bne.n	800d7da <__sflush_r+0x32>
 800d846:	682b      	ldr	r3, [r5, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d0c6      	beq.n	800d7da <__sflush_r+0x32>
 800d84c:	2b1d      	cmp	r3, #29
 800d84e:	d001      	beq.n	800d854 <__sflush_r+0xac>
 800d850:	2b16      	cmp	r3, #22
 800d852:	d11e      	bne.n	800d892 <__sflush_r+0xea>
 800d854:	602f      	str	r7, [r5, #0]
 800d856:	2000      	movs	r0, #0
 800d858:	e022      	b.n	800d8a0 <__sflush_r+0xf8>
 800d85a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d85e:	b21b      	sxth	r3, r3
 800d860:	e01b      	b.n	800d89a <__sflush_r+0xf2>
 800d862:	690f      	ldr	r7, [r1, #16]
 800d864:	2f00      	cmp	r7, #0
 800d866:	d0f6      	beq.n	800d856 <__sflush_r+0xae>
 800d868:	0793      	lsls	r3, r2, #30
 800d86a:	680e      	ldr	r6, [r1, #0]
 800d86c:	bf08      	it	eq
 800d86e:	694b      	ldreq	r3, [r1, #20]
 800d870:	600f      	str	r7, [r1, #0]
 800d872:	bf18      	it	ne
 800d874:	2300      	movne	r3, #0
 800d876:	eba6 0807 	sub.w	r8, r6, r7
 800d87a:	608b      	str	r3, [r1, #8]
 800d87c:	f1b8 0f00 	cmp.w	r8, #0
 800d880:	dde9      	ble.n	800d856 <__sflush_r+0xae>
 800d882:	6a21      	ldr	r1, [r4, #32]
 800d884:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d886:	4643      	mov	r3, r8
 800d888:	463a      	mov	r2, r7
 800d88a:	4628      	mov	r0, r5
 800d88c:	47b0      	blx	r6
 800d88e:	2800      	cmp	r0, #0
 800d890:	dc08      	bgt.n	800d8a4 <__sflush_r+0xfc>
 800d892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d89a:	81a3      	strh	r3, [r4, #12]
 800d89c:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8a4:	4407      	add	r7, r0
 800d8a6:	eba8 0800 	sub.w	r8, r8, r0
 800d8aa:	e7e7      	b.n	800d87c <__sflush_r+0xd4>
 800d8ac:	dfbffffe 	.word	0xdfbffffe

0800d8b0 <_fflush_r>:
 800d8b0:	b538      	push	{r3, r4, r5, lr}
 800d8b2:	690b      	ldr	r3, [r1, #16]
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	b913      	cbnz	r3, 800d8c0 <_fflush_r+0x10>
 800d8ba:	2500      	movs	r5, #0
 800d8bc:	4628      	mov	r0, r5
 800d8be:	bd38      	pop	{r3, r4, r5, pc}
 800d8c0:	b118      	cbz	r0, 800d8ca <_fflush_r+0x1a>
 800d8c2:	6a03      	ldr	r3, [r0, #32]
 800d8c4:	b90b      	cbnz	r3, 800d8ca <_fflush_r+0x1a>
 800d8c6:	f7fd f82d 	bl	800a924 <__sinit>
 800d8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d0f3      	beq.n	800d8ba <_fflush_r+0xa>
 800d8d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8d4:	07d0      	lsls	r0, r2, #31
 800d8d6:	d404      	bmi.n	800d8e2 <_fflush_r+0x32>
 800d8d8:	0599      	lsls	r1, r3, #22
 800d8da:	d402      	bmi.n	800d8e2 <_fflush_r+0x32>
 800d8dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8de:	f7fd fa3c 	bl	800ad5a <__retarget_lock_acquire_recursive>
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	4621      	mov	r1, r4
 800d8e6:	f7ff ff5f 	bl	800d7a8 <__sflush_r>
 800d8ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8ec:	07da      	lsls	r2, r3, #31
 800d8ee:	4605      	mov	r5, r0
 800d8f0:	d4e4      	bmi.n	800d8bc <_fflush_r+0xc>
 800d8f2:	89a3      	ldrh	r3, [r4, #12]
 800d8f4:	059b      	lsls	r3, r3, #22
 800d8f6:	d4e1      	bmi.n	800d8bc <_fflush_r+0xc>
 800d8f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8fa:	f7fd fa2f 	bl	800ad5c <__retarget_lock_release_recursive>
 800d8fe:	e7dd      	b.n	800d8bc <_fflush_r+0xc>

0800d900 <__swhatbuf_r>:
 800d900:	b570      	push	{r4, r5, r6, lr}
 800d902:	460c      	mov	r4, r1
 800d904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d908:	2900      	cmp	r1, #0
 800d90a:	b096      	sub	sp, #88	@ 0x58
 800d90c:	4615      	mov	r5, r2
 800d90e:	461e      	mov	r6, r3
 800d910:	da0d      	bge.n	800d92e <__swhatbuf_r+0x2e>
 800d912:	89a3      	ldrh	r3, [r4, #12]
 800d914:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d918:	f04f 0100 	mov.w	r1, #0
 800d91c:	bf14      	ite	ne
 800d91e:	2340      	movne	r3, #64	@ 0x40
 800d920:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d924:	2000      	movs	r0, #0
 800d926:	6031      	str	r1, [r6, #0]
 800d928:	602b      	str	r3, [r5, #0]
 800d92a:	b016      	add	sp, #88	@ 0x58
 800d92c:	bd70      	pop	{r4, r5, r6, pc}
 800d92e:	466a      	mov	r2, sp
 800d930:	f000 f874 	bl	800da1c <_fstat_r>
 800d934:	2800      	cmp	r0, #0
 800d936:	dbec      	blt.n	800d912 <__swhatbuf_r+0x12>
 800d938:	9901      	ldr	r1, [sp, #4]
 800d93a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d93e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d942:	4259      	negs	r1, r3
 800d944:	4159      	adcs	r1, r3
 800d946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d94a:	e7eb      	b.n	800d924 <__swhatbuf_r+0x24>

0800d94c <__smakebuf_r>:
 800d94c:	898b      	ldrh	r3, [r1, #12]
 800d94e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d950:	079d      	lsls	r5, r3, #30
 800d952:	4606      	mov	r6, r0
 800d954:	460c      	mov	r4, r1
 800d956:	d507      	bpl.n	800d968 <__smakebuf_r+0x1c>
 800d958:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d95c:	6023      	str	r3, [r4, #0]
 800d95e:	6123      	str	r3, [r4, #16]
 800d960:	2301      	movs	r3, #1
 800d962:	6163      	str	r3, [r4, #20]
 800d964:	b003      	add	sp, #12
 800d966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d968:	ab01      	add	r3, sp, #4
 800d96a:	466a      	mov	r2, sp
 800d96c:	f7ff ffc8 	bl	800d900 <__swhatbuf_r>
 800d970:	9f00      	ldr	r7, [sp, #0]
 800d972:	4605      	mov	r5, r0
 800d974:	4639      	mov	r1, r7
 800d976:	4630      	mov	r0, r6
 800d978:	f7fe f8ba 	bl	800baf0 <_malloc_r>
 800d97c:	b948      	cbnz	r0, 800d992 <__smakebuf_r+0x46>
 800d97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d982:	059a      	lsls	r2, r3, #22
 800d984:	d4ee      	bmi.n	800d964 <__smakebuf_r+0x18>
 800d986:	f023 0303 	bic.w	r3, r3, #3
 800d98a:	f043 0302 	orr.w	r3, r3, #2
 800d98e:	81a3      	strh	r3, [r4, #12]
 800d990:	e7e2      	b.n	800d958 <__smakebuf_r+0xc>
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	6020      	str	r0, [r4, #0]
 800d996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d99a:	81a3      	strh	r3, [r4, #12]
 800d99c:	9b01      	ldr	r3, [sp, #4]
 800d99e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d9a2:	b15b      	cbz	r3, 800d9bc <__smakebuf_r+0x70>
 800d9a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f000 f849 	bl	800da40 <_isatty_r>
 800d9ae:	b128      	cbz	r0, 800d9bc <__smakebuf_r+0x70>
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	f023 0303 	bic.w	r3, r3, #3
 800d9b6:	f043 0301 	orr.w	r3, r3, #1
 800d9ba:	81a3      	strh	r3, [r4, #12]
 800d9bc:	89a3      	ldrh	r3, [r4, #12]
 800d9be:	431d      	orrs	r5, r3
 800d9c0:	81a5      	strh	r5, [r4, #12]
 800d9c2:	e7cf      	b.n	800d964 <__smakebuf_r+0x18>

0800d9c4 <memmove>:
 800d9c4:	4288      	cmp	r0, r1
 800d9c6:	b510      	push	{r4, lr}
 800d9c8:	eb01 0402 	add.w	r4, r1, r2
 800d9cc:	d902      	bls.n	800d9d4 <memmove+0x10>
 800d9ce:	4284      	cmp	r4, r0
 800d9d0:	4623      	mov	r3, r4
 800d9d2:	d807      	bhi.n	800d9e4 <memmove+0x20>
 800d9d4:	1e43      	subs	r3, r0, #1
 800d9d6:	42a1      	cmp	r1, r4
 800d9d8:	d008      	beq.n	800d9ec <memmove+0x28>
 800d9da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9e2:	e7f8      	b.n	800d9d6 <memmove+0x12>
 800d9e4:	4402      	add	r2, r0
 800d9e6:	4601      	mov	r1, r0
 800d9e8:	428a      	cmp	r2, r1
 800d9ea:	d100      	bne.n	800d9ee <memmove+0x2a>
 800d9ec:	bd10      	pop	{r4, pc}
 800d9ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9f6:	e7f7      	b.n	800d9e8 <memmove+0x24>

0800d9f8 <strncmp>:
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	b16a      	cbz	r2, 800da18 <strncmp+0x20>
 800d9fc:	3901      	subs	r1, #1
 800d9fe:	1884      	adds	r4, r0, r2
 800da00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800da08:	429a      	cmp	r2, r3
 800da0a:	d103      	bne.n	800da14 <strncmp+0x1c>
 800da0c:	42a0      	cmp	r0, r4
 800da0e:	d001      	beq.n	800da14 <strncmp+0x1c>
 800da10:	2a00      	cmp	r2, #0
 800da12:	d1f5      	bne.n	800da00 <strncmp+0x8>
 800da14:	1ad0      	subs	r0, r2, r3
 800da16:	bd10      	pop	{r4, pc}
 800da18:	4610      	mov	r0, r2
 800da1a:	e7fc      	b.n	800da16 <strncmp+0x1e>

0800da1c <_fstat_r>:
 800da1c:	b538      	push	{r3, r4, r5, lr}
 800da1e:	4d07      	ldr	r5, [pc, #28]	@ (800da3c <_fstat_r+0x20>)
 800da20:	2300      	movs	r3, #0
 800da22:	4604      	mov	r4, r0
 800da24:	4608      	mov	r0, r1
 800da26:	4611      	mov	r1, r2
 800da28:	602b      	str	r3, [r5, #0]
 800da2a:	f7f4 ff8b 	bl	8002944 <_fstat>
 800da2e:	1c43      	adds	r3, r0, #1
 800da30:	d102      	bne.n	800da38 <_fstat_r+0x1c>
 800da32:	682b      	ldr	r3, [r5, #0]
 800da34:	b103      	cbz	r3, 800da38 <_fstat_r+0x1c>
 800da36:	6023      	str	r3, [r4, #0]
 800da38:	bd38      	pop	{r3, r4, r5, pc}
 800da3a:	bf00      	nop
 800da3c:	200010c8 	.word	0x200010c8

0800da40 <_isatty_r>:
 800da40:	b538      	push	{r3, r4, r5, lr}
 800da42:	4d06      	ldr	r5, [pc, #24]	@ (800da5c <_isatty_r+0x1c>)
 800da44:	2300      	movs	r3, #0
 800da46:	4604      	mov	r4, r0
 800da48:	4608      	mov	r0, r1
 800da4a:	602b      	str	r3, [r5, #0]
 800da4c:	f7f4 ff8a 	bl	8002964 <_isatty>
 800da50:	1c43      	adds	r3, r0, #1
 800da52:	d102      	bne.n	800da5a <_isatty_r+0x1a>
 800da54:	682b      	ldr	r3, [r5, #0]
 800da56:	b103      	cbz	r3, 800da5a <_isatty_r+0x1a>
 800da58:	6023      	str	r3, [r4, #0]
 800da5a:	bd38      	pop	{r3, r4, r5, pc}
 800da5c:	200010c8 	.word	0x200010c8

0800da60 <_sbrk_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	4d06      	ldr	r5, [pc, #24]	@ (800da7c <_sbrk_r+0x1c>)
 800da64:	2300      	movs	r3, #0
 800da66:	4604      	mov	r4, r0
 800da68:	4608      	mov	r0, r1
 800da6a:	602b      	str	r3, [r5, #0]
 800da6c:	f7f4 ff92 	bl	8002994 <_sbrk>
 800da70:	1c43      	adds	r3, r0, #1
 800da72:	d102      	bne.n	800da7a <_sbrk_r+0x1a>
 800da74:	682b      	ldr	r3, [r5, #0]
 800da76:	b103      	cbz	r3, 800da7a <_sbrk_r+0x1a>
 800da78:	6023      	str	r3, [r4, #0]
 800da7a:	bd38      	pop	{r3, r4, r5, pc}
 800da7c:	200010c8 	.word	0x200010c8

0800da80 <memcpy>:
 800da80:	440a      	add	r2, r1
 800da82:	4291      	cmp	r1, r2
 800da84:	f100 33ff 	add.w	r3, r0, #4294967295
 800da88:	d100      	bne.n	800da8c <memcpy+0xc>
 800da8a:	4770      	bx	lr
 800da8c:	b510      	push	{r4, lr}
 800da8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da96:	4291      	cmp	r1, r2
 800da98:	d1f9      	bne.n	800da8e <memcpy+0xe>
 800da9a:	bd10      	pop	{r4, pc}
 800da9c:	0000      	movs	r0, r0
	...

0800daa0 <nan>:
 800daa0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800daa8 <nan+0x8>
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	00000000 	.word	0x00000000
 800daac:	7ff80000 	.word	0x7ff80000

0800dab0 <__assert_func>:
 800dab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dab2:	4614      	mov	r4, r2
 800dab4:	461a      	mov	r2, r3
 800dab6:	4b09      	ldr	r3, [pc, #36]	@ (800dadc <__assert_func+0x2c>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4605      	mov	r5, r0
 800dabc:	68d8      	ldr	r0, [r3, #12]
 800dabe:	b954      	cbnz	r4, 800dad6 <__assert_func+0x26>
 800dac0:	4b07      	ldr	r3, [pc, #28]	@ (800dae0 <__assert_func+0x30>)
 800dac2:	461c      	mov	r4, r3
 800dac4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dac8:	9100      	str	r1, [sp, #0]
 800daca:	462b      	mov	r3, r5
 800dacc:	4905      	ldr	r1, [pc, #20]	@ (800dae4 <__assert_func+0x34>)
 800dace:	f000 fba7 	bl	800e220 <fiprintf>
 800dad2:	f000 fbb7 	bl	800e244 <abort>
 800dad6:	4b04      	ldr	r3, [pc, #16]	@ (800dae8 <__assert_func+0x38>)
 800dad8:	e7f4      	b.n	800dac4 <__assert_func+0x14>
 800dada:	bf00      	nop
 800dadc:	20000450 	.word	0x20000450
 800dae0:	0802c3ed 	.word	0x0802c3ed
 800dae4:	0802c3bf 	.word	0x0802c3bf
 800dae8:	0802c3b2 	.word	0x0802c3b2

0800daec <_calloc_r>:
 800daec:	b570      	push	{r4, r5, r6, lr}
 800daee:	fba1 5402 	umull	r5, r4, r1, r2
 800daf2:	b93c      	cbnz	r4, 800db04 <_calloc_r+0x18>
 800daf4:	4629      	mov	r1, r5
 800daf6:	f7fd fffb 	bl	800baf0 <_malloc_r>
 800dafa:	4606      	mov	r6, r0
 800dafc:	b928      	cbnz	r0, 800db0a <_calloc_r+0x1e>
 800dafe:	2600      	movs	r6, #0
 800db00:	4630      	mov	r0, r6
 800db02:	bd70      	pop	{r4, r5, r6, pc}
 800db04:	220c      	movs	r2, #12
 800db06:	6002      	str	r2, [r0, #0]
 800db08:	e7f9      	b.n	800dafe <_calloc_r+0x12>
 800db0a:	462a      	mov	r2, r5
 800db0c:	4621      	mov	r1, r4
 800db0e:	f7fd f8a7 	bl	800ac60 <memset>
 800db12:	e7f5      	b.n	800db00 <_calloc_r+0x14>

0800db14 <rshift>:
 800db14:	6903      	ldr	r3, [r0, #16]
 800db16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800db1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800db22:	f100 0414 	add.w	r4, r0, #20
 800db26:	dd45      	ble.n	800dbb4 <rshift+0xa0>
 800db28:	f011 011f 	ands.w	r1, r1, #31
 800db2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800db30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800db34:	d10c      	bne.n	800db50 <rshift+0x3c>
 800db36:	f100 0710 	add.w	r7, r0, #16
 800db3a:	4629      	mov	r1, r5
 800db3c:	42b1      	cmp	r1, r6
 800db3e:	d334      	bcc.n	800dbaa <rshift+0x96>
 800db40:	1a9b      	subs	r3, r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	1eea      	subs	r2, r5, #3
 800db46:	4296      	cmp	r6, r2
 800db48:	bf38      	it	cc
 800db4a:	2300      	movcc	r3, #0
 800db4c:	4423      	add	r3, r4
 800db4e:	e015      	b.n	800db7c <rshift+0x68>
 800db50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800db54:	f1c1 0820 	rsb	r8, r1, #32
 800db58:	40cf      	lsrs	r7, r1
 800db5a:	f105 0e04 	add.w	lr, r5, #4
 800db5e:	46a1      	mov	r9, r4
 800db60:	4576      	cmp	r6, lr
 800db62:	46f4      	mov	ip, lr
 800db64:	d815      	bhi.n	800db92 <rshift+0x7e>
 800db66:	1a9a      	subs	r2, r3, r2
 800db68:	0092      	lsls	r2, r2, #2
 800db6a:	3a04      	subs	r2, #4
 800db6c:	3501      	adds	r5, #1
 800db6e:	42ae      	cmp	r6, r5
 800db70:	bf38      	it	cc
 800db72:	2200      	movcc	r2, #0
 800db74:	18a3      	adds	r3, r4, r2
 800db76:	50a7      	str	r7, [r4, r2]
 800db78:	b107      	cbz	r7, 800db7c <rshift+0x68>
 800db7a:	3304      	adds	r3, #4
 800db7c:	1b1a      	subs	r2, r3, r4
 800db7e:	42a3      	cmp	r3, r4
 800db80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800db84:	bf08      	it	eq
 800db86:	2300      	moveq	r3, #0
 800db88:	6102      	str	r2, [r0, #16]
 800db8a:	bf08      	it	eq
 800db8c:	6143      	streq	r3, [r0, #20]
 800db8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db92:	f8dc c000 	ldr.w	ip, [ip]
 800db96:	fa0c fc08 	lsl.w	ip, ip, r8
 800db9a:	ea4c 0707 	orr.w	r7, ip, r7
 800db9e:	f849 7b04 	str.w	r7, [r9], #4
 800dba2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dba6:	40cf      	lsrs	r7, r1
 800dba8:	e7da      	b.n	800db60 <rshift+0x4c>
 800dbaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800dbae:	f847 cf04 	str.w	ip, [r7, #4]!
 800dbb2:	e7c3      	b.n	800db3c <rshift+0x28>
 800dbb4:	4623      	mov	r3, r4
 800dbb6:	e7e1      	b.n	800db7c <rshift+0x68>

0800dbb8 <__hexdig_fun>:
 800dbb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dbbc:	2b09      	cmp	r3, #9
 800dbbe:	d802      	bhi.n	800dbc6 <__hexdig_fun+0xe>
 800dbc0:	3820      	subs	r0, #32
 800dbc2:	b2c0      	uxtb	r0, r0
 800dbc4:	4770      	bx	lr
 800dbc6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dbca:	2b05      	cmp	r3, #5
 800dbcc:	d801      	bhi.n	800dbd2 <__hexdig_fun+0x1a>
 800dbce:	3847      	subs	r0, #71	@ 0x47
 800dbd0:	e7f7      	b.n	800dbc2 <__hexdig_fun+0xa>
 800dbd2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dbd6:	2b05      	cmp	r3, #5
 800dbd8:	d801      	bhi.n	800dbde <__hexdig_fun+0x26>
 800dbda:	3827      	subs	r0, #39	@ 0x27
 800dbdc:	e7f1      	b.n	800dbc2 <__hexdig_fun+0xa>
 800dbde:	2000      	movs	r0, #0
 800dbe0:	4770      	bx	lr
	...

0800dbe4 <__gethex>:
 800dbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe8:	b085      	sub	sp, #20
 800dbea:	468a      	mov	sl, r1
 800dbec:	9302      	str	r3, [sp, #8]
 800dbee:	680b      	ldr	r3, [r1, #0]
 800dbf0:	9001      	str	r0, [sp, #4]
 800dbf2:	4690      	mov	r8, r2
 800dbf4:	1c9c      	adds	r4, r3, #2
 800dbf6:	46a1      	mov	r9, r4
 800dbf8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dbfc:	2830      	cmp	r0, #48	@ 0x30
 800dbfe:	d0fa      	beq.n	800dbf6 <__gethex+0x12>
 800dc00:	eba9 0303 	sub.w	r3, r9, r3
 800dc04:	f1a3 0b02 	sub.w	fp, r3, #2
 800dc08:	f7ff ffd6 	bl	800dbb8 <__hexdig_fun>
 800dc0c:	4605      	mov	r5, r0
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d168      	bne.n	800dce4 <__gethex+0x100>
 800dc12:	49a0      	ldr	r1, [pc, #640]	@ (800de94 <__gethex+0x2b0>)
 800dc14:	2201      	movs	r2, #1
 800dc16:	4648      	mov	r0, r9
 800dc18:	f7ff feee 	bl	800d9f8 <strncmp>
 800dc1c:	4607      	mov	r7, r0
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d167      	bne.n	800dcf2 <__gethex+0x10e>
 800dc22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dc26:	4626      	mov	r6, r4
 800dc28:	f7ff ffc6 	bl	800dbb8 <__hexdig_fun>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d062      	beq.n	800dcf6 <__gethex+0x112>
 800dc30:	4623      	mov	r3, r4
 800dc32:	7818      	ldrb	r0, [r3, #0]
 800dc34:	2830      	cmp	r0, #48	@ 0x30
 800dc36:	4699      	mov	r9, r3
 800dc38:	f103 0301 	add.w	r3, r3, #1
 800dc3c:	d0f9      	beq.n	800dc32 <__gethex+0x4e>
 800dc3e:	f7ff ffbb 	bl	800dbb8 <__hexdig_fun>
 800dc42:	fab0 f580 	clz	r5, r0
 800dc46:	096d      	lsrs	r5, r5, #5
 800dc48:	f04f 0b01 	mov.w	fp, #1
 800dc4c:	464a      	mov	r2, r9
 800dc4e:	4616      	mov	r6, r2
 800dc50:	3201      	adds	r2, #1
 800dc52:	7830      	ldrb	r0, [r6, #0]
 800dc54:	f7ff ffb0 	bl	800dbb8 <__hexdig_fun>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d1f8      	bne.n	800dc4e <__gethex+0x6a>
 800dc5c:	498d      	ldr	r1, [pc, #564]	@ (800de94 <__gethex+0x2b0>)
 800dc5e:	2201      	movs	r2, #1
 800dc60:	4630      	mov	r0, r6
 800dc62:	f7ff fec9 	bl	800d9f8 <strncmp>
 800dc66:	2800      	cmp	r0, #0
 800dc68:	d13f      	bne.n	800dcea <__gethex+0x106>
 800dc6a:	b944      	cbnz	r4, 800dc7e <__gethex+0x9a>
 800dc6c:	1c74      	adds	r4, r6, #1
 800dc6e:	4622      	mov	r2, r4
 800dc70:	4616      	mov	r6, r2
 800dc72:	3201      	adds	r2, #1
 800dc74:	7830      	ldrb	r0, [r6, #0]
 800dc76:	f7ff ff9f 	bl	800dbb8 <__hexdig_fun>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	d1f8      	bne.n	800dc70 <__gethex+0x8c>
 800dc7e:	1ba4      	subs	r4, r4, r6
 800dc80:	00a7      	lsls	r7, r4, #2
 800dc82:	7833      	ldrb	r3, [r6, #0]
 800dc84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dc88:	2b50      	cmp	r3, #80	@ 0x50
 800dc8a:	d13e      	bne.n	800dd0a <__gethex+0x126>
 800dc8c:	7873      	ldrb	r3, [r6, #1]
 800dc8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800dc90:	d033      	beq.n	800dcfa <__gethex+0x116>
 800dc92:	2b2d      	cmp	r3, #45	@ 0x2d
 800dc94:	d034      	beq.n	800dd00 <__gethex+0x11c>
 800dc96:	1c71      	adds	r1, r6, #1
 800dc98:	2400      	movs	r4, #0
 800dc9a:	7808      	ldrb	r0, [r1, #0]
 800dc9c:	f7ff ff8c 	bl	800dbb8 <__hexdig_fun>
 800dca0:	1e43      	subs	r3, r0, #1
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	2b18      	cmp	r3, #24
 800dca6:	d830      	bhi.n	800dd0a <__gethex+0x126>
 800dca8:	f1a0 0210 	sub.w	r2, r0, #16
 800dcac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dcb0:	f7ff ff82 	bl	800dbb8 <__hexdig_fun>
 800dcb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800dcb8:	fa5f fc8c 	uxtb.w	ip, ip
 800dcbc:	f1bc 0f18 	cmp.w	ip, #24
 800dcc0:	f04f 030a 	mov.w	r3, #10
 800dcc4:	d91e      	bls.n	800dd04 <__gethex+0x120>
 800dcc6:	b104      	cbz	r4, 800dcca <__gethex+0xe6>
 800dcc8:	4252      	negs	r2, r2
 800dcca:	4417      	add	r7, r2
 800dccc:	f8ca 1000 	str.w	r1, [sl]
 800dcd0:	b1ed      	cbz	r5, 800dd0e <__gethex+0x12a>
 800dcd2:	f1bb 0f00 	cmp.w	fp, #0
 800dcd6:	bf0c      	ite	eq
 800dcd8:	2506      	moveq	r5, #6
 800dcda:	2500      	movne	r5, #0
 800dcdc:	4628      	mov	r0, r5
 800dcde:	b005      	add	sp, #20
 800dce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce4:	2500      	movs	r5, #0
 800dce6:	462c      	mov	r4, r5
 800dce8:	e7b0      	b.n	800dc4c <__gethex+0x68>
 800dcea:	2c00      	cmp	r4, #0
 800dcec:	d1c7      	bne.n	800dc7e <__gethex+0x9a>
 800dcee:	4627      	mov	r7, r4
 800dcf0:	e7c7      	b.n	800dc82 <__gethex+0x9e>
 800dcf2:	464e      	mov	r6, r9
 800dcf4:	462f      	mov	r7, r5
 800dcf6:	2501      	movs	r5, #1
 800dcf8:	e7c3      	b.n	800dc82 <__gethex+0x9e>
 800dcfa:	2400      	movs	r4, #0
 800dcfc:	1cb1      	adds	r1, r6, #2
 800dcfe:	e7cc      	b.n	800dc9a <__gethex+0xb6>
 800dd00:	2401      	movs	r4, #1
 800dd02:	e7fb      	b.n	800dcfc <__gethex+0x118>
 800dd04:	fb03 0002 	mla	r0, r3, r2, r0
 800dd08:	e7ce      	b.n	800dca8 <__gethex+0xc4>
 800dd0a:	4631      	mov	r1, r6
 800dd0c:	e7de      	b.n	800dccc <__gethex+0xe8>
 800dd0e:	eba6 0309 	sub.w	r3, r6, r9
 800dd12:	3b01      	subs	r3, #1
 800dd14:	4629      	mov	r1, r5
 800dd16:	2b07      	cmp	r3, #7
 800dd18:	dc0a      	bgt.n	800dd30 <__gethex+0x14c>
 800dd1a:	9801      	ldr	r0, [sp, #4]
 800dd1c:	f7fd ff74 	bl	800bc08 <_Balloc>
 800dd20:	4604      	mov	r4, r0
 800dd22:	b940      	cbnz	r0, 800dd36 <__gethex+0x152>
 800dd24:	4b5c      	ldr	r3, [pc, #368]	@ (800de98 <__gethex+0x2b4>)
 800dd26:	4602      	mov	r2, r0
 800dd28:	21e4      	movs	r1, #228	@ 0xe4
 800dd2a:	485c      	ldr	r0, [pc, #368]	@ (800de9c <__gethex+0x2b8>)
 800dd2c:	f7ff fec0 	bl	800dab0 <__assert_func>
 800dd30:	3101      	adds	r1, #1
 800dd32:	105b      	asrs	r3, r3, #1
 800dd34:	e7ef      	b.n	800dd16 <__gethex+0x132>
 800dd36:	f100 0a14 	add.w	sl, r0, #20
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	4655      	mov	r5, sl
 800dd3e:	469b      	mov	fp, r3
 800dd40:	45b1      	cmp	r9, r6
 800dd42:	d337      	bcc.n	800ddb4 <__gethex+0x1d0>
 800dd44:	f845 bb04 	str.w	fp, [r5], #4
 800dd48:	eba5 050a 	sub.w	r5, r5, sl
 800dd4c:	10ad      	asrs	r5, r5, #2
 800dd4e:	6125      	str	r5, [r4, #16]
 800dd50:	4658      	mov	r0, fp
 800dd52:	f7fe f84b 	bl	800bdec <__hi0bits>
 800dd56:	016d      	lsls	r5, r5, #5
 800dd58:	f8d8 6000 	ldr.w	r6, [r8]
 800dd5c:	1a2d      	subs	r5, r5, r0
 800dd5e:	42b5      	cmp	r5, r6
 800dd60:	dd54      	ble.n	800de0c <__gethex+0x228>
 800dd62:	1bad      	subs	r5, r5, r6
 800dd64:	4629      	mov	r1, r5
 800dd66:	4620      	mov	r0, r4
 800dd68:	f7fe fbdf 	bl	800c52a <__any_on>
 800dd6c:	4681      	mov	r9, r0
 800dd6e:	b178      	cbz	r0, 800dd90 <__gethex+0x1ac>
 800dd70:	1e6b      	subs	r3, r5, #1
 800dd72:	1159      	asrs	r1, r3, #5
 800dd74:	f003 021f 	and.w	r2, r3, #31
 800dd78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dd7c:	f04f 0901 	mov.w	r9, #1
 800dd80:	fa09 f202 	lsl.w	r2, r9, r2
 800dd84:	420a      	tst	r2, r1
 800dd86:	d003      	beq.n	800dd90 <__gethex+0x1ac>
 800dd88:	454b      	cmp	r3, r9
 800dd8a:	dc36      	bgt.n	800ddfa <__gethex+0x216>
 800dd8c:	f04f 0902 	mov.w	r9, #2
 800dd90:	4629      	mov	r1, r5
 800dd92:	4620      	mov	r0, r4
 800dd94:	f7ff febe 	bl	800db14 <rshift>
 800dd98:	442f      	add	r7, r5
 800dd9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd9e:	42bb      	cmp	r3, r7
 800dda0:	da42      	bge.n	800de28 <__gethex+0x244>
 800dda2:	9801      	ldr	r0, [sp, #4]
 800dda4:	4621      	mov	r1, r4
 800dda6:	f7fd ff6f 	bl	800bc88 <_Bfree>
 800ddaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddac:	2300      	movs	r3, #0
 800ddae:	6013      	str	r3, [r2, #0]
 800ddb0:	25a3      	movs	r5, #163	@ 0xa3
 800ddb2:	e793      	b.n	800dcdc <__gethex+0xf8>
 800ddb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ddb8:	2a2e      	cmp	r2, #46	@ 0x2e
 800ddba:	d012      	beq.n	800dde2 <__gethex+0x1fe>
 800ddbc:	2b20      	cmp	r3, #32
 800ddbe:	d104      	bne.n	800ddca <__gethex+0x1e6>
 800ddc0:	f845 bb04 	str.w	fp, [r5], #4
 800ddc4:	f04f 0b00 	mov.w	fp, #0
 800ddc8:	465b      	mov	r3, fp
 800ddca:	7830      	ldrb	r0, [r6, #0]
 800ddcc:	9303      	str	r3, [sp, #12]
 800ddce:	f7ff fef3 	bl	800dbb8 <__hexdig_fun>
 800ddd2:	9b03      	ldr	r3, [sp, #12]
 800ddd4:	f000 000f 	and.w	r0, r0, #15
 800ddd8:	4098      	lsls	r0, r3
 800ddda:	ea4b 0b00 	orr.w	fp, fp, r0
 800ddde:	3304      	adds	r3, #4
 800dde0:	e7ae      	b.n	800dd40 <__gethex+0x15c>
 800dde2:	45b1      	cmp	r9, r6
 800dde4:	d8ea      	bhi.n	800ddbc <__gethex+0x1d8>
 800dde6:	492b      	ldr	r1, [pc, #172]	@ (800de94 <__gethex+0x2b0>)
 800dde8:	9303      	str	r3, [sp, #12]
 800ddea:	2201      	movs	r2, #1
 800ddec:	4630      	mov	r0, r6
 800ddee:	f7ff fe03 	bl	800d9f8 <strncmp>
 800ddf2:	9b03      	ldr	r3, [sp, #12]
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d1e1      	bne.n	800ddbc <__gethex+0x1d8>
 800ddf8:	e7a2      	b.n	800dd40 <__gethex+0x15c>
 800ddfa:	1ea9      	subs	r1, r5, #2
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f7fe fb94 	bl	800c52a <__any_on>
 800de02:	2800      	cmp	r0, #0
 800de04:	d0c2      	beq.n	800dd8c <__gethex+0x1a8>
 800de06:	f04f 0903 	mov.w	r9, #3
 800de0a:	e7c1      	b.n	800dd90 <__gethex+0x1ac>
 800de0c:	da09      	bge.n	800de22 <__gethex+0x23e>
 800de0e:	1b75      	subs	r5, r6, r5
 800de10:	4621      	mov	r1, r4
 800de12:	9801      	ldr	r0, [sp, #4]
 800de14:	462a      	mov	r2, r5
 800de16:	f7fe f94f 	bl	800c0b8 <__lshift>
 800de1a:	1b7f      	subs	r7, r7, r5
 800de1c:	4604      	mov	r4, r0
 800de1e:	f100 0a14 	add.w	sl, r0, #20
 800de22:	f04f 0900 	mov.w	r9, #0
 800de26:	e7b8      	b.n	800dd9a <__gethex+0x1b6>
 800de28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800de2c:	42bd      	cmp	r5, r7
 800de2e:	dd6f      	ble.n	800df10 <__gethex+0x32c>
 800de30:	1bed      	subs	r5, r5, r7
 800de32:	42ae      	cmp	r6, r5
 800de34:	dc34      	bgt.n	800dea0 <__gethex+0x2bc>
 800de36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de3a:	2b02      	cmp	r3, #2
 800de3c:	d022      	beq.n	800de84 <__gethex+0x2a0>
 800de3e:	2b03      	cmp	r3, #3
 800de40:	d024      	beq.n	800de8c <__gethex+0x2a8>
 800de42:	2b01      	cmp	r3, #1
 800de44:	d115      	bne.n	800de72 <__gethex+0x28e>
 800de46:	42ae      	cmp	r6, r5
 800de48:	d113      	bne.n	800de72 <__gethex+0x28e>
 800de4a:	2e01      	cmp	r6, #1
 800de4c:	d10b      	bne.n	800de66 <__gethex+0x282>
 800de4e:	9a02      	ldr	r2, [sp, #8]
 800de50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de54:	6013      	str	r3, [r2, #0]
 800de56:	2301      	movs	r3, #1
 800de58:	6123      	str	r3, [r4, #16]
 800de5a:	f8ca 3000 	str.w	r3, [sl]
 800de5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de60:	2562      	movs	r5, #98	@ 0x62
 800de62:	601c      	str	r4, [r3, #0]
 800de64:	e73a      	b.n	800dcdc <__gethex+0xf8>
 800de66:	1e71      	subs	r1, r6, #1
 800de68:	4620      	mov	r0, r4
 800de6a:	f7fe fb5e 	bl	800c52a <__any_on>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d1ed      	bne.n	800de4e <__gethex+0x26a>
 800de72:	9801      	ldr	r0, [sp, #4]
 800de74:	4621      	mov	r1, r4
 800de76:	f7fd ff07 	bl	800bc88 <_Bfree>
 800de7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de7c:	2300      	movs	r3, #0
 800de7e:	6013      	str	r3, [r2, #0]
 800de80:	2550      	movs	r5, #80	@ 0x50
 800de82:	e72b      	b.n	800dcdc <__gethex+0xf8>
 800de84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1f3      	bne.n	800de72 <__gethex+0x28e>
 800de8a:	e7e0      	b.n	800de4e <__gethex+0x26a>
 800de8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d1dd      	bne.n	800de4e <__gethex+0x26a>
 800de92:	e7ee      	b.n	800de72 <__gethex+0x28e>
 800de94:	0802c240 	.word	0x0802c240
 800de98:	0802c0d5 	.word	0x0802c0d5
 800de9c:	0802c3ee 	.word	0x0802c3ee
 800dea0:	1e6f      	subs	r7, r5, #1
 800dea2:	f1b9 0f00 	cmp.w	r9, #0
 800dea6:	d130      	bne.n	800df0a <__gethex+0x326>
 800dea8:	b127      	cbz	r7, 800deb4 <__gethex+0x2d0>
 800deaa:	4639      	mov	r1, r7
 800deac:	4620      	mov	r0, r4
 800deae:	f7fe fb3c 	bl	800c52a <__any_on>
 800deb2:	4681      	mov	r9, r0
 800deb4:	117a      	asrs	r2, r7, #5
 800deb6:	2301      	movs	r3, #1
 800deb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800debc:	f007 071f 	and.w	r7, r7, #31
 800dec0:	40bb      	lsls	r3, r7
 800dec2:	4213      	tst	r3, r2
 800dec4:	4629      	mov	r1, r5
 800dec6:	4620      	mov	r0, r4
 800dec8:	bf18      	it	ne
 800deca:	f049 0902 	orrne.w	r9, r9, #2
 800dece:	f7ff fe21 	bl	800db14 <rshift>
 800ded2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ded6:	1b76      	subs	r6, r6, r5
 800ded8:	2502      	movs	r5, #2
 800deda:	f1b9 0f00 	cmp.w	r9, #0
 800dede:	d047      	beq.n	800df70 <__gethex+0x38c>
 800dee0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dee4:	2b02      	cmp	r3, #2
 800dee6:	d015      	beq.n	800df14 <__gethex+0x330>
 800dee8:	2b03      	cmp	r3, #3
 800deea:	d017      	beq.n	800df1c <__gethex+0x338>
 800deec:	2b01      	cmp	r3, #1
 800deee:	d109      	bne.n	800df04 <__gethex+0x320>
 800def0:	f019 0f02 	tst.w	r9, #2
 800def4:	d006      	beq.n	800df04 <__gethex+0x320>
 800def6:	f8da 3000 	ldr.w	r3, [sl]
 800defa:	ea49 0903 	orr.w	r9, r9, r3
 800defe:	f019 0f01 	tst.w	r9, #1
 800df02:	d10e      	bne.n	800df22 <__gethex+0x33e>
 800df04:	f045 0510 	orr.w	r5, r5, #16
 800df08:	e032      	b.n	800df70 <__gethex+0x38c>
 800df0a:	f04f 0901 	mov.w	r9, #1
 800df0e:	e7d1      	b.n	800deb4 <__gethex+0x2d0>
 800df10:	2501      	movs	r5, #1
 800df12:	e7e2      	b.n	800deda <__gethex+0x2f6>
 800df14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df16:	f1c3 0301 	rsb	r3, r3, #1
 800df1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d0f0      	beq.n	800df04 <__gethex+0x320>
 800df22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800df26:	f104 0314 	add.w	r3, r4, #20
 800df2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800df2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800df32:	f04f 0c00 	mov.w	ip, #0
 800df36:	4618      	mov	r0, r3
 800df38:	f853 2b04 	ldr.w	r2, [r3], #4
 800df3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800df40:	d01b      	beq.n	800df7a <__gethex+0x396>
 800df42:	3201      	adds	r2, #1
 800df44:	6002      	str	r2, [r0, #0]
 800df46:	2d02      	cmp	r5, #2
 800df48:	f104 0314 	add.w	r3, r4, #20
 800df4c:	d13c      	bne.n	800dfc8 <__gethex+0x3e4>
 800df4e:	f8d8 2000 	ldr.w	r2, [r8]
 800df52:	3a01      	subs	r2, #1
 800df54:	42b2      	cmp	r2, r6
 800df56:	d109      	bne.n	800df6c <__gethex+0x388>
 800df58:	1171      	asrs	r1, r6, #5
 800df5a:	2201      	movs	r2, #1
 800df5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df60:	f006 061f 	and.w	r6, r6, #31
 800df64:	fa02 f606 	lsl.w	r6, r2, r6
 800df68:	421e      	tst	r6, r3
 800df6a:	d13a      	bne.n	800dfe2 <__gethex+0x3fe>
 800df6c:	f045 0520 	orr.w	r5, r5, #32
 800df70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df72:	601c      	str	r4, [r3, #0]
 800df74:	9b02      	ldr	r3, [sp, #8]
 800df76:	601f      	str	r7, [r3, #0]
 800df78:	e6b0      	b.n	800dcdc <__gethex+0xf8>
 800df7a:	4299      	cmp	r1, r3
 800df7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800df80:	d8d9      	bhi.n	800df36 <__gethex+0x352>
 800df82:	68a3      	ldr	r3, [r4, #8]
 800df84:	459b      	cmp	fp, r3
 800df86:	db17      	blt.n	800dfb8 <__gethex+0x3d4>
 800df88:	6861      	ldr	r1, [r4, #4]
 800df8a:	9801      	ldr	r0, [sp, #4]
 800df8c:	3101      	adds	r1, #1
 800df8e:	f7fd fe3b 	bl	800bc08 <_Balloc>
 800df92:	4681      	mov	r9, r0
 800df94:	b918      	cbnz	r0, 800df9e <__gethex+0x3ba>
 800df96:	4b1a      	ldr	r3, [pc, #104]	@ (800e000 <__gethex+0x41c>)
 800df98:	4602      	mov	r2, r0
 800df9a:	2184      	movs	r1, #132	@ 0x84
 800df9c:	e6c5      	b.n	800dd2a <__gethex+0x146>
 800df9e:	6922      	ldr	r2, [r4, #16]
 800dfa0:	3202      	adds	r2, #2
 800dfa2:	f104 010c 	add.w	r1, r4, #12
 800dfa6:	0092      	lsls	r2, r2, #2
 800dfa8:	300c      	adds	r0, #12
 800dfaa:	f7ff fd69 	bl	800da80 <memcpy>
 800dfae:	4621      	mov	r1, r4
 800dfb0:	9801      	ldr	r0, [sp, #4]
 800dfb2:	f7fd fe69 	bl	800bc88 <_Bfree>
 800dfb6:	464c      	mov	r4, r9
 800dfb8:	6923      	ldr	r3, [r4, #16]
 800dfba:	1c5a      	adds	r2, r3, #1
 800dfbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dfc0:	6122      	str	r2, [r4, #16]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	615a      	str	r2, [r3, #20]
 800dfc6:	e7be      	b.n	800df46 <__gethex+0x362>
 800dfc8:	6922      	ldr	r2, [r4, #16]
 800dfca:	455a      	cmp	r2, fp
 800dfcc:	dd0b      	ble.n	800dfe6 <__gethex+0x402>
 800dfce:	2101      	movs	r1, #1
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f7ff fd9f 	bl	800db14 <rshift>
 800dfd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfda:	3701      	adds	r7, #1
 800dfdc:	42bb      	cmp	r3, r7
 800dfde:	f6ff aee0 	blt.w	800dda2 <__gethex+0x1be>
 800dfe2:	2501      	movs	r5, #1
 800dfe4:	e7c2      	b.n	800df6c <__gethex+0x388>
 800dfe6:	f016 061f 	ands.w	r6, r6, #31
 800dfea:	d0fa      	beq.n	800dfe2 <__gethex+0x3fe>
 800dfec:	4453      	add	r3, sl
 800dfee:	f1c6 0620 	rsb	r6, r6, #32
 800dff2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dff6:	f7fd fef9 	bl	800bdec <__hi0bits>
 800dffa:	42b0      	cmp	r0, r6
 800dffc:	dbe7      	blt.n	800dfce <__gethex+0x3ea>
 800dffe:	e7f0      	b.n	800dfe2 <__gethex+0x3fe>
 800e000:	0802c0d5 	.word	0x0802c0d5

0800e004 <L_shift>:
 800e004:	f1c2 0208 	rsb	r2, r2, #8
 800e008:	0092      	lsls	r2, r2, #2
 800e00a:	b570      	push	{r4, r5, r6, lr}
 800e00c:	f1c2 0620 	rsb	r6, r2, #32
 800e010:	6843      	ldr	r3, [r0, #4]
 800e012:	6804      	ldr	r4, [r0, #0]
 800e014:	fa03 f506 	lsl.w	r5, r3, r6
 800e018:	432c      	orrs	r4, r5
 800e01a:	40d3      	lsrs	r3, r2
 800e01c:	6004      	str	r4, [r0, #0]
 800e01e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e022:	4288      	cmp	r0, r1
 800e024:	d3f4      	bcc.n	800e010 <L_shift+0xc>
 800e026:	bd70      	pop	{r4, r5, r6, pc}

0800e028 <__match>:
 800e028:	b530      	push	{r4, r5, lr}
 800e02a:	6803      	ldr	r3, [r0, #0]
 800e02c:	3301      	adds	r3, #1
 800e02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e032:	b914      	cbnz	r4, 800e03a <__match+0x12>
 800e034:	6003      	str	r3, [r0, #0]
 800e036:	2001      	movs	r0, #1
 800e038:	bd30      	pop	{r4, r5, pc}
 800e03a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e03e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e042:	2d19      	cmp	r5, #25
 800e044:	bf98      	it	ls
 800e046:	3220      	addls	r2, #32
 800e048:	42a2      	cmp	r2, r4
 800e04a:	d0f0      	beq.n	800e02e <__match+0x6>
 800e04c:	2000      	movs	r0, #0
 800e04e:	e7f3      	b.n	800e038 <__match+0x10>

0800e050 <__hexnan>:
 800e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e054:	680b      	ldr	r3, [r1, #0]
 800e056:	6801      	ldr	r1, [r0, #0]
 800e058:	115e      	asrs	r6, r3, #5
 800e05a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e05e:	f013 031f 	ands.w	r3, r3, #31
 800e062:	b087      	sub	sp, #28
 800e064:	bf18      	it	ne
 800e066:	3604      	addne	r6, #4
 800e068:	2500      	movs	r5, #0
 800e06a:	1f37      	subs	r7, r6, #4
 800e06c:	4682      	mov	sl, r0
 800e06e:	4690      	mov	r8, r2
 800e070:	9301      	str	r3, [sp, #4]
 800e072:	f846 5c04 	str.w	r5, [r6, #-4]
 800e076:	46b9      	mov	r9, r7
 800e078:	463c      	mov	r4, r7
 800e07a:	9502      	str	r5, [sp, #8]
 800e07c:	46ab      	mov	fp, r5
 800e07e:	784a      	ldrb	r2, [r1, #1]
 800e080:	1c4b      	adds	r3, r1, #1
 800e082:	9303      	str	r3, [sp, #12]
 800e084:	b342      	cbz	r2, 800e0d8 <__hexnan+0x88>
 800e086:	4610      	mov	r0, r2
 800e088:	9105      	str	r1, [sp, #20]
 800e08a:	9204      	str	r2, [sp, #16]
 800e08c:	f7ff fd94 	bl	800dbb8 <__hexdig_fun>
 800e090:	2800      	cmp	r0, #0
 800e092:	d151      	bne.n	800e138 <__hexnan+0xe8>
 800e094:	9a04      	ldr	r2, [sp, #16]
 800e096:	9905      	ldr	r1, [sp, #20]
 800e098:	2a20      	cmp	r2, #32
 800e09a:	d818      	bhi.n	800e0ce <__hexnan+0x7e>
 800e09c:	9b02      	ldr	r3, [sp, #8]
 800e09e:	459b      	cmp	fp, r3
 800e0a0:	dd13      	ble.n	800e0ca <__hexnan+0x7a>
 800e0a2:	454c      	cmp	r4, r9
 800e0a4:	d206      	bcs.n	800e0b4 <__hexnan+0x64>
 800e0a6:	2d07      	cmp	r5, #7
 800e0a8:	dc04      	bgt.n	800e0b4 <__hexnan+0x64>
 800e0aa:	462a      	mov	r2, r5
 800e0ac:	4649      	mov	r1, r9
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	f7ff ffa8 	bl	800e004 <L_shift>
 800e0b4:	4544      	cmp	r4, r8
 800e0b6:	d952      	bls.n	800e15e <__hexnan+0x10e>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	f1a4 0904 	sub.w	r9, r4, #4
 800e0be:	f844 3c04 	str.w	r3, [r4, #-4]
 800e0c2:	f8cd b008 	str.w	fp, [sp, #8]
 800e0c6:	464c      	mov	r4, r9
 800e0c8:	461d      	mov	r5, r3
 800e0ca:	9903      	ldr	r1, [sp, #12]
 800e0cc:	e7d7      	b.n	800e07e <__hexnan+0x2e>
 800e0ce:	2a29      	cmp	r2, #41	@ 0x29
 800e0d0:	d157      	bne.n	800e182 <__hexnan+0x132>
 800e0d2:	3102      	adds	r1, #2
 800e0d4:	f8ca 1000 	str.w	r1, [sl]
 800e0d8:	f1bb 0f00 	cmp.w	fp, #0
 800e0dc:	d051      	beq.n	800e182 <__hexnan+0x132>
 800e0de:	454c      	cmp	r4, r9
 800e0e0:	d206      	bcs.n	800e0f0 <__hexnan+0xa0>
 800e0e2:	2d07      	cmp	r5, #7
 800e0e4:	dc04      	bgt.n	800e0f0 <__hexnan+0xa0>
 800e0e6:	462a      	mov	r2, r5
 800e0e8:	4649      	mov	r1, r9
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f7ff ff8a 	bl	800e004 <L_shift>
 800e0f0:	4544      	cmp	r4, r8
 800e0f2:	d936      	bls.n	800e162 <__hexnan+0x112>
 800e0f4:	f1a8 0204 	sub.w	r2, r8, #4
 800e0f8:	4623      	mov	r3, r4
 800e0fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800e0fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800e102:	429f      	cmp	r7, r3
 800e104:	d2f9      	bcs.n	800e0fa <__hexnan+0xaa>
 800e106:	1b3b      	subs	r3, r7, r4
 800e108:	f023 0303 	bic.w	r3, r3, #3
 800e10c:	3304      	adds	r3, #4
 800e10e:	3401      	adds	r4, #1
 800e110:	3e03      	subs	r6, #3
 800e112:	42b4      	cmp	r4, r6
 800e114:	bf88      	it	hi
 800e116:	2304      	movhi	r3, #4
 800e118:	4443      	add	r3, r8
 800e11a:	2200      	movs	r2, #0
 800e11c:	f843 2b04 	str.w	r2, [r3], #4
 800e120:	429f      	cmp	r7, r3
 800e122:	d2fb      	bcs.n	800e11c <__hexnan+0xcc>
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	b91b      	cbnz	r3, 800e130 <__hexnan+0xe0>
 800e128:	4547      	cmp	r7, r8
 800e12a:	d128      	bne.n	800e17e <__hexnan+0x12e>
 800e12c:	2301      	movs	r3, #1
 800e12e:	603b      	str	r3, [r7, #0]
 800e130:	2005      	movs	r0, #5
 800e132:	b007      	add	sp, #28
 800e134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e138:	3501      	adds	r5, #1
 800e13a:	2d08      	cmp	r5, #8
 800e13c:	f10b 0b01 	add.w	fp, fp, #1
 800e140:	dd06      	ble.n	800e150 <__hexnan+0x100>
 800e142:	4544      	cmp	r4, r8
 800e144:	d9c1      	bls.n	800e0ca <__hexnan+0x7a>
 800e146:	2300      	movs	r3, #0
 800e148:	f844 3c04 	str.w	r3, [r4, #-4]
 800e14c:	2501      	movs	r5, #1
 800e14e:	3c04      	subs	r4, #4
 800e150:	6822      	ldr	r2, [r4, #0]
 800e152:	f000 000f 	and.w	r0, r0, #15
 800e156:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e15a:	6020      	str	r0, [r4, #0]
 800e15c:	e7b5      	b.n	800e0ca <__hexnan+0x7a>
 800e15e:	2508      	movs	r5, #8
 800e160:	e7b3      	b.n	800e0ca <__hexnan+0x7a>
 800e162:	9b01      	ldr	r3, [sp, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d0dd      	beq.n	800e124 <__hexnan+0xd4>
 800e168:	f1c3 0320 	rsb	r3, r3, #32
 800e16c:	f04f 32ff 	mov.w	r2, #4294967295
 800e170:	40da      	lsrs	r2, r3
 800e172:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e176:	4013      	ands	r3, r2
 800e178:	f846 3c04 	str.w	r3, [r6, #-4]
 800e17c:	e7d2      	b.n	800e124 <__hexnan+0xd4>
 800e17e:	3f04      	subs	r7, #4
 800e180:	e7d0      	b.n	800e124 <__hexnan+0xd4>
 800e182:	2004      	movs	r0, #4
 800e184:	e7d5      	b.n	800e132 <__hexnan+0xe2>

0800e186 <__ascii_mbtowc>:
 800e186:	b082      	sub	sp, #8
 800e188:	b901      	cbnz	r1, 800e18c <__ascii_mbtowc+0x6>
 800e18a:	a901      	add	r1, sp, #4
 800e18c:	b142      	cbz	r2, 800e1a0 <__ascii_mbtowc+0x1a>
 800e18e:	b14b      	cbz	r3, 800e1a4 <__ascii_mbtowc+0x1e>
 800e190:	7813      	ldrb	r3, [r2, #0]
 800e192:	600b      	str	r3, [r1, #0]
 800e194:	7812      	ldrb	r2, [r2, #0]
 800e196:	1e10      	subs	r0, r2, #0
 800e198:	bf18      	it	ne
 800e19a:	2001      	movne	r0, #1
 800e19c:	b002      	add	sp, #8
 800e19e:	4770      	bx	lr
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	e7fb      	b.n	800e19c <__ascii_mbtowc+0x16>
 800e1a4:	f06f 0001 	mvn.w	r0, #1
 800e1a8:	e7f8      	b.n	800e19c <__ascii_mbtowc+0x16>

0800e1aa <_realloc_r>:
 800e1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ae:	4680      	mov	r8, r0
 800e1b0:	4615      	mov	r5, r2
 800e1b2:	460c      	mov	r4, r1
 800e1b4:	b921      	cbnz	r1, 800e1c0 <_realloc_r+0x16>
 800e1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ba:	4611      	mov	r1, r2
 800e1bc:	f7fd bc98 	b.w	800baf0 <_malloc_r>
 800e1c0:	b92a      	cbnz	r2, 800e1ce <_realloc_r+0x24>
 800e1c2:	f7fd fc21 	bl	800ba08 <_free_r>
 800e1c6:	2400      	movs	r4, #0
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ce:	f000 f840 	bl	800e252 <_malloc_usable_size_r>
 800e1d2:	4285      	cmp	r5, r0
 800e1d4:	4606      	mov	r6, r0
 800e1d6:	d802      	bhi.n	800e1de <_realloc_r+0x34>
 800e1d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e1dc:	d8f4      	bhi.n	800e1c8 <_realloc_r+0x1e>
 800e1de:	4629      	mov	r1, r5
 800e1e0:	4640      	mov	r0, r8
 800e1e2:	f7fd fc85 	bl	800baf0 <_malloc_r>
 800e1e6:	4607      	mov	r7, r0
 800e1e8:	2800      	cmp	r0, #0
 800e1ea:	d0ec      	beq.n	800e1c6 <_realloc_r+0x1c>
 800e1ec:	42b5      	cmp	r5, r6
 800e1ee:	462a      	mov	r2, r5
 800e1f0:	4621      	mov	r1, r4
 800e1f2:	bf28      	it	cs
 800e1f4:	4632      	movcs	r2, r6
 800e1f6:	f7ff fc43 	bl	800da80 <memcpy>
 800e1fa:	4621      	mov	r1, r4
 800e1fc:	4640      	mov	r0, r8
 800e1fe:	f7fd fc03 	bl	800ba08 <_free_r>
 800e202:	463c      	mov	r4, r7
 800e204:	e7e0      	b.n	800e1c8 <_realloc_r+0x1e>

0800e206 <__ascii_wctomb>:
 800e206:	4603      	mov	r3, r0
 800e208:	4608      	mov	r0, r1
 800e20a:	b141      	cbz	r1, 800e21e <__ascii_wctomb+0x18>
 800e20c:	2aff      	cmp	r2, #255	@ 0xff
 800e20e:	d904      	bls.n	800e21a <__ascii_wctomb+0x14>
 800e210:	228a      	movs	r2, #138	@ 0x8a
 800e212:	601a      	str	r2, [r3, #0]
 800e214:	f04f 30ff 	mov.w	r0, #4294967295
 800e218:	4770      	bx	lr
 800e21a:	700a      	strb	r2, [r1, #0]
 800e21c:	2001      	movs	r0, #1
 800e21e:	4770      	bx	lr

0800e220 <fiprintf>:
 800e220:	b40e      	push	{r1, r2, r3}
 800e222:	b503      	push	{r0, r1, lr}
 800e224:	4601      	mov	r1, r0
 800e226:	ab03      	add	r3, sp, #12
 800e228:	4805      	ldr	r0, [pc, #20]	@ (800e240 <fiprintf+0x20>)
 800e22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e22e:	6800      	ldr	r0, [r0, #0]
 800e230:	9301      	str	r3, [sp, #4]
 800e232:	f7ff f9a1 	bl	800d578 <_vfiprintf_r>
 800e236:	b002      	add	sp, #8
 800e238:	f85d eb04 	ldr.w	lr, [sp], #4
 800e23c:	b003      	add	sp, #12
 800e23e:	4770      	bx	lr
 800e240:	20000450 	.word	0x20000450

0800e244 <abort>:
 800e244:	b508      	push	{r3, lr}
 800e246:	2006      	movs	r0, #6
 800e248:	f000 f834 	bl	800e2b4 <raise>
 800e24c:	2001      	movs	r0, #1
 800e24e:	f7f4 fb29 	bl	80028a4 <_exit>

0800e252 <_malloc_usable_size_r>:
 800e252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e256:	1f18      	subs	r0, r3, #4
 800e258:	2b00      	cmp	r3, #0
 800e25a:	bfbc      	itt	lt
 800e25c:	580b      	ldrlt	r3, [r1, r0]
 800e25e:	18c0      	addlt	r0, r0, r3
 800e260:	4770      	bx	lr

0800e262 <_raise_r>:
 800e262:	291f      	cmp	r1, #31
 800e264:	b538      	push	{r3, r4, r5, lr}
 800e266:	4605      	mov	r5, r0
 800e268:	460c      	mov	r4, r1
 800e26a:	d904      	bls.n	800e276 <_raise_r+0x14>
 800e26c:	2316      	movs	r3, #22
 800e26e:	6003      	str	r3, [r0, #0]
 800e270:	f04f 30ff 	mov.w	r0, #4294967295
 800e274:	bd38      	pop	{r3, r4, r5, pc}
 800e276:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e278:	b112      	cbz	r2, 800e280 <_raise_r+0x1e>
 800e27a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e27e:	b94b      	cbnz	r3, 800e294 <_raise_r+0x32>
 800e280:	4628      	mov	r0, r5
 800e282:	f000 f831 	bl	800e2e8 <_getpid_r>
 800e286:	4622      	mov	r2, r4
 800e288:	4601      	mov	r1, r0
 800e28a:	4628      	mov	r0, r5
 800e28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e290:	f000 b818 	b.w	800e2c4 <_kill_r>
 800e294:	2b01      	cmp	r3, #1
 800e296:	d00a      	beq.n	800e2ae <_raise_r+0x4c>
 800e298:	1c59      	adds	r1, r3, #1
 800e29a:	d103      	bne.n	800e2a4 <_raise_r+0x42>
 800e29c:	2316      	movs	r3, #22
 800e29e:	6003      	str	r3, [r0, #0]
 800e2a0:	2001      	movs	r0, #1
 800e2a2:	e7e7      	b.n	800e274 <_raise_r+0x12>
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	4798      	blx	r3
 800e2ae:	2000      	movs	r0, #0
 800e2b0:	e7e0      	b.n	800e274 <_raise_r+0x12>
	...

0800e2b4 <raise>:
 800e2b4:	4b02      	ldr	r3, [pc, #8]	@ (800e2c0 <raise+0xc>)
 800e2b6:	4601      	mov	r1, r0
 800e2b8:	6818      	ldr	r0, [r3, #0]
 800e2ba:	f7ff bfd2 	b.w	800e262 <_raise_r>
 800e2be:	bf00      	nop
 800e2c0:	20000450 	.word	0x20000450

0800e2c4 <_kill_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	4d07      	ldr	r5, [pc, #28]	@ (800e2e4 <_kill_r+0x20>)
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	4608      	mov	r0, r1
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	602b      	str	r3, [r5, #0]
 800e2d2:	f7f4 fad7 	bl	8002884 <_kill>
 800e2d6:	1c43      	adds	r3, r0, #1
 800e2d8:	d102      	bne.n	800e2e0 <_kill_r+0x1c>
 800e2da:	682b      	ldr	r3, [r5, #0]
 800e2dc:	b103      	cbz	r3, 800e2e0 <_kill_r+0x1c>
 800e2de:	6023      	str	r3, [r4, #0]
 800e2e0:	bd38      	pop	{r3, r4, r5, pc}
 800e2e2:	bf00      	nop
 800e2e4:	200010c8 	.word	0x200010c8

0800e2e8 <_getpid_r>:
 800e2e8:	f7f4 bac4 	b.w	8002874 <_getpid>

0800e2ec <powf>:
 800e2ec:	b508      	push	{r3, lr}
 800e2ee:	ed2d 8b04 	vpush	{d8-d9}
 800e2f2:	eeb0 8a60 	vmov.f32	s16, s1
 800e2f6:	eeb0 9a40 	vmov.f32	s18, s0
 800e2fa:	f000 f89f 	bl	800e43c <__ieee754_powf>
 800e2fe:	eeb4 8a48 	vcmp.f32	s16, s16
 800e302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e306:	eef0 8a40 	vmov.f32	s17, s0
 800e30a:	d63e      	bvs.n	800e38a <powf+0x9e>
 800e30c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e314:	d112      	bne.n	800e33c <powf+0x50>
 800e316:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31e:	d039      	beq.n	800e394 <powf+0xa8>
 800e320:	eeb0 0a48 	vmov.f32	s0, s16
 800e324:	f000 f858 	bl	800e3d8 <finitef>
 800e328:	b378      	cbz	r0, 800e38a <powf+0x9e>
 800e32a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e332:	d52a      	bpl.n	800e38a <powf+0x9e>
 800e334:	f7fc fce6 	bl	800ad04 <__errno>
 800e338:	2322      	movs	r3, #34	@ 0x22
 800e33a:	e014      	b.n	800e366 <powf+0x7a>
 800e33c:	f000 f84c 	bl	800e3d8 <finitef>
 800e340:	b998      	cbnz	r0, 800e36a <powf+0x7e>
 800e342:	eeb0 0a49 	vmov.f32	s0, s18
 800e346:	f000 f847 	bl	800e3d8 <finitef>
 800e34a:	b170      	cbz	r0, 800e36a <powf+0x7e>
 800e34c:	eeb0 0a48 	vmov.f32	s0, s16
 800e350:	f000 f842 	bl	800e3d8 <finitef>
 800e354:	b148      	cbz	r0, 800e36a <powf+0x7e>
 800e356:	eef4 8a68 	vcmp.f32	s17, s17
 800e35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e35e:	d7e9      	bvc.n	800e334 <powf+0x48>
 800e360:	f7fc fcd0 	bl	800ad04 <__errno>
 800e364:	2321      	movs	r3, #33	@ 0x21
 800e366:	6003      	str	r3, [r0, #0]
 800e368:	e00f      	b.n	800e38a <powf+0x9e>
 800e36a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e372:	d10a      	bne.n	800e38a <powf+0x9e>
 800e374:	eeb0 0a49 	vmov.f32	s0, s18
 800e378:	f000 f82e 	bl	800e3d8 <finitef>
 800e37c:	b128      	cbz	r0, 800e38a <powf+0x9e>
 800e37e:	eeb0 0a48 	vmov.f32	s0, s16
 800e382:	f000 f829 	bl	800e3d8 <finitef>
 800e386:	2800      	cmp	r0, #0
 800e388:	d1d4      	bne.n	800e334 <powf+0x48>
 800e38a:	eeb0 0a68 	vmov.f32	s0, s17
 800e38e:	ecbd 8b04 	vpop	{d8-d9}
 800e392:	bd08      	pop	{r3, pc}
 800e394:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e398:	e7f7      	b.n	800e38a <powf+0x9e>
	...

0800e39c <sqrtf>:
 800e39c:	b508      	push	{r3, lr}
 800e39e:	ed2d 8b02 	vpush	{d8}
 800e3a2:	eeb0 8a40 	vmov.f32	s16, s0
 800e3a6:	f000 f821 	bl	800e3ec <__ieee754_sqrtf>
 800e3aa:	eeb4 8a48 	vcmp.f32	s16, s16
 800e3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b2:	d60c      	bvs.n	800e3ce <sqrtf+0x32>
 800e3b4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e3d4 <sqrtf+0x38>
 800e3b8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c0:	d505      	bpl.n	800e3ce <sqrtf+0x32>
 800e3c2:	f7fc fc9f 	bl	800ad04 <__errno>
 800e3c6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e3ca:	2321      	movs	r3, #33	@ 0x21
 800e3cc:	6003      	str	r3, [r0, #0]
 800e3ce:	ecbd 8b02 	vpop	{d8}
 800e3d2:	bd08      	pop	{r3, pc}
 800e3d4:	00000000 	.word	0x00000000

0800e3d8 <finitef>:
 800e3d8:	ee10 3a10 	vmov	r3, s0
 800e3dc:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e3e0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e3e4:	bfac      	ite	ge
 800e3e6:	2000      	movge	r0, #0
 800e3e8:	2001      	movlt	r0, #1
 800e3ea:	4770      	bx	lr

0800e3ec <__ieee754_sqrtf>:
 800e3ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e3f0:	4770      	bx	lr
	...

0800e3f4 <roundf>:
 800e3f4:	ee10 0a10 	vmov	r0, s0
 800e3f8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e3fc:	3a7f      	subs	r2, #127	@ 0x7f
 800e3fe:	2a16      	cmp	r2, #22
 800e400:	dc15      	bgt.n	800e42e <roundf+0x3a>
 800e402:	2a00      	cmp	r2, #0
 800e404:	da08      	bge.n	800e418 <roundf+0x24>
 800e406:	3201      	adds	r2, #1
 800e408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800e40c:	d101      	bne.n	800e412 <roundf+0x1e>
 800e40e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800e412:	ee00 3a10 	vmov	s0, r3
 800e416:	4770      	bx	lr
 800e418:	4907      	ldr	r1, [pc, #28]	@ (800e438 <roundf+0x44>)
 800e41a:	4111      	asrs	r1, r2
 800e41c:	4201      	tst	r1, r0
 800e41e:	d0fa      	beq.n	800e416 <roundf+0x22>
 800e420:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e424:	4113      	asrs	r3, r2
 800e426:	4403      	add	r3, r0
 800e428:	ea23 0301 	bic.w	r3, r3, r1
 800e42c:	e7f1      	b.n	800e412 <roundf+0x1e>
 800e42e:	2a80      	cmp	r2, #128	@ 0x80
 800e430:	d1f1      	bne.n	800e416 <roundf+0x22>
 800e432:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e436:	4770      	bx	lr
 800e438:	007fffff 	.word	0x007fffff

0800e43c <__ieee754_powf>:
 800e43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e440:	ee10 4a90 	vmov	r4, s1
 800e444:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800e448:	ed2d 8b02 	vpush	{d8}
 800e44c:	ee10 6a10 	vmov	r6, s0
 800e450:	eeb0 8a40 	vmov.f32	s16, s0
 800e454:	eef0 8a60 	vmov.f32	s17, s1
 800e458:	d10c      	bne.n	800e474 <__ieee754_powf+0x38>
 800e45a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800e45e:	0076      	lsls	r6, r6, #1
 800e460:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800e464:	f240 829c 	bls.w	800e9a0 <__ieee754_powf+0x564>
 800e468:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e46c:	ecbd 8b02 	vpop	{d8}
 800e470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e474:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800e478:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e47c:	d802      	bhi.n	800e484 <__ieee754_powf+0x48>
 800e47e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e482:	d908      	bls.n	800e496 <__ieee754_powf+0x5a>
 800e484:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e488:	d1ee      	bne.n	800e468 <__ieee754_powf+0x2c>
 800e48a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e48e:	0064      	lsls	r4, r4, #1
 800e490:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e494:	e7e6      	b.n	800e464 <__ieee754_powf+0x28>
 800e496:	2e00      	cmp	r6, #0
 800e498:	da1e      	bge.n	800e4d8 <__ieee754_powf+0x9c>
 800e49a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800e49e:	d22b      	bcs.n	800e4f8 <__ieee754_powf+0xbc>
 800e4a0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e4a4:	d332      	bcc.n	800e50c <__ieee754_powf+0xd0>
 800e4a6:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800e4aa:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e4ae:	fa49 f503 	asr.w	r5, r9, r3
 800e4b2:	fa05 f303 	lsl.w	r3, r5, r3
 800e4b6:	454b      	cmp	r3, r9
 800e4b8:	d126      	bne.n	800e508 <__ieee754_powf+0xcc>
 800e4ba:	f005 0501 	and.w	r5, r5, #1
 800e4be:	f1c5 0502 	rsb	r5, r5, #2
 800e4c2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e4c6:	d122      	bne.n	800e50e <__ieee754_powf+0xd2>
 800e4c8:	2c00      	cmp	r4, #0
 800e4ca:	f280 826f 	bge.w	800e9ac <__ieee754_powf+0x570>
 800e4ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e4d2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e4d6:	e7c9      	b.n	800e46c <__ieee754_powf+0x30>
 800e4d8:	2500      	movs	r5, #0
 800e4da:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e4de:	d1f0      	bne.n	800e4c2 <__ieee754_powf+0x86>
 800e4e0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e4e4:	f000 825c 	beq.w	800e9a0 <__ieee754_powf+0x564>
 800e4e8:	d908      	bls.n	800e4fc <__ieee754_powf+0xc0>
 800e4ea:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800e84c <__ieee754_powf+0x410>
 800e4ee:	2c00      	cmp	r4, #0
 800e4f0:	bfa8      	it	ge
 800e4f2:	eeb0 0a68 	vmovge.f32	s0, s17
 800e4f6:	e7b9      	b.n	800e46c <__ieee754_powf+0x30>
 800e4f8:	2502      	movs	r5, #2
 800e4fa:	e7ee      	b.n	800e4da <__ieee754_powf+0x9e>
 800e4fc:	2c00      	cmp	r4, #0
 800e4fe:	f280 8252 	bge.w	800e9a6 <__ieee754_powf+0x56a>
 800e502:	eeb1 0a68 	vneg.f32	s0, s17
 800e506:	e7b1      	b.n	800e46c <__ieee754_powf+0x30>
 800e508:	2500      	movs	r5, #0
 800e50a:	e7da      	b.n	800e4c2 <__ieee754_powf+0x86>
 800e50c:	2500      	movs	r5, #0
 800e50e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e512:	d102      	bne.n	800e51a <__ieee754_powf+0xde>
 800e514:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e518:	e7a8      	b.n	800e46c <__ieee754_powf+0x30>
 800e51a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e51e:	d109      	bne.n	800e534 <__ieee754_powf+0xf8>
 800e520:	2e00      	cmp	r6, #0
 800e522:	db07      	blt.n	800e534 <__ieee754_powf+0xf8>
 800e524:	eeb0 0a48 	vmov.f32	s0, s16
 800e528:	ecbd 8b02 	vpop	{d8}
 800e52c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e530:	f7ff bf5c 	b.w	800e3ec <__ieee754_sqrtf>
 800e534:	eeb0 0a48 	vmov.f32	s0, s16
 800e538:	f000 fa50 	bl	800e9dc <fabsf>
 800e53c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800e540:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800e544:	4647      	mov	r7, r8
 800e546:	d002      	beq.n	800e54e <__ieee754_powf+0x112>
 800e548:	f1b8 0f00 	cmp.w	r8, #0
 800e54c:	d117      	bne.n	800e57e <__ieee754_powf+0x142>
 800e54e:	2c00      	cmp	r4, #0
 800e550:	bfbc      	itt	lt
 800e552:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800e556:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e55a:	2e00      	cmp	r6, #0
 800e55c:	da86      	bge.n	800e46c <__ieee754_powf+0x30>
 800e55e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800e562:	ea58 0805 	orrs.w	r8, r8, r5
 800e566:	d104      	bne.n	800e572 <__ieee754_powf+0x136>
 800e568:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e56c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e570:	e77c      	b.n	800e46c <__ieee754_powf+0x30>
 800e572:	2d01      	cmp	r5, #1
 800e574:	f47f af7a 	bne.w	800e46c <__ieee754_powf+0x30>
 800e578:	eeb1 0a40 	vneg.f32	s0, s0
 800e57c:	e776      	b.n	800e46c <__ieee754_powf+0x30>
 800e57e:	0ff0      	lsrs	r0, r6, #31
 800e580:	3801      	subs	r0, #1
 800e582:	ea55 0300 	orrs.w	r3, r5, r0
 800e586:	d104      	bne.n	800e592 <__ieee754_powf+0x156>
 800e588:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e58c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e590:	e76c      	b.n	800e46c <__ieee754_powf+0x30>
 800e592:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800e596:	d973      	bls.n	800e680 <__ieee754_powf+0x244>
 800e598:	4bad      	ldr	r3, [pc, #692]	@ (800e850 <__ieee754_powf+0x414>)
 800e59a:	4598      	cmp	r8, r3
 800e59c:	d808      	bhi.n	800e5b0 <__ieee754_powf+0x174>
 800e59e:	2c00      	cmp	r4, #0
 800e5a0:	da0b      	bge.n	800e5ba <__ieee754_powf+0x17e>
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	ecbd 8b02 	vpop	{d8}
 800e5a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5ac:	f000 baa4 	b.w	800eaf8 <__math_oflowf>
 800e5b0:	4ba8      	ldr	r3, [pc, #672]	@ (800e854 <__ieee754_powf+0x418>)
 800e5b2:	4598      	cmp	r8, r3
 800e5b4:	d908      	bls.n	800e5c8 <__ieee754_powf+0x18c>
 800e5b6:	2c00      	cmp	r4, #0
 800e5b8:	dcf3      	bgt.n	800e5a2 <__ieee754_powf+0x166>
 800e5ba:	2000      	movs	r0, #0
 800e5bc:	ecbd 8b02 	vpop	{d8}
 800e5c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5c4:	f000 ba92 	b.w	800eaec <__math_uflowf>
 800e5c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e5cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e5d0:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800e858 <__ieee754_powf+0x41c>
 800e5d4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800e5d8:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e5dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e5e0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e5e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e5e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5ec:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800e85c <__ieee754_powf+0x420>
 800e5f0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800e5f4:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800e860 <__ieee754_powf+0x424>
 800e5f8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e5fc:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800e864 <__ieee754_powf+0x428>
 800e600:	eef0 6a67 	vmov.f32	s13, s15
 800e604:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e608:	ee16 3a90 	vmov	r3, s13
 800e60c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e610:	f023 030f 	bic.w	r3, r3, #15
 800e614:	ee06 3a90 	vmov	s13, r3
 800e618:	eee0 6a47 	vfms.f32	s13, s0, s14
 800e61c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e620:	3d01      	subs	r5, #1
 800e622:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800e626:	4305      	orrs	r5, r0
 800e628:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e62c:	f024 040f 	bic.w	r4, r4, #15
 800e630:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800e634:	bf18      	it	ne
 800e636:	eeb0 8a47 	vmovne.f32	s16, s14
 800e63a:	ee07 4a10 	vmov	s14, r4
 800e63e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e642:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e646:	ee07 3a90 	vmov	s15, r3
 800e64a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e64e:	ee07 4a10 	vmov	s14, r4
 800e652:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e656:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e65a:	ee17 1a10 	vmov	r1, s14
 800e65e:	2900      	cmp	r1, #0
 800e660:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e664:	f340 80dd 	ble.w	800e822 <__ieee754_powf+0x3e6>
 800e668:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800e66c:	f240 80ca 	bls.w	800e804 <__ieee754_powf+0x3c8>
 800e670:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e678:	bf4c      	ite	mi
 800e67a:	2001      	movmi	r0, #1
 800e67c:	2000      	movpl	r0, #0
 800e67e:	e791      	b.n	800e5a4 <__ieee754_powf+0x168>
 800e680:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800e684:	bf01      	itttt	eq
 800e686:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800e868 <__ieee754_powf+0x42c>
 800e68a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e68e:	f06f 0317 	mvneq.w	r3, #23
 800e692:	ee17 7a90 	vmoveq	r7, s15
 800e696:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800e69a:	bf18      	it	ne
 800e69c:	2300      	movne	r3, #0
 800e69e:	3a7f      	subs	r2, #127	@ 0x7f
 800e6a0:	441a      	add	r2, r3
 800e6a2:	4b72      	ldr	r3, [pc, #456]	@ (800e86c <__ieee754_powf+0x430>)
 800e6a4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800e6a8:	429f      	cmp	r7, r3
 800e6aa:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800e6ae:	dd06      	ble.n	800e6be <__ieee754_powf+0x282>
 800e6b0:	4b6f      	ldr	r3, [pc, #444]	@ (800e870 <__ieee754_powf+0x434>)
 800e6b2:	429f      	cmp	r7, r3
 800e6b4:	f340 80a4 	ble.w	800e800 <__ieee754_powf+0x3c4>
 800e6b8:	3201      	adds	r2, #1
 800e6ba:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800e6be:	2600      	movs	r6, #0
 800e6c0:	4b6c      	ldr	r3, [pc, #432]	@ (800e874 <__ieee754_powf+0x438>)
 800e6c2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800e6c6:	ee07 1a10 	vmov	s14, r1
 800e6ca:	edd3 5a00 	vldr	s11, [r3]
 800e6ce:	4b6a      	ldr	r3, [pc, #424]	@ (800e878 <__ieee754_powf+0x43c>)
 800e6d0:	ee75 7a87 	vadd.f32	s15, s11, s14
 800e6d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6d8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800e6dc:	1049      	asrs	r1, r1, #1
 800e6de:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800e6e2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800e6e6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800e6ea:	ee37 6a65 	vsub.f32	s12, s14, s11
 800e6ee:	ee07 1a90 	vmov	s15, r1
 800e6f2:	ee26 5a24 	vmul.f32	s10, s12, s9
 800e6f6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800e6fa:	ee15 7a10 	vmov	r7, s10
 800e6fe:	401f      	ands	r7, r3
 800e700:	ee06 7a90 	vmov	s13, r7
 800e704:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800e708:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e70c:	ee65 7a05 	vmul.f32	s15, s10, s10
 800e710:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e714:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e87c <__ieee754_powf+0x440>
 800e718:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800e880 <__ieee754_powf+0x444>
 800e71c:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e720:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800e884 <__ieee754_powf+0x448>
 800e724:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e728:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800e858 <__ieee754_powf+0x41c>
 800e72c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e730:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e888 <__ieee754_powf+0x44c>
 800e734:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e738:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800e88c <__ieee754_powf+0x450>
 800e73c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e740:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e744:	ee35 7a26 	vadd.f32	s14, s10, s13
 800e748:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800e74c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e750:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800e754:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800e758:	eef0 5a67 	vmov.f32	s11, s15
 800e75c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800e760:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e764:	ee15 1a90 	vmov	r1, s11
 800e768:	4019      	ands	r1, r3
 800e76a:	ee05 1a90 	vmov	s11, r1
 800e76e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800e772:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800e776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e77a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e77e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e782:	eeb0 6a67 	vmov.f32	s12, s15
 800e786:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e78a:	ee16 1a10 	vmov	r1, s12
 800e78e:	4019      	ands	r1, r3
 800e790:	ee06 1a10 	vmov	s12, r1
 800e794:	eeb0 7a46 	vmov.f32	s14, s12
 800e798:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800e79c:	493c      	ldr	r1, [pc, #240]	@ (800e890 <__ieee754_powf+0x454>)
 800e79e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800e7a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e7a6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800e894 <__ieee754_powf+0x458>
 800e7aa:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800e898 <__ieee754_powf+0x45c>
 800e7ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7b2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800e89c <__ieee754_powf+0x460>
 800e7b6:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e7ba:	ed91 7a00 	vldr	s14, [r1]
 800e7be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7c2:	ee07 2a10 	vmov	s14, r2
 800e7c6:	eef0 6a67 	vmov.f32	s13, s15
 800e7ca:	4a35      	ldr	r2, [pc, #212]	@ (800e8a0 <__ieee754_powf+0x464>)
 800e7cc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e7d0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800e7d4:	ed92 5a00 	vldr	s10, [r2]
 800e7d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e7dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e7e0:	ee76 6a87 	vadd.f32	s13, s13, s14
 800e7e4:	ee16 2a90 	vmov	r2, s13
 800e7e8:	4013      	ands	r3, r2
 800e7ea:	ee06 3a90 	vmov	s13, r3
 800e7ee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e7f2:	ee37 7a45 	vsub.f32	s14, s14, s10
 800e7f6:	eea6 7a65 	vfms.f32	s14, s12, s11
 800e7fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e7fe:	e70f      	b.n	800e620 <__ieee754_powf+0x1e4>
 800e800:	2601      	movs	r6, #1
 800e802:	e75d      	b.n	800e6c0 <__ieee754_powf+0x284>
 800e804:	d152      	bne.n	800e8ac <__ieee754_powf+0x470>
 800e806:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e8a4 <__ieee754_powf+0x468>
 800e80a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e80e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e812:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e81a:	f73f af29 	bgt.w	800e670 <__ieee754_powf+0x234>
 800e81e:	2386      	movs	r3, #134	@ 0x86
 800e820:	e048      	b.n	800e8b4 <__ieee754_powf+0x478>
 800e822:	4a21      	ldr	r2, [pc, #132]	@ (800e8a8 <__ieee754_powf+0x46c>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d907      	bls.n	800e838 <__ieee754_powf+0x3fc>
 800e828:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e830:	bf4c      	ite	mi
 800e832:	2001      	movmi	r0, #1
 800e834:	2000      	movpl	r0, #0
 800e836:	e6c1      	b.n	800e5bc <__ieee754_powf+0x180>
 800e838:	d138      	bne.n	800e8ac <__ieee754_powf+0x470>
 800e83a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e83e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e846:	dbea      	blt.n	800e81e <__ieee754_powf+0x3e2>
 800e848:	e7ee      	b.n	800e828 <__ieee754_powf+0x3ec>
 800e84a:	bf00      	nop
 800e84c:	00000000 	.word	0x00000000
 800e850:	3f7ffff3 	.word	0x3f7ffff3
 800e854:	3f800007 	.word	0x3f800007
 800e858:	3eaaaaab 	.word	0x3eaaaaab
 800e85c:	3fb8aa3b 	.word	0x3fb8aa3b
 800e860:	36eca570 	.word	0x36eca570
 800e864:	3fb8aa00 	.word	0x3fb8aa00
 800e868:	4b800000 	.word	0x4b800000
 800e86c:	001cc471 	.word	0x001cc471
 800e870:	005db3d6 	.word	0x005db3d6
 800e874:	0802c460 	.word	0x0802c460
 800e878:	fffff000 	.word	0xfffff000
 800e87c:	3e6c3255 	.word	0x3e6c3255
 800e880:	3e53f142 	.word	0x3e53f142
 800e884:	3e8ba305 	.word	0x3e8ba305
 800e888:	3edb6db7 	.word	0x3edb6db7
 800e88c:	3f19999a 	.word	0x3f19999a
 800e890:	0802c450 	.word	0x0802c450
 800e894:	3f76384f 	.word	0x3f76384f
 800e898:	3f763800 	.word	0x3f763800
 800e89c:	369dc3a0 	.word	0x369dc3a0
 800e8a0:	0802c458 	.word	0x0802c458
 800e8a4:	3338aa3c 	.word	0x3338aa3c
 800e8a8:	43160000 	.word	0x43160000
 800e8ac:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800e8b0:	d971      	bls.n	800e996 <__ieee754_powf+0x55a>
 800e8b2:	15db      	asrs	r3, r3, #23
 800e8b4:	3b7e      	subs	r3, #126	@ 0x7e
 800e8b6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800e8ba:	4118      	asrs	r0, r3
 800e8bc:	4408      	add	r0, r1
 800e8be:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e8c2:	4a3c      	ldr	r2, [pc, #240]	@ (800e9b4 <__ieee754_powf+0x578>)
 800e8c4:	3b7f      	subs	r3, #127	@ 0x7f
 800e8c6:	411a      	asrs	r2, r3
 800e8c8:	4002      	ands	r2, r0
 800e8ca:	ee07 2a10 	vmov	s14, r2
 800e8ce:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800e8d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800e8d6:	f1c3 0317 	rsb	r3, r3, #23
 800e8da:	4118      	asrs	r0, r3
 800e8dc:	2900      	cmp	r1, #0
 800e8de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e8e2:	bfb8      	it	lt
 800e8e4:	4240      	neglt	r0, r0
 800e8e6:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e8ea:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800e9b8 <__ieee754_powf+0x57c>
 800e8ee:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800e9bc <__ieee754_powf+0x580>
 800e8f2:	ee17 3a10 	vmov	r3, s14
 800e8f6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e8fa:	f023 030f 	bic.w	r3, r3, #15
 800e8fe:	ee07 3a10 	vmov	s14, r3
 800e902:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e906:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e90a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e90e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800e9c0 <__ieee754_powf+0x584>
 800e912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e916:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800e91a:	eef0 6a67 	vmov.f32	s13, s15
 800e91e:	eee7 6a06 	vfma.f32	s13, s14, s12
 800e922:	eef0 5a66 	vmov.f32	s11, s13
 800e926:	eee7 5a46 	vfms.f32	s11, s14, s12
 800e92a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800e92e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e932:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800e9c4 <__ieee754_powf+0x588>
 800e936:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800e9c8 <__ieee754_powf+0x58c>
 800e93a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800e93e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800e9cc <__ieee754_powf+0x590>
 800e942:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e946:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800e9d0 <__ieee754_powf+0x594>
 800e94a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e94e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800e9d4 <__ieee754_powf+0x598>
 800e952:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e956:	eeb0 6a66 	vmov.f32	s12, s13
 800e95a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800e95e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800e962:	ee66 5a86 	vmul.f32	s11, s13, s12
 800e966:	ee36 6a47 	vsub.f32	s12, s12, s14
 800e96a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800e96e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800e972:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e976:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e97a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e97e:	ee10 3a10 	vmov	r3, s0
 800e982:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e986:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e98a:	da06      	bge.n	800e99a <__ieee754_powf+0x55e>
 800e98c:	f000 f82e 	bl	800e9ec <scalbnf>
 800e990:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e994:	e56a      	b.n	800e46c <__ieee754_powf+0x30>
 800e996:	2000      	movs	r0, #0
 800e998:	e7a5      	b.n	800e8e6 <__ieee754_powf+0x4aa>
 800e99a:	ee00 3a10 	vmov	s0, r3
 800e99e:	e7f7      	b.n	800e990 <__ieee754_powf+0x554>
 800e9a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e9a4:	e562      	b.n	800e46c <__ieee754_powf+0x30>
 800e9a6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800e9d8 <__ieee754_powf+0x59c>
 800e9aa:	e55f      	b.n	800e46c <__ieee754_powf+0x30>
 800e9ac:	eeb0 0a48 	vmov.f32	s0, s16
 800e9b0:	e55c      	b.n	800e46c <__ieee754_powf+0x30>
 800e9b2:	bf00      	nop
 800e9b4:	ff800000 	.word	0xff800000
 800e9b8:	3f317218 	.word	0x3f317218
 800e9bc:	3f317200 	.word	0x3f317200
 800e9c0:	35bfbe8c 	.word	0x35bfbe8c
 800e9c4:	b5ddea0e 	.word	0xb5ddea0e
 800e9c8:	3331bb4c 	.word	0x3331bb4c
 800e9cc:	388ab355 	.word	0x388ab355
 800e9d0:	bb360b61 	.word	0xbb360b61
 800e9d4:	3e2aaaab 	.word	0x3e2aaaab
 800e9d8:	00000000 	.word	0x00000000

0800e9dc <fabsf>:
 800e9dc:	ee10 3a10 	vmov	r3, s0
 800e9e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e9e4:	ee00 3a10 	vmov	s0, r3
 800e9e8:	4770      	bx	lr
	...

0800e9ec <scalbnf>:
 800e9ec:	ee10 3a10 	vmov	r3, s0
 800e9f0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e9f4:	d02b      	beq.n	800ea4e <scalbnf+0x62>
 800e9f6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e9fa:	d302      	bcc.n	800ea02 <scalbnf+0x16>
 800e9fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ea00:	4770      	bx	lr
 800ea02:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ea06:	d123      	bne.n	800ea50 <scalbnf+0x64>
 800ea08:	4b24      	ldr	r3, [pc, #144]	@ (800ea9c <scalbnf+0xb0>)
 800ea0a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800eaa0 <scalbnf+0xb4>
 800ea0e:	4298      	cmp	r0, r3
 800ea10:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ea14:	db17      	blt.n	800ea46 <scalbnf+0x5a>
 800ea16:	ee10 3a10 	vmov	r3, s0
 800ea1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ea1e:	3a19      	subs	r2, #25
 800ea20:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ea24:	4288      	cmp	r0, r1
 800ea26:	dd15      	ble.n	800ea54 <scalbnf+0x68>
 800ea28:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800eaa4 <scalbnf+0xb8>
 800ea2c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800eaa8 <scalbnf+0xbc>
 800ea30:	ee10 3a10 	vmov	r3, s0
 800ea34:	eeb0 7a67 	vmov.f32	s14, s15
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	bfb8      	it	lt
 800ea3c:	eef0 7a66 	vmovlt.f32	s15, s13
 800ea40:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ea44:	4770      	bx	lr
 800ea46:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800eaac <scalbnf+0xc0>
 800ea4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea4e:	4770      	bx	lr
 800ea50:	0dd2      	lsrs	r2, r2, #23
 800ea52:	e7e5      	b.n	800ea20 <scalbnf+0x34>
 800ea54:	4410      	add	r0, r2
 800ea56:	28fe      	cmp	r0, #254	@ 0xfe
 800ea58:	dce6      	bgt.n	800ea28 <scalbnf+0x3c>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	dd06      	ble.n	800ea6c <scalbnf+0x80>
 800ea5e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ea62:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ea66:	ee00 3a10 	vmov	s0, r3
 800ea6a:	4770      	bx	lr
 800ea6c:	f110 0f16 	cmn.w	r0, #22
 800ea70:	da09      	bge.n	800ea86 <scalbnf+0x9a>
 800ea72:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800eaac <scalbnf+0xc0>
 800ea76:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800eab0 <scalbnf+0xc4>
 800ea7a:	ee10 3a10 	vmov	r3, s0
 800ea7e:	eeb0 7a67 	vmov.f32	s14, s15
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	e7d9      	b.n	800ea3a <scalbnf+0x4e>
 800ea86:	3019      	adds	r0, #25
 800ea88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ea8c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ea90:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800eab4 <scalbnf+0xc8>
 800ea94:	ee07 3a90 	vmov	s15, r3
 800ea98:	e7d7      	b.n	800ea4a <scalbnf+0x5e>
 800ea9a:	bf00      	nop
 800ea9c:	ffff3cb0 	.word	0xffff3cb0
 800eaa0:	4c000000 	.word	0x4c000000
 800eaa4:	7149f2ca 	.word	0x7149f2ca
 800eaa8:	f149f2ca 	.word	0xf149f2ca
 800eaac:	0da24260 	.word	0x0da24260
 800eab0:	8da24260 	.word	0x8da24260
 800eab4:	33000000 	.word	0x33000000

0800eab8 <with_errnof>:
 800eab8:	b510      	push	{r4, lr}
 800eaba:	ed2d 8b02 	vpush	{d8}
 800eabe:	eeb0 8a40 	vmov.f32	s16, s0
 800eac2:	4604      	mov	r4, r0
 800eac4:	f7fc f91e 	bl	800ad04 <__errno>
 800eac8:	eeb0 0a48 	vmov.f32	s0, s16
 800eacc:	ecbd 8b02 	vpop	{d8}
 800ead0:	6004      	str	r4, [r0, #0]
 800ead2:	bd10      	pop	{r4, pc}

0800ead4 <xflowf>:
 800ead4:	b130      	cbz	r0, 800eae4 <xflowf+0x10>
 800ead6:	eef1 7a40 	vneg.f32	s15, s0
 800eada:	ee27 0a80 	vmul.f32	s0, s15, s0
 800eade:	2022      	movs	r0, #34	@ 0x22
 800eae0:	f7ff bfea 	b.w	800eab8 <with_errnof>
 800eae4:	eef0 7a40 	vmov.f32	s15, s0
 800eae8:	e7f7      	b.n	800eada <xflowf+0x6>
	...

0800eaec <__math_uflowf>:
 800eaec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eaf4 <__math_uflowf+0x8>
 800eaf0:	f7ff bff0 	b.w	800ead4 <xflowf>
 800eaf4:	10000000 	.word	0x10000000

0800eaf8 <__math_oflowf>:
 800eaf8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eb00 <__math_oflowf+0x8>
 800eafc:	f7ff bfea 	b.w	800ead4 <xflowf>
 800eb00:	70000000 	.word	0x70000000

0800eb04 <_init>:
 800eb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb06:	bf00      	nop
 800eb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb0a:	bc08      	pop	{r3}
 800eb0c:	469e      	mov	lr, r3
 800eb0e:	4770      	bx	lr

0800eb10 <_fini>:
 800eb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb12:	bf00      	nop
 800eb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb16:	bc08      	pop	{r3}
 800eb18:	469e      	mov	lr, r3
 800eb1a:	4770      	bx	lr
